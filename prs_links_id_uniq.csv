pull_request_url,comment_id,diff_hunk
https://api.github.com/repos/adamtornhill/code-maat/pulls/15,33513420,"@@ -1,3 +1,5 @@+[![Build Status](https://travis-ci.org/AndreaCrotti/code-maat.png)](https://travis-ci.org/AndreaCrotti/code-maat)"
https://api.github.com/repos/adamtornhill/code-maat/pulls/42,95127516,"@@ -10,52 +10,106 @@ ""/some/path => G1 /another/path => G2"") +(def ^:const multi-regexp-group-spec+""^/some/path_\\w+_group1$ => G1+^/another/path_\\w+_group2$ => G2"")++(def ^:const multi-mixed-group-spec+""/some/path => G1+^/another/path/\\.*$ => G2"")+ (deftest parses-specification   (testing ""Single group""-    (is (= (g/text->group-specification ""/some/path => G1"")-           [{:path ""/some/path"" :name ""G1""}])))-  (testing ""Multiple groups""-    (is (= (g/text->group-specification multi-group-spec)-           [{:path ""/some/path"" :name ""G1""}-            {:path ""/another/path"" :name ""G2""}])))-   (testing ""No groups""+    (let [result (g/text->group-specification ""/some/path => G1"")]"
https://api.github.com/repos/anmonteiro/lumo/pulls/4,87304994,"@@ -35,7 +35,7 @@ Check out `lumo -h` for usage instructions and supported command line options. To build Lumo from source:  1. Make sure you have installed [Boot](http://boot-clj.com/) and [Yarn](https://yarnpkg.com/).-2. At the root of the repository, run: `boot dev`.+2. At the root of the repository, run: `boot release`."
https://api.github.com/repos/anmonteiro/lumo/pulls/24,88037369,"@@ -0,0 +1,35 @@+import net from 'net';"
https://api.github.com/repos/anmonteiro/lumo/pulls/33,88787684,"@@ -75,30 +76,35 @@ function consumeBuffer(buffer: string[], stream: stream$Writable | tty$WriteStre   } } -export function processLine(rl: readline$Interface, line: string, isMainRepl: boolean): void {+export function processLine(sessionId: number, rl: readline$Interface, line: string): void {"
https://api.github.com/repos/anmonteiro/lumo/pulls/41,89687582,"@@ -151,6 +151,7 @@         lumo.core         lumo.repl         lumo.repl-resources+        lumo.classpath"
https://api.github.com/repos/anmonteiro/lumo/pulls/88,103127359,"@@ -811,6 +811,19 @@   (deps/index-upstream-foreign-libs))  ;; --------------------+;; Introspection++(defn ^:export get-arglists+  ""Return the argument lists for the given symbol as string.""+  [s]+  (when-let [var (some->> s repl-read-string first (resolve-var @env/*compiler*))]+    (if-not (:macro var)+      (:arglists var)+      ;; filtering &env &form for macros+      (map #(filterv (complement '#{&env &form}) %)"
https://api.github.com/repos/anmonteiro/lumo/pulls/117,110930735,"@@ -34,10 +34,24 @@ export type CLIOptsType = {   args: string[], }; -export function createBanner(): string {++function getClojureScriptVersionString(): string {   // $FlowFixMe: we know for sure this file will exist.-  return `Lumo ${lumoVersion}-ClojureScript ${lumo.load('clojurescript-version')}"
https://api.github.com/repos/anmonteiro/lumo/pulls/140,113082874,"@@ -362,7 +362,7 @@ export default function startClojureScriptEngine(opts: CLIOptsType): void {       setPrintFns(new DiscardingSender());        execute(-        ""(require '[lumo.repl :refer [find-doc] :refer-macros [dir doc]])"",+        ""(require '[lumo.repl :refer [find-doc] :refer-macros [dir doc source]])"","
https://api.github.com/repos/anmonteiro/lumo/pulls/168,118409030,"@@ -75,6 +76,8 @@ Usage:  lumo [init-opt*] [main-opt] [arg*]                                  control     -s, --static-fns             Generate static dispatch function calls     -n x, --socket-repl x        Enable a socket REPL where x is port or IP:port+    -                            Evaluate expressions from stdin; prints"
https://api.github.com/repos/anmonteiro/lumo/pulls/169,119037104,"@@ -133,22 +135,31 @@ export function processLine(replSession: REPLSession, line: string): void {   return undefined; } +function stopReverseSearch(+  replSession: REPLSession,+  clear: boolean = true,+): void {+  const session = replSession;+  session.isReverseSearch = false;+  session.reverseSearchBuffer = '';++  if (clear) {+    session.rl.write(null, {"
https://api.github.com/repos/anmonteiro/lumo/pulls/177,120193925,"@@ -806,6 +807,57 @@                            (filter matches? (public-syms ns)))))                   (all-ns))))) +;; Taken from planck eval implementation+;; The following atoms and fns set up a scheme to+;; emit function values into JavaScript as numeric+;; references that are looked up.++(defonce ^:private fn-index (atom 0))"
https://api.github.com/repos/anmonteiro/lumo/pulls/105,125154005,"@@ -1370,6 +1364,7 @@                                     (merge opts {:ns (symbol ns-sym)})                                     (fn [{:keys [ns value error] :as ret}]                                       (try-                                        (apply value socket fn-args)+                                        ;; TODO: do we wanna splice args?+                                        (value socket fn-args)"
https://api.github.com/repos/anmonteiro/lumo/pulls/195,125171069,"@@ -902,6 +902,35 @@           (recur (rt/read-char reader)))         (str sb))))) +(defn get-data-readers*+  ""Returns the merged data reader mappings.""+  []+  (reduce (fn [data-readers url+source]+            (let [url      (aget url+source ""url"")"
https://api.github.com/repos/anmonteiro/lumo/pulls/215,129089510,"@@ -35,13 +35,27 @@                              conj munged-ns)))                {:requires [] :provides []}))) -(defn parse-lib-  ""Converts a closure lib path into a structure which describes the module.""+(defn all-files+  ""If the given file is not a directory, returns a list containing the file,"
https://api.github.com/repos/anmonteiro/lumo/pulls/238,134546712,"@@ -16,3 +16,8 @@   ([] (exit nil))   ([code]    (js/process.exit code)))++(defn run-main-cli-fn"
https://api.github.com/repos/anmonteiro/lumo/pulls/252,137436829,"@@ -1965,75 +1963,83 @@                (add-dependency-sources compile-opts)                deps/dependency-order                (compile-sources compiler-stats compile-opts-                 (fn [sources]-                   (let [node? (= :nodejs (:target all-opts))-                         js-sources (-> (map add-core-macros-if-cljs-js sources)-                                      (add-js-sources all-opts)-                                      (as-> sources-                                          ((if node? -compile identity-async)-                                           (io/resource ""cljs/nodejs.cljs"") all-opts-                                           (fn [res]-                                             (let [js-sources (cond-> sources-                                                                node? (concat [res]))]-                                               (-> js-sources-                                                 deps/dependency-order-                                                 #_(add-preloads all-opts)-                                                 add-goog-base-                                                 (as-> sources-                                                   ((if node? -compile identity-async)-                                                    (io/resource ""cljs/nodejscli.cljs"") all-opts-                                                    (fn [res]-                                                      (let [js-sources (cond-> sources-                                                                         node?-                                                                         (concat [res]))-                                                            _ (when (:emit-constants all-opts)-                                                                (lcomp/emit-constants-table-to-file-                                                                  (::ana/constant-table @env/*compiler*)-                                                                  (constants-filename all-opts)))-                                                            ;; TODO: enable this-                                                            ;; _ (when (:infer-externs all-opts)-                                                            ;;     (comp/emit-inferred-externs-to-file-                                                            ;;       (reduce util/map-merge {}-                                                            ;;         (map (comp :externs second)-                                                            ;;           (get @compiler-env ::ana/namespaces)))-                                                            ;;       (str (util/output-directory all-opts) ""/inferred_externs.js"")))-                                                            optim (:optimizations all-opts)-                                                            ret (if (and optim (not= optim :none))-                                                                  (do-                                                                    (when-let [fname (:source-map all-opts)]-                                                                      (assert (or (nil? (:output-to all-opts)) (:modules opts) (string? fname))-                                                                        (str "":source-map must name a file when using :whitespace, ""-                                                                             "":simple, or :advanced optimizations with :output-to""))-                                                                      (doall (map #(source-on-disk all-opts %) js-sources)))-                                                                    (if (:modules all-opts)-                                                                      (do nil-                                                                          #_(->>-                                                                              (apply optimize-modules all-opts js-sources)-                                                                              (output-modules all-opts js-sources)))-                                                                      (let [fdeps-str (foreign-deps-str all-opts-                                                                                        (filter foreign-source? js-sources))-                                                                            all-opts  (assoc all-opts-                                                                                        :foreign-deps-line-count-                                                                                        (- (count (.split fdeps-str #""\r?\n"")) 1))]-                                                                        (->>-                                                                          (util/measure compiler-stats-                                                                            (str ""Optimizing "" (count js-sources) "" sources"")-                                                                            (apply optimize all-opts-                                                                              (remove foreign-source? js-sources)))-                                                                          (add-wrapper all-opts)-                                                                          (add-source-map-link all-opts)-                                                                          (str fdeps-str)-                                                                          (add-header all-opts)-                                                                          (output-one-file all-opts)))))-                                                                  (apply output-unoptimized all-opts js-sources))]-                                                        ;; emit Node.js bootstrap script for :none & :whitespace optimizations-                                                        (when (and (= (:target opts) :nodejs)-                                                                (not= (:optimizations opts) :whitespace))-                                                          (let [outfile (js/$$LUMO_GLOBALS.path.join (util/output-directory opts)-                                                                          ""goog"" ""bootstrap"" ""nodejs.js"")]-                                                            (util/mkdirs outfile)-                                                            (spit outfile (slurp (io/resource ""cljs/bootstrap_node.js"")))))-                                                        ret))))))))))]))))))))))+                                (fn [sources]+                                  (if (every? #(instance? JavaScriptFile %) sources)"
https://api.github.com/repos/anmonteiro/lumo/pulls/263,137941775,"@@ -311,52 +312,94 @@   string   (-foreign? [this] false)   (-closure-lib? [this] false)-  (-url [this] nil)-  (-relative-path [this] nil)-  (-provides [this] (:provides (deps/parse-js-ns (string/split-lines this))))+  (-url+    ([this] nil)+    ([this _] nil))+  (-relative-path+    ([this] nil)+    ([this _] nil))+  (-provides [this]+    (let [{:keys [provides]} (deps/parse-js-ns (string/split-lines this))]+      (cond-> provides+        (empty? provides)+        (conj (util/content-sha this 7)))))   (-requires [this] (:requires (deps/parse-js-ns (string/split-lines this))))-  (-source [this] this)+  (-source+    ([this] this)+    ([this _] this))    cljs.core/PersistentHashMap   (-foreign? [this] (:foreign this))   (-closure-lib? [this] (:closure-lib this))-  (-url [this] (or (:url this)-                   (:file this)))-  (-relative-path [this] (let [file (:file this)]-                           (if (and file (not (js/$$LUMO_GLOBALS.path.isAbsolute file)))-                             (:file this))))+  (-url+    ([this] (deps/-url this nil))+    ([this opts]+     (let [[url file] (if-let [url-min (and (#{:advanced :simple} (:optimizations opts))+                                            (:url-min this))]+                        [url-min (:file-min this)]+                        [(:url this) (:file this)])]+       (or url file))))+  (-relative-path+    ([this] (deps/-relative-path this nil))+    ([this opts]+     (let [file (if-let [file-min (and (#{:advanced :simple} (:optimizations opts))+                                       (:file-min this))]+                  file-min+                  (:file this))]+       (when (and file (not (js/$$LUMO_GLOBALS.path.isAbsolute file)))"
https://api.github.com/repos/anmonteiro/lumo/pulls/259,137955176,"@@ -61,7 +61,9 @@                                              '{string clojure.string})]         (is-contains-completion ""str"" ""string/"")         (is-contains-completion ""(str"" ""(string/"")-        (is-contains-completion ""(set"" ""(set/"" not))+        (is-contains-completion ""(set"" ""(set/"" not)+        (testing ""LUMO-258""+          (is-contains-completion ""string/ends"" ""string/ends-with?"")))"
https://api.github.com/repos/anmonteiro/lumo/pulls/265,138491483,"@@ -37,15 +37,19 @@ (defn build   ""Given a source which can be compiled, produce runnable JavaScript.""   ([source opts]-   (build source opts-     (env/default-compiler-env-       (closure/add-externs-sources opts))))+   (build source opts (fn [& args] args)))   ([source opts compiler-env]+   (build source opts compiler-env (fn [& args] args)))+  ([source opts compiler-env cb]"
https://api.github.com/repos/anmonteiro/lumo/pulls/269,139275635,"@@ -2325,7 +2325,10 @@                                                                     (util/mkdirs outfile)                                                                     (spit outfile (slurp (io/resource ""cljs/bootstrap_node.js"")))))                                                                 (reset! cljs/*loaded* runtime-loaded)-                                                                ret)))))))))))))])))))))))))+                                                                ret)))))))))))))]+                     (assert (and (seq sources) (instance? JavaScriptFile (first sources)))"
https://api.github.com/repos/anmonteiro/lumo/pulls/275,140374808,"@@ -28,7 +28,14 @@ script: - yarn test - boot test - boot release-ci-- ./build/lumo -c src/test/cljs:src/test/lumo:src/test/cljs_cp scripts/lumo_test.cljs --test-cli-option true+- boot -qPB with-cp --write --file cp |"
https://api.github.com/repos/anmonteiro/lumo/pulls/279,140945946,"@@ -103,7 +104,18 @@       (is-contains-completion ""(MER"" ""(merge""))     (testing ""JS completions""       (is-contains-completion ""(require 'goog.m"" ""(require 'goog.math"")-      (is-contains-completion ""g/isF"" ""g/isFunction""))))+      (is-contains-completion ""g/isF"" ""g/isFunction""))+    (testing ""Spec completions""+      (testing ""namespace fully qualified completion""+        (s/def ::a-spec string?)+        (is-contains-completion "":lumo.repl-tests/"" "":lumo.repl-tests/a-spec"")+        (reset! s/registry-ref {}))+      (testing ""arbitrary fully qualified keyword""+        (s/def :arbitrary/a-spec string?)+        (is-contains-completion "":arbitrary/"" "":arbitrary/a-spec"")+        (reset! s/registry-ref {})))))"
https://api.github.com/repos/anmonteiro/lumo/pulls/300,150084854,"@@ -10,36 +10,108 @@ import JSZip from 'jszip'; import ArrayStream from './array-stream'; import * as util from './util'; -function inferNodeModulesClasspathLibs(): string[] {-  const result = [];+type PackageJsonType = {|"
https://api.github.com/repos/anmonteiro/lumo/pulls/318,152901405,"@@ -376,12 +376,39 @@     (testing "":optimizations :none""       (test/delete-out-files out)       (is (nil? (build/build-                  (path/join root ""test_check"")-                  {:main 'hello-                   :optimizations :none-                   :output-to out}-                  (env/default-compiler-env))) ""It should successfully compile with :optimizations :none"")-        (test/delete-out-files out))))+                 (path/join root ""test_check"")+                 {:main 'test-check.summary.core+                  :optimizations :none+                  :output-to out}+                 (env/default-compiler-env))) ""It should successfully compile with :optimizations :none"")+      (test/delete-out-files out))))++(deftest lumo-308-test+  (let [out (path/join (test/tmp-dir) ""lumo-308-test-out"")+        root ""src/test/cljs_build""+        warning-handlers [(fn [warning-type env extra]+                            (let [w (warning-type ana/*cljs-warnings*)+                                  err (ana/error-message warning-type extra)]+                              (println ""WARNING:"" (ana/message env err))+                              (is (nil? warning-type) ""when compiling twice, it should not emit a WARNING for cljs.spec.test.alpha/instrument the second time"")))]]+    (testing ""correctly cljs.js/ns-side-effects on read analysis cache""+      (test/delete-out-files out)+      (build/build+       (path/join root ""instrument"")+       {:main 'test-check.instrument.core"
https://api.github.com/repos/anmonteiro/lumo/pulls/323,154615844,"@@ -2255,83 +2255,67 @@     (let [opts  (cond-> opts                   (= (:verbose opts :not-found) :not-found)                   (assoc :verbose true))-          paths (map #(Paths/get (.toURI %)) (-paths source))-          path  (first paths)-          fs    (.getFileSystem path)-          srvc  (.newWatchService fs)]+          paths (if (seq? source)+                  source (vector source))+          throttling? (atom false)]       (letfn [(buildf []                 (try-                  (let [start (System/nanoTime)]+                  (let [start (.getTime (new js/Date))]                     (build source opts compiler-env)                     (println ""... done. Elapsed""-                      (/ (unchecked-subtract (System/nanoTime) start) 1e9) ""seconds"")-                    (flush))+                      (/ (- (.getTime (new js/Date)) start) 1e3) ""seconds""))                   (when-let [f (:watch-fn opts)]                     (f))-                  (catch Throwable e+                  (catch js/Error e                     (if-let [f (:watch-error-fn opts)]                       (f e)-                      (binding [*out* *err*]-                        (println (Throwables/getStackTraceAsString e)))))))-              (watch-all [^Path root]-                (Files/walkFileTree root-                  (reify-                    FileVisitor-                    (preVisitDirectory [_ dir _]-                      (let [^Path dir dir]-                        (. dir-                          (register srvc-                            (into-array [StandardWatchEventKinds/ENTRY_CREATE-                                         StandardWatchEventKinds/ENTRY_DELETE-                                         StandardWatchEventKinds/ENTRY_MODIFY])-                            (into-array [SensitivityWatchEventModifier/HIGH]))))-                      FileVisitResult/CONTINUE)-                    (postVisitDirectory [_ dir exc]-                      FileVisitResult/CONTINUE)-                    (visitFile [_ file attrs]-                      FileVisitResult/CONTINUE)-                    (visitFileFailed [_ file exc]-                      FileVisitResult/CONTINUE))))]+                      (binding [*print-fn* *print-err-fn*]+                        (println e))))))+              (watch-all [root]+                (.watch fs root #js {:recursive true}+                        (fn [change fstr]+                          (let [rel-path (.join path root fstr)]+                            (when (and (.existsSync fs rel-path)+                                       (or (. fstr (endsWith ""cljc""))+                                           (. fstr (endsWith ""cljs""))+                                           (. fstr (endsWith ""clj""))+                                           (. fstr (endsWith ""js"")))+                                       (not (. fstr (startsWith "".#""))))+                              (when (and (or (. fstr (endsWith ""cljc""))+                                             (. fstr (endsWith ""clj"")))+                                         (not (. fstr (startsWith "".#""))))+                                (let [ns (-> rel-path+                                             lana/parse-ns :ns)]+                                  ;; FIX: this require offends two specs+                                  ;; (require ns :reload)+                                  (-> (cljs-dependents-for-macro-namespaces compiler-env [ns])+                                      (mark-cljs-ns-for-recompile! (:output-dir opts)))))+                              (when-not @throttling?+                                (reset! throttling? true)+                                (js/setTimeout+                                 (fn [_]+                                   (println ""Change detected, recompiling ..."")+                                   (reset! throttling? false)+                                   (buildf))+                                 300)))))))+              (recur-dirs [dir cb]+                (cb dir)+                (.readdir fs dir"
https://api.github.com/repos/anmonteiro/lumo/pulls/334,158326430,"@@ -646,6 +646,59 @@   ""Wrap wfn around all (fn) values in fns hashmap.""   (into {} (for [[k v] fns] [k (wfn v)]))) +;; --------------------+;; REPL upgrade++(deftype ^:private SuspensionRequest [f])++(defn suspension-request? [x] (instance? SuspensionRequest x))++(defn suspension-request [f] (SuspensionRequest. f))++(defprotocol AsyncReader+  ""Asynchronous stream of strings.""+  (read-chars [r f] ""Calls f with a string or nil (EOF)"")+  (pushback [r s] ""Unread s""))++(defn yield-control [suspension-request async-reader resume-cb]+  ((.-f suspension-request) async-reader resume-cb))++(defn- create-async-pipe []+  (let [front #js []+        back #js []+        cb (volatile! nil)+        spill! #(loop []+                  (when-some [s (.pop back)]+                    (do (.push front s) (recur))))]+    #js [(fn "
https://api.github.com/repos/anmonteiro/lumo/pulls/333,161361148,"@@ -1445,12 +1445,14 @@           ns-alias (second (re-find #""\(*(\b[a-zA-Z-.<>*=&?]+)/[a-zA-Z-]*$"" line))           line-match-suffix (first (re-find #"":?([a-zA-Z-.<>*=&?]*|^\(/)$"" line))           line-prefix (subs line 0 (- (count line) (count line-match-suffix)))-          completions (reduce (fn [ret item]-                                (doto ret-                                  (.push (str line-prefix item))))+          completions (if (empty? line-match-suffix)"
https://api.github.com/repos/anmonteiro/lumo/pulls/337,163975425,"@@ -1437,20 +1441,27 @@            (map str (keys special-doc-map))            (map str (keys repl-special-doc-map))))]))) +(def ^{:private true+       :doc ""The symbol detection regex.++This was taken from the reader specification plus tests at the Clojure REPL.""}+  completion-symbol-regex ""[a-zA-Z-.<>_*=&?$%!]{1}[a-zA-Z0-9-.<>_*=&?%$!']*"")+ (defn ^:export get-completions   [line cb]   (if-some [js-matches (re-find #""js/(\S*)$"" line)]     (js/$$LUMO_GLOBALS.getJSCompletions line (second js-matches) cb)     (let [top-level? (boolean (re-find #""^\s*\(\s*[^()\s]*$"" line))-          ns-alias (second (re-find #""\(*(\b[a-zA-Z-.<>*=&?]+)/[a-zA-Z-]*$"" line))-          line-match-suffix (first (re-find #"":?([a-zA-Z-.<>*=&?]*|^\(/)$"" line))+          skip-suffix-check? (or (= ""("" line) (string/ends-with? line ""/"") (empty? line))+          ns-alias (second (re-find (js/RegExp. (str ""\\(*(\\b"" completion-symbol-regex "")/[a-zA-Z-]*$"")) line))+          line-match-suffix (first (re-find (js/RegExp. (str ""^:$|:?("" completion-symbol-regex ""|^\\(/)$"")) line))           line-prefix (subs line 0 (- (count line) (count line-match-suffix)))           completions (reduce (fn [ret item]                                 (doto ret                                   (.push (str line-prefix item))))-                        #js []-                        (filter #(is-completion? line-match-suffix %)-                          (completion-candidates top-level? ns-alias)))]+                              #js []+                              (filter #(or skip-suffix-check? (is-completion? line-match-suffix %))"
https://api.github.com/repos/anmonteiro/lumo/pulls/367,172271405,"@@ -6,7 +6,7 @@ const os = require('os'); const zlib = require('zlib'); const embed = require('./embed'); -const nodeVersion = '9.2.0';+const nodeVersion = process.argv.slice(2)[0];"
https://api.github.com/repos/anmonteiro/lumo/pulls/372,173272361,"@@ -119,6 +119,10 @@ To build Lumo from source: 3. The resulting binary can be found in `build/lumo` (or `build\lumo.exe` if you're on Windows). +## Contributing++Head to [CONTRIBUTING.md](https://raw.githubusercontent.com/anmonteiro/lumo/master/CONTRIBUTING.md)."
https://api.github.com/repos/anmonteiro/lumo/pulls/313,178175030,"@@ -0,0 +1,136 @@+Running Lumo+============++Simply enter ``lumo`` at the command prompt to start up a Lumo REPL::++  $ lumo+  Lumo 1.8.0-beta+  ClojureScript 1.9.927+  Node.js v8.5.0+   Docs: (doc function-name-here)+         (find-doc ""part-of-name-here"")+   Source: (source function-name-here)+   Exit: Control+D or :cljs/quit or exit++  cljs.user=>++If you are familiar with the standard Clojure REPL, this is much the same.+You enter ClojureScript expressions, and they are evaulated, and the results printed.++Lumo is more than just a REPL, the ``-h`` option lists all the+available options::++  $ lumo -h+  Lumo 1.8.0-beta+  Usage:  lumo [init-opt*] [main-opt] [arg*]++    With no options or args, runs an interactive Read-Eval-Print Loop++    init options:+      -i, --init path              Load a file or resource+      -e, --eval string            Evaluate expressions in string; print+                                   non-nil values+      -c cp, --classpath cp        Use colon-delimited cp (semi-colon-delimited on+                                   Windows) for source directories and JARs+      -D dep, --dependencies dep   Use comma-separated list of dependencies to+                                   look for in the local Maven repository.+                                   Dependencies should be specified in the form+                                   `SYM:VERSION` (e.g.: foo/bar:1.2.3).+      -L path, --local-repo path   Path to the local Maven repository where Lumo+                                   will look for dependencies. Defaults to+                                   `~/.m2/repository`.+      -K, --auto-cache             Create and use .lumo_cache dir for cache+      -k, --cache path             If dir exists at path, use it for cache+      -q, --quiet                  Quiet mode; doesn't print the banner+      -v, --verbose                Emit verbose diagnostic output+      -d, --dumb-terminal          Disable line editing / VT100 terminal+                                   control+      -s, --static-fns             Generate static dispatch function calls+      -f, --fn-invoke-direct       Do not not generate `.call(null...)` calls+                                   for unknown functions, but instead direct+                                   invokes via `f(a0,a1...)`.+      -A x, --checked-arrays x     Enables checked arrays where x is either warn+                                   or error.+      -n opts, --socket-repl x     Enable a socket REPL where x is port, IP:port+                                   or JSON of the following form, where port is+                                   required:+                                   {""host"":   ""localhost"",+                                    ""port"":   12345,+                                    ""accept"": ""some.namespaced.clojure/fn"",+                                    ""args"":   [""args"", {""for"": ""the accept fn""}]}++    main options:+      -m ns-name, --main=ns-name   Call the -main function from a namespace+                                   with args+      -r, --repl                   Run a repl+      path                         Run a script from a file or resource+      -                            Run a script from standard input+      -h, -?, --help               Print this help message and exit+      -l, --legal                  Show legal info (licenses and copyrights)++    The init options may be repeated and mixed freely, but must appear before+    any main option.++    Paths may be absolute or relative in the filesystem.++Using ClojureScript Libraries+-----------------------------++Lumo can make use of ClojureScript libraries, making the code in such+libraries available to your programs.++However, Lumo is not part of the Java ecosystem, the way Clojure is.+Lumo does not run Java code, that means it can't directly access Maven+artifacts on the internet, such as downloading ClojureScript JARs from+`Clojars <https://clojars.org>`_. [#maven]_++Using Downloaded Libraries+~~~~~~~~~~~~~~~~~~~~~~~~~~++The ``-c`` (``--classpath``) option is used to specify where to search for+source code as either directories, or packaged inside JAR files.++For example, if you have previously downloaded the+`clojure/tools.cli <https://github.com/clojure/tools.cli>`_ package,+you can store it in a local project folder and tell Lumo about it::++  $ lumo -c src:lib/tools.cli-0.3.5.jar -m roll.dice --json 3d6"
https://api.github.com/repos/anmonteiro/lumo/pulls/384,182900342,"@@ -405,11 +410,25 @@ async function initSocketRepl(   const [, host, port] = socketReplArgs.match(hostAndPortRegex) || [];    try {-    const replOpts = /^{/.test(socketReplArgs)+    const parsedOpts = /^{/.test(socketReplArgs)       ? JSON.parse(socketReplArgs)       : { host, port }; -    replOpts.port = parseInt(replOpts.port, 10);+    const replOpts: ReplOptsType = {+      port: parseInt(parsedOpts.port, 10),+      host: parsedOpts.host,+    };++    // This tweak is required because the thrown error varies in different node+    // versions and jest does not allow yet to specify the snapshot name at runtime.+    // It's been worked on though, see:+    //   https://github.com/facebook/jest/pull/5838#issuecomment-382476612+    const errorMsg = `Port should be > 0 and < 65536. Received ${replOpts.port}.`;"
https://api.github.com/repos/anmonteiro/lumo/pulls/379,185586553,"@@ -227,12 +276,15 @@   ([src] (requires-analysis? src ""out""))   ([src output-dir]    (let [cache (cache-file src output-dir)]-     (requires-analysis? src cache output-dir)))+     (requires-analysis? src cache output-dir nil)))   ([src cache output-dir]+   (requires-analysis? src cache output-dir nil))+  ([src cache output-dir opts]    (cond      (util/bundled-resource? cache)      (let [path (.-src cache)]-       (if (.startsWith path ""cljs/core.cljs.cache.aot"")+       (if (or (.startsWith path ""cljs/core.cljs.cache.aot.edn"")"
https://api.github.com/repos/anmonteiro/lumo/pulls/432,226785691,"@@ -472,11 +473,12 @@ async function initSocketRepl(   try {     const parsedOpts = /^{/.test(socketReplArgs)       ? JSON.parse(socketReplArgs)-      : { host, port };+      : { host, port, accept: undefined };"
https://api.github.com/repos/anmonteiro/lumo/pulls/475,278356086,"@@ -4,6 +4,8 @@ (def +node-version+ (or (System/getenv ""BUILD_NODE_VERSION"")                         ""11.13.0"")) +(def +build-static-binary+ (System/getenv ""BUILD_STATIC_BINARY""))"
https://api.github.com/repos/anmonteiro/lumo/pulls/493,366601689,"@@ -85,9 +85,34 @@ $ docker run -it anmonteiro/lumo  ## Using Lumo -Enter `lumo` at the command line to launch it.+### Interactive ClojureScript REPL++Enter `lumo` at the command line to launch the ClojureScript REPL.++```clojure+$ npm init -y && npm i express request request-promise"
https://api.github.com/repos/arcadia-unity/Arcadia/pulls/205,101115205,"@@ -17,6 +17,14 @@   (->> (range \a \z)        (map (comp str char)))) +(def overrides+  ""Which methods of ArcadiaBehaviour should be overriden/hidden.""+  '{Awake override})++(def call-base+  ""Which overriden methods should call the base method.""+  '{Awake true})+"
https://api.github.com/repos/arcadia-unity/Arcadia/pulls/223,109456878,"@@ -0,0 +1,33 @@+﻿using UnityEngine;+using UnityEditor;++namespace Arcadia+{+    [InitializeOnLoad]+    public class ArcadiaProjectInitialization+        // Starts with an ""A"" because Editor scripts are initialized alphabetically "
https://api.github.com/repos/arcadia-unity/Arcadia/pulls/224,109531730,"@@ -108,8 +120,14 @@ public virtual void Awake() 						var nameSym = Symbol.intern(sym.Name); 						var nsSym = Symbol.intern(sym.Namespace); 						requireFn.invoke(nsSym);-						var v = Namespace.find(nsSym).FindInternedVar(nameSym);-						fnList.Add(v);+						try+						{+							var v = Namespace.find(nsSym).FindInternedVar(nameSym);+							fnList.Add(v);+						} catch (System.Exception e)+						{+							fnList.Add(null);"
https://api.github.com/repos/arcadia-unity/Arcadia/pulls/243,131527647,"@@ -1,5 +1,7 @@ (ns arcadia.core   (:require [clojure.string :as string]+            [clojure.core.server]+            [arcadia.internal.state-help]"
https://api.github.com/repos/arcadia-unity/Arcadia/pulls/380,401832617,"@@ -312,6 +352,7 @@ static void HandleMessage (BDictionary message, TcpClient client) 		{ 			var opValue = message[""op""]; 			var opString = opValue as BString;+			var autoCompletionSupportEnabled = (bool)((IPersistentMap)configVar.invoke()).valAt(Keyword.intern(""nrepl-auto-completion""));"
https://api.github.com/repos/athensresearch/athens/pulls/8,417241810,"@@ -1,23 +1,33 @@ # Contributing to Athens +If you're looking for somewhere to start contributing, check out the issues tagged with ""first issue"" found in [issues](https://github.com/athensresearch/athens/issues). If you have a specific feature that you would like to work on (for which there is no open issue yet), please let us know.+ These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request. -Please first read the [Code of Conduct](https://github.com/tangjeff0/athens/blob/master/CODE_OF_CONDUCT.md).+Before contributing, please first read the [Code of Conduct](https://github.com/tangjeff0/athens/blob/master/CODE_OF_CONDUCT.md)."
https://api.github.com/repos/athensresearch/athens/pulls/13,418959727,"@@ -14,7 +14,63 @@ You can also reach out to Jeff on Twitter at [@tangjeff0](https://twitter.com/ta  ## Development Environment -See the setup in the README. (To be updated soon.)+1. Download a `java` JDK. You can download the most [current version](https://www.oracle.com/java/technologies/javase-downloads.html) or access the [JDK archives](https://jdk.java.net/archive/).+2. Download a package manager: [yarn](https://www.npmjs.com/package/yarn) or [npm](https://www.npmjs.com/get-npm). +3. Download and install the lein package manager (lein installs the correct version of Clojure for you). Detailed instructions for Linux, macOS, and Windows are below.++### On Linux:+   * Install curl command+> ```sudo apt-get install -y curl```+   * Download the lein script+> ```curl https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein > lein```+   * Move the lein script to the user programs directory+> ```sudo mv lein /usr/local/bin/lein```+   * Add execute permissions to the lein script+> ```sudo chmod a+x /usr/local/bin/lein```+   * Verify your installation+> ```lein version```+   +   It should take a while to run, as it will download some resources it needs the first time. See the note at the end of this section if you are having issues.++### On macOS:+   * Download the lein script+> ```curl https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein > lein```+   * Move the lein script to the user programs directory+> ```sudo mv lein /usr/local/bin/lein```+   * Add execute permissions to the lein script+> ```sudo chmod a+x /usr/local/bin/lein```+   * Verify your installation+> ```lein version```"
https://api.github.com/repos/athensresearch/athens/pulls/16,421015157,"@@ -9,7 +9,7 @@   (insta/parser    ""S = c | link | bref | hash     <c> = #'(\\w|\\s)+'-    link = <'[['> c <']]'>+    link = <'[['> c <']]'>  | <'[['> S? link S? <']]'>     hash = <'#'> c | <'#'> <'[['> c <']]'>     bref = <'(('> c <'))'>    ""))"
https://api.github.com/repos/athensresearch/athens/pulls/29,421098263,"@@ -68,12 +68,15 @@      pages-panel)])  (defn main-panel []-  (let [current-route (subscribe [:current-route])]+  (let [current-route (subscribe [:current-route])+        loading (subscribe [:loading])]     (fn []-      [:div-       [alert]-       ;;[:h1 (str ""Hello World"")]-       [:div-        [:a {:href (rfee/href :pages)} ""All /pages""]-        [:span {:style {:margin 0 :margin-left 10}} ""Current Route: "" [:b (-> @current-route :path)]]]-       [match-panel (-> @current-route :data :name)]])))+      [alert]+      (if @loading+        [:h4 ""Loading... (at least it'll be faster than Roam)""]"
https://api.github.com/repos/athensresearch/athens/pulls/54,425093051,"@@ -0,0 +1,31 @@+(ns athens.style (:require  [garden.core :refer [css]]))++(defn loading-css+  []+  (fn []"
https://api.github.com/repos/athensresearch/athens/pulls/70,426296245,"@@ -4,6 +4,10 @@             #_[reitit.frontend.easy :as rfee]             #_[reagent.core :as reagent])) ++(defn on-block-click [uid]+  (dispatch [:navigate :page {:id uid}]))"
https://api.github.com/repos/athensresearch/athens/pulls/72,426451523,"@@ -47,8 +47,8 @@        (map #(map edn/read-string %))        (map #(cons :db/add %)))) -(defn json-str-to-edn-  ""Convert a JSON str to EDN. May receive JSON through an HTTP request or file upload.""+(defn json-str-to-vector+  ""Convert a JSON str to a clojure vector. May receive JSON through an HTTP request or file upload."""
https://api.github.com/repos/athensresearch/athens/pulls/71,426464373,"@@ -45,12 +45,12 @@                 [render-blocks uid]])])))])))  ; match [[title]] or #title or #[[title]]+; provides groups useful for replacing+; e.g.: $1$3$4new-string$2$5 (defn linked-pattern [string]-  (re-pattern (str ""(""-                   ""\\[{2}"" string ""\\]{2}""-                   ""|"" ""#"" string-                   ""|"" ""#"" ""\\[{2}"" string ""\\[{2}""-                   "")"")))+  (re-pattern (str ""(\\[{2})"" string ""(\\]{2})""+                   ""|"" ""(#)"" string+                   ""|"" ""(#\\[{2})"" string ""(\\]{2})"")))"
https://api.github.com/repos/athensresearch/athens/pulls/57,426465668,"@@ -88,9 +90,8 @@       [alert]       (if @loading         [:div-          [style/loading-css]-          [:h4 {:id ""loading-text""} ""Loading... (at least it'll be faster than Roam)""]-        ]+         [style/loading-css]+         [:h4 {:id ""loading-text""} ""Loading database... (at least it'll be faster than Roam)""]]"
https://api.github.com/repos/athensresearch/athens/pulls/55,426511833,"@@ -61,6 +61,37 @@ jobs:       - name: Lint          run: |           script/lint+          +  style:+    # ubuntu 18.04 comes with lein + java8 installed+    runs-on: ubuntu-18.04+    steps:+      - name: Git checkout+        uses: actions/checkout@v1+        with:+          fetch-depth: 1+          submodules: 'true'+          +      - name: Style +        run: |+          script/style+                 +  carve:+    # ubuntu 18.04 comes with lein + java8 installed"
https://api.github.com/repos/athensresearch/athens/pulls/76,426833682,"@@ -0,0 +1,6 @@+; REVIEW Can some of these items be removed (later)?+athens.db/help-url+athens.db/ego-url+athens.views/home-panel+athens.core/init+user/str-kw-mappings"
https://api.github.com/repos/athensresearch/athens/pulls/82,428715629,"@@ -0,0 +1,72 @@+1. [Overview](#overview)+1. [Roles and Responsibilities](#roles-and-responsibilities)+   1. [Benevolent Dictator (project lead)](#benevolent-dictator)+   1. [Core Team](#core-team)+   1. [Moderators (Guardians)]([1])+   1. [Contributors (Athenians)]([2])+   1. [Other Roles](#other-roles)+1. [Attribution](#attribution)++[1]: [#moderators-(guardians)]+[2]: [#contributors-(athenians)]"
https://api.github.com/repos/athensresearch/athens/pulls/84,429123850,"@@ -1,4 +1,6 @@-{:linters {:unresolved-symbol+{:linters {:unresolved-namespace+           {:exclude [clojure.string]}"
https://api.github.com/repos/athensresearch/athens/pulls/86,429267078,"@@ -70,14 +70,37 @@        [:div {:style {:margin-left 20}}         [render-blocks (:block/uid @node)]]]))) +(defn title [title]+  (let [s (reagent/atom {:editing false+                         :current-title title+                         :new-title title})+        save! (fn [] (dispatch [:node/rename (:current-title @s) (:new-title @s)])+                     (swap! s assoc :editing false))+        cancel! (fn [] (swap! s #(-> %+                                     (assoc :editing false)+                                     (assoc :new-title (:current-title @s)))))]+    (fn [title]+      (if (:editing @s)+        [:input {:value (:new-title @s)+                 :auto-focus true"
https://api.github.com/repos/athensresearch/athens/pulls/87,429498039,"@@ -38,7 +38,10 @@      :bref (fn [id]              (let [string (subscribe [:block/string [:block/uid id]])]                [:span {:style {:font-size ""0.9em"" :border-bottom ""1px solid gray""}}-                [:a {:href (rfee/href :page {:id id})} (parse (:block/string @string))]]))}+                [:a {:href (rfee/href :page {:id id})} (parse (:block/string @string))]]))+     :bold (fn [text]+             [:span+              [:strong text]])}"
https://api.github.com/repos/athensresearch/athens/pulls/88,429522771,"@@ -0,0 +1,17 @@+(ns athens.parse-helper-test+  (:require+    [athens.parse-helper :as parse-helper]+    [clojure.test :refer [deftest is]]))+++(deftest combine-adjacent-strings-tests+  (is (= []+         (parse-helper/combine-adjacent-strings [])))+  (is (= [""some text""]+         (parse-helper/combine-adjacent-strings [""some"" "" "" ""text""])))+  (is (= [""some text"" [:link] ""around a link""]+         (parse-helper/combine-adjacent-strings [""some"" "" "" ""text"" [:link] ""around "" ""a link""])))+  (is (= [{:something nil} ""more text"" [:link] ""between elements"" 39]+         (parse-helper/combine-adjacent-strings [{:something nil} ""more"" "" "" ""text"" [:link] ""between"" "" "" ""elements"" 39])))+  (is (= [{:a 1 :b 2} 3 [""leave"" ""intact""]]+         (parse-helper/combine-adjacent-strings [{:a 1 :b 2} 3 [""leave"" ""intact""]]))))"
https://api.github.com/repos/athensresearch/athens/pulls/91,430066773,"@@ -0,0 +1,7 @@+(ns athens-devcards.db"
https://api.github.com/repos/athensresearch/athens/pulls/90,432877403,"@@ -82,14 +92,78 @@     [:db/add eid :block/string new-s]))  -(reg-event-ds-  :node/rename-  (fn-traced [ds [_ old-title new-title]]-             (let [eid (node-with-title ds old-title)-                   blocks (referencing-blocks ds old-title)]-               (->> blocks-                    (map (partial rename-refs-tx old-title new-title))-                    (into [[:db/add eid :node/title new-title]])))))+(defn rename-tx+  [ds old-title new-title]+  (let [eid (node-with-title ds old-title)+        blocks (referencing-blocks ds old-title)]+    (->> blocks+         (map (partial rename-refs-tx old-title new-title))+         (into [[:db/add eid :node/title new-title]]))))+++(reg-event-fx+  :node/renamed+  [(rp/inject-cofx :ds)]+  (fn-traced [{:keys [db ds]} [_ old-title new-title]]+             (when (not= old-title new-title)+               (if (node-with-title ds new-title)+                 {:db (assoc db :merge-prompt {:active true+                                               :old-title old-title+                                               :new-title new-title})+                  :timeout {:action :start+                            :id :merge-prompt+                            :wait 7000+                            :event [:node/merge-canceled]}}+                 {:transact (rename-tx ds old-title new-title)}))))+++(defn count-children+  [ds title]+  (d/q '[:find (count ?children) .+         :in $ ?title+         :where [?e :node/title ?title]+         [?e :block/children ?children]]+       ds title))+++(defn get-children-eids+  [ds title]+  (d/q '[:find [?children ...]+         :in $ ?title+         :where [?e :node/title ?title]+         [?e :block/children ?children]]+       ds title))+++(defn move-blocks-tx+  [ds from-title to-title]+  (let [block-count (count-children ds to-title)+        block-eids (get-children-eids ds from-title)]+    (mapcat (fn [eid]+              (let [order (:block/order (d/pull ds [:block/order] eid))]"
https://api.github.com/repos/athensresearch/athens/pulls/102,432877931,"@@ -1,14 +1,28 @@ (ns athens.parser-test   (:require-    [athens.parser :refer [block-parser]]-    [clojure.test :refer [deftest is]]))+    [athens.parser :refer [parse-to-ast combine-adjacent-strings]]+    [clojure.test :refer [deftest is are]]))   (deftest block-parser-tests-  (is (= [:block] (block-parser """")))-  (is (= [:block ""O"" ""K"" ""?"" "" "" ""Y"" ""e"" ""s"" "".""] (block-parser ""OK? Yes."")))-  (is (= [:block [:block-link [:any-chars ""l"" ""i"" ""n"" ""k""]]] (block-parser ""[[link]]"")))-  (is (= [:block ""["" ""["" ""t"" ""e"" ""x"" ""t""] (block-parser ""[[text"")))+  (is (= [:block] (parse-to-ast """")))+  (is (= [:block ""OK? Yes.""] (parse-to-ast ""OK? Yes."")))+  (is (= [:block [:block-link ""link""]] (parse-to-ast ""[[link]]"")))+  (is (= [:block ""[[text""] (parse-to-ast ""[[text"")))"
https://api.github.com/repos/athensresearch/athens/pulls/105,432882181,"@@ -15,28 +15,32 @@   ""Transforms Instaparse output to Hiccup.""   [tree]   (insta/transform-    {:block      (fn [& contents]-                   (concat [:span {:class ""block""}] contents))-     :block-link (fn [title]-                   (let [id (subscribe [:block/uid [:node/title title]])]-                     [:span {:class ""block-link""}-                      [:span {:style {:color ""gray""}} ""[[""]-                      [:a {:href  (rfee/href :page {:id (:block/uid @id)})-                           :style {:text-decoration ""none"" :color ""dodgerblue""}} title]-                      [:span {:style {:color ""gray""}} ""]]""]]))-     :block-ref  (fn [id]-                   (let [string (subscribe [:block/string [:block/uid id]])]-                     [:span {:class ""block-ref""-                             :style {:font-size ""0.9em"" :border-bottom ""1px solid gray""}}-                      [:a {:href (rfee/href :page {:id id})} (parse-and-render (:block/string @string))]]))-     :hashtag    (fn [tag-name]-                   (let [id (subscribe [:block/uid [:node/title tag-name]])]-                     [:a {:class ""hashtag""-                          :style {:color ""gray"" :text-decoration ""none"" :font-weight ""bold""}-                          :href  (rfee/href :page {:id (:block/uid @id)})}-                      (str ""#"" tag-name)]))-     :bold       (fn [text]-                   [:strong {:class ""bold""} text])}+    {:block     (fn [& contents]+                  (concat [:span {:class ""block""}] contents))+     :page-link (fn [title]+                  (let [id (subscribe [:block/uid [:node/title title]])]+                    [:span {:class ""page-link""}+                     [:span {:style {:color ""gray""}} ""[[""]+                     [:a {:href  (rfee/href :page {:id (:block/uid @id)})+                          :style {:text-decoration ""none"" :color ""dodgerblue""}} title]+                     [:span {:style {:color ""gray""}} ""]]""]]))+     :block-ref (fn [id]+                  (let [string (subscribe [:block/string [:block/uid id]])]+                    [:span {:class ""block-ref""+                            :style {:font-size ""0.9em"" :border-bottom ""1px solid gray""}}+                     [:a {:href (rfee/href :page {:id id})} (parse-and-render (:block/string @string))]]))+     :hashtag   (fn [tag-name]+                  (let [id (subscribe [:block/uid [:node/title tag-name]])]+                    [:a {:class ""hashtag""+                         :style {:color ""gray"" :text-decoration ""none"" :font-weight ""bold""}+                         :href  (rfee/href :page {:id (:block/uid @id)})}+                     (str ""#"" tag-name)]))+     :url-link  (fn [{url :url} text]+                  [:a {:class ""url-link""+                       :href url}+                   text])+     :bold      (fn [text]+                  [:strong {:class ""bold""} text])}"
https://api.github.com/repos/athensresearch/athens/pulls/110,432920436,"@@ -4,48 +4,120 @@ Not convinced you want to learn Clojure? Read this developer's [first month expe  No Clojure or programming experience? No worries. Read this [guide](https://www.notion.so/athensresearch/Onboarding-for-New-Clojurians-b34b38f30902448cae68afffa02425c1), join our Discord, and we'll find you a Clojure learning partner. -Issues tagged ""[good first issue](https://github.com/athensresearch/athens/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22)"" are... good first issues.+Issues tagged ""[good first issue](https://github.com/athensresearch/athens/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22)"" are… good first issues. (But we haven’t catalogued any yet. Sorry!)  # Development Environment -These dependencies are needed to get Athens up and running. Follow the instructions in the links.+## Getting Athens to run locally -1. [java 11 and lein](https://purelyfunctional.tv/guide/how-to-install-clojure/) (lein installs Clojure)-1. [node 12](https://nodejs.org/en/download/) and [yarn](https://classic.yarnpkg.com/en/docs/install/#mac-stable)+These dependencies are needed to get Athens up and running. To install them, follow the instructions in the links.++1. [Java 11 and Leiningen](https://purelyfunctional.tv/guide/how-to-install-clojure/) (Leiningen installs Clojure)+1. [Node 12](https://nodejs.org/en/download/) and [Yarn](https://classic.yarnpkg.com/en/docs/install/#mac-stable)++After you've got these dependencies, clone the Git repository to your hard drive: -After you've got these dependencies, clone the git repository to your harddrive: ``` git clone https://github.com/athensresearch/athens.git ```+ Then `cd athens/` and run the following commands. -Pull javascript dependencies:+Pull JavaScript dependencies:+ ``` yarn ``` -Pull java dependencies and build with:+Pull Java dependencies and build, then start a local HTTP server for Athens:+ ``` lein dev ``` -When these scripts are done, your terminal will read `build complete`. Athens can be accessed by pointing a browser to `localhost:3000` on UNIX or `127.0.0.1:3000` on Windows.+When these scripts are done, your terminal will read `build complete`. Athens can then be accessed by pointing a browser to http://localhost:3000/ on UNIX or http://127.0.0.1:3000/ on Windows.++## Viewing devcards++[Devcards](https://github.com/bhauman/devcards) are pages that show just one component of the web app, for the purpose of demonstrating or testing how that component looks when rendered with certain data.++To open this project’s devcards:++1.  Instead of `lein dev`, start a local server like this:++    ```+    lein devcards+    ```"
https://api.github.com/repos/athensresearch/athens/pulls/108,432920673,"@@ -5,26 +5,30 @@   (deftest block-parser-tests-  (is (= [:block] (parse-to-ast """")))-  (is (= [:block ""OK? Yes.""] (parse-to-ast ""OK? Yes."")))-  (is (= [:block [:page-link ""link""]] (parse-to-ast ""[[link]]"")))-  (is (= [:block ""A "" [:page-link ""link""] "".""] (parse-to-ast ""A [[link]]."")))-  (is (= [:block ""[[text""] (parse-to-ast ""[[text"")))-  (is (= [:block [:url-link {:url ""https://example.com/""} ""an example""]] (parse-to-ast ""[an example](https://example.com/)"")))-  ;; Not including tests for every type of syntax because I expect the trees they are parsed to to change soon.-  ;; For now, additional tests would probably be more annoying than useful.-  )+  (are [x y] (= x (parse-to-ast y))"
https://api.github.com/repos/athensresearch/athens/pulls/117,434526405,"@@ -26,8 +26,10 @@   (fn [{:keys [db]} [_ new-match]]     (let [old-match   (:current-route db)           controllers (rfc/apply-controllers (:controllers old-match) new-match)-          node (subscribe [:node [:block/uid (-> new-match :path-params :id)]])] ;; TODO make the page title query work when zoomed in on a block-      (set! (.-title js/document) (or (:node/title @node) ""Athens Research"")) ;; TODO make this side effect explicit+          node (subscribe [:node [:block/uid (-> new-match :path-params :id)]]) ;; TODO make the page title query work when zoomed in on a block+          node-title (:node/title @node)"
https://api.github.com/repos/athensresearch/athens/pulls/142,439077100,"@@ -51,37 +55,82 @@     (.toLocaleString  (js/Date. x))))  +(def table-cell-background-color-hover+  (opacify (:panel-color HSL-COLORS) (first OPACITIES)))+++(def tables+  {:width ""100%""+   :text-align ""left""+   :border-collapse ""collapse""+   ::stylefy/sub-styles {:thead {}+                         :tr-item {}+                         :th-title {}+                         :th-body {}+                         :th-date {:text-align ""right""}+                         :td-title {:width ""15vw""+                                    :min-width ""10em""+                                    :word-break ""break-word""+                                    :font-weight ""500""+                                    :font-size ""21px""+                                    :line-height ""27px""}+                         :td-body {}+                         :body-preview {:white-space ""wrap""+                                        :word-break ""break-word""+                                        :overflow ""hidden""+                                        :text-overflow ""ellipsis""+                                        :display ""-webkit-box""+                                        :-webkit-line-clamp ""3""+                                        :-webkit-box-orient ""vertical""}+                         :td-date {:text-align ""right""+                                   :opacity ""0.75""+                                   :font-size ""12px""+                                   :min-width ""9em""}}+   ::stylefy/manual [[:tbody {:vertical-align ""top""}+                      [:tr+                       [:td {:border-top (str ""1px solid "" (:panel-color COLORS))}]+                       [:&:hover {:background-color table-cell-background-color-hover+                                  :border-radius ""8px""}+                        ;; [:td {:border-top-color ""transparent""}]+                        [:td [(selectors/& (selectors/first-child)) {:border-radius ""8px 0 0 8px""+                                                                     :box-shadow ""-16px 0 hsla(30, 11.11%, 93%, 0.1)""}]]+                        [:td [(selectors/& (selectors/last-child)) {:border-radius ""0 8px 8px 0""+                                                                    :box-shadow ""16px 0 hsla(30, 11.11%, 93%, 0.1)""}]]]]]"
https://api.github.com/repos/athensresearch/athens/pulls/154,440886690,"@@ -161,7 +161,7 @@          [:> mui-icons/KeyboardArrowDown {:style {:font-size ""16px""}}]]         [:span (use-style block-disclosure-toggle-style)])       [:a (use-style block-indicator-style {:class (if closed? ""closed"" ""open"") :on-click #(navigate-page uid)})]-      [:span (parse-and-render string)]]+      [:<> (parse-and-render string)]]"
https://api.github.com/repos/athensresearch/athens/pulls/157,442876650,"@@ -77,10 +73,10 @@                      db/dsdb)         pages (pull-many db/dsdb '[""*"" {:block/children [:block/string] :limit 5}] @page-eids)]     [:table (use-style table-style)-     [:thead (use-sub-style table-style :thead)+     [:thead       [:tr-       [:th (use-sub-style table-style :th-title) [:h5 ""Title""]]-       [:th (use-sub-style table-style :th-body) [:h5 ""Body""]]+       [:th  [:h5 ""Title""]]+       [:th  [:h5 ""Body""]]"
https://api.github.com/repos/athensresearch/athens/pulls/164,443563884,"@@ -5,6 +5,7 @@     [athens.devcards.buttons]     [athens.devcards.db]     [athens.devcards.db-boxes]"
https://api.github.com/repos/athensresearch/athens/pulls/176,445289889,"@@ -3,45 +3,94 @@     [athens.db :as db]     [athens.parser :as parser]     [athens.router :refer [navigate-uid]]+    [athens.style :refer [color OPACITIES]]     [instaparse.core :as insta]-    [posh.reagent :refer [pull #_q]]))+    [posh.reagent :refer [pull #_q]]+    [stylefy.core :as stylefy :refer [use-style]]))   (declare parse-and-render)  +;;; Styles+++(def block {})"
https://api.github.com/repos/athensresearch/athens/pulls/194,447324990,"@@ -398,15 +477,19 @@     (let [{:keys [active-panel]} @state           switch-panel (fn [panel] (swap! state assoc :active-panel panel))]       [:div (use-style container-style)-       [:span-        [button {:on-click-fn #(switch-panel :query)-                 :label ""Query""}]-        "" ""-        [button {:on-click-fn #(switch-panel :txes)-                 :label ""Transactions""}]]-       (case active-panel-         :query [query-component @state]-         :txes [txes-component @state])])))+       [:nav (use-style tabs-style)+        [:div (use-style tabs-section-style)+         [button {:on-click-fn #(switch-panel :query)+                  :active (true? (= active-panel :query))+                  :label [:<> [:> mui-icons/ShortText] [:span ""Query""]]}]+         [button {:on-click-fn #(switch-panel :txes)+                  :active (true? (= active-panel :txes))"
https://api.github.com/repos/athensresearch/athens/pulls/197,448030713,"@@ -3,12 +3,59 @@     [athens.db :as db]     [athens.devcards.blocks :refer [block-el]]     [athens.router :refer [navigate-uid]]+    [athens.style :refer [color]]     [cljsjs.react]     [cljsjs.react.dom]     [devcards.core :refer-macros [defcard-rg]]+    [garden.selectors :as selectors]     [komponentit.autosize :as autosize]     [posh.reagent :refer [transact! pull]]-    [re-frame.core :refer [subscribe]]))+    [re-frame.core :refer [subscribe]]+    [stylefy.core :as stylefy :refer [use-style]]))+++;;; Styles++(def title-style+  {:position ""relative""+   :overflow ""visible""+   :flex-grow ""1""+   :margin ""0.2em 0""+   :letter-spacing ""-0.03em""+   :word-break ""break-word""+   ::stylefy/manual [[:textarea {:display ""none""}]+                     [:&:hover [:textarea {:display ""block""+                                           :z-index 1}]]+                     [:textarea {:-webkit-appearance ""none""+                                 :cursor ""text""+                                 :resize ""none""+                                 :transform ""translate3d(0,0,0)""+                                 :color ""inherit""+                                 :font-weight ""inherit""+                                 :padding ""0""+                                 :letter-spacing ""inherit""+                                 :position ""absolute""+                                 :top ""0""+                                 :left ""0""+                                 :right ""0""+                                 :width ""100%""+                                 :min-height ""100%""+                                 :caret-color (color :link-color)+                                 :background ""transparent""+                                 :margin ""0""+                                 :font-size ""inherit""+                                 :line-height ""inherit""+                                 :border-radius ""4px""+                                 :transition ""opacity 0.15s ease""+                                 :border ""0""+                                 :opacity ""0""+                                 :font-family ""inherit""}]+                     [:textarea:focus+                      :.isEditing {:outline ""none""+                                   :z-index ""10""+                                   :display ""block""+                                   :opacity ""1""}]+                     [(selectors/+ :.isEditing :span) {:opacity 0}]]})"
https://api.github.com/repos/athensresearch/athens/pulls/208,449051548,"@@ -211,6 +211,8 @@                :loading            true                :errors             {}                :athena             false+               :show-recent?       true+               :recent-items       '()"
https://api.github.com/repos/athensresearch/athens/pulls/211,449647168,"@@ -149,30 +196,28 @@     ;; References    (for [[linked-or-unlinked refs] ref-groups]-     [:div {:key linked-or-unlinked}-      [:div (use-style {:display         ""flex""-                        :justify-content ""space-between""-                        :align-items ""center""})-       [:h3 linked-or-unlinked]-       [:span-        [button {:label    [(r/adapt-react-class mui-icons/FilterList)]-                 :disabled true}]]]-      (doall-        (for [[group-title group] refs]-          [:<> {:key group-title}-           [:h4 group-title]-           (for [{:block/keys [uid parents] :as block} group]-             [:div {:key uid}-              ;; TODO: replace with breadcrumbs?+     (when (> (count refs) 0)+       [:section (use-style references-style {:key linked-or-unlinked})+        [:h4 (use-style references-heading-style)+         [(r/adapt-react-class mui-icons/Link)]+         [:span linked-or-unlinked]+         [button {:label    [(r/adapt-react-class mui-icons/FilterList)]+                  :disabled true}]]+        [:div (use-style references-list-style)+         (doall"
https://api.github.com/repos/athensresearch/athens/pulls/222,450144029,"@@ -1,501 +1,14 @@ (ns athens.devcards.devtool   (:require-    [""@material-ui/icons"" :as mui-icons]     [athens.db :as db :refer [dsdb]]-    [athens.devcards.buttons :refer [button-primary button]]     [athens.devcards.db :refer [load-real-db-button]]-    [athens.devcards.textinput :refer [textinput-style]]-    [athens.style :refer [color]]-    [cljs.pprint :as pp]-    [cljsjs.react]-    [cljsjs.react.dom]-    [clojure.core.protocols :as core-p]-    [clojure.datafy :refer [nav datafy]]-    [datascript.core :as d]+    [athens.views.buttons :refer [button-primary button]]+    [athens.views.devtool :refer [state* handler devtool-prompt-el devtool-component]]     [datascript.db]     [devcards.core :as devcards :refer [defcard-rg]]-    [garden.color :refer [darken]]-    [komponentit.autosize :as autosize]     [me.tonsky.persistent-sorted-set]-    [re-frame.core :refer [subscribe dispatch]]-    [reagent.core :as r]     [reagent.ratom]-    [sci.core :as sci]-    [shadow.remote.runtime.cljs.browser]-    [stylefy.core :as stylefy :refer [use-style]])-  (:import-    (goog.events-      KeyCodes)))---;;; Styles---(def container-style-  {:grid-area     ""devtool""-   :flex-direction ""column""-   :background    (color :panel-color)-   :position      ""relative""-   :width         ""100vw""-   :height        ""33vh""-   :display ""flex""-   :overflow-y    ""auto""-   :right         0-   :z-index       2})---(def tabs-style-  {:padding ""0 8px""-   :flex ""0 0 auto""-   :background (darken (color :panel-color) 5)-   :display ""flex""-   :align-items ""stretch""-   :justify-content ""space-between""-   ::stylefy/manual [[:button {:border-radius ""0""}]]})---(def tabs-section-style-  {:display ""flex""-   :align-items ""stretch""})---(def panels-style-  {:overflow-y ""auto""-   :padding ""8px""})---(def current-location-style-  {:display ""flex""-   :align-items ""center""-   :flex ""1 1 100%""-   :font-size ""14px""-   :border-bottom [[""1px solid"" (darken (color :panel-color) 10)]]})---(def current-location-name-style-  {:font-weight ""bold""-   :font-size ""inherit""-   :margin-block ""0""-   :margin-inline-start ""1em""-   :margin-inline-end ""1em""})---(def current-location-controls-style {:margin-inline-start ""1em""})---(def devtool-table-style-  {:border-collapse ""collapse""-   :font-size ""12px""-   :font-family ""IBM Plex Sans Condensed""-   :letter-spacing ""-0.01em""-   :margin ""8px 0 0""-   :border-spacing ""0""-   :min-width ""100%""-   ::stylefy/manual [[:td {:border-top [[""1px solid "" (darken (color :panel-color) 5)]]-                           :padding ""2px""}]-                     [:tbody {:vertical-align ""top""}]-                     [:th {:text-align ""left"" :padding ""2px 2px"" :white-space ""nowrap""}]-                     [:tr {:transition ""all 0.05s ease""}]-                     [:td:first-child :th:first-child {:padding-left ""8px""}]-                     [:td:last-child :th-last-child {:padding-right ""8px""}]-                     [:tbody [:tr:hover {:cursor ""pointer""-                                         :background (darken (color :panel-color) 2.5)-                                         :color (color :header-text-color)}]]-                     [:td>ul {:padding ""0""-                              :margin ""0""-                              :list-style ""none""}]-                     [:td [:li {:margin ""0 0 4px""-                                :padding-top ""4px"";-                                :border-top (str ""1px solid "" (color :panel-color))}]]-                     [:td [:li:first-child {:border-top ""none"" :margin-top ""0"" :padding-top ""0""}]]-                     [:a {:color (color :link-color)}]-                     [:a:hover {:text-decoration ""underline""}]]})---(def edn-viewer-style {:font-size ""12px""})---(def query-input-style-  (merge textinput-style {:width ""100%""-                          :min-height ""40px""-                          :font-size ""12px""-                          :background (color :app-bg-color)-                          :font-family ""IBM Plex Mono""}))---;;; Components---(def initial-state-  {:eval-str-   ""(d/q '[:find [(pull ?e [*]) ...]-       :where [?e :node/title]]-    @athens/db)""-   :tx-reports []-   :active-panel :query})---(defonce state* (r/atom initial-state))---(defn ds-nav-impl-  [_ k v]-  (condp = k-    :db/id (d/pull @dsdb '[* :block/_children] v) ; TODO add inverse refs here-    v)) ; TODO add unique idents here as well---(defn restore-db!-  [db]-  (d/reset-conn! dsdb db {:time-travel true}))---(extend-protocol core-p/Datafiable-  cljs.core/PersistentHashMap-  (datafy [this]-    (with-meta this {`core-p/nav ds-nav-impl}))-  cljs.core/PersistentArrayMap-  (datafy [this]-    (with-meta this {`core-p/nav ds-nav-impl}))-  datascript.db/TxReport-  (datafy [this]-    (into {} this))-  datascript.db/Datom-  (datafy [this]-    (vec this))-  datascript.db/DB-  (datafy [this]-    (into {} this))-  me.tonsky.persistent-sorted-set/BTSet-  (datafy [this]-    (vec this)))---(defn data-table-  [_ _ _]-  (let [limit (r/atom 20)]-    (fn [headers rows add-nav!]-      [:div-       [:table (use-style devtool-table-style)-        [:thead-         [:tr (for [h headers]-                ^{:key h} [:th h])]]-        [:tbody-         (doall-           (for [row (take @limit rows)]--             ^{:key row}-             [:tr {:on-click #(add-nav! [(first row)-                                         (-> row meta :row-value)])}-              (for [i (range (count row))]-                (let [cell (get row i)]-                  ^{:key (str row i cell)}-                  [:td (if (nil? cell)-                         """"-                         (pr-str cell))]))]))]] ; use the edn-viewer here as well?-       (when (< @limit (count rows))-         [button-primary {:on-click-fn #(swap! limit + 10)-                          :style {:width ""100%""-                                  :justify-content ""center""-                                  :margin ""4px 0""}-                          :label ""Load More""}])])))---; TODO add truncation of long strings here-(defn edn-viewer-  [data _]-  [:pre (use-style edn-viewer-style) [:code (with-out-str (cljs.pprint/pprint data))]])---(defn coll-viewer-  [coll add-nav!]-  [data-table [""idx"" ""value""]-   (->> coll-        (map-indexed (fn [idx item]-                       (with-meta [idx item] {:row-value item})))-        vec)-   add-nav!])---(defn map-viewer-  [m add-nav!]-  [data-table [""key"" ""value""]-   (map (fn [[k v]] (with-meta [k v] {:row-value v})) m)-   add-nav!])---(defn maps-viewer-  [ms add-nav!]-  (let [headers (into [""idx""] (->> ms (mapcat keys) distinct))-        rows (map-indexed (fn [idx m]-                            (with-meta (into [idx]-                                             (for [h (rest headers)] (get m h)))-                              {:row-value m}))-                          ms)]-    [data-table headers rows add-nav!]))---(defn tuples-viewer-  [colls add-nav!]-  (let [max-count (->> colls-                       (map count)-                       (apply max))-        headers (into [""idx""] (range max-count))-        rows (map-indexed (fn [idx coll]-                            (with-meta (into [idx]-                                             (for [i (range max-count)] (get coll i)))-                              {:row-value coll})-                            colls))]-    [data-table headers rows add-nav!]))---(defn associative-not-sequential?-  [x]-  (and (associative? x)-       (not (sequential? x))))---(defn sequence-of-maps?-  [x]-  (and (sequential? x)-       (every? map? x)))---(defn tuples?-  [x]-  (and (sequential? x)-       (every? sequential? x)))---(def viewers-  [{:athens.viewer/id :athens.browser/edn-    :athens.viewer/pred (constantly true)-    :athens.viewer/fn edn-viewer}-   {:athens.viewer/id :athens.browser/coll-    :athens.viewer/pred coll?-    :athens.viewer/fn coll-viewer}-   {:athens.viewer/id :athens.browser/map-    :athens.viewer/pred associative-not-sequential?-    :athens.viewer/fn map-viewer}-   {:athens.viewer/id :athens.browser/maps-    :athens.viewer/pred sequence-of-maps?-    :athens.viewer/fn maps-viewer}-   {:athens.viewer/id :athens.browser/tuples-    :athens.viewer/pred tuples?-    :athens.viewer/fn tuples-viewer}])---(def viewer-preference-  [:athens.browser/maps-   :athens.browser/map-   :athens.browser/tuples-   :athens.browser/coll-   :athens.browser/edn])---(defn applicable-viewers-  [data]-  (->> viewers-       (filter (fn [{:keys [athens.viewer/pred]}] (pred data)))-       (map :athens.viewer/id)-       (sort-by #(.indexOf viewer-preference %))))---(def indexed-viewers-  (->> viewers-       (map (juxt :athens.viewer/id identity))-       (into {})))---(defn data-browser-  [_]-  (let [state (r/atom {:navs []})]-    (fn [data]-      (let [navs (:navs @state)-            add-nav! #(swap! state update :navs conj %)-            navved-data (reduce (fn [d [k v]] (nav (datafy d) k v))-                                data-                                navs)-            datafied-data (datafy navved-data)-            applicable-vs (applicable-viewers datafied-data)-            viewer-name (or (:viewer @state) (first applicable-vs))-            viewer (get-in indexed-viewers [viewer-name :athens.viewer/fn])]-        [:div-         [:div {:style {:display ""flex""-                        :flex-direction ""row""-                        :flex-wrap ""no-wrap""-                        :align-items ""stretch""-                        :justify-content ""space-between""}}-          [:div (use-style current-location-style)-           (doall-             (for [i (-> navs count range)]-               (let [nav (get navs i)]-                 ^{:key i}-                 [button {:label [:<> [:> mui-icons/ChevronLeft] [:span (first nav)]]-                          :style {:padding ""2px 4px""}-                          :on-click-fn #(swap! state (fn [s]-                                                       (-> s-                                                           (update :navs subvec 0 i)-                                                           (dissoc :viewer))))}])))-           [:h3 (use-style current-location-name-style) (pr-str (type navved-data))]-           [:div (use-style current-location-controls-style)-            [:span ""View as ""]-            (for [v applicable-vs]-              (let [click-fn #(swap! state assoc :viewer v)]-                ^{:key v}-                [button {:on-click-fn click-fn-                         :active (= v viewer-name)-                         :label (name v)}]))]]]-         (when (d/db? navved-data)-           [button-primary {:on-click-fn #(restore-db! navved-data)-                            :label ""Restore this db""}])-         [viewer datafied-data add-nav!]]))))---(defn handler-  []-  (let [n (inc (:max-eid @dsdb))-        n-child (inc n)]-    (d/transact! dsdb [{:node/title     (str ""Test Page "" n)-                        :block/uid      (str ""uid-"" n)-                        :block/children [{:block/string (str ""Test Block"" n-child) :block/uid (str ""uid-"" n-child)}]}])))---(defn eval-with-sci-  [{:keys [eval-str] :as state}]-  (let [bindings {'athens/db dsdb-                  'd/pull d/pull-                  'd/q d/q-                  'd/pull-many d/pull-many-                  'd/entity d/entity}-        [ok? result] (try-                       [true (sci/eval-string eval-str {:bindings bindings})]-                       (catch js/Error e [false e]))]-    (-> state-        (assoc :result result)-        (assoc :error (not ok?)))))---(defn eval-box!-  []-  (swap! state* eval-with-sci))---(defn update-box!-  [s]-  (swap! state* assoc :eval-str s))---(defn listener-  [tx-report]-  (swap! state* update :tx-reports conj tx-report)-  (when (not (:error @state*))-    (eval-box!)))---(d/listen! dsdb :devtool/open listener)---(defn handle-box-change!-  [e]-  (update-box! (-> e .-target .-value)))---(defn handle-shift-return!-  [e]-  (.preventDefault e)-  (eval-box!))---(defn insert-tab-  [s pos]-  (str (subs s 0 pos) ""  "" (subs s pos)))---(defn handle-tab-key!-  [e]-  (let [t (.-target e)-        v (.-value t)-        pos (.-selectionStart t)]-    (.preventDefault e)-    (update-box! (insert-tab v pos))-    (set! (.-selectionEnd t) (+ 2 pos))))---(defn handle-box-key-down!-  [e]-  (let [key (.. e -keyCode)-        shift? (.. e -shiftKey)]-    (cond-      (= key KeyCodes.ENTER) (when shift? (handle-shift-return! e))-      (= key KeyCodes.TAB) (handle-tab-key! e)-      :else nil)))---(defn error-component-  [error]-  [:div {:style {:color ""red""}}-   (str error)])---(defn query-component-  [{:keys [eval-str result error]}]-  [:div (use-style {:height ""100%""})-   [autosize/textarea (use-style query-input-style-                                 {:value eval-str-                                  :resize ""none""-                                  :on-change handle-box-change!-                                  :on-key-down handle-box-key-down!})]-   (if-not error-     [data-browser result]-     [error-component result])])---(defn txes-component-  [{:keys [tx-reports]}]-  [data-browser tx-reports])---(defn devtool-prompt-el-  []-  [button-primary {:on-click-fn #(dispatch [:devtool/toggle])-                   :label [:<>-                           [:> mui-icons/Build]-                           [:span ""Toggle devtool""]]-                   :style {:font-size ""11px""}}])---(defn devtool-close-el-  []-  [button {:on-click-fn #(dispatch [:devtool/toggle])-           :label [:> mui-icons/Clear]}])---(defn devtool-el-  [devtool? state]-  (when devtool?-    (let [{:keys [active-panel]} @state-          switch-panel (fn [panel] (swap! state assoc :active-panel panel))]-      [:div (use-style container-style)-       [:nav (use-style tabs-style)-        [:div (use-style tabs-section-style)-         [button {:on-click-fn #(switch-panel :query)-                  :active (= active-panel :query)-                  :label [:<> [:> mui-icons/ShortText] [:span ""Query""]]}]-         [button {:on-click-fn #(switch-panel :txes)-                  :active (= active-panel :txes)-                  :label [:<> [:> mui-icons/History] [:span ""Transactions""]]}]]-        [devtool-close-el]]-       [:div (use-style panels-style)-        (case active-panel-          :query [query-component @state]-          :txes [txes-component @state])]])))---(defn devtool-component-  []-  (let [devtool? @(subscribe [:devtool/open])]-    [devtool-el devtool? state*]))+    [shadow.remote.runtime.cljs.browser]))"
https://api.github.com/repos/athensresearch/athens/pulls/228,451472926,"@@ -497,23 +499,26 @@     (indent uid)))  -;; TODO: no-op when user tries to unindent to a child out of current context (defn unindent-  [uid]+  [uid context-root]   (let [parent (db/get-parent [:block/uid uid])         grandpa (db/get-parent (:db/id parent))         new-block {:block/uid uid :block/order (inc (:block/order parent))}         reindex-grandpa (->> (inc-after (:db/id grandpa) (:block/order parent))                              (concat [new-block]))]-    (when (and parent grandpa)-      {:transact! [[:db/retract (:db/id parent) :block/children [:block/uid uid]]-                   {:db/id (:db/id grandpa) :block/children reindex-grandpa}]})))+    (if (= (:block/uid parent) context-root) ; if the parent node is the context-root, prevent unindent+      {}+      (when (and parent grandpa)+        {:transact! [[:db/retract (:db/id parent) :block/children [:block/uid uid]]+                     {:db/id (:db/id grandpa) :block/children reindex-grandpa}]}))))"
https://api.github.com/repos/athensresearch/athens/pulls/237,452815619,"@@ -111,7 +111,7 @@          (if @loading            [initial-spinner-component]            [:div (use-style app-wrapper-style)-            [left-sidebar]+            [left-sidebar route-name]"
https://api.github.com/repos/athensresearch/athens/pulls/246,453255683,"@@ -0,0 +1,108 @@+(ns athens.devcards.app-toolbar+  (:require+    [""@material-ui/icons"" :as mui-icons]+    [athens.router :refer [navigate]]+    [athens.style :refer [color]]+    [athens.subs]+    [athens.views.buttons :refer [button]]+    [re-frame.core :refer [subscribe dispatch]]+    [stylefy.core :as stylefy :refer [use-style]]))+++;;; Styles+++(def app-header-style+  {:grid-area ""app-header""+   :justify-content ""flex-start""+   :background-clip ""padding-box""+   :align-items ""center""+   :font-size ""16px""+   :display ""grid""+   :position ""absolute""+   :top 0+   :right 0+   :left 0+   :grid-template-columns ""auto 1fr auto""+   :z-index ""1000""+   :grid-auto-flow ""column""+   :padding ""0.25rem 0.75rem 0.25rem 0.25rem""+                      ;;  :padding ""0.25rem 0.75rem 0.25rem 66px"" ;; Electron styling+   ::stylefy/manual [[:svg {:font-size ""20px""}]+                     [:button {:justify-self ""flex-start""}]]})+++(def app-header-control-section-style+  {:display ""grid""+   :grid-auto-flow ""column""+   :backdrop-filter ""blur(6px) contrast(50%) brightness(170%)""+   :padding ""0.25rem""+   :border-radius ""6px""+   :grid-gap ""0.25rem""})+++(def app-header-secondary-controls-style+  (merge app-header-control-section-style+         {:color (color :body-text-color :opacity-med)+          :justify-self ""flex-end""+          :backdrop-filter ""blur(6px)""+          :margin-left ""auto""+          ::stylefy/manual [[:button {:color ""inherit""}]]}))+++(def separator-style+  {:border ""0""+   :background (color :panel-color :opacity-high)+   :margin-inline ""20%""+   :margin-block ""0""+   :inline-size ""1px""+   :block-size ""auto""})+++;;; Components+++(defn separator+  []+  [:hr (use-style separator-style)])+++(defn app-toolbar+  []+  (let [left-open? (subscribe [:left-sidebar/open])+        right-open? (subscribe [:right-sidebar/open])+        current-route (subscribe [:current-route])+        route-name (-> @current-route :data :name)]++    [:header (use-style app-header-style)+     [:div (use-style app-header-control-section-style)+      [button {:active (when @left-open? true)"
https://api.github.com/repos/athensresearch/athens/pulls/242,453345238,"@@ -39,5 +39,7 @@    [(r/adapt-react-class mui-icons/Face) {:style {:opacity (:opacity-low OPACITIES)}}]    [(r/adapt-react-class mui-icons/Face) {:style {:opacity (:opacity-med OPACITIES)}}]    [(r/adapt-react-class mui-icons/Face) {:style {:opacity (:opacity-high OPACITIES)}}]-   [(r/adapt-react-class mui-icons/Face) {:style {:color (color :body-text-color)}}]    [(r/adapt-react-class mui-icons/Face) {:style {:color (color :header-text-color)}}]])+++[(r/adapt-react-class mui-icons/Face) {:style {:color (color :body-text-color)}}]"
https://api.github.com/repos/athensresearch/athens/pulls/252,454011960,"@@ -341,13 +353,13 @@                  :content (if (clojure.string/blank? query)                             [:div ""Start Typing!""]                             (doall-                              [:<>-                               (for [[i {:keys [node/title block/string block/uid]}] (map-indexed list results)]-                                 ^{:key (str ""inline-search-item"" uid)}-                                 [:div (use-style-                                         (merge {} (when (= index i) inline-selected-search-option))-                                         {:on-click #(prn ""expand"")})-                                  (or title string)])]))}])))+                             [:<>+                              (for [[i {:keys [node/title block/string block/uid]}] (map-indexed list results)]+                                ^{:key (str ""inline-search-item"" uid)}+                                [:div (use-style+                                       (merge {} (when (= index i) inline-selected-search-option))+                                       {:on-click #(prn ""expand"")})+                                 (or title string)])]))}])))"
https://api.github.com/repos/athensresearch/athens/pulls/253,454048831,"@@ -10,3 +10,14 @@   []   (-> (js/Date.) .getTime)) ++(defn scrollIfNeeded+  [element container]+  (if (< (.-offsetTop element) (.-scrollTop container))+    (set! (.-scrollTop container) (.-offsetTop element))"
https://api.github.com/repos/athensresearch/athens/pulls/268,456431294,"@@ -38,13 +50,24 @@    <url-link-url-part> = (backslash-escaped-paren | '(' url-link-url-part* ')') / any-char    <backslash-escaped-paren> = <'\\\\'> ('(' | ')')    -   bold = <'**'> any-chars <'**'>+   (* The following regular expression expresses this: (any character except '*') <- This repeated as many times as possible *)+   <non-bold-chars> = #'[^\\*]*'+   bold = <'**'> non-bold-chars <'**'>    -   (* It’s useful to extract this rule because its transform joins the individual characters everywhere it’s used. *)-   (* However, I think in many cases a more specific rule can be used. So we will migrate away from uses of this rule. *)-   any-chars = any-char++   (* -- It’s useful to extract this rule because its transform joins the individual characters everywhere it’s used. *)+   (* -- However, I think in many cases a more specific rule can be used. So we will migrate away from uses of this rule. *)    +   (* Here are a list of 'stop characters' we implemented, to get the LL(1) performance. *)"
https://api.github.com/repos/athensresearch/athens/pulls/266,456439724,"@@ -244,9 +263,11 @@   [ident]   (let [{:keys [block/uid node/title] :as node} (db/get-node-document ident)         editing-uid @(subscribe [:editing/uid])-        timeline-page? (is-timeline-page uid)]+        timeline-page? (is-timeline-page uid)+        show-page-menu? (r/atom false)+        page-menu-position (r/atom {:x 0 :y 0})]"
https://api.github.com/repos/athensresearch/athens/pulls/272,456791076,"@@ -284,6 +284,22 @@        :dispatch [:editing/uid child-uid]})))  +(reg-event-fx+  :page/make-shortcut+  (fn [_ [_ uid]]+    (let [sidebar-ents (d/q '[:find ?e+                              :where+                              [?e :page/sidebar _]]+                            @db/dsdb)]+      {:transact! [{:block/uid uid :page/sidebar (count sidebar-ents)}]})))"
https://api.github.com/repos/athensresearch/athens/pulls/273,456791859,"@@ -0,0 +1,15 @@+# Athens Block Parser Documentation"
https://api.github.com/repos/athensresearch/athens/pulls/277,456798071,"@@ -45,7 +46,22 @@                                                      :top ""2em""                                                      :bottom ""0""                                                      :transform ""translateX(50%)""-                                                     :background (color :border-color)}]]})+                                                     :background (color :border-color)}]+                     [:&:after {:content ""''"""
https://api.github.com/repos/athensresearch/athens/pulls/278,456829693,"@@ -44,54 +44,40 @@                      [:&:active                       :&:hover:active                       :&.is-active {:color (color :body-text-color)-                                    :background-color  (color :body-text-color :opacity-low)}]+                                    :background (color :body-text-color :opacity-low)}]                      [:&:disabled :&:disabled:active {:color (color :body-text-color 0.3)-                                                      :background-color (color :body-text-color :opacity-lower)+                                                      :background (color :body-text-color :opacity-lower)                                                       :cursor ""default""}]                      [:span {:flex ""1 0 auto""                              :text-align ""left""}]-                     [:kbd {:margin-inline-start ""1rem""}]-                     [:.MuiSvgIcon-root button-icons-style+                     [:kbd {:margin-inline-start ""1rem""+                            :font-size ""85%""}]+                     [:svg button-icons-style                       [(selectors/& (selectors/not (selectors/last-child))) button-icons-not-last-child-style]                       [(selectors/& (selectors/not (selectors/first-child))) button-icons-not-first-child-style]-                      [(selectors/& ((selectors/first-child (selectors/last-child)))) button-icons-only-child-style]]]})---(def buttons-primary-style-  (merge buttons-style {:color (color :link-color)-                        :background-color (color :link-color :opacity-lower)-                        ::stylefy/manual [[:&:hover {:background (color :link-color :opacity-low)}]-                                          [:&:active-                                           :&:hover:active-                                           :&.is-active {:color ""white""-                                                         :background-color (color :link-color)}]-                                          [:&:disabled :&:disabled:active {:color (color :body-text-color 0.3)-                                                                           :background-color (color :body-text-color :opacity-lower)-                                                                           :cursor ""default""}]-                                          [:span {:flex ""1 0 auto""-                                                  :text-align ""left""}]-                                          [:.MuiSvgIcon-root button-icons-style-                                           [(selectors/& (selectors/not (selectors/last-child))) button-icons-not-last-child-style]-                                           [(selectors/& (selectors/not (selectors/first-child))) button-icons-not-first-child-style]-                                           [(selectors/& ((selectors/first-child (selectors/last-child)))) button-icons-only-child-style]]]}))+                      [(selectors/& ((selectors/first-child (selectors/last-child)))) button-icons-only-child-style]]+                     [:&.is-primary {:color (color :link-color)+                                     :background (color :link-color :opacity-lower)}+                      [:&:hover {:background (color :link-color :opacity-low)}]+                      [:&:active+                       :&:hover:active+                       :&.is-active {:color ""white""+                                     :background (color :link-color)}]+                      [:&:disabled :&:disabled:active {:color (color :body-text-color 0.3)+                                                       :background (color :body-text-color :opacity-lower)+                                                       :cursor ""default""}]]]})   ;;; Components   (defn button-  ""Creates a button control""-  [{:keys [disabled label on-click-fn style active class]}]-  [:button (use-style (merge buttons-style style) {:disabled disabled-                                                   :on-click on-click-fn-                                                   :class [class (when active ""is-active"")]})-   label])---(defn button-primary-  ""Creates a button control""-  [{:keys [disabled label on-click-fn style active class]}]-  [:button (use-style (merge buttons-primary-style style) {:disabled disabled-                                                           :on-click on-click-fn-                                                           :class [class (when active ""is-active"")]})"
https://api.github.com/repos/athensresearch/athens/pulls/274,456835113,"@@ -0,0 +1,41 @@+(ns athens.components.todo+  (:require+    [athens.db :as db]+    [athens.util :refer [now-ts]]+    [re-frame.core :refer [dispatch]]))+++(defn todo-on-click+  [uid from-str to-str]++  (let [current-block-content (get (db/get-block [:block/uid uid]) :block/string)]+    (dispatch [:transact [{:db/id [:block/uid uid]+                           :block/string (clojure.string/replace+                                           current-block-content+                                           from-str+                                           to-str)+                           :edit/time (now-ts)}]])))+++(def component-todo+  {:match #""\[\[TODO\]\]""+   :render (fn [content uid]+             [:span [:input {:type     ""checkbox""+                             :z-index  5"
https://api.github.com/repos/athensresearch/athens/pulls/280,456974281,"@@ -170,13 +170,22 @@                                    vec)}))))  +(defn is-beyond-rect?+  ""Checks if any part of the element is above or below the container's bounding rect""+  [element container]+  (let [el-box (.. element getBoundingClientRect)+        cont-box (.. container getBoundingClientRect)]+    (or+      (> (.. el-box -bottom) (.. cont-box -bottom))+      (< (.. el-box -top) (.. cont-box -top)))))"
https://api.github.com/repos/athensresearch/athens/pulls/286,457203716,"@@ -193,8 +202,13 @@             :content [:div (use-style modal-contents-style)                       ;; TODO: Write intro copy                       [:p ""Some helpful framing about what Athens does and what users should expect. Athens is not Roam.""]+                      [:p ""To export a Roam database to the "" [:code ""json triplet""] "" format that Athens understands, refer to the official Athens documentation.""]"
https://api.github.com/repos/athensresearch/athens/pulls/288,457474569,"@@ -187,14 +198,17 @@        (when @import-modal-open?          [:div (use-style modal-style)           [modal/modal-           {:title [:div.modal__title [:> mui-icons/Publish] [:h4 ""Import to Athens""] [button-                                                                                       {:on-click-fn #(reset! import-modal-open? false)-                                                                                        :label [:> mui-icons/Close]}]]+           {:title [:div.modal__title [:> mui-icons/Publish]+                    [:h4 ""Import to Athens""]+                    [button+                     {:on-click-fn #(reset! import-modal-open? false)+                      :label [:> mui-icons/Close]}]]             :content [:div (use-style modal-contents-style)                       ;; TODO: Write intro copy                       [:p ""Some helpful framing about what Athens does and what users should expect. Athens is not Roam.""]                       [features-table]                       ;; TODO: Create browser file dialog and actually import stuff-                      [:div [button-primary {:label ""Add Files""}]]]+                      [:div [:input {:type ""file"" :on-change file-cb}]]]"
https://api.github.com/repos/athensresearch/athens/pulls/293,458274255,"@@ -254,17 +253,18 @@   [value uid]   ;; (prn ""ONCHANGE"" value)   (dispatch [:transact [{:db/id [:block/uid uid] :block/string value :edit/time (now-ts)}]])-  ;; automatically add non-existent pages   ;; TODO: delete pages that are no longer connected to anything else   (parse/transform {:page-link (fn [& title]                                  (let [inner-title (apply + title)]-                                   (when (nil? (db/search-exact-node-title inner-title))+                                   ;; `apply +` can return 0 if `title` is nil or empty string+                                   (when (and (string? inner-title)+                                              (nil? (db/search-exact-node-title inner-title)))"
https://api.github.com/repos/athensresearch/athens/pulls/295,459756125,"@@ -249,6 +249,24 @@           (recur (get ch (dec n))))))))  +(defn get-id+  [uid]+  (-> (d/q '[:find ?id+             :in $ ?uid+             :where [?id :block/uid ?uid]]+           @dsdb+           uid)+      ffirst))"
https://api.github.com/repos/athensresearch/athens/pulls/296,459761053,"@@ -250,10 +271,13 @@           (parse-renderer/parse-and-render title uid)]           ;; Children-         [:div-          (for [{:block/keys [uid] :as child} children]-            ^{:key uid}-            [block-el child])]+         (if (= (count children) 0)"
https://api.github.com/repos/athensresearch/athens/pulls/304,461224022,"@@ -101,10 +102,20 @@       (= type :slash) (cond                         (= :up direction) (do                                             (.. e preventDefault)-                                            (swap! state update :search/index dec))+                                            (swap! state update :search/index #(dec (if (zero? %) (count slash-options) %)))+                                            (let [cur-index (:search/index @state)+                                                  container-el (.. e -target -parentNode -parentNode -nextSibling -firstChild)"
https://api.github.com/repos/athensresearch/athens/pulls/303,461225549,"@@ -92,3 +92,16 @@       (string/replace x #""PM"" ""pm""))))  +;; -- Regex -----------------------------------------------------------++;; https://stackoverflow.com/a/11672480+(def regex-esc-char-map+  (let [esc-chars ""()*&^%$#![]""]+    (zipmap esc-chars+            (map #(str ""\\"" %) esc-chars))))+++(defn escape-str+  ""Take a string and escape all regex special characters in it""+  [str]+  (string/escape str regex-esc-char-map))"
https://api.github.com/repos/athensresearch/athens/pulls/297,461227607,"@@ -92,3 +95,71 @@       (string/replace x #""PM"" ""pm""))))  +;; -- Linked & Unlinked References ----------++(defn get-ref-ids+  [pattern]+  @(q '[:find [?e ...]+        :in $ ?regex+        :where+        [?e :block/string ?s]+        [(re-find ?regex ?s)]]+      db/dsdb+      pattern))+++(defn merge-parents-and-block+  [ref-ids]+  (let [parents (reduce-kv (fn [m _ v] (assoc m v (db/get-parents-recursively v)))+                           {}+                           ref-ids)+        blocks (map (fn [id] (db/get-block-document id)) ref-ids)]+    (mapv+      (fn [block]+        (merge block {:block/parents (get parents (:db/id block))}))+      blocks)))+++(defn group-by-parent+  [blocks]+  (group-by (fn [x]+              (-> x+                  :block/parents+                  first+                  :node/title))+            blocks))+++(defn get-data+  [pattern]+  (-> pattern get-ref-ids merge-parents-and-block group-by-parent seq))+++(defn get-data-by-block+  [pattern]+  (-> pattern get-ref-ids merge-parents-and-block seq))"
https://api.github.com/repos/athensresearch/athens/pulls/307,462227209,"@@ -489,9 +489,6 @@  (defn count-linked-references-excl-uid   [title uid]-  (reduce (fn [current-count ref]-            (if (= (:block/uid ref) uid)-              current-count-              (inc current-count)))-          0-          (get-linked-references-by-block title)))+  (->> (get-linked-references-by-block title)+       (remove #(= (:block/uid %) uid))+       count))"
https://api.github.com/repos/athensresearch/athens/pulls/309,462687569,"@@ -152,6 +175,7 @@ (def block-content-style   {:position ""relative""    :overflow ""visible""+   :z-index 2"
https://api.github.com/repos/athensresearch/athens/pulls/316,464083449,"@@ -326,6 +327,14 @@     ;;(= key-code KeyCodes.CLOSE_SQUARE_BRACKET)  +;; This should probably reside in another file as it has nothing to do"
https://api.github.com/repos/athensresearch/athens/pulls/319,464160093,"@@ -280,16 +280,18 @@   (defn search-in-node-title-  [query]-  (d/q '[:find [(pull ?node [:db/id :node/title :block/uid]) ...]-         :in $ ?query-pattern ?query-         :where-         [?node :node/title ?title]-         [(re-find ?query-pattern ?title)]-         [(not= ?title ?query)]] ;; ignore exact match to avoid duplicate-       @dsdb-       (re-case-insensitive query)-       query))+  ([query] (search-in-node-title query 20))"
https://api.github.com/repos/athensresearch/athens/pulls/318,464521222,"@@ -25,10 +28,29 @@  # Contributing to Athens -Whether you are a designer, developer, or have other superpowers, please see our [v1 Project Board](https://github.com/athensresearch/athens/projects/2) to see what we're working on.+## Developers -- The best place to reach us is our [Discord](https://discord.gg/GCJaV3V)! 👾+- Join our [Discord](https://discord.gg/GCJaV3V) 👾 and check out the `#engineering` and `#engineers` channels.+  - Post work updates in the `#build-in-public`. This keeps the team on the same page! Let's avoid stepping on each others toes, minimize blockers / dependencies, and cheer each other on!+- Watch the repo and bookmark our [Project Board](https://github.com/athensresearch/athens/projects/2). This is the ultimate source of truth for product roadmapping.+- To start working on your PR, you have a few ways to get started:+    1. ask a question in our `#engineering` [Discord](https://discord.gg/GCJaV3V) channel+    1. comment on one of the existing top-level issues on the project board+    1. create a PR draft or issue, then assign yourself (prefer drafts over new issues)"
https://api.github.com/repos/athensresearch/athens/pulls/342,473463054,"@@ -94,16 +94,72 @@ jobs:      # Only deploy if a commit is pushed. This lets the previous jobs run on PRs. This also runs when a PR is merged, because a merge is a push.-   deploy:-     needs: [test]-     if: github.event_name == 'push'-     runs-on: ubuntu-18.04+#   deploy:+#     needs: [test]+#     if: github.event_name == 'push'+#     runs-on: ubuntu-18.04+#     steps:+#       - name: Git checkout+#         uses: actions/checkout@v1+#         with:+#           fetch-depth: 1+#           submodules: 'true'+#+#       - name: Restore maven+#         uses: actions/cache@v1+#         id: restore-maven+#         with:+#           path: ~/.m2/repository+#           key: ${{ runner.os }}-maven-${{ hashFiles('project.clj') }}+#           restore-keys: |+#             ${{ runner.os }}-maven-+#+#       - name: Fetch maven+#         if: steps.restore-maven.outputs.cache-hit != 'true'+#         run: lein deps+#+#       - name: Get yarn cache directory path+#         id: yarn-cache-dir-path+#         run: echo ""::set-output name=dir::$(yarn cache dir)""+#+#       - name: Restore yarn+#         uses: actions/cache@v1+#         id: restore-yarn+#         with:+#           path: ${{ steps.yarn-cache-dir-path.outputs.dir }}+#           key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}+#           restore-keys: |+#             ${{ runner.os }}-yarn-+#+#       - name: Fetch yarn+#         run: yarn install --frozen-lockfile+#+#       - name: Compile app and devcards+#         run: COMMIT_URL=""https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}"" script/deploy+#+#       - name: Deploy+#         uses: peaceiris/actions-gh-pages@v3+#         with:+#           github_token: ${{ secrets.GITHUB_TOKEN }}+#           publish_dir: ./resources/public"
https://api.github.com/repos/athensresearch/athens/pulls/349,476089090,"@@ -179,6 +160,97 @@     (dispatch [:editing/uid new-uid])))  +(defn handle-key-down+  ""When user presses shift-enter, normal behavior: create a linebreak.+  TODO: When user presses enter and current-title == datascript-title, do Notion behavior+  TODO: When user presses enter, blur+    if there are block refs, update them+    if existing node/title, prompt to merge""+  [e _state]+  (let [{:keys [key-code shift]} (destruct-event e)]+    (when (and (not shift) (= key-code KeyCodes.ENTER))+      (.. e preventDefault))))+++(defn handle-change+  [e state]+  (let [value (.. e -target -value)]+    (swap! state assoc :current-title value)))+++(defn get-linked-refs+  [ref-groups]+  (->> ref-groups+       first+       second+       first+       second))+++(defn map-new-refs+  [linked-refs old-title new-title]+  (map (fn [{:block/keys [uid string order]}]+         (let [new-str (str/replace string+                                    (patterns/linked old-title)+                                    (str ""$1$3$4"" new-title ""$2$5""))]+           {:db/id [:block/uid uid]+            :block/string new-str+            :block/order order}))+       linked-refs))+++(defn handle-blur+  ""When textarea blurs and its value is different from initial page title:+   - if no other page exists, rewrite page title and all linked refs+   - else page with same title does exists: prompt to merge+     - confirm-fn: rewrite page title, linked refs, AND merge"
https://api.github.com/repos/athensresearch/athens/pulls/355,478788131,"@@ -50,19 +50,36 @@            {:selection selection})))  +(defn filter-slash-options"
https://api.github.com/repos/athensresearch/athens/pulls/356,479779995,"@@ -88,10 +88,11 @@ ;; Header    [:h1 (use-style title-style {:data-uid uid :class ""block-header""})     [autosize/textarea-     {:default-value string+     {:value string       :class (when (= editing-uid uid) ""is-editing"")       :auto-focus true-      :on-change  (fn [e] (db-on-change (.. e -target -value) uid))}]+      ;; TODO:+      :on-change  (fn [e] (prn ""TODO block page""))}]"
https://api.github.com/repos/athensresearch/athens/pulls/358,480529832,"@@ -106,31 +106,39 @@                            :slash (count (re-find #"".*/""    head)))          new-query (str (subs head query-start-idx) key)          results (query-fn new-query)]-     (swap! state assoc-            :search/index 0-            :search/query new-query-            :search/results results))))+     (if (and (= type :slash) (empty? results))+       (swap! state assoc :search/type nil)+       (swap! state assoc+              :search/index 0+              :search/query new-query+              :search/results results)))))  +;; 1- if no results, just hide slash commands so this doesnt get triggered+;; 2- if results, do find and replace properly (defn auto-complete-slash-  [index state]-  (let [{:keys [string/local]} @state-        [_ _ expansion _] (nth slash-options index)+  [state e]+  (let [{:keys [string/local] :search/keys [index results]} @state+        {:keys [head]} (destruct-event e)+        [_ _ expansion _] (nth results index)         expand (if (fn? expansion) (expansion) expansion)-        replace-str (subs local 0 (dec (count local)))-        new-str     (str replace-str expand)]+        start-idx (dec (count (re-find #"".*/"" head)))+        new-head (subs local 0 start-idx)"
https://api.github.com/repos/athensresearch/athens/pulls/352,480541561,"@@ -207,15 +210,22 @@     block))  +(def document-pull-vector+  '[:db/id :edit/time+    :block/refs+    :block/_refs+    :block/uid :block/string :block/open :block/order {:block/children ...}])++ (defn get-block-document   [id]-  (->> @(pull dsdb '[:db/id :block/uid :block/string :block/open :block/order {:block/children ...} :edit/time] id)+  (->> @(pull dsdb document-pull-vector id)        sort-block-children))   (defn get-node-document   [id]-  (->> @(pull dsdb '[:db/id :node/title :block/uid :block/string :block/open :block/order :page/sidebar {:block/children ...} :edit/time] id)+  (->> @(pull dsdb (conj document-pull-vector :node/title :page/sidebar) id)"
https://api.github.com/repos/athensresearch/athens/pulls/360,487462839,"@@ -604,11 +603,15 @@   (defn drop-below-same-parent-  ""source block's new order is target block's order"""
https://api.github.com/repos/athensresearch/athens/pulls/362,489050693,"@@ -68,15 +72,29 @@  ;;; Components +(defn handle-enter+  [_ uid _]+  (let [new-uid   (gen-block-uid)+        now       (now-ts)]+    (dispatch [:transact [{:block/uid       uid+                           :edit/time       now+                           :block/children  [{:block/order  0+                                              :block/uid    new-uid+                                              :block/open   true+                                              :block/string """"}]}]])+    (dispatch [:editing/uid new-uid])))  (defn block-page-key-down-  [_ _ _]-  (prn ""TODO: block-page-key-down""))+  [e uid state]+  (let [d-event (destruct-event e)+        {:keys [key-code]} d-event]+    (cond+      (= key-code KeyCodes.ENTER) (handle-enter e uid state))))   (defn block-page-change   [e _uid state]-  (let [value (.. e -target -value)]+  (let [value (clojure.string/trim-newline (.. e -target -value))]"
https://api.github.com/repos/athensresearch/athens/pulls/361,489792401,"@@ -222,7 +222,7 @@               (or (and up? top-row?)                   (and down? bottom-row?)) (do                                              (.. target blur)-                                             (dispatch [:editing/uid nil])+                                             ;;(dispatch [:editing/uid nil])"
https://api.github.com/repos/athensresearch/athens/pulls/363,490569199,"@@ -198,6 +198,8 @@   ;; TODO: minus-after to reindex but what about nested blocks?+;; naive: assume all items are siblings of same parent. minus-after n where n is size of selected-items+;; better:"
https://api.github.com/repos/athensresearch/athens/pulls/364,490625350,"@@ -197,13 +197,38 @@     (assoc db :selected/items (select-down selected-items))))  -;; TODO: minus-after to reindex but what about nested blocks?+(defn delete-selected+  ""We know that we only need to reindex after the last block! The former blocks are necessarily going to remove all children,+  meaning we only need to be concerned with the last N blocks that are selected, adjacent siblings.""+  [selected-items]+  (let [last-item (last selected-items)+        selected-sibs-of-last (->> (d/q '[:find ?sib-uid ?o+                                          :in $ ?uid [?selected ...]+                                          :where+                                          ;; get all siblings of the last block+                                          [?e :block/uid ?uid]+                                          [?p :block/children ?e]+                                          [?p :block/children ?sib]+                                          [?sib :block/uid ?sib-uid]+                                          ;; filter selected+                                          [(= ?sib-uid ?selected)]+                                          [?sib :block/order ?o]]+                                        @db/dsdb last-item selected-items)+                                   (sort-by second))+        [uid order] (last selected-sibs-of-last)+        parent (db/get-parent [:block/uid uid])+        n (count selected-sibs-of-last)]+    ;; minus-after after last highlighted block a value of count highlight siblings"
https://api.github.com/repos/athensresearch/athens/pulls/365,492366578,"@@ -490,6 +490,31 @@                                   :block/children reindex}]]]           [:dispatch [:editing/uid new-uid]]]})) +(defn split-block-to-children+  ""Takes a block uid, its value, and the index to split the value string.+  It sets the value of the block to the head of (subs val 0 index)+  It then creates a new child block with the tail of the string set as its value and sets editing to that block.""+  [uid val index]+  (let [block (db/get-block [:block/uid uid])+        head (subs val 0 index)+        tail (subs val index)+        new-uid (gen-block-uid)+        new-block {:db/id        -1+                   :block/order  (inc (:block/order block))+                   :block/uid    new-uid+                   :block/open   true+                   :block/string tail}+        reindex (->> (inc-after (:db/id block) (:block/order block))+                     (concat [new-block]))]+    {:fx [[:dispatch [:transact [{:db/id (:db/id block) :block/string head :edit/time (now-ts)}+                                 {:db/id (:db/id block)+                                  :block/children reindex}]]]+          [:dispatch [:editing/uid new-uid]]]}))++(reg-event-fx+ :split-block-to-children+ (fn [_ [_ uid val index]]+   (split-block-to-children uid val index)))"
https://api.github.com/repos/athensresearch/athens/pulls/370,493980190,"@@ -416,16 +422,19 @@   [e _ state]   (let [{:keys [head key]} (destruct-event e)         slash-key? (= key ""/"")+        hashtag-key? (= key ""#"")"
https://api.github.com/repos/athensresearch/athens/pulls/374,494731162,"@@ -420,17 +436,22 @@       {:display-name           ""slash-menu""        :component-did-mount    (fn [_this] (events/listen js/document ""mousedown"" handle-click-outside))        :component-will-unmount (fn [_this] (events/unlisten js/document ""mousedown"" handle-click-outside))-       :reagent-render         (fn [state]+       :reagent-render         (fn [block state]                                  (let [{:search/keys [index results type]} @state]                                    (when (= type :slash)                                      [:div (merge (use-style dropdown-style-                                                             {:ref #(reset! ref %)}) {:style {:position ""absolute"" :top ""100%"" :left ""-0.125em""}})-                                      [:div#dropdown-menu (merge (use-style menu-style) {:style {:max-height ""8em""}})+                                                             {:ref           #(reset! ref %)+                                                              ;; don't blur textarea when clicking to auto-complete+                                                              :on-mouse-down (fn [e] (.. e preventDefault))})+                                                  {:style {:position ""absolute"" :top ""100%"" :left ""-0.125em""}})+                                      [:div#dropdown-menu (merge (use-style menu-style)+                                                                 {:style {:max-height ""8em""}})"
https://api.github.com/repos/athensresearch/athens/pulls/377,495603160,"@@ -68,17 +68,24 @@     (fn []       (if (empty? @note-refs)         (dispatch [:daily-note/next (get-day)])-        (let [notes (some->> @note-refs-                             not-empty-                             (map (fn [x] [:block/uid x]))-                             (pull-many db/dsdb '[*])-                             deref)]-          [:div#daily-notes (use-style daily-notes-scroll-area-style)-           (doall-             (for [{:keys [block/uid]} notes]-               ^{:key uid}-               [:<>-                [:div (use-style daily-notes-page-style)-                 [node-page-component [:block/uid uid]]]]))-           [:div (use-style daily-notes-notional-page-style)-            [:h1 ""Earlier""]]])))))+        (try+          (let [notes (some->> @note-refs+                               not-empty+                               (map (fn [x] [:block/uid x]))+                               ;; the problem is note-refs from re-frame is updated, and there is a brief period where datascript has not yet updated+                               ;; and when pull-many doesn't find anything, it throws an error+                               (pull-many db/dsdb '[*])+                               deref)]+            [:div#daily-notes (use-style daily-notes-scroll-area-style)+             (doall+               (for [{:keys [block/uid]} notes]+                 ^{:key uid}+                 [:<>+                  [:div (use-style daily-notes-page-style)+                   [node-page-component [:block/uid uid]]]]))+             [:div (use-style daily-notes-notional-page-style)+              [:h1 ""Earlier""]]])+          (catch js/Object e+            (prn ""EXCEPTION"" e)))))))++"
https://api.github.com/repos/athensresearch/athens/pulls/399,499070809,"@@ -1,29 +1,157 @@ (ns athens.effects   (:require     [athens.db :as db]+    [athens.parse-renderer :refer [pull-node-from-string]]+    [athens.parser :as parser]+    [athens.util :refer [now-ts gen-block-uid]]     [cljs-http.client :as http]     [cljs.core.async :refer [go <!]]     [cljs.pprint :refer [pprint]]+    [clojure.string :as str]     [datascript.core :as d]     [datascript.transit :as dt]     [day8.re-frame.async-flow-fx]     [goog.dom :refer [getElement]]     [goog.dom.selection :refer [setCursorPosition]]+    [instaparse.core :as parse]     [posh.reagent :refer [transact!]]     [re-frame.core :refer [dispatch reg-fx]]))   ;;; Effects +;; Algorithm:+;; - look at string (old or new)+;; - parse for database values: links, block refs, attributes (not yet supported), etc.+;; - filter based on remove or add conditions+;; - map to datoms+(defn walk-string+  ""Walk previous and new strings to delete or add links, block references, etc. to datascript.""+  [string]+  (let [data (atom {})]+    (parse/transform+      {:page-link (fn [& title]+                    (let [inner-title (str/join """" title)]+                      (swap! data update :node/titles #(conj % inner-title))+                      (str ""[["" inner-title ""]]"")))+       :hashtag   (fn [& title]+                    (let [inner-title (str/join """" title)]+                      (swap! data update :node/titles #(conj % inner-title))+                      (str ""#"" inner-title)))+       :block-ref (fn [uid] (swap! data update :block/refs #(conj % uid)))}+      (parser/parse-to-ast string))+    @data))+++(defn new-titles-to-tx-data+  [new-titles]+  (let [now (now-ts)]+    (->> new-titles+         (filter (fn [x] (nil? (db/search-exact-node-title x))))+         (map (fn [t]+                {:node/title  t+                 :block/uid   (gen-block-uid)+                 :create/time now+                 :edit/time   now})))))+++(defn old-titles-to-tx-data+  [old-titles uid new-str]+  (->> old-titles+       (filter (fn [t]+                 (let [block (db/search-exact-node-title t)]+                   ;; makes sure the page link is deleted in this node as well+                   (and (not (clojure.string/includes? new-str t))+                        ;; makes sure the page link is deleted in this node as well+                        (not (nil? block))+                        ;; makes sure the page link has no children+                        (nil? (:block/children (db/get-block-document (:db/id block))))+                        ;; makes sure the page link is not present in other pages+                        (zero? (db/count-linked-references-excl-uid t uid))))))+       (mapcat (fn [t]+                 (let [uid (:block/uid @(pull-node-from-string t))]+                   (when (some? uid)+                     (db/retract-uid-recursively uid)))))))+++(defn new-refs-to-tx-data+  [new-block-refs uid]+  (->> new-block-refs+       (filter (fn [ref-uid]+                 ;; check that ((ref-uid)) points to an actual entity+                 ;; find refs of uid+                 ;; if ((ref-uid)) is not yet a reference, then map datoms+                 (let [eid (db/e-by-av :block/uid ref-uid)+                       refs (-> (db/get-block-refs uid) set)]+                   (nil? (refs eid)))))+       (map (fn [ref-uid] [:db/add [:block/uid uid] :block/refs [:block/uid ref-uid]]))))+++(defn old-refs-to-tx-data+  [old-block-refs uid new-str]+  (->> old-block-refs+       (filter (fn [ref-uid]+                 ;; check that ((ref-uid)) points to an actual entity+                 ;; find refs of uid+                 ;; if ((ref-uid)) is no longer in the current string and IS a valid reference, retract+                 (when (not (str/includes? new-str (str ""(("" ref-uid ""))"")))+                   (let [eid  (db/e-by-av :block/uid ref-uid)+                         refs (-> (db/get-block-refs uid) set)]+                     (refs eid)))))+       (map (fn [ref-uid] [:db/retract [:block/uid uid] :block/refs [:block/uid ref-uid]]))))+++;; or node/title+;; when block/string is asserted, parse for links and block refs to add+;; when block/string is retracted, parse for links and block refs to remove+;; retractions need to look at asserted block/string too. if includes?, obvious filter++(defn parse-for-links+  ""Compare previous string with current string.+    - If links were added, transact pages.+    - If links were removed and page is an orphan, retract page.+    - If block refs were added, transact block/ref.+    - If block refs were removed, retract block/ref.""+  [with-tx-data]+  (->> with-tx-data+       (filter #(= (second %) :block/string))+       ;; group-by entity+       (group-by first)+       ;; map sort-by so [true false] gives us [assertion retraction]+       (mapv (fn [[_eid datoms]]+               (sort-by #(-> % last not) datoms)))+       (mapcat (fn [[assertion retraction]]+                 (let [eid            (first assertion)+                       retract-string (nth retraction 2)+                       assert-string  (nth assertion 2)+                       uid            (db/v-by-ea eid :block/uid)+                       retract-data   (walk-string retract-string)+                       assert-data    (walk-string assert-string)+                       new-titles     (new-titles-to-tx-data (:node/titles assert-data))+                       old-titles     (old-titles-to-tx-data (:node/titles retract-data) uid assert-string)+                       new-block-refs (new-refs-to-tx-data (:block/refs assert-data) uid)+                       old-block-refs (old-refs-to-tx-data (:block/refs retract-data) uid assert-string)+                       tx-data        (concat []+                                              new-titles+                                              old-titles+                                              new-block-refs+                                              old-block-refs)]+                   tx-data)))))++;;(def a (atom nil))  (reg-fx   :transact!-  (fn [datoms]+  (fn [tx-data]"
https://api.github.com/repos/athensresearch/athens/pulls/458,511328252,"@@ -659,31 +661,45 @@   - If value is empty and a root block, add a sibling block.   - If value is empty, unindent.   - If caret is at start and there is a value, create new block below but keep same block index.""-  [rfdb uid val index]-  (let [block                  (db/get-block [:block/uid uid])-        parent                 (db/get-parent [:block/uid uid])-        root-block?            (boolean (:node/title parent))-        context-root-uid       (get-in rfdb [:current-route :path-params :id])-        event                  (cond-                                 (and (:block/open block)-                                      (not-empty (:block/children block))-                                      (= index (count val))) [:enter/add-child block]-                                 (and (not (:block/open block))-                                      (not-empty (:block/children block))-                                      (= index (count val))) [:enter/new-block block parent]-                                 (and (empty? val)-                                      (= context-root-uid (:block/uid parent))) [:enter/new-block block parent]-                                 (not (zero? index)) [:enter/split-block uid val index]-                                 (and (empty? val) root-block?) [:enter/new-block block parent]-                                 (empty? val) [:unindent uid val context-root-uid]-                                 (and (zero? index) val) [:enter/bump-up uid])]+  [rfdb uid d-key-down]+  (let [block            (db/get-block [:block/uid uid])+        parent           (db/get-parent [:block/uid uid])+        root-block?      (boolean (:node/title parent))+        context-root-uid (get-in rfdb [:current-route :path-params :id])+        {:keys [value start]} d-key-down+        event            (cond+                           (and (:block/open block)+                                (not-empty (:block/children block))+                                (= start (count value)))+                           [:enter/add-child block]++                           (and (not (:block/open block))+                                (not-empty (:block/children block))+                                (= start (count value)))+                           [:enter/new-block block parent]++                           (and (empty? value)+                                (= context-root-uid (:block/uid parent)))+                           [:enter/new-block block parent]++                           (not (zero? start))+                           [:enter/split-block uid value start]++                           (and (empty? value) root-block?)+                           [:enter/new-block block parent]"
https://api.github.com/repos/athensresearch/athens/pulls/561,566958963,"@@ -39,6 +39,133 @@     (assoc db :db/synced false)))  +(defn shared-blocks-excl-date-pages+  [roam-db]+  (->> (d/q '[:find [?blocks ...]+              :in $athens $roam+              :where+              [$athens _ :block/uid ?blocks]+              [$roam _ :block/uid ?blocks]+              [$roam ?e :block/uid ?blocks]+              [(missing? $roam ?e :node/title)]]+            @athens.db/dsdb+            roam-db)))+++(defn merge-shared-page+  ""If page exists in both databases, but roam-db's page has no children, then do not add the merge block""+  [shared-page roam-db roam-db-filename]+  (let [page-athens              (db/get-node-document shared-page)+        page-roam                (db/get-roam-node-document shared-page roam-db)+        athens-child-count       (-> page-athens :block/children count)+        roam-child-count         (-> page-roam :block/children count)+        new-uid                  (gen-block-uid)+        today-date-page          (:title (athens.util/get-day))+        new-children             (conj (:block/children page-athens)+                                       {:block/string   (str ""[[Roam Import]] ""+                                                             ""[["" today-date-page ""]] ""+                                                             ""[["" roam-db-filename ""]]"")+                                        :block/uid      new-uid+                                        :block/children (:block/children page-roam)+                                        :block/order    athens-child-count+                                        :block/open     true})+        merge-pages              (merge page-roam page-athens)+        final-page-with-children (assoc merge-pages :block/children new-children)]+    (if (zero? roam-child-count)+      merge-pages+      final-page-with-children)))+++(defn get-shared-pages+  [roam-db]+  (->> (d/q '[:find [?pages ...]+              :in $athens $roam+              :where+              [$athens _ :node/title ?pages]+              [$roam _ :node/title ?pages]]+            @athens.db/dsdb+            roam-db)+       sort))+++(defn pages+  [roam-db]+  (->> (d/q '[:find [?pages ...]+              :in $+              :where+              [_ :node/title ?pages]]+            roam-db)+       sort))+++(defn gett+  [s x]+  (not ((set s) x)))+++(defn not-shared-pages+  [roam-db shared-pages]+  (->> (d/q '[:find [?pages ...]+              :in $ ?fn ?shared+              :where+              [_ :node/title ?pages]+              [(?fn ?shared ?pages)]]+            roam-db+            athens.events/gett+            shared-pages)+       sort))+++(defn update-roam-db-dates+  ""Strips the ordinal suffixes of Roam dates from block strings and dates.+  e.g. January 18th, 2021 -> January 18, 2021""+  [db]+  (let [date-pages         (d/q '[:find ?t ?u+                                  :keys node/title block/uid+                                  :in $ ?date+                                  :where+                                  [?e :node/title ?t]+                                  [(?date ?t)]+                                  [?e :block/uid ?u]]+                                db+                                athens.patterns/date-block-string)+        date-block-strings (d/q '[:find ?s ?u+                                  :keys block/string block/uid+                                  :in $ ?date+                                  :where+                                  [?e :block/string ?s]+                                  [(?date ?s)]+                                  [?e :block/uid ?u]]+                                db+                                athens.patterns/date-block-string)+        date-concat        (concat date-pages date-block-strings)+        tx-data            (map (fn [{:keys [block/string node/title block/uid]}]+                                  (cond-> {:db/id [:block/uid uid]}+                                          string (assoc :block/string (athens.patterns/replace-roam-date string))+                                          title (assoc :node/title (athens.patterns/replace-roam-date title))))+                                date-concat)]+    ;;tx-data))+    (d/db-with db tx-data)))++;;(/ 3736 3842) 97% clean+;;(-> (- 1056 2)+;;    (+ (- 3088 406))))+;;(defonce ROAM-DB (atom nil))"
https://api.github.com/repos/athensresearch/athens/pulls/627,573390397,"@@ -87,20 +96,23 @@          [:span {:style {:color ""gray""}}           [breadcrumbs-list {:style {:font-size ""1.2rem""}}            (doall-             (for [{:keys [node/title block/uid block/string]} parents]-               ^{:key uid}-               [breadcrumb {:key (str ""breadcrumb-"" uid) :on-click #(navigate-uid uid)}-                (or title string)]))]]+            (for [{:keys [node/title block/uid block/string]} parents]+              ^{:key uid}+              [breadcrumb {:key (str ""breadcrumb-"" uid) :on-click #(navigate-uid uid)}+               (or title string)]))]]"
https://api.github.com/repos/athensresearch/athens/pulls/635,575564444,"@@ -116,9 +116,9 @@                                                        (compare                                                          [(get-in new-items [k1 :index]) k2]                                                          [(get-in new-items [k2 :index]) k1]))) inc-items)]-               {:db (assoc db :right-sidebar/items sorted-items)-                :dispatch (when (false? (:right-sidebar/open db))-                            [:right-sidebar/toggle])})))+               (cond-> {:db (assoc db :right-sidebar/items sorted-items)}+                 (not (:right-sidebar/open db))+                 (assoc :dispatch [:right-sidebar/toggle])))))"
https://api.github.com/repos/athensresearch/athens/pulls/638,575888921,"@@ -338,6 +338,18 @@          :dispatch [:page/create title uid]}))))  +(reg-event-fx+  :daily-note/delete+  (fn [{:keys [db]} [_ uid]]+    (let [retract-blocks (db/retract-uid-recursively uid)+          tx-data        (if (db/e-by-av :block/uid uid)  ;; If a page for the Daily Note exists+                           retract-blocks                 ;; retract both the page and the child blocks+                           (rest retract-blocks))         ;; else, only retract the child blocks"
https://api.github.com/repos/athensresearch/athens/pulls/655,576610900,"@@ -6,13 +6,14 @@     [athens.coeffects]     [athens.config :as config]     [athens.effects]-    [athens.electron]+    ;;[athens.electron]     [athens.events]     [athens.listeners :as listeners]     [athens.router :as router]     [athens.style :as style]     [athens.subs]     [athens.views :as views]+    [athens.ws]"
https://api.github.com/repos/athensresearch/athens/pulls/656,577089330,"@@ -450,21 +450,36 @@       {:fx [[:dispatch [:transact tx-data]]]})))  +(reg-event-fx+  :page/reindex-left-sidebar+  (fn [_ _]+    {:doc ""This is used in the `left-sidebar` to smooth out duplicate `:page/sidebar` values when bookmarked. ""}"
https://api.github.com/repos/athensresearch/athens/pulls/665,578736425,"@@ -513,7 +557,7 @@   (fnext (drop-while #(not (pred %)) xs)))  -(d/listen! dsdb :history+#_(d/listen! dsdb :history"
https://api.github.com/repos/athensresearch/athens/pulls/674,579902398,"@@ -16,45 +21,79 @@                            :edit/time    (now-ts)}]])))  -(def components-  {#""\[\[TODO\]\]""        (fn [_ uid]-                            [:input {:type      ""checkbox""-                                     :checked   false-                                     :on-change #(todo-on-click uid #""\{\{\[\[TODO\]\]\}\}"" ""{{[[DONE]]}}"")}])-   #""\[\[DONE\]\]""        (fn [_ uid]-                            [:input {:type      ""checkbox""-                                     :checked   true-                                     :on-change #(todo-on-click uid #""\{\{\[\[DONE\]\]\}\}"" ""{{[[TODO]]}}"")}])-   #""\[\[youtube\]\]\:.*"" (fn [content _]-                            [:div.media-16-9-                             [:iframe {:src   (str ""https://www.youtube.com/embed/"" (get (re-find #"".*v=([a-zA-Z0-9_\-]+)"" content) 1))-                                       :allow ""accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture""}]])-   #""iframe\:.*""          (fn [content _]-                            [:div.media-16-9-                             [:iframe {:src (re-find #""http.*"" content)}]])-   #""SELF""                (fn [content _]-                            [:button {:style {:color       ""red""-                                              :font-family ""IBM Plex Mono""}}-                             content])-   #""embed: \(\((.*)\)\)"" (fn [content _]-                            (let [uid (second (re-find #""embed: \(\((.*)\)\)"" content))]-                              [:h5 uid]))})---(defn empty-component-  [content _]-  [:button content])---(defn render-component-  ""Renders a component using its parse tree & its uid.""+(defn span-click-stop+  []+  [:span {:on-click (fn [e]+                      (.. e stopPropagation))}])"
https://api.github.com/repos/athensresearch/athens/pulls/660,579981267,"@@ -527,8 +521,15 @@                                                        :menu/y    (.. rect -bottom)}))))                    :style    page-menu-toggle-style}            [:> mui-icons/MoreHoriz]]-          (:title/local @state)]-          ;;(parse-renderer/parse-and-render title uid)]+          (when-not timeline-page?+            [autosize/textarea+             {:value         (:title/local @state)+              :id            (str ""editable-uid-"" uid)+              :class         (when (= editing-uid uid) ""is-editing"")+              :on-blur       (fn [_] (handle-blur node state linked-refs))+              :on-key-down   (fn [e] (handle-key-down e uid state children))+              :on-change     (fn [e] (handle-change e state))}])+          [parse-renderer/parse-and-render (:title/local @state) uid]]"
https://api.github.com/repos/athensresearch/athens/pulls/803,592787868,"@@ -99,7 +99,7 @@                                        KeyCodes.BACKSLASH (if shift                                                             (dispatch [:right-sidebar/toggle])                                                             (dispatch [:left-sidebar/toggle]))-                                       KeyCodes.H (util/toggle-10x)+                                       KeyCodes.T (util/toggle-10x)"
https://api.github.com/repos/athensresearch/athens/pulls/808,593714091,"@@ -525,44 +525,24 @@ ;; history  (defonce history (atom []))-(def ^:const history-limit 10)---(defn drop-tail-  [xs pred]-  (loop [acc []-         xs  xs]-    (let [x (first xs)]-      (cond-        (nil? x) acc-        (pred x) (conj acc x)-        :else  (recur (conj acc x) (next xs))))))---(defn trim-head-  [xs n]-  (vec (drop (- (count xs) n) xs)))---(defn find-prev-  [xs pred]-  (last (take-while #(not (pred %)) xs)))---(defn find-next-  [xs pred]-  (fnext (drop-while #(not (pred %)) xs)))-+#_(def ^:const history-limit 10) +;; this gives us customization options+;; now if there is a pattern for a tx then the datoms can be+;; easily modified(mind the order of datoms) to add a custom undo/redo strategy+;; Not seeing a use case now, but there is an option to do it"
https://api.github.com/repos/athensresearch/athens/pulls/918,608909225,"@@ -24,3 +24,26 @@                           (linked old-title)                           (str ""$1$3$4"" new-title ""$2$5""))) +++;; Positive Lookbehind: between 1 and 2 digits+;; One of an oridinal suffix, e.g. -st, -nd, -rd, -th, see https://en.wikipedia.org/wiki/Ordinal_indicator"
https://api.github.com/repos/athensresearch/athens/pulls/930,610883055,"@@ -1,5 +1,5 @@ {:lein   true- :nrepl {:port 8777}+ :nrepl {:port 8778}"
https://api.github.com/repos/athensresearch/athens/pulls/957,616042640,"@@ -0,0 +1,19 @@+# 1. Record architecture decisions"
https://api.github.com/repos/athensresearch/athens/pulls/993,616334214,"@@ -38,6 +44,40 @@                      [:.MuiTabs-indicator {:background-color ""var(--link-color)""}]]})  +(def picker-style+  {:display         ""grid""+   :grid-auto-flow ""column""+   :grid-auto-columns ""1fr""+   :border-radius ""0.5rem""+   :flex ""0 0 auto""+   :font-size ""1em""+   :margin ""0.25rem 0""+   :align-self ""stretch""+   :overflow ""hidden""+   :transition ""box-shadow 0.2s ease, filter 0.2s ease;""+   :background (color :background-color)+   :padding ""1px""+   ::stylefy/manual [[:&:hover {}]+                     [:button {:text-align ""center""+                               :appearance ""none""+                               :border ""0""+                               :border-radius ""calc(0.5rem - 1px)""+                               :padding ""0.5rem 0.5rem""+                               :color ""inherit""+                               :display ""flex""+                               :justify-content ""center""+                               :align-items ""center""+                               :position ""relative""+                               :z-index ""0""+                               :background ""inherit""}+                      [:svg {:margin-inline-end ""0.25em"" :font-size ""1.25em""}]+                      [:&:hover {:filter ""contrast(105%)""}]"
https://api.github.com/repos/athensresearch/athens/pulls/1005,617814736,"@@ -34,7 +34,7 @@   []   (rf/clear-subscription-cache!)   (router/init-routes!)-  (r-dom/render [views/main-panel]+  (r-dom/render [views/view]"
https://api.github.com/repos/athensresearch/athens/pulls/1006,620855027,"@@ -323,6 +324,55 @@   ;; open or create a new starter db    ;; Watch filesystem, e.g. in case db is updated via Dropbox sync+  +  (def schemaTest+  {:schema/version {}+   :block/uid      {:db/unique :db.unique/identity}+   :node/title     {:db/unique :db.unique/identity}+   :attrs/lookup   {:db/cardinality :db.cardinality/many}+   :block/children {:db/cardinality :db.cardinality/many+                    :db/valueType :db.type/ref}+   :block/refs     {:db/cardinality :db.cardinality/many+                    :db/valueType :db.type/ref}}+  )+  +  ;; Create an empty Db for test +  (def test-db+    (-> (d/empty-db schemaTest))+  )"
https://api.github.com/repos/athensresearch/athens/pulls/1064,621727372,"@@ -91,6 +95,60 @@   [:hr (use-style separator-style)])  +(defn help-modal+  [open?]+  (let [close-modal         #(reset! open? false)]+    (fn []+      [:div (use-style modal-style)+       [modal/modal++        {:title    [:div.modal__title+                    [:> MergeType]+                    [:h4 ""Help Popup""]+                    [button {:on-click close-modal}+                     [:> Close]]]++        ;;  :content  [:div (use-style modal-contents-style)"
https://api.github.com/repos/athensresearch/athens/pulls/1074,622394702,"@@ -0,0 +1,86 @@+# 3. Self Hosted++Date: 2021-04-27++## Status++Proposed++## Context++We want to enable enterprise customers to self host Athens knowledge graph on premise.  +Uses should be able to collaborate on same graph, edit block & pages as well as see presence of other collaborators.++## Decision++We need a backend server that at least talks Datalog.++For 1st backend we've chosen Datahike, because it's closeness to Datascript that we already use.  "
https://api.github.com/repos/athensresearch/athens/pulls/1061,622466185,"@@ -92,12 +95,15 @@       (if (empty? @note-refs)         (dispatch [:daily-note/next (get-day)])         (let [notes (safe-pull-many @note-refs)]-          [:div#daily-notes (use-style daily-notes-scroll-area-style)-           (doall-             (for [{:keys [block/uid]} notes]-               ^{:key uid}-               [:<>-                [:div (use-style daily-notes-page-style)-                 [node-page/page [:block/uid uid]]]]))+          [:div (use-style daily-notes-scroll-area-style)+           ; When user scrolls to the bottom of the #daily-notes div, daily+           ; notes from more distant past are loaded.+           [:div#daily-notes+            (doall+              (for [{:keys [block/uid]} notes]+                ^{:key uid}+                [:<>+                 [:div (use-style daily-notes-page-style)+                  [node-page/page [:block/uid uid]]]]))]"
https://api.github.com/repos/athensresearch/athens/pulls/1120,628600698,"@@ -175,7 +176,7 @@  (defn init   []-  (stylefy/init)+  (stylefy/init {:dom (stylefy-reagent/init)})"
https://api.github.com/repos/athensresearch/athens/pulls/1142,630665039,"@@ -1,14 +1,62 @@ --- name: Bug Report-about: Report 🐞 Bugs-title: ''+about: Create a 🐞 Bug Report to Improve Athens+title: 'Descriptive Title with Category' labels: 'type: 🐞 bug' assignees: ''+ID number: ''+Category: ''  --- -**Problem**+**Before Beginning:**++- [ ] Read [Contribution Guidelines](https://app.gitbook.com/@athensresearch/s/handbook/~/drafts/-MZt8Vmd14cTrIp7xfV9/contributing-1/code-of-conduct/@archived) and [Code of Conduct](https://app.gitbook.com/@athensresearch/s/handbook/~/drafts/-MZt8Vmd14cTrIp7xfV9/contributing-1/code-of-conduct/@archived)++- [ ] Check for similar [issues](https://github.com/athensresearch/athens/issues)+- [ ]  Ask questions in [Discussions](https://github.com/athensresearch/athens/discussions)  *Bug reports ≠ questions!*+- [ ] Get help in [Discord](https://discord.com/channels/708122962422792194/708126131160875079/814921829902057492)++**Describe the Problem**++Summarize the *one* issue in 1-3 sentences using keywords. One bug per report!++**Steps to Reproduce**"
https://api.github.com/repos/athensresearch/athens/pulls/1126,633136285,"@@ -325,6 +325,46 @@   ;; open or create a new starter db    ;; Watch filesystem, e.g. in case db is updated via Dropbox sync+  +  ;; Update index.transit    +  (defn write-db-index [file filepath]+    (.. fs (writeFile filepath file (fn [e] (dispatch [:boot/desktop]))))+  )+  +  ;; Create new index.transit db+  (defn create-db-index [file filepath]+    (.. fs (writeFile filepath file (fn [e] (dispatch [:fs/open-dialog]))))+  ) +  +  (defn open-dialog-index+    ""Allow user to open a Backup file.""+    [filepath]+    (js/alert ""Your index.transit is corrupted, please open up a backup"")+    (let [res  (.showOpenDialogSync dialog (clj->js {:properties [""openFile""]+                                                     :filters    [{:name ""Transit"" :extensions [""bkp""]}]}))"
https://api.github.com/repos/athensresearch/athens/pulls/1152,633144046,"@@ -68,13 +70,60 @@                         [:td [:&:first-child {:box-shadow [[""-1rem 0 "" (color :background-minus-1 :opacity-med)]]}]]                         [:td [:&:last-child {:box-shadow [[""1rem 0 "" (color :background-minus-1 :opacity-med)]]}]]]]]                      [:td :th {:padding ""0.5rem""}]-                     [:th [:h5 {:opacity (:opacity-med OPACITIES)-                                :user-select ""none""}]-                      [:&.sortable-                       [:h5 {:cursor ""pointer""}-                        [:&:hover {:opacity 1}]]]-                      [:&.date {:text-align ""end""}]]]})+                     [:th {:opacity (:opacity-med OPACITIES)+                           :user-select ""none""}+                      [:&.sortable {:cursor ""pointer""}+                       [:.wrap-label {:display ""flex""+                                      :align-items ""center""}]+                       [:&.date+                        [:.wrap-label {:flex-direction ""row-reverse""}]]+                       [:&:hover {:opacity 1}]]]]}) +;;; Sort state and logic++(defn- get-sorted-by+  [db]+  (get db :all-pages/sorted-by :links-count))+++(rf/reg-sub+  :all-pages/sorted-by+  (fn [db _]+    (get-sorted-by db)))+++(rf/reg-sub+  :all-pages/sort-order-ascending?+  (fn [db _]+    (get db :all-pages/sort-order-ascending? false)))+++(def sort-fn+  {:title       (fn [x] (-> x :node/title lower-case))+   :links-count (fn [x] (count (:block/_refs x)))+   :modified    :edit/time+   :created     :create/time})+++(rf/reg-sub+  :all-pages/sorted+  :<- [:all-pages/sorted-by]+  :<- [:all-pages/sort-order-ascending?]"
https://api.github.com/repos/athensresearch/athens/pulls/1170,633149578,"@@ -0,0 +1,17 @@+(ns athens.common-events+  ""Event as Verbs executed on Knowledge Graph""+  (:require [clojure.string :as string]))++(defn paste-verbatim->tx [uid text start value]"
https://api.github.com/repos/athensresearch/athens/pulls/1146,633187378,"@@ -179,9 +165,28 @@                      :title ""Open Settings""                      :active   (= @route-name :settings)}              [:> Settings]]+             [button {:on-click #(dispatch [:modal/toggle])                      :title ""Choose Database""}-             [:> LibraryBooks]]+             [:div {:style {:display ""flex""}}"
https://api.github.com/repos/athensresearch/athens/pulls/1191,634333811,"@@ -417,17 +413,16 @@   ([query n ignore-dup]    (if (string/blank? query)      (vector)-     (let [results (->> (d/q '[:find [(pull ?node [:db/id :node/title :block/uid]) ...]-                               :in $ ?query-pattern ?query-                               :where-                               [?node :node/title ?title]-                               [(re-find ?query-pattern ?title)]-                               [(not= ?title ?query)]]                ;; ignore exact match to avoid duplicate-                             @dsdb-                             (re-case-insensitive query)-                             (when ignore-dup query))-                        (take n))]-       results))))+     (let [ignore-dup             (when ignore-dup query)+           case-insensitive-query (re-case-insensitive query)]+       (sequence+         (comp+           (filter #(re-find case-insensitive-query (:v %)))+           (filter #(not= (:v %) ignore-dup))+           (take n)+           (map #(:e %))+           (map #(d/entity @dsdb %)))+         (d/datoms @dsdb :aevt :node/title))))))"
https://api.github.com/repos/athensresearch/athens/pulls/1192,634416139,"@@ -100,12 +100,17 @@                                        KeyCodes.BACKSLASH (if shift                                                             (dispatch [:right-sidebar/toggle])                                                             (dispatch [:left-sidebar/toggle]))+"
https://api.github.com/repos/athensresearch/athens/pulls/1193,635033198,"@@ -98,6 +117,7 @@   (style/init)   (stylefy/tag ""body"" style/app-styles)   (listeners/init)+  (init-datalog-console)"
https://api.github.com/repos/athensresearch/athens/pulls/1194,635045846,"@@ -578,7 +578,10 @@       (= selection """") (let [new-str (str head key close-pair tail)                              new-idx (inc start)]                          (swap! state assoc :string/local new-str)-                         (set! (.-value target) new-str)+                         (.. js/document (execCommand"
https://api.github.com/repos/athensresearch/athens/pulls/1167,635796715,"@@ -266,13 +264,13 @@  (defn get-block-document   [id]-  (->> @(pull dsdb block-document-pull-vector id)+  (->> (d/pull @dsdb block-document-pull-vector id)"
https://api.github.com/repos/athensresearch/athens/pulls/1212,637527738,"@@ -40,6 +40,7 @@                                                    :nodeIntegration true                                                    :worldSafeExecuteJavaScript true                                                    :enableRemoteModule true+                                                   :enableBlinkFeatures 'OverlayScrollbars'"
https://api.github.com/repos/athensresearch/athens/pulls/1217,637538106,"@@ -55,10 +55,15 @@                                 :pointer-events ""none""                                 :border-radius ""0.25rem""                                 :transition ""opacity 0.075s ease""-                                :background (style/color :link-color :opacity-lower)-                                :box-shadow [[""0 0.25rem 0.5rem -0.25rem"" (style/color :background-color :opacity-med)]]}]+                                :background (style/color :link-color :opacity-lower)}]                      [:&.is-selected:after {:opacity 1}]-                     [:.block-body {:display ""flex""+                     [:.block-body {:display ""grid""+                                    :grid-template-columns ""1em 1em 1fr auto""+                                    :grid-template-rows ""0 1fr 0""+                                    :grid-template-areas ""+                                      'above above above above'+                                      'toggle bullet content refs'+                                      'below below below below'"""
https://api.github.com/repos/athensresearch/athens/pulls/1230,638155031,"@@ -325,6 +325,48 @@   ;; open or create a new starter db    ;; Watch filesystem, e.g. in case db is updated via Dropbox sync+  +    ;; Update index.transit    +  (defn write-db-index [file filepath]+    (.. fs (writeFile filepath file (fn [e] (dispatch [:boot/desktop]))))+  )+  +  ;; Create new index.transit db+  (defn create-db-index [file filepath]+    (.. fs (writeFile filepath file (fn [e] (dispatch [:fs/open-dialog]))))+  ) +  +  (defn open-dialog-index+    ""Allow user to open a Backup file.""+    [filepath]+    (js/alert ""Your index.transit is corrupted, please open up a backup"")+    (let [res  (.showOpenDialogSync dialog (clj->js {:properties [""openFile""]+                                                     :filters    [{:name ""Transit"" :extensions [""transit.bkp""]}]}))"
https://api.github.com/repos/athensresearch/athens/pulls/1229,639341943,"@@ -0,0 +1,196 @@+(ns athens.views.find-in-page+  (:require+    [clojure.string :as str]+    [re-frame.core :as rf :refer [subscribe dispatch]]))+++(def electron (js/require ""electron""))++(defonce !find-window-id (atom nil))++(defonce !main-window-id (atom nil))+++(defn window-id->window+  [window-id]+  (.. electron -remote -BrowserWindow (fromId window-id)))+++;; --------------------------------------------------------------------+;; ---- find fn ---+++(defn find-in-page!+  ([] (find-in-page! (:text @(subscribe [:find-in-page-info]))))+  ([text] (find-in-page! text false))+  ([text-to-search back?]+   (when (some-> text-to-search seq str/join)+     ;; todo(ark-recheck) not working with opts+     (let [opts (cond-> {:forward  true+                         :findNext false}++                  (= text-to-search+                     (:text @(subscribe [:find-in-page-info])))+                  (merge {:findNext true})++                  back? (merge {:forward false}))]++       (.. (window-id->window @!main-window-id)+           -webContents+           (findInPage text-to-search opts))))))+++;; --------------------------------------------------------------------+;; ---- subs---+++(rf/reg-sub+  :find-in-page-info+  (fn [db]+    (:find-in-page-info db)))+++;; --------------------------------------------------------------------+;; ---- evts ---+++(rf/reg-fx :find-in-page find-in-page!)+++(rf/reg-event-fx+  :set-find-in-page-text+  (fn [{:keys [db]} [_ text]]+    (if-let [text (some-> text seq str/join)]+      {:db           (assoc-in db [:find-in-page-info :text] text)+       :find-in-page text}+      {})))+++(rf/reg-event-fx+  :next-result+  (fn [_ _] (find-in-page!)))+++(rf/reg-fx+  :prev-result+  (fn []+    (find-in-page!+      (:text @(subscribe [:find-in-page-info])) true)))+++;; --------------------------------------------------------------------+;; ---- messages from find window ---+++(declare stop-find-in-page!)+++(defonce __ipc-listener-main__+  (.. electron -remote -ipcMain+      (on ""find-window->parent""+          (fn [_ msg]+            (let [[event & args] (js->clj msg)]+              (case (keyword event)+                :text (dispatch [:set-find-in-page-text (first args)])+                :close (stop-find-in-page!)+                :next (find-in-page!)++                :prev+                (find-in-page!+                  (:text @(subscribe [:find-in-page-info]))+                  true)))))))+++;; --------------------------------------------------------------------+;; ---- life cycle ---+++(defn send-msg-to-find-window!+  [& msg]+  (.. electron -ipcRenderer+      (send ""parent->find-window""+            (-> msg vec clj->js))))+++(defn get-find-win-pos+  ([] (get-find-win-pos+        (window-id->window @!main-window-id)))+  ([win]+   (let [[x y] (-> win (. getPosition) js->clj)]+     [(+ x 20)+      ;; + y 45(below toolbar) 25(title bar)+      (+ y 45 (when-not (. win isFullScreen) 25))])))"
https://api.github.com/repos/athensresearch/athens/pulls/1236,640631440,"@@ -269,7 +269,7 @@      [:block      [:paragraph-      [:span+      [:testRun        [:link {:target ""https://raw-link.com""                :text   ""https://raw-link.com""}]]]]     ""https://raw-link.com""))"
https://api.github.com/repos/athensresearch/athens/pulls/1256,642870986,"@@ -387,3 +405,16 @@     (let [right-sidebar (js/document.querySelector "".right-sidebar-content"")]       (when right-sidebar         (set! (.. right-sidebar -scrollTop) 0)))))+++(def unbind-global-keybindings (atom nil))+++(reg-fx+  :keybindings/bind!+  (fn []+    (when (not (nil? @unbind-global-keybindings))+      (@unbind-global-keybindings))+    (reset! unbind-global-keybindings+            (bind-changeable-global-keybindings))))"
https://api.github.com/repos/athensresearch/athens/pulls/1264,643610561,"@@ -1,6 +1,6 @@ (ns athens.views.blocks.drop-area-indicator   (:require-    [athens.style :as style :refer [OPACITIES]]+    [athens.style :refer [color OPACITIES]]"
https://api.github.com/repos/athensresearch/athens/pulls/1272,645576391,"@@ -316,11 +325,11 @@                                                           string (:block/string x)]]                                                 (if (nil? x)                                                   ^{:key i}-                                                  [:div (use-style result-style {:on-click (fn [_]-                                                                                             (let [uid (gen-block-uid)]-                                                                                               (dispatch [:athena/toggle])-                                                                                               (dispatch [:page/create query uid])-                                                                                               (navigate-uid uid)))+                                                  [:div (use-style result-style {:on-click #(let [uid (gen-block-uid)]+                                                                                              (dispatch [:athena/toggle])+                                                                                              (dispatch [:page/create query uid])+                                                                                               ;; TODO(agentydragon): Open the new page in sidebar if Shift is pressed"
https://api.github.com/repos/athensresearch/athens/pulls/1203,646041273,"@@ -24,7 +24,7 @@ block = (thematic-break /          fenced-code-block /          block-quote /          paragraph-text)*-thematic-break = #'[*_-]{3}'+thematic-break = #'(\\*{3}(?!\\w[^\n]*(?<!\\s)\\*{3}(?!\\w))|[_-]{3})'"
https://api.github.com/repos/athensresearch/athens/pulls/1287,646042994,"@@ -111,40 +111,43 @@  (defn filter-slash-options   [query]-  (if (blank? query)-    slash-options-    (filterv (fn [[text]]-               (re-find (re-pattern (str ""(?i)"" query)) text))-             slash-options)))-+  ((try+     (if (blank? query)+       slash-options+       #(filterv (fn [[text]]+                   (re-find (re-pattern (str ""(?i)"" query)) text))+                 slash-options))+     (catch js/Error _+       slash-options))))  (defn update-query   ""Used by backspace and write-char.   write-char appends key character. Pass empty string during backspace.   query-start is determined by doing a greedy regex find up to head.   Head goes up to the text caret position.""   [state head key type]-  (let [query-fn        (case type-                          :block db/search-in-block-content-                          :page db/search-in-node-title-                          :hashtag db/search-in-node-title-                          :slash filter-slash-options)-        regex           (case type-                          :block #""(?s).*\(\(""-                          :page #""(?s).*\[\[""-                          :hashtag #""(?s).*#""-                          :slash #""(?s).*/"")-        find            (re-find regex head)-        query-start-idx (count find)-        new-query       (str (subs head query-start-idx) key)-        results         (query-fn new-query)]-    (if (and (= type :slash) (empty? results))-      (swap! state assoc :search/type nil)-      (swap! state assoc-             :search/index 0-             :search/query new-query-             :search/results results))))-+  (try"
https://api.github.com/repos/athensresearch/athens/pulls/1209,647539699,"@@ -199,9 +201,177 @@     (fn [db _]       (:db/remote-graph db))) +  ;; ------- db -picker related implementation--------------------------------++  ;; Subs++  (reg-sub+    :db-picker/all-dbs+    (fn [db _]+      (:db-picker/all-dbs db)))++  ;; helper functions++  (defn get-db-name+    ""From a dbpath find out db name.+     Args : dbpath : type str+     e.g : /home/sid597/Desktop/athens db/test db/index.transit --> test db""+    [dbpath]+    (let  [split-path (clojure.string/split dbpath #""/"")]+      (nth  split-path (- (count split-path) 2))))"
https://api.github.com/repos/athensresearch/athens/pulls/1286,648671900,"@@ -0,0 +1,154 @@+(ns athens.views.appearance-settings.core"
https://api.github.com/repos/athensresearch/athens/pulls/1317,650392476,"@@ -274,76 +270,68 @@  (defn athena-component   []-  (let [ref                  (atom nil)-        handle-click-outside (fn [e]-                               (when (and @(subscribe [:athena/open])-                                          (not (.. @ref (contains (.. e -target)))))-                                 (dispatch [:athena/toggle])))]-    (r/create-class-      {:display-name           ""athena""-       :component-did-mount    (fn [_this] (events/listen js/document ""mousedown"" handle-click-outside))-       :component-will-unmount (fn [_this] (events/unlisten js/document ""mousedown"" handle-click-outside))-       :reagent-render         (fn []-                                 (let [open?          @(subscribe [:athena/open])-                                       s              (r/atom {:index   0-                                                               :query   nil-                                                               :results []})-                                       search-handler (create-search-handler s)]-                                   (when open?-                                     [:div.athena (use-style container-style-                                                             {:ref #(reset! ref %)})-                                      [:header {:style {:position ""relative""}}-                                       [:input (use-style athena-input-style-                                                          {:type        ""search""-                                                           :id          ""athena-input""-                                                           :auto-focus  true-                                                           :required    true-                                                           :placeholder ""Find or Create Page""-                                                           :on-change   (fn [e] (search-handler (.. e -target -value)))-                                                           :on-key-down (fn [e] (key-down-handler e s))})]-                                       [:button (use-style search-cancel-button-style-                                                           {:on-click #(set! (.-value (getElement ""athena-input"")))})-                                        [:> Close]]]-                                      [results-el s]-                                      [(fn []-                                         (let [{:keys [results query index]} @s]-                                           [:div (use-style results-list-style)-                                            (doall-                                              (for [[i x] (map-indexed list results)-                                                    :let [parent (:block/parent x)-                                                          title  (or (:node/title parent) (:node/title x))-                                                          uid    (or (:block/uid parent) (:block/uid x))-                                                          string (:block/string x)]]-                                                (if (nil? x)-                                                  ^{:key i}-                                                  [:div (use-style result-style {:on-click (fn [_]-                                                                                             (let [uid (gen-block-uid)]-                                                                                               (dispatch [:athena/toggle])-                                                                                               (dispatch [:page/create query uid])-                                                                                               ;; TODO(agentydragon): Open the new page in sidebar if Shift is pressed.-                                                                                               ;; (navigate-uid uid e) does not work, because the page does not exist yet.-                                                                                               (navigate-uid uid)))-                                                                                 :class    (when (= i index) ""selected"")})--                                                   [:div (use-style result-body-style)-                                                    [:h4.title (use-sub-style result-style :title)-                                                     [:b ""Create Page: ""]-                                                     query]]-                                                   [:span.link-leader (use-sub-style result-style :link-leader) [(r/adapt-react-class Create)]]]--                                                  [:div (use-style result-style {:key      i-                                                                                 :on-click (fn [e]-                                                                                             (let [selected-page {:node/title   title-                                                                                                                  :block/uid    uid-                                                                                                                  :block/string string-                                                                                                                  :query        query}]-                                                                                               (dispatch [:athena/toggle])-                                                                                               (dispatch [:athena/update-recent-items selected-page])-                                                                                               (navigate-uid uid e)))-                                                                                 :class    (when (= i index) ""selected"")})-                                                   [:div (use-style result-body-style)--                                                    [:h4.title (use-sub-style result-style :title) (highlight-match query title)]-                                                    (when string-                                                      [:span.preview (use-sub-style result-style :preview) (highlight-match query string)])]-                                                   [:span.link-leader (use-sub-style result-style :link-leader) [(r/adapt-react-class ArrowForward)]]])))]))]])))})))+  (let [s (r/atom {:index   0+                   :query   nil+                   :results []})]+    [:> Dialog+     {:fullWidth          true+      :maxWidth           ""md""+      :onClose            #(dispatch [:athena/toggle])+      :open               @(subscribe [:athena/open])+      :transitionDuration {:enter 0}}+     [:div.athena (use-style container-style)"
https://api.github.com/repos/athensresearch/athens/pulls/1364,653651961,"@@ -7,65 +7,91 @@  # Athens -Athens is a knowledge graph for research and notetaking. Athens is open-source, private, extensible, and community-driven.+Athens is an open-source, self-hosted app for research and notetaking. Outline your ideas, connect them with links and embedded content, and build a personal knowledge database without having to worry about organizing your thoughts. Athens makes your writing more useful over time by making it easy to find and learn from again.++Athens solves the [big problem](#problem) with information overload while _also_ being open-source, [private](#private), [extensible](#extensible), and [community-driven](#community-driven). We have a much larger [vision](https://athensresearch.gitbook.io/handbook/community/about/vision) for self-hosting, bi-directional links, collective knowledge, and learning in public.  # 🚀 [Download the free desktop app](https://github.com/athensresearch/athens/releases) 🚀 -**[Sponsor us on Open Collective](https://opencollective.com/athens) until we migrate to Stripe! We are building out a software service for individuals and teams and a [self-hosted/on-premise solution for enterprises](https://github.com/athensresearch/athens-backend).**+<details>+  <summary>Not sure if Athens is right for you?</summary>++  **[Demo Athens in your browser](https://athensresearch.github.io/athens)** to see how it works.++  > ⚠️ The demo doesn't work in Safari due to a limitation in the "
https://api.github.com/repos/athensresearch/athens/pulls/1378,661541283,"@@ -1,15 +1,21 @@ (ns athens.coeffects   (:require-    [re-frame.core :refer [reg-cofx]]))+    [re-frame.core :as rf]))  -(reg-cofx-  :local-storage+(rf/reg-cofx+  :local-storage/get   (fn [cofx key]-    (assoc cofx :local-storage (js/localStorage.getItem key))))+    (assoc cofx :local-storage (or+                                 (js/localStorage.getItem (str key))+                                 (js/localStorage.getItem key)))))  -(reg-cofx-  :local-storage-map-  (fn [cofx {:keys [ls-key key]}]-    (assoc cofx key (js/localStorage.getItem ls-key))))+(rf/reg-fx+  :local-storage/set"
https://api.github.com/repos/athensresearch/athens/pulls/1428,677508168,"@@ -1062,3 +1061,70 @@            (t/is (= 2 (-> target-parent-block :block/children count)))           (t/is (= 2 (count union-set))))))))++(t/deftest selected-delete-test+  ""Basic Case:+     Start with :+       -a+         -b+       -c+       -d+     End:+       -a+       -d""++  (t/testing ""Delete some blocks""+    (let [+          block-1-uid    ""block-1-uid""+          block-1-text   ""a""+          block-2-uid    ""block-2-uid""+          block-2-text   ""b""+          block-3-uid    ""block-3-uid""+          block-3-text   ""c""+          block-4-uid    ""block-4-uid""+          block-4-text   ""d""+          setup-txs         [{:db/id          -1"
https://api.github.com/repos/athensresearch/athens/pulls/1466,682379924,"@@ -153,6 +153,7 @@   [db {:event/keys [args]}]   (let [{:keys [parent-uid                 new-uid]} args+        ;; Why do we set :db/id here, should this not be handled db?         new-child         {:db/id        -1                            :block/uid    new-uid"
https://api.github.com/repos/athensresearch/athens/pulls/1472,684180712,"@@ -1607,6 +1609,21 @@                                         embed-id (str ""-embed-"" embed-id)) n]))]})))  +#_(reg-event-fx"
https://api.github.com/repos/athensresearch/athens/pulls/1482,687355722,"@@ -1313,4 +1313,49 @@                                      paste-tx-data                                      (when empty-block? [[:db/retractEntity [:block/uid uid]]]))]     (println ""resolver :datascript/paste tx-data is"" (pr-str tx-data))-    tx-data))\ No newline at end of file+    tx-data))+++(defmethod resolve-event-to-tx :datascript/backspace+  [db {:event/keys [args]}]+  (let [{:keys [uid value]} args+        root-embed?     #?(:cljs (= (some-> (str ""#editable-uid-"" uid)+                                            js/document.querySelector+                                            (.. (closest "".block-embed""))+                                            (. -firstChild)+                                            (.getAttribute ""data-uid""))+                                    uid)+                           :clj nil) ; TODO: failing in clj+        [uid]           (common-db/uid-and-embed-id uid)+        block           (common-db/get-block db [:block/uid uid])+        {:block/keys    [children order] :or {children []}} block+        parent          (common-db/get-parent db [:block/uid uid])+        reindex         (common-db/dec-after db (:db/id parent) (:block/order block))+        prev-block-uid  (common-db/prev-block-uid db uid)+        prev-block      (common-db/get-block db [:block/uid prev-block-uid])+        prev-sib-order  (dec (:block/order block))+        prev-sib        (d/q '[:find ?sib .+                               :in $ % ?target-uid ?prev-sib-order+                               :where+                               (siblings ?target-uid ?sib)+                               [?sib :block/order ?prev-sib-order]+                               [?sib :block/uid ?uid]+                               [?sib :block/children ?ch]]+                             db common-db/rules uid prev-sib-order)+        prev-sib       (when-not (nil? prev-sib) (common-db/get-block db prev-sib)) ; TODO: check if there's a way for common-db/get-block to accept nil+        retract-block  [:db/retractEntity (:db/id block)]+        new-parent     {:db/id (:db/id parent) :block/children reindex}]+    (cond+      (not parent) nil+      root-embed? nil ; NOTE: when the last block in an embedded block is empty+      (and (empty? children) (:node/title parent) (zero? order) (clojure.string/blank? value)) (let [tx-data [retract-block new-parent]]+                                                                                                 tx-data) ;; NOTE: when backspacing on the remaining empty block+      (and (not-empty children) (not-empty (:block/children prev-sib))) nil ;; NOTE: prev sib has child/children+      (and (not-empty children) (= parent prev-block)) nil ; NOTE: when backspacing at the very top block but it has child/children"
https://api.github.com/repos/athensresearch/athens/pulls/1486,688643013,"@@ -9,3 +9,25 @@ athens.patterns/date athens.util/common-ancestor athens.events/pages athens.views.blocks.core/block-component+athens.self-hosted.web.presence/next-id"
https://api.github.com/repos/athensresearch/athens/pulls/1513,690358987,"@@ -1544,14 +1544,14 @@  (reg-event-fx   :block/open-  (fn [_ [_ {:keys [block-uid open-block?] :as args}]]+  (fn [_ [_ {:keys [block-uid open?] :as args}]]"
https://api.github.com/repos/athensresearch/athens/pulls/1559,691421108,"@@ -126,7 +126,7 @@ jobs:     deploy-gh-pages:      needs: [test, lint, style, carve]-     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')+     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && github.ref == 'refs/heads/master'"
https://api.github.com/repos/athensresearch/athens/pulls/1565,692787323,"@@ -193,9 +194,13 @@           {:keys [page-uid                   block-uid]} (:event/args event)]       (js/console.log "":remote/followup-page-create, page-uid"" page-uid)-      {:fx [[:dispatch-n [(if shift?+      {:fx [[:dispatch-n [(cond+                            shift?                             [:right-sidebar/open-item page-uid]++                            (not (util/is-daily-note page-uid))                             [:navigate :page {:id page-uid}])+"
https://api.github.com/repos/athensresearch/athens/pulls/1568,693361656,"@@ -24,17 +23,12 @@    :transition ""all 0.05s ease""    :height ""2em""    :width ""1em""+   :display ""flex""+   :align-items ""center""+   :justify-content ""center""    :color (style/color :body-text-color :opacity-low)-   ::stylefy/manual [[:&:after {:content ""''""-                                :background ""currentColor""-                                :transition ""color 0.05s ease, opacity 0.05s ease, box-shadow 0.05s ease, transform 0.05s ease""-                                :border-radius ""100px""-                                :box-shadow ""0 0 0 0.125rem transparent""-                                :display ""inline-flex""-                                :margin ""50% 0 0 50%""-                                :transform ""translate(-50%, -50%)""-                                :height ""0.3125em""-                                :width ""0.3125em""}]+   ::stylefy/manual [[:circle {:fill ""currentColor""+                               :transition ""color 0.05s ease, opacity 0.05s ease, box-shadow 0.05s ease, transform 0.05s ease""}]"
https://api.github.com/repos/athensresearch/athens/pulls/1564,693864625,"@@ -1,13 +1,13 @@ (ns athens.devcards.right-sidebar   (:require-    [athens.views.buttons :refer [button]]+    [""/components/Button/Button"" :refer [Button]]     [athens.views.right-sidebar :as right-sidebar]     [devcards.core :refer [defcard-rg]]     [re-frame.core :refer [dispatch]]))   (defcard-rg Toggle-  [button {:primary true :on-click-fn #(dispatch [:right-sidebar/toggle])} ""Toggle""])+  [:> Button {:isPrimary true :on-click-fn #(dispatch [:right-sidebar/toggle])} ""Toggle""])"
https://api.github.com/repos/athensresearch/athens/pulls/1572,694848555,"@@ -383,55 +345,38 @@   (defn select-down-  [selected-items]+  [selected-items next-block-uid]   (let [editing-uid @(subscribe [:editing/uid])         editing-idx (first (keep-indexed (fn [idx x]                                            (when (= x editing-uid)                                              idx))                                          selected-items))-        [_ f-embed]          (->> selected-items first db/uid-and-embed-id)-        last-item            (last selected-items)-        next-block-uid       (db/next-block-uid last-item true)]+        [_ f-embed] (->> selected-items first db/uid-and-embed-id)]     (cond       (pos? editing-idx) (subvec selected-items 1)-       ;; shift down started from inside the embed should not go outside embed block       f-embed            (let [sel-uid (str (-> next-block-uid db/uid-and-embed-id first) ""-embed-"" f-embed)]                            (if (js/document.querySelector (str ""#editable-uid-"" sel-uid))                              (conj selected-items sel-uid)                              selected-items)) -      next-block-uid     (conj selected-items next-block-uid)-      :else              selected-items)))+      next-block-uid (conj selected-items next-block-uid)+      :else          selected-items)))   ;; using a set or a hash map, we would need a secondary editing/uid to maintain the head/tail position ;; this would let us know if the operation is additive or subtractive (reg-event-db   :selected/down   (fn [db [_ selected-items]]-    (assoc-in db [:selection :items] (select-down selected-items))))+    (let [last-item         (last selected-items)+          next-block-uid    (db/next-block-uid last-item true)+          ordered-selection (-> (into [] selected-items)+                                (into [next-block-uid]))]"
https://api.github.com/repos/athensresearch/athens/pulls/1587,694978817,"@@ -0,0 +1,83 @@+# 5. RTC deployment"
https://api.github.com/repos/athensresearch/athens/pulls/1526,695222985,"@@ -177,14 +177,20 @@   - `parent-uid`: `:block/uid` of parent block   - `new-uid`  : new child's block uid   - `add-time?`: Should `:edit/time` for this block be transacted""-  [last-tx parent-uid new-uid add-time?]-  (let [event-id (gen-event-id)]-    {:event/id      event-id-     :event/last-tx last-tx-     :event/type    :datascript/add-child-     :event/args    {:parent-uid parent-uid-                     :new-uid    new-uid-                     :add-time?  add-time?}}))+  ([last-tx parent-uid new-uid] (let [event-id (gen-event-id)]+                                  {:event/id      event-id+                                   :event/last-tx last-tx+                                   :event/type    :datascript/add-child+                                   :event/args    {:parent-uid parent-uid+                                                   :new-uid    new-uid+                                                   :add-time?  false?}}))"
https://api.github.com/repos/athensresearch/athens/pulls/1592,696306307,"@@ -0,0 +1,27 @@+# A base liningen container with java+FROM ardoq/leiningen:jdk11-2.9.4-jdk++# Install git+RUN apt-get update && apt-get install -y git++# clone the repo+RUN git clone https://github.com/athensresearch/athens.git++# Set athens as the working directory+WORKDIR /athens/++# checkout RTC branch+RUN git checkout feature/rtc-v1++# make jar file+RUN lein uberjar++# Environment Variables++# Expose ports+EXPOSE 3010   # TODO This should be set via environment variable++# serve jar file+CMD [""java"", ""-jar"", ""target/athens-lan-party-standalone.jar""]"
https://api.github.com/repos/athensresearch/athens/pulls/1601,697842350,"@@ -51,6 +51,9 @@ (defn view   []   (let [route-name (rf/subscribe [:current-route/name])]+    ;; TODO: create a UI to inform the player of the connection status+    (when (= @(rf/subscribe [:connection-status]) :reconnecting)+      (rf/dispatch [:alert/js ""Oops! Connection Lost. Reconnecting...""]))"
https://api.github.com/repos/athensresearch/athens/pulls/1567,699914809,"@@ -0,0 +1,266 @@+# 10. Atomic/Composite Grapth Operations++Date: 2021-08-18++## Status++Draft++Supercedes [7. Lan-Party Datascript Events](0007-lan-party-datascript-events.md)++## Context++We've made an effort to support remote execution of Semantic Events.++These events where direct port of `events.cljs` which where mostly informed by UI concerns.++Result is that we have a lot of different events that are doing same atomic operations over and over,+but are not really reusing these Atomic Ops.++Implementing `:block/save` that sometimes is just updating `:block/string` and other times also needs to `:page/create`.+`:paste` event is another that will be super hard to implement w/o Atomic Graph Operations.+++## Decision++We have two kinds of events to modify graph:+- ⚛️ Atomic Graph Ops+    - Not divisible Graph Ops+    - Operations like create new block, create page, save block+- ⎄ Composite Graph Ops+    - Collection of events to be executed on the graph+    - Like `:block/save` when new link is discovered, should produce also `:page/create` event"
https://api.github.com/repos/athensresearch/athens/pulls/1606,700145264,"@@ -13,8 +13,11 @@    (start     [component]-    (log/info ""Starting configuration component"")-    (assoc component :config (cfg/reload-env)))+    (let [config        (cfg/reload-env)+          merged-config (cfg/merge-maps config (:config-edn config))]+      (log/info ""Starting configuration component"")+      (log/info merged-config)"
https://api.github.com/repos/athensresearch/athens/pulls/1595,701023289,"@@ -30,8 +30,8 @@    :color (style/color :body-text-color :opacity-low)    ::stylefy/manual [[:svg {:transform ""scale(1.001)"" ; Prevents the bullet being squished                             :overflow ""visible"" ; Prevents the stroke from being cropped-                            :width ""0.25em""-                            :height ""0.25em""}]+                            :width ""0.5em""+                            :height ""0.5em""}]"
https://api.github.com/repos/athensresearch/athens/pulls/1615,701768977,"@@ -298,3 +302,41 @@ jobs:            prerelease: true            draft: true ++   push-to-registry:+     runs-on: ubuntu-20.04+     needs: [test, lint, style, carve]+     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && github.ref == 'refs/heads/main'"
https://api.github.com/repos/babashka/babashka/pulls/409,426564840,"@@ -0,0 +1,42 @@+(ns babashka.postgresql-test+  (:require [babashka.test-utils :as tu]+            [clojure.test :as t :refer [deftest is]])+  (:import [com.opentable.db.postgres.embedded EmbeddedPostgres]))++(def db {:dbtype ""embedded-postgres""+         :port 54322})++(defmethod clojure.test/report :begin-test-var [m]+  (println ""==="" (-> m :var meta :name))+  (println))++(defn jdbc-feature-flag? []+  (= (System/getenv ""BABASHKA_FEATURE_JDBC"") ""true""))++(defn pg-feature-flag? []+  (= (System/getenv ""BABASHKA_FEATURE_POSTGRESQL"") ""true""))++(println jdbc-feature-flag? pg-feature-flag?)"
https://api.github.com/repos/babashka/babashka/pulls/443,428564331,"@@ -0,0 +1,76 @@+#!/usr/bin/env bb++;; NOTE+;; +;; For more information on the current scene on support for+;; particular GraalVM versions, look here: https://www.graalvm.org/downloads/+;; +;; There are 4 CE(Community Editions) being supported by GraalVM+;; GraalVM Community Edition 20.1.0 based on OpenJDK 8u252+;; GraalVM Community Edition 20.1.0 based on OpenJDK 11.0.7+;; GraalVM Community Edition 19.3.2 based on OpenJDK 8u252+;; GraalVM Community Edition 19.3.2 based on OpenJDK 11.0.7+;; +;; Currently we use GraalVM java8-19.3.2++(ns bump-graal-version+  (:require [clojure.java.shell :as shell]+            [clojure.string :as str]))++(defn display-help []+  (println (->> [""""+                 ""This is a script that should be run when you'd""+                 ""you'd like to bump the GraalVM version for bb.""+                 """"+                 ""Use it by providing one command line argument""+                 ""i.e the version you'd want to upgrade it to""+                 """"+                 ""./bump_graal_version.clj 19.3.2 (the new version)""+                 """"]+                (str/join \newline))))++(def files-to-edit+  ["".github/workflows/build.yml""+   "".circleci/config.yml""+   ""appveyor.yml""])++(def current-version ""19.3.2"")++(def valid-bumps [""19.3.2"", ""20.1.0""])++(defn is-valid-bump?+  [version]+  (some #(= % version) valid-bumps))++(defn run-shell+  [sed-instr file]+  ;; the empty string is added after -i so that+  ;; a backup file isn't generated.+  ;; this is issue specific to macOS+  (shell/sh ""sed"" ""-i"" """" ""-e"" sed-instr file))"
https://api.github.com/repos/babashka/babashka/pulls/470,439316361,"@@ -0,0 +1,39 @@+(ns clojure.data.generators-test+  (:require [clojure.data.generators :as gen]+            [clojure.test :refer (deftest is)]))++;; REVIEW needed to add these vars. Missing in Babashka?+(def ^:dynamic *print-length* nil)"
https://api.github.com/repos/babashka/babashka/pulls/505,453167793,"@@ -21,7 +22,8 @@                  [cheshire ""5.10.0""]                  [fipp ""0.6.22""]                  [nrepl/bencode ""1.1.0""]-                 [borkdude/sci.impl.reflector ""0.0.1-java11""]]+                 [borkdude/sci.impl.reflector ""0.0.1-java11""]+                 [com.datomic/client-pro ""0.9.57""]]"
https://api.github.com/repos/babashka/babashka/pulls/526,468898470,"@@ -0,0 +1,46 @@+(ns babashka.impl.datafy+  {:no-doc true}+  (:refer-clojure :exclude [create-ns])+  (:require [clojure.core.protocols :as p]+            [clojure.datafy :as datafy]+            [clojure.reflect]+            [sci.core :refer [create-ns copy-var]]+            [sci.impl.namespaces :refer [sci-ns-name sci-ns-publics sci-ns-imports sci-ns-interns]]+            [sci.impl.vars]+            [babashka.impl.common :refer [ctx]])+  (:import [sci.impl.vars SciNamespace]))++(defn- sortmap [m]+  (into (sorted-map) m))++;; Overrides for what is defined in clojure.datafy+(extend-protocol p/Datafiable+  clojure.lang.Namespace+  (datafy [n]+    ;; Override this with the default Object implementation. It bloats bb with 30mb and memory usage of GraalVM will peak!+    #_(with-meta {:name (.getName n)+                  :publics (-> n ns-publics sortmap)+                  :imports (-> n ns-imports sortmap)+                  :interns (-> n ns-interns sortmap)}+        (meta n))+    n)+  java.lang.Class+  (datafy [c]+    ;; Statically use clojure.reflect instead of leaning on requiring-resolve+    (let [{:keys [members] :as ret} (clojure.reflect/reflect c)]+      (assoc ret :name (-> c .getName symbol) :members (->> members (group-by :name) sortmap)))))++(extend-protocol p/Datafiable+  SciNamespace+  (datafy [n]+    (with-meta {:name (sci-ns-name n)+                :publics (->> n (sci-ns-publics @ctx) sortmap)+                :imports (->> n (sci-ns-imports @ctx) sortmap)+                :interns (->> n (sci-ns-interns @ctx) sortmap)}+      (meta n))))++(def datafy-ns (create-ns 'clojure.data nil))"
https://api.github.com/repos/babashka/babashka/pulls/672,541612994,"@@ -20,6 +21,13 @@         clj-commons/clj-yaml {:mvn/version ""0.7.2""}         com.cognitect/transit-clj {:mvn/version ""1.0.324""}         nrepl/bencode {:mvn/version ""1.1.0""}+        ring/ring-core {:mvn/version ""1.8.1""}+        ring/ring-defaults {:mvn/version ""0.3.2""}+        ring-webjars {:mvn/version""0.2.0""}+        metosin/reitit {:mvn/version ""0.5.5""}+        metosin/muuntaja {:mvn/version ""0.6.7""}+        metosin/ring-http-response {:mvn/version ""0.9.1""}+        selmer {:mvn/version ""1.12.29""}}"
https://api.github.com/repos/babashka/babashka/pulls/755,593760205,"@@ -8,22 +8,45 @@   (or (get methods k)       (throw (UnsupportedOperationException. ""Method not implemented: "" k)))) -(defn proxy-fn [{:keys [:class :methods]}]+(defn method-or [methods k default]+  (or (get methods k)+      default))++(defn proxy-fn [{:keys [class methods]}]   (case (.getName ^Class class)     ""clojure.lang.APersistentMap""-    (proxy [clojure.lang.APersistentMap] []+    (proxy [clojure.lang.APersistentMap clojure.lang.IMeta clojure.lang.IObj] []       (iterator [] ((method-or-bust methods 'iterator) this))       (containsKey [k] ((method-or-bust methods 'containsKey) this k))       (entryAt [k] ((method-or-bust methods 'entryAt) this k))       (valAt         ([k] ((method-or-bust methods 'valAt) this k))         ([k default] ((method-or-bust methods 'valAt) this k default)))-      (cons [v] ((method-or-bust methods 'cons) this v))+      (cons [v]+        (if-let [m (get methods 'cons)]+          (m this v)+          (proxy-super cons v)))       (count [] ((method-or-bust methods 'count) this))       (assoc [k v] ((method-or-bust methods 'assoc) this k v))       (without [k] ((method-or-bust methods 'without) this k))-      (seq [] ((method-or-bust methods 'seq) this)))+      (seq [] ((method-or-bust methods 'seq) this))++      (equiv [other]+        (if-let [m (get methods 'equiv)]+          (m this other)+          (proxy-super equiv other)))+      (empty [] ((method-or-bust methods 'empty) this))++      (meta [] ((method-or methods 'meta nil) this))"
https://api.github.com/repos/babashka/babashka/pulls/828,628943327,"@@ -1,12 +1,13 @@ FROM clojure:lein-2.9.1 AS BASE +ENV DEBIAN_FRONTEND=noninteractive RUN apt update-RUN apt install --no-install-recommends -yy curl unzip build-essential zlib1g-dev+RUN apt install --no-install-recommends -yy curl unzip build-essential zlib1g-dev sudo WORKDIR ""/opt"" RUN curl -sLO https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.0.0/graalvm-ce-java11-linux-amd64-21.0.0.tar.gz RUN tar -xzf graalvm-ce-java11-linux-amd64-21.0.0.tar.gz -ARG BABASHKA_XMX=""-J-Xmx3g""+ARG BABASHKA_XMX=""-J-Xmx4500m"""
https://api.github.com/repos/babashka/babashka/pulls/832,629501489,"@@ -863,6 +863,25 @@ Use bb run --help to show this help output.   (let [opts (parse-opts args)]     (exec opts))) +(def static?+  ""Captured at compile time, to know if we are running inside a+  statically compiled executable.""+  (System/getenv ""BABASHKA_STATIC""))++(defmacro run [args]+  (if static?+    ;; When running in musl-compiled static executable we lift execution of bb+    ;; inside a thread, so we have a larger than default stack size, set by an+    ;; argument to the linker. See https://github.com/oracle/graal/issues/3398+    `(let [v# (volatile! nil)+           f# (fn []+                (vreset! v# (apply main ~args)))]+       (doto (Thread. nil f# ""main"")"
https://api.github.com/repos/babashka/babashka/pulls/842,632720138,"@@ -25,14 +33,10 @@ if [[ $# -eq 1 ]]; then    install_dir=${1:-} fi -while [[ $# -gt 1 ]]+while [[ $# -gt 0 ]] do     key=""$1""-    if [[ -z ""${2:-}"" ]]; then-        print_help-    fi"
https://api.github.com/repos/babashka/babashka/pulls/846,632889314,"@@ -1,7 +1,10 @@ (ns babashka.impl.clojure.java.browse   {:no-doc true}   (:require [clojure.java.shell :refer [sh]]-            [clojure.string :as str]))+            [clojure.string :as str]+            [sci.core :as sci]))++(def open-url-script (sci/new-dynamic-var '*open-url-script* (atom nil)))"
https://api.github.com/repos/babashka/babashka/pulls/867,638430875,"@@ -47,16 +47,10 @@ arch=${BABASHKA_ARCH:-""x86_64""} echo ""ARCH: $arch""  cd ""zlib-${ZLIB_VERSION}""-CC=musl-gcc ./configure --static --prefix=/usr/lib/$arch-linux-musl/+CC=musl-gcc ./configure --static --prefix=""/usr/local"" make CC=musl-gcc-sudo make install"
https://api.github.com/repos/babashka/babashka/pulls/870,641602606,"@@ -7,9 +7,15 @@ checksum="""" static_binary=""false"" default_install_dir=""/usr/local/bin"" install_dir=""$default_install_dir""-default_download_dir=${TMPDIR:-""/tmp""}+default_download_dir=""$(mktemp -d)"""
https://api.github.com/repos/babashka/babashka/pulls/898,654842519,"@@ -11,16 +11,32 @@ set PATH=%GRAALVM_HOME%\bin;%PATH% set BABASHKA_PRELOADS= set BABASHKA_CLASSPATH= set BABASHKA_PRELOADS_TEST=+set BABASHKA_CLASSPATH_TEST=+set BABASHKA_POD_TEST=+set BABASHKA_SOCKET_REPL_TEST=  echo ""running tests part 1""-call lein do clean, test :windows+call lein do clean, test :windows || exit /B 1  set BABASHKA_PRELOADS=(defn __bb__foo [] ""foo"") (defn __bb__bar [] ""bar"") set BABASHKA_PRELOADS_TEST=true echo ""running tests part 2""-call lein test :only babashka.main-test/preloads-test+call lein test :only babashka.main-test/preloads-test || exit /B 1  set BABASHKA_PRELOADS=(defn ithrow [] (/ 1 0)) set BABASHKA_PRELOADS_TEST=true echo ""running tests part 3""-call lein test :only babashka.main-test/preloads-file-location-test+call lein test :only babashka.main-test/preloads-file-location-test || exit /B 1++set BABASHKA_PRELOADS=(require '[env-ns])+set BABASHKA_CLASSPATH_TEST=true+set BABASHKA_CLASSPATH=test-resources/babashka/src_for_classpath_test/env"
https://api.github.com/repos/babashka/babashka/pulls/987,698068610,"@@ -38,34 +40,77 @@      (log/infof ""Hello %s"" 123)       (timbre/swap-config! assoc-in [:appenders :spit] (timbre/spit-appender {:fname ""/tmp/timbre.log""}))-     (log/infof ""Hello %s"" 123)))--(deftest logging-test-  (let [res (tu/bb nil (pr-str program))]-    (is (= 17 (count (re-seq #""\[dude:.\]"" res))))-    (is (= 6 (count (re-seq #""DEBUG"" res))))-    (is (= 11 (count (re-seq #""INFO"" res)))))-  (testing ""println appender works with with-out-str""-    (let [res (tu/bb-               nil-               (pr-str '(do-                          (require '[taoensso.timbre :as timbre]-                                   '[clojure.string :as str])-                          (str/includes? (with-out-str (timbre/info ""hello"")) ""hello""))))-          res (edn/read-string res)]-      (is (true? res))))-  (testing ""spit-appender""-    (let [temp-file (-> (fs/create-temp-dir)-                        (fs/file ""log.txt""))-          program (pr-str '(do+     (log/infof ""Hello %s"" 123)+     (timbre/swap-config! (constantly old-config))))++(when features/logging?+  (deftest logging-test+    (let [res (tu/bb nil (pr-str program))]+      (is (= 17 (count (re-seq #""\[dude:.\]"" res))))+      (is (= 6 (count (re-seq #""DEBUG"" res))))+      (is (= 11 (count (re-seq #""INFO"" res)))))+    (testing ""println appender works with with-out-str""+      (let [res (tu/bb+                  nil+                  (pr-str '(do                              (require '[taoensso.timbre :as timbre]-                                      '[clojure.string :as str])-                             (def appender (timbre/spit-appender {:fname :fname-placeholder}))-                             (timbre/swap-config! assoc-in [:appenders :spit] appender)-                             (str/includes? (with-out-str (timbre/info ""hello"")) ""hello"")))-          program (str/replace program "":fname-placeholder"" (pr-str (.getPath temp-file)))-          _ (tu/bb-               nil-               program)-          res (slurp temp-file)]-      (is (str/includes? res ""hello"")))))+                               '[clojure.string :as str])+                             (str/includes? (with-out-str (timbre/info ""hello"")) ""hello""))))+            res (edn/read-string res)]+        (is (true? res))))+    (testing ""spit-appender""+      (let [temp-file (-> (fs/create-temp-dir)+                        (fs/file ""log.txt""))+            program   (pr-str '(do+                                 (require '[taoensso.timbre :as timbre]+                                   '[clojure.string :as str])+                                 (def appender (timbre/spit-appender {:fname :fname-placeholder}))+                                 (def old-config timbre/*config*)+                                 (timbre/swap-config! assoc-in [:appenders :spit] appender)+                                 (str/includes? (with-out-str (timbre/info ""hello"")) ""hello"")+                                 (timbre/swap-config! (constantly old-config))))+            program   (str/replace program "":fname-placeholder"" (pr-str (.getPath temp-file)))+            _         (tu/bb+                        nil+                        program)+            res       (slurp temp-file)]+        (is (str/includes? res ""hello""))))))++(def readable-prog+  '(do+  (ns readble-test)+  (require '[clojure.tools.logging.readable :as logr])+  (require '[taoensso.timbre :as timbre])++  (defn test-fn+    []+    (logr/trace (ex-info ""trace exception"" {}))+    (logr/debugf ""%s"" {""abc"" 123 ""def"" 789})+    (logr/info (list \a \b))+    (logr/warnf ""%s"" ""test warn"")+    (let [g (logr/spyf ""%s"" (apply str (interpose "","" [""abc"" ""def"" ""ghi""])))]+      (println g)))++  (println ""before setting anything"")+  (test-fn)++  (println ""with print-readably set to nil (overridden by log macros)"")+  (binding [*print-readably* nil]+    (test-fn))++  (println ""setting log level"")+  (timbre/set-level! :warn)+  (test-fn)+  (timbre/set-level! :debug)))++(when features/logging?"
https://api.github.com/repos/babashka/babashka/pulls/1005,705709097,"@@ -7,7 +7,7 @@ jobs:   jvm:     docker:       # specify the version you desire here-      - image: circleci/clojure:lein-2.9.1+      - image: clojure:openjdk-11-lein-2.9.6-bullseye"
https://api.github.com/repos/babashka/babashka/pulls/1099,768406540,"@@ -28,13 +36,13 @@ jobs:           name: Install Clojure           command: |             sudo script/install-clojure-      - run:-          name: Run JVM tests-          command: |-            export BABASHKA_FEATURE_JDBC=true-            export BABASHKA_FEATURE_POSTGRESQL=true-            script/test-            script/run_lib_tests+      # - run:"
https://api.github.com/repos/babashka/babashka/pulls/1112,772915108,"@@ -81,12 +81,19 @@ Test the native version: ## Tests for Libraries  Babashka runs tests of libraries that are compatible with it through-`script/run_lib_tests`. To add tests for a new library, do the following:+`script/run_lib_tests`. To add tests for a new library that has a git repository+and run them, use the script `add-libtest.clj` e.g. `script/add-libtest.clj+'{listora/again {:mvn/version ""1.0.0""}}' https://github.com/liwp/again --test`.++If the library you want to add doesn't work with the script, you can manually do the following:  * Add an entry for the library in `deps.edn` under the `:lib-tests` alias. * Create a directory for the library in `test-resources/lib_tests/` and copy its tests to there. * Add an entry in `run_all_libtests.clj` to run the added test namespaces.+* Run the tests `script/lib_tests/run_all_libtests NS1 NS2` +Note: If you have to modify a test to have it work with bb, add an inline"
https://api.github.com/repos/babashka/babashka/pulls/1138,782709631,"@@ -12,17 +12,20 @@ clj-commons/clj-yaml,https://github.com/clj-commons/clj-yaml clj-commons/multigrep,https://github.com/clj-commons/multigrep clojure-csv/clojure-csv,https://github.com/davidsantiago/clojure-csv clojure-term-colors/clojure-term-colors,https://github.com/trhura/clojure-term-colors+com.exoscale/lingo,https://github.com/exoscale/lingo com.github.seancorfield/honeysql,https://github.com/seancorfield/honeysql com.grammarly/omniconf,https://github.com/grammarly/omniconf com.stuartsierra/component,https://github.com/stuartsierra/component com.stuartsierra/dependency,https://github.com/stuartsierra/dependency+com.wsscode/cljc-misc,https://github.com/wilkerlucio/cljc-misc"
https://api.github.com/repos/babashka/babashka/pulls/1139,782942658,"@@ -73,5 +73,6 @@ RUN ./script/compile FROM ubuntu:latest RUN apt-get update && apt-get install -y curl \         && mkdir -p /usr/local/bin+COPY --from=BASE /opt/target/metabom.jar /opt/babashka-metabom.jar"
https://api.github.com/repos/babashka/babashka/pulls/1141,784245696,"@@ -44,9 +44,9 @@ if [ -z ""$CIRCLE_PULL_REQUEST"" ] && [ ""$CIRCLE_BRANCH"" = ""master"" ]; then     done      # alpine doesn't provide upstream arm64 images yet-    if [[ $platform == ""linux-amd64"" ]]; then+    if [[ $platform =~ linux/amd64 ]]; then"
https://api.github.com/repos/babashka/babashka/pulls/1142,784338909,"@@ -45,14 +45,12 @@ if [ -z ""$CIRCLE_PULL_REQUEST"" ] && [ ""$CIRCLE_BRANCH"" = ""master"" ]; then      # build alpine image for linux-amd64 only (no upstream arm64 support yet)     tar zxvf  ""/tmp/release/babashka-${image_tag}-linux-amd64-static.tar.gz""-    docker buildx build -t ""$image_name:alpine"" --platform=linux/amd64 ""${label_args[@]}"" -f Dockerfile.alpine .+    echo ""Building & pushing Docker image $image_name:$image_tag-alpine""+    docker buildx build -t ""$image_name:$image_tag-alpine"" --platform=linux/amd64 ""${label_args[@]}"" --push -f Dockerfile.alpine ."
https://api.github.com/repos/babashka/babashka/pulls/1171,803238369,"@@ -78,7 +78,8 @@   (let [lib-dir (if branch                   (gl/procure git-url lib-name branch)                   (or (gl/procure git-url lib-name ""master"")-                      (gl/procure git-url lib-name ""main"")))+                      (gl/procure git-url lib-name ""main"")+                      (throw (ex-info ""Unable to clone git-url"" {}))))"
https://api.github.com/repos/babashka/babashka/pulls/1205,830469268,"@@ -737,7 +737,9 @@ Use bb run --help to show this help output.             _ (when jar                 (cp/add-classpath jar))             load-fn (fn [{:keys [:namespace :reload]}]-                      (or (when-let [{:keys [:loader]}+                      (or (when-let [pod (-> @common/ctx :env deref :pod-namespaces (get namespace))]"
https://api.github.com/repos/babashka/babashka/pulls/1217,833727991,"@@ -920,11 +920,15 @@ Use bb run --help to show this help output.             (spit uberscript-out expression :append true)))         (when uberjar           (if-let [cp (cp/get-classpath)]-            (uberjar/run {:dest uberjar-                          :jar :uber-                          :classpath cp-                          :main-class main-                          :verbose debug})+            (do+              (fs/copy (:file @common/bb-edn) ""resources/bb.edn"")"
https://api.github.com/repos/babashka/babashka/pulls/1239,850424759,"@@ -11,6 +11,14 @@ commands:           command: |             docker run --privileged --rm tonistiigi/binfmt --install all             docker buildx create --name ci-builder --use+  bootstrap:"
https://api.github.com/repos/babashka/babashka/pulls/1297,900508794,"@@ -354,6 +354,13 @@ Use bb run --help to show this help output.        'clojure.tools.cli tools-cli-namespace        'clojure.java.shell shell-namespace        'babashka.core bbcore/core-namespace+       'babashka.nrepl.server (let [ns-sci (sci/create-ns 'babashka.nrepl.server)]+                                {'start-server! (sci/new-var 'start-server!+                                                             (fn [opts]+                                                               (nrepl-server/start-server! @common/ctx opts))+                                                             {:ns ns-sci})+                                 'stop-server! (sci/copy-var nrepl-server/stop-server! ns-sci)+                                 'parse-opt (sci/copy-var nrepl-server/parse-opt ns-sci)})"
https://api.github.com/repos/babashka/babashka/pulls/1366,976251905,"@@ -286,23 +286,51 @@ Check out the [news](doc/news.md) page to keep track of babashka-related news it  Go [here](https://book.babashka.org/#built-in-namespaces) to see the full list of built-in namespaces. +### Flair"
https://api.github.com/repos/babashka/babashka/pulls/1378,982408546,"@@ -1049,7 +1049,8 @@ Use bb run --help to show this help output.        (catch java.lang.RuntimeException e          (if (re-find #""No dispatch macro for: \"""" (.getMessage e))            (throw (ex-info ""Invalid regex literal found in EDN config, use re-pattern instead"" {}))-           (throw e)))))+           (do (println ""Error during loading bb.edn:"")"
https://api.github.com/repos/babashka/babashka/pulls/1379,985283225,"@@ -458,6 +471,7 @@           java.util.zip.ZipFile           sun.misc.Signal           sun.misc.SignalHandler+          sun.util.calendar.ZoneInfo"
https://api.github.com/repos/babashka/babashka/pulls/1388,991364383,"@@ -59,9 +59,8 @@ anywhere on the path. Then you're ready to go:  ``` shellsession-$ ls | bb -i '(filter #(-> % io/file .isDirectory) *input*)'-(""doc"" ""resources"" ""sci"" ""script"" ""src"" ""target"" ""test"")-bb took 4ms.+# Unsetting environment variables that begin with 'BABASHKA'"
https://api.github.com/repos/babashka/babashka/pulls/1390,993524793,"@@ -61,19 +62,36 @@  (def path-sep (System/getProperty ""path.separator"")) +(defn classpath-entries [^String classpath]+  (let [parts (.split classpath path-sep)]+    (keep part->entry parts)))+ (defn loader [^String classpath]-  (let [parts (.split classpath path-sep)-        entries (keep part->entry parts)]-    (Loader. entries)))--(defn source-for-namespace [loader namespace opts]-  (let [ns-str (name namespace)-        ^String ns-str (munge ns-str)-        ;; do NOT pick the platform specific file separator here, since that doesn't work for searching in .jar files-        ;; (io/file ""foo"" ""bar/baz"") does work on Windows, despite the forward slash-        base-path (.replace ns-str ""."" ""/"")-        resource-paths (mapv #(str base-path %) ["".bb"" "".clj"" "".cljc""])]-    (getResource loader resource-paths opts)))+    (Loader. (classpath-entries classpath)))++(declare get-classpath)++(defn source-for-namespace+  ([namespace opts]+   (some-> (get-classpath) loader (source-for-namespace namespace opts)))+  ([loader namespace opts]+   (let [ns-str (name namespace)+         ^String ns-str (munge ns-str)+         ;; do NOT pick the platform specific file separator here, since that doesn't work for searching in .jar files+         ;; (io/file ""foo"" ""bar/baz"") does work on Windows, despite the forward slash+         base-path (.replace ns-str ""."" ""/"")+         manifest-paths (loop [ns (str/split ns-str #""\."")+                               paths []]+                          (let [path (str/join ""/"" (conj ns ""pod-manifest.edn""))"
https://api.github.com/repos/babashka/babashka/pulls/1478,1089177858,"@@ -89,8 +89,12 @@                             ""-Sdeps-file"" """") ;; we reset deps file so the local deps.edn isn't used                  args (if force (cons ""-Sforce"" args) args)                  args (concat args [(str ""-A:"" (str/join "":"" (cons "":org.babashka/defaults"" aliases)))])-                 cp (with-out-str (binding [deps/*env* env-                                            deps/*extra-env* extra-env]+                 deps-root (:deps-root @bb-edn)"
https://api.github.com/repos/babashka/babashka/pulls/1499,1111295602,"@@ -180,8 +187,8 @@ java -jar \""$jar\"" --config .build/bb.edn --deps-root . release-artifact \""$refl   (let [docker-executor-conf  {:docker [{:image ""circleci/clojure:openjdk-11-lein-2.9.8-bullseye""}]}         machine-executor-conf {:machine {:image ""ubuntu-2004:202111-01""}}         mac-executor-conf     {:macos {:xcode ""14.0.0""}}-        linux-graalvm-home    ""/home/circleci/graalvm-ce-java19-22.3.0""-        mac-graalvm-home      ""/Users/distiller/graalvm-ce-java19-22.3.0/Contents/Home""]+        linux-graalvm-home    ""/home/circleci/graalvm-ce-java11-22.3.0"""
https://api.github.com/repos/babashka/babashka/pulls/1503,1117908466,"@@ -780,6 +780,14 @@ Use bb run --help to show this help output.       env-os-name-present? (not= env-os-name sys-os-name)       env-os-arch-present? (not= env-os-arch sys-os-arch)))) +(defn file-write-allowed?"
https://api.github.com/repos/babashka/babashka/pulls/1519,1133147369,"@@ -342,7 +341,7 @@   [m]   (report    (case-       (:type m)+    (:type m)"
https://api.github.com/repos/babashka/babashka/pulls/1558,1193033540,"@@ -182,7 +182,12 @@                             `java.util.ResourceBundle                             {:methods [{:name ""getBundle""                                         :parameterTypes [""java.lang.String"",""java.util.Locale"",-                                                         ""java.lang.ClassLoader""]}]})))+                                                         ""java.lang.ClassLoader""]}]})+    features/graal? (assoc `org.graalvm.nativeimage.ProcessProperties+                           {:methods [{:name ""exec""+                                       :parameterTypes [""java.nio.file.Path"""
https://api.github.com/repos/babashka/babashka/pulls/1582,1245096284,"@@ -98,7 +98,8 @@                     :feature/logging                     :feature/priority-map                     :feature/rrb-vector-                    {:dependencies [[com.clojure-goes-fast/clj-async-profiler ""0.5.0""]+                    {:dependencies [[borkdude/rewrite-edn ""0.4.6""]+                                    [com.clojure-goes-fast/clj-async-profiler ""0.5.0""]"
https://api.github.com/repos/babashka/babashka/pulls/1624,1336456677,"@@ -55,7 +56,7 @@ build_script: # see https://github.com/quarkusio/quarkus/pull/7663  - cmd: >--    call ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat""+    call ""C:\Program Files (x86)\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"""
https://api.github.com/repos/babashka/sci/pulls/159,347504206,"@@ -1,7 +1,9 @@ (ns sci.impl.namespaces   {:no-doc true}-  (:require [clojure.string :as str]-            [clojure.set :as set]))+  (:refer-clojure :exclude [ex-message])"
https://api.github.com/repos/babashka/sci/pulls/264,378527066,"@@ -57,7 +58,8 @@                            :read-cond :allow                            :features features                            :auto-resolve auto-resolve-                           :syntax-quote {:resolve-symbol #(fully-qualify ctx %)})+                           :syntax-quote {:resolve-symbol #(fully-qualify ctx %)}+                           :tools.reader/opts {:readers readers})"
https://api.github.com/repos/babashka/sci/pulls/313,415145295,"@@ -286,6 +286,74 @@ the atom yourself as the value for the `:env` key: (sci/eval-string ""(foo)"" {:env env}) ;;=> :foo ``` +### Dynamic Code Evaluation++Sci supports implementation of dynamic code loading via a function+hook that is invoked by sci's internal implementation of+`require`. The job of this function is to find and return the source+code for the requested namespace. This passed-in function will be+called with a single argument that is a hashmap with a key+`:namespace`. The value for this key will be the _symbol_ of the+requested namespace.++This function can return a hashmap with the keys `:file` (containing+the filename to be used in error messages) and `:source` (containing+the source code text) and sci will evaluate that source code to+satisfy the require. Alternatively the function can return `nil` which+will result in sci throwing an exception that the namespace can not be+found.++This custom function is passed into the sci context under the+`:load-fn` key as shown below.++``` clojure+(defn load-fn [{:keys [namespace]}]+  (when (= namespace 'foo)+    {:file ""my-foo-file.clj""+     :source ""(ns foo) (def val :foo)""}))+(sci/eval-string ""(require '[foo :as fu]) fu/val"" {:load-fn load-fn})+;;=> :foo+```++Note that internally specified namespaces (either those within sci+itself or those mounted under the `:namespaces` context setting) will+be utilised first and load-fn will not be called in those cases:"
https://api.github.com/repos/babashka/sci/pulls/380,471022209,"@@ -866,6 +866,7 @@    're-pattern (copy-core-var re-pattern)    #?@(:clj ['re-matcher (copy-core-var re-matcher)])    're-matches (copy-core-var re-matches)+   #?@(:clj ['realized? (copy-core-var realized?)])"
https://api.github.com/repos/babashka/sci/pulls/532,577136950,"@@ -242,10 +251,14 @@         single-arity? (= 1 (count fn-bodies))         f (if single-arity?             (fun ctx interpret (first fn-bodies) fn-name macro? false)-            (let [arities (map #(fun ctx interpret % fn-name macro? true) fn-bodies)]+            (let [arities (map #(fun ctx interpret % fn-name macro? true) fn-bodies)"
https://api.github.com/repos/babashka/sci/pulls/540,587855028,"@@ -10,16 +10,17 @@   (getVal [_this] v))  (defprotocol IReified-  (getInterface [_])+  (getInterfaces [_])   (getMethods [_])) -(deftype Reified [interface meths]+(deftype Reified [interfaces meths]   IReified-  (getInterface [_] interface)+  (getInterfaces [_] interfaces)   (getMethods [_] meths))  (defn type-impl [x & _xs]-  (or (when (instance? sci.impl.types.Reified x)+  (or (when #?(:clj (instance? sci.impl.types.IReified x)+               :cljs (clojure.core/satisfies? IReified x))"
https://api.github.com/repos/babashka/sci/pulls/606,692537844,"@@ -312,6 +312,50 @@ user=> (sci/eval-string ""(with-out-str (foo))"" {:bindings {'foo wrapped-foo}}) ""yello!\n"" ``` +**Important note:** despite what was said [above](#usage), forms evaluated by sci that produce+side effects via bindings (e.g. `println`) **can**, in some cases, ""escape"" the evaluation+context of `sci/eval-string`. Specifically if those side-effecty functions are invoked outside+`sci/eval-string` due to later realisation of a lazy sequence returned from it.  For example,+the following code does not work:++````clojure"
https://api.github.com/repos/babashka/sci/pulls/698,826165517,"@@ -303,7 +303,7 @@             (let [m (:meta var)]               (assoc ns-map var-name                      (new-var (symbol var-name) (:val var)"
https://api.github.com/repos/babashka/sci/pulls/754,882023855,"@@ -1,5 +1,45 @@ (ns sci.lang-  {:no-doc true})+  {:no-doc true}+  (:require [sci.impl.types]+            [clojure.string :as str]))  ;; marker interface for vars, clj only for now #?(:clj (definterface IVar))++(defn- class-name [s]+  (if-let [i (str/last-index-of s ""."")]+    (subs s (inc i))+    s))++(defn- package-name [s]+  (if-let [i (str/last-index-of s ""."")]+    (subs s 0 i)+    s))++(deftype SciType [^:volatile-mutable+                  #_:clj-kondo/ignore+                  __data]+  sci.impl.types.IBox+  (getVal [_] __data)+  (setVal [_ v] (set! __data v))+  Object+  (toString [_]+    (str (:sci.impl/type-name __data)))+  #?@(:clj"
https://api.github.com/repos/babashka/sci/pulls/784,928497000,"@@ -177,14 +176,34 @@                              (map #(process-single fq %) fn-body))                            :else fn-body)]          (if default-method?-           `(defmethod ~fq-              :default-              ~@fn-body)+           #?(:clj+              `(defmethod ~fq+                :default+                ~@fn-body)+              :cljs+              `(do+                 (defmethod ~fq+                   :default+                   ~@fn-body)+                 (defmethod ~fq+                   ~type+                   ~@fn-body)))"
https://api.github.com/repos/babashka/sci/pulls/786,933856573,"@@ -213,7 +217,7 @@                       `(do                          (clojure.core/alter-var-root                           (var ~protocol-name) update :satisfies (fnil conj #{})-                          (symbol (str ~type)))+                          (symbol (~'type->str ~type)))"
https://api.github.com/repos/babashka/sci/pulls/792,950902276,"@@ -495,7 +495,9 @@                  iden->invoke-idx (:iden->invoke-idx ctx)                  iden->invoke-idx (assoc iden->invoke-idx new-iden idx)                  ctx (assoc ctx :iden->invoke-idx iden->invoke-idx)]-             [(update ctx :bindings assoc binding-name new-iden)+             [(update ctx :bindings #(-> %"
https://api.github.com/repos/babashka/sci/pulls/810,986922761,"@@ -1581,6 +1581,11 @@ (deftest api-resolve-test   (is (= 2 ((sci/resolve (sci/init {}) 'clojure.core/inc) 1)))) +(deftest print-namespace-maps-var-test"
https://api.github.com/repos/babashka/sci/pulls/901,1335169854,"@@ -206,13 +207,45 @@ To create a dynamic SCI var you can set metadata or use `sci/new-dynamic-var`: (sci/eval-string ""(binding [*x* 12] (inc *x*))"" {:namespaces {'user {'*x* x2}}}) ;;=> 13 ``` -SCI vars can be bound from Clojure using `sci/binding`:+These dynamic SCI vars can be bound from Clojure using `sci/binding`:  ``` clojure (def x (sci/new-dynamic-var 'x 10)) (sci/binding [x 11] (sci/eval-string ""(inc *x*)"" {:namespaces {'user {'*x* x}}})) ;;=> 11 ``` +Notice that you cannot set _host_ dynamic variables _from your SCI scripts_ - `binding` will only work+on dynamic variables you defined in the script itself, or on SCI dynamic variables exposed from Clojure.+This applies also to :sci/macros (which expand into more code in the scripts). There workaround is to+only bind them from Clojure, i.e. from functions exposed to and _called by_ your scripts:++``` clojure+(def ^:dynamic *x* 1)+(defn with-x [x-val f] (binding [*x* x-val] (f)))+(defn get-x [] *x*)+(def userns (sci/create-ns 'user))+(sci/eval-string ""(with-x 42 #(get-x))""+                 {:namespaces {'user {'with-x (sci/copy-var with-x userns)+                                      'get-x (sci/copy-var get-x userns)}}})+;;=> 42+```++If you want to be bind the value from your script, then you can expose a SCI dynamic var to it,+and bind its value to the host dynamic var in Clojure:++```clj+(def ^:dynamic *x* 1)+(def userns (sci/create-ns 'user))+(def sci-x (sci/new-dynamic-var '*x* *x* {:ns userns}))+(defn get-x [] (binding [*x* @sci-x] *x*)) ; bind SCI dyn var value to host var"
https://api.github.com/repos/bhauman/devcards/pulls/30,37191451,"@@ -1,3 +1,5 @@+.idea+*.iml"
https://api.github.com/repos/bhauman/devcards/pulls/31,37261151,"@@ -6,14 +6,14 @@  (defcard some-typical-nested-edn   {:first (range 50)-   :sets  (set   (range 1000 1100))-   :vector  (vec (range 1000 1100))   -   :second (take 6 (repeat {:name ""Bruce""+   :sets (set (range 1000 1100))+   :vector (vec (range 1000 1100))+   :second (take 6 (repeat {:first-name ""Bruce""                             :last-name ""Hauman""                             :date (js/Date.)-                            :children (take 6 (repeat {:name ""Bruce""+                            :children (take 6 (repeat {:first-name ""Bruce""                                                        :last-name ""Hauman""                                                        :date (js/Date.)-                                                       :children (take 6 (repeat {:name ""Bruce""-                                                       :last-name ""Hauman""-                                                       :date (js/Date.)}))}))}))})+                                                       :children (take 6 (repeat {:first-name ""Bruce""+                                                                                  :last-name ""Hauman"""
https://api.github.com/repos/bhauman/devcards/pulls/85,49093183,"@@ -59,7 +59,8 @@    :repl { :plugins [[cider/cider-nrepl ""0.10.0-SNAPSHOT""]]            :repl-options {:init (set! *print-length* 500)}}                 :dev {-      :dependencies [[org.omcljs/om ""0.9.0""]+      :dependencies [;[org.omcljs/om ""0.9.0""]"
https://api.github.com/repos/bhauman/lein-figwheel/pulls/390,64273529,"@@ -56,16 +56,20 @@         (catch Exception e#           (do             (.printStackTrace e#)-           (System/exit 1))))+            (System/exit 1))))      requires)))  (defn run-compiler [project {:keys [all-builds build-ids] :as autobuild-opts}]-  (run-local-project-   project all-builds-   '(require 'figwheel-sidecar.repl-api)-   `(do-      (figwheel-sidecar.repl-api/system-asserts)-      (figwheel-sidecar.repl-api/start-figwheel-from-lein '~autobuild-opts))))+  (if (empty? all-builds)"
https://api.github.com/repos/bhauman/lein-figwheel/pulls/476,80551763,"@@ -83,7 +83,10 @@                        (first (string/split x #""\?"")))))        stack-trace)) -(defrecord FigwheelEnv [figwheel-server]+(defrecord FigwheelEnv [figwheel-server repl-opts]+  cljs.repl/IReplEnvOptions"
https://api.github.com/repos/bhauman/lein-figwheel/pulls/483,84207698,"@@ -2,7 +2,9 @@   (:require    [figwheel-sidecar.utils :as utils]    [figwheel-sidecar.config :refer [on-stamp-change]]-   [clojure.java.io :as io]))+   [clojure.java.io :as io])+  (:import+   [java.io File]))"
https://api.github.com/repos/bhauman/lein-figwheel/pulls/517,99123430,"@@ -396,22 +410,34 @@    (fuzzy-config-from-project project)    {:no-start-option true})) +(defn add-checkouts [fuzzy-config project]+  (let [checkout-paths (checkout-source-paths project)]+    (update-in+      fuzzy-config+      [:cljsbuild :builds]+      (fn [builds]+        (map (fn [build]+               (update build :source-paths concat checkout-paths))+             builds)))))+ (defn build-once [project build-ids]   (when-not (report-if-bad-build-ids project build-ids)     (run-build-once      project      (fuzzy-config-from-project project)      (source-paths-for-classpath-      (normalize-data project build-ids))+      (normalize-data project build-ids)+      project)      (vec build-ids))))  (defn figwheel-main [project build-ids]   (when-not (report-if-bad-build-ids project build-ids)     (run-figwheel      project-     (fuzzy-config-from-project project)+     (-> project fuzzy-config-from-project (add-checkouts project))      (source-paths-for-classpath-      (normalize-data project build-ids))+      (normalize-data project build-ids)+      project)"
https://api.github.com/repos/bhauman/lein-figwheel/pulls/537,105571016,"@@ -12,7 +12,9 @@ (defn cljs-target-file-from-foreign [output-dir file-path]   (first (filter #(.exists %)                  ;; try the projected location-                 [(io/file output-dir (utils/relativize-local file-path))+                 [(if-not (.isAbsolute (io/file file-path))"
https://api.github.com/repos/bhauman/lein-figwheel/pulls/577,127881854,"@@ -130,7 +131,13 @@                    channel-id msg-data callback))   (-connection-data [this]     (server/-connection-data (:figwheel-server @system)))-  (-actual [this] (:figwheel-server @system)))+  (-actual [this] (:figwheel-server @system))+  Suspendable+  (suspend [c] c)+  (resume [c old-c]"
https://api.github.com/repos/bhauman/lein-figwheel/pulls/659,171728629,"@@ -120,7 +120,8 @@  (defonce local-persistent-config   (let [a (atom {})]-    (when (feature? js/localStorage ""setItem"")+    (when (and (html-env?)"
https://api.github.com/repos/bhauman/lein-figwheel/pulls/667,173692875,"@@ -152,25 +158,95 @@                        trace                        ""</pre>"")})))))) -(defn handle-index [handler root]+(defn checksum-file+  ""Generated from Pandect""+  ;; TODO: full attribution^^+  [^File file]+  (with-open [is (io/input-stream file)]+    (let [buffer-size (int 2048)+          ba (byte-array buffer-size)+          adler-32 (new Adler32)]+      (loop []+        (let [num-bytes-read (.read is ba 0 buffer-size)]+          (when-not (= num-bytes-read -1)+            (.update adler-32 ba 0 num-bytes-read)+            (recur))))+      (.getValue adler-32))))++(defn supports-extended-attributes?+  ""Not all filesystems suport Java's UserDefinedFileAttributes (a.k.a. extended attributes),+  notably HFS+ and APFS on macOS.++  Waiting for https://bugs.openjdk.java.net/browse/JDK-8030048 to add macOS support.""+  [^Path path]+  (.supportsFileAttributeView+    (Files/getFileStore path)+    ^Class UserDefinedFileAttributeView))++(defn ^UserDefinedFileAttributeView get-user-defined-attribute-view [path]+  (Files/getFileAttributeView+    path+    UserDefinedFileAttributeView+    (into-array LinkOption [])))++(def checksum-attribute-name ""user.figwheel.checksum"")++(defn get-attribute [path attribute]+  (try+    (let [view (get-user-defined-attribute-view path)+          name attribute+          size (.size view name)+          attr-buf (ByteBuffer/allocate size)]+      (.read view name attr-buf)+      (.flip attr-buf)+      (str (.decode (Charset/defaultCharset) attr-buf)))+    (catch NoSuchFileException e+      ;; TODO: check up on this+      nil)))++;; TODO: check if setting an attribute updates file modified time, that would+;; mess things up.+(defn set-attribute [path attribute ^String value]+  (let [view (get-user-defined-attribute-view (.toPath file))]+    (.write view attribute (.encode (Charset/defaultCharset) value))))++(defn add-file-etag+  ""Adds an etag for a Ring response which contains a File as the body.""+  [response extended-attributes?]+  (let [file (:body response)]+    ;; Check if this is a file?+    (if (instance? File file)+      (let [path (.toPath file)]+        (if extended-attributes?+          (if-let [checksum (get-attribute path checksum-attribute-name)]+            (response/header response ""ETag"" checksum)+            (let [checksum (checksum-file file)]+              (set-attribute path checksum-attribute-name checksum)+              (response/header response ""ETag"" checksum)))+          (response/header response ""ETag"" (checksum-file file))))+      response)))++(defn handle-index [handler root extended-attributes?]   (fn [request]     (if (= [:get ""/""] ((juxt :request-method :uri) request))-      (if-let [resp (some-> (resource-response ""index.html"" {:root (or root ""public"")+      (if-let [resp (some-> (resource-response ""index.html"" {:root root"
https://api.github.com/repos/binaryage/cljs-devtools/pulls/66,783790535,"@@ -85,33 +85,45 @@ ;; get the first item in the vector which is the path. (defn mapping?   [history obj]-  (let [obj-kw (when (and (vector? obj)-                          (= (count obj) 2)-                          ;; the map keys must always be one of these-                          (or-                            (-> obj first keyword?)-                            (-> obj first string?)-                            (-> obj first number?)))-                 (first obj))]-    (when (and (map? history) obj-kw)-      (contains? history obj-kw))))+  (let [first-kw (when (and (vector? obj)+                            (map? history))+                   (nth obj 0 nil))+        valid-kw? (and first-kw+                       (or (keyword? first-kw)+                           (string? first-kw)+                           (number? first-kw))+                       ;; intentionally delaying realizing the whole vector+                       (= (count obj) 2))]+    (when valid-kw?+      (contains? history first-kw))))++(defn ignore-path-in-fake-vector+  [history obj path]+  ;; if the current item we are looping at is an artificial vector (explained at `mapping` above),+  ;; don't append to the path+  (when (mapping? history obj)+    (or path [])))++(defn find-path-in-fake-vector+  [history path]+  (let [second-last-history (get-second-last-object-from-current-history)]+    ;; if the previous item is an artificial vector, lets append to the path info but take the first item+    ;; in the artificial vector as the path. (Explained in `mapping` above)+    (when (mapping? second-last-history history)+      (conj (or path []) (nth history 0 nil)))))++(defn find-path+  [history obj path]+  (let [path-segment (build-path-segment history obj)]+    (when (some? path-segment)+      (conj (or path []) path-segment))))  (defn extend-path-info [path-info object]   (let [parent-object (get-last-object-from-current-history)]-    (cond-      ;; if the current item we are looping at is an artificial vector (explained at `mapping` above),-      ;; dont append to the path-      (and (map? parent-object) (mapping? parent-object object))-      path-info-      ;; if the previous item is an artificial vector, lets append to the path info but take the first item-      ;; in the vector as the path. (Explained in `mapping` above)-      (and (map? (get-second-last-object-from-current-history))"
https://api.github.com/repos/binaryage/cljs-devtools/pulls/72,1083541153,"@@ -14,7 +14,8 @@  (defn ^:dynamic available? []   (or (in-node-context?)                                                                                                      ; node.js or Chrome 47+-      (and (isChrome) (isVersionOrHigher 47))))+      (and (isAtLeast ""CHROMIUM"" 47))+	  (and (isAtLeast ""FIREFOX"" 110))))"
https://api.github.com/repos/boot-clj/boot/pulls/228,32382564,"@@ -103,7 +103,6 @@             (core/empty-dir! tmp)             (util/info ""Checking out %s...\n"" path)             (pod/unpack-jar (.getPath file) tmp-              :cache false"
https://api.github.com/repos/boot-clj/boot/pulls/274,37310288,"@@ -35,21 +35,11 @@         (->> sym ns-aliases (into base) (mapcat pubs)))       (filter task?) (sort-by :name) (group-by :ns*) (into (sorted-map))))) -(defn read-pass-  [prompt]-  (String/valueOf (.readPassword (System/console) prompt nil)))-"
https://api.github.com/repos/boot-clj/boot/pulls/311,42324219,"@@ -59,13 +64,82 @@           :password        password           :non-proxy-hosts (get-non-proxy-hosts)})))) +(defn ^{:boot/from :technomancy/leiningen} boot-home"
https://api.github.com/repos/boot-clj/boot/pulls/380,49194243,"@@ -16,4 +16,5 @@   :dependencies [[org.clojure/clojure      ""1.6.0""  :scope ""compile""]                  [boot/base                ~version :scope ""provided""]                  [boot/pod                 ~version :scope ""compile""]-                 [com.cemerick/pomegranate ""0.3.0""  :scope ""compile""]])+                 [com.cemerick/pomegranate ""0.3.0""  :scope ""compile""]+                 [org.apache.maven.wagon/wagon-http ""2.9""]])"
https://api.github.com/repos/boot-clj/boot/pulls/381,49198519,"@@ -305,3 +305,22 @@   [env coord & [mapping]]   (pod/add-dependencies (assoc env :dependencies [coord]))   (load-wagon-mappings mapping))++(defn ^{:boot/from :technomancy/leiningen} load-certificates!+  ""Load the SSL certificates specified by the project and register them for use by Aether.""+  [certificates]+  (when (seq certificates)+    ;; lazy-loading might give a launch speed boost here+    (require 'boot.ssl)+    (let [make-context (resolve 'boot.ssl/make-sslcontext)+          read-certs (resolve 'boot.ssl/read-certs)+          default-certs (resolve 'boot.ssl/default-trusted-certs)+          override-wagon-registry! (resolve 'boot.ssl/override-wagon-registry!)+          https-registry (resolve 'boot.ssl/https-registry)+          certs (mapcat read-certs certificates)+          context (make-context (into (default-certs) certs))]+      (override-wagon-registry! (https-registry context)))))++(when-let [certs (seq (string/split "":"" (boot.App/config ""BOOT_CERTIFICATES"")))]"
https://api.github.com/repos/boot-clj/boot/pulls/406,59116451,"@@ -331,7 +333,12 @@         tag  (or (:tag scm) (util/guard (git/last-commit)))         scm  (when scm (assoc scm :tag tag))         deps (or dependencies (:dependencies (core/get-env)))-        opts (assoc *opts* :scm scm :dependencies deps :developers developers)]+        opts (assoc *opts*+               :scm scm+               :dependencies deps+               :developers developers+               :classifies classifier"
https://api.github.com/repos/boot-clj/boot/pulls/551,93879975,"@@ -26,25 +28,51 @@   [s]   (= 0 (:exit (shell/sh ""sh"" ""-c"" (format ""command -v %s"" s))))) +(defn- escape [s]"
https://api.github.com/repos/boot-clj/boot/pulls/558,94363294,"@@ -57,6 +57,14 @@       (print ((or color identity) (apply format args)))       (flush)))) +(defmacro print**+  ""Macro version of boot.util/print* but arguments are only evaluated+  when the message will be printed.""+  [verbosity fmt & args]+  `(when (>= @*verbosity* ~verbosity)+     (binding [*out* *err*]+       (print (ansi/bold-cyan (format ~fmt ~@args))))))"
https://api.github.com/repos/boot-clj/boot/pulls/549,94748715,"@@ -479,6 +479,28 @@           (core/with-post-wrap [_]             (when (or client (not server)) @repl-cli))))) +(core/deftask socket-server+  ""Start a socket server.++  The default behavior is to serve a simple Clojure REPL. To serve a different+  handler function, specify a symbol using `--accept'.++  If no bind address is specified, the socket server will listen on 127.0.0.1.++  If no port is specified, an open port will be chosen automatically. The port+  number is written to .socket-port in the current directory.++  The REPL can be accessed with the command++     $ nc localhost $(cat .server-port)""++  [b bind ADDR      str    ""The address server listens on.""+   p port PORT      int    ""The port to listen to.""+   a accept ACCEPT  sym    ""Namespaced symbol of the accept function to invoke.""]+  (let [repl-soc (delay (core/launch-socket-server *opts*))]+    (core/with-pass-thru [fs]+      @repl-soc)))"
https://api.github.com/repos/boot-clj/boot/pulls/567,95857686,"@@ -21,7 +21,7 @@ (def ^:dynamic *sync-delete* true) (def ^:dynamic *hard-link*   true) -(def windows? (boot.App/isWindows))+(def ^:dynamic windows? (boot.App/isWindows))"
https://api.github.com/repos/boot-clj/boot/pulls/579,99481760,"@@ -493,7 +493,8 @@    s scm KEY=VAL           {kw str}    ""The project scm map (KEY is one of url, tag, connection, developerConnection).""    l license NAME:URL      {str str}   ""The map {name url} of project licenses.""    o developers NAME:EMAIL {str str}   ""The map {name email} of project developers.""-   D dependencies SYM:VER  [[sym str]] ""The project dependencies vector (overrides boot env dependencies).""]+   D dependencies SYM:VER  [[sym str]] ""The project dependencies vector (overrides boot env dependencies).""+   a parent SYM:VER        {sym str}   ""The project dependency vector of the parent project""]"
https://api.github.com/repos/boot-clj/boot/pulls/582,99895661,"@@ -58,3 +58,8 @@   [{:keys [bind port init-ns middleware handler] :as options}]   (let [opts (->> options setup-nrepl-env!)]     (@start-server opts)))++(defn launch-bare-repl+  [opts]"
https://api.github.com/repos/boot-clj/boot/pulls/581,100686317,"@@ -575,7 +575,7 @@         action  (partial helpers/sift-action v?)         process (reduce-kv #(comp (action %2 %3) %1) identity *opts*)]     (core/with-pre-wrap [fs]-      (util/info ""Sifting output files...\n"")+      (util/dbug* ""Sifting with opts: %s\n"" (util/pp-str (assoc *opts* :invert v?)))"
https://api.github.com/repos/boot-clj/boot/pulls/600,105940382,"@@ -348,9 +348,10 @@                        (update-in [:dependencies] #(exclude (filter include? %))))]           (if-let [conflicts (and safe (not-empty (dep-conflicts env)))]             (throw (ex-info ""Unresolved dependency conflicts."" {:conflicts conflicts}))-            (let [resolved        (pod/resolve-dependency-jars env)+            (let [source-path     (into [] :source-paths)           +                  resolved        (pod/resolve-dependency-jars env)                   relative-paths  (map (partial relativize local-repo) resolved)]-              (spit file-out (apply str (interpose "":"" relative-paths))))))))))+              (spit file-out (apply str (interpose "":"" relative-paths) (interpose "":"" source-path))))))))))"
https://api.github.com/repos/boot-clj/boot/pulls/608,114205595,"@@ -1218,10 +1218,12 @@   ""A file filtering function factory. FIXME: more documenting here.""   [mkpred]   (fn [criteria files & [negate?]]-    (let [tmp?   (partial satisfies? tmpd/ITmpFile)-          ->file #(if (tmp? %) (io/file (tmp-path %)) (io/file %))-          pred (apply juxt (mapv mkpred criteria))]-      (filter-files #(pred (->file %)) files negate?))))+    (if (empty? criteria)"
https://api.github.com/repos/boot-clj/boot/pulls/598,114375643,"@@ -100,7 +100,11 @@                    (add-blob! blob path i link)                    (swap! tree assoc p (map->TmpFile (assoc m :path p :id i :hash h :time t))))                  (catch java.nio.file.NoSuchFileException _-                   (util/dbug* ""Tmpdir: file not found: %s\n"" (.toString p))))) )))))+                   (util/dbug* ""Tmpdir: file not found: %s\n"" (.toString p)))))))+      (visitFileFailed [^Path path ^java.io.IOException e]+        (with-let [_ fs/skip-subtree]+          (let [p (str (.relativize root path))]+            (util/dbug* ""Tmpdir: failed to visit: %s\n"" (.toString p))))))))"
https://api.github.com/repos/boot-clj/boot/pulls/612,120054822,"@@ -16,5 +16,5 @@   :dependencies [[org.clojure/clojure               ""1.6.0""  :scope ""compile""]                  [boot/base                         ~version :scope ""provided""]                  [boot/pod                          ~version :scope ""compile""]-                 [com.cemerick/pomegranate          ""0.3.1""  :scope ""compile""]-                 [org.apache.maven.wagon/wagon-http ""2.9""    :scope ""compile""]])+                 [com.cemerick/pomegranate          ""0.4.0-alpha1""  :scope ""compile""]+                 [org.apache.maven.wagon/wagon-http ""2.12"" :exclusions [org.apache.maven.wagon/wagon-provider-api]]])"
https://api.github.com/repos/boot-clj/boot/pulls/655,147632928,"@@ -593,7 +593,8 @@   (let [clj-dep (symbol (boot.App/config ""BOOT_CLOJURE_NAME""))         rm-clj  (if-not ignore-clj?                   identity-                  (partial remove #(= clj-dep (first (:dep %)))))]+                  (partial remove #(and (= clj-dep (first (:dep %)))+                                        (not-any? #{[:classifier ""sources""]} (partition 2 (:dep %))))))]"
https://api.github.com/repos/boot-clj/boot/pulls/618,157038015,"@@ -846,7 +846,8 @@                 (boot.pom/pom-xml-parse-string ~(slurp pom))))             pomname (when (and project version)                       (str (name project) ""-"" version "".jar""))-            fname   (or file pomname ""project.jar"")+            file-parsed-string (string/replace file #""\{(\w+)\}"" (fn [[_ group]] ((keyword group) {:project (name project) :version version})))"
https://api.github.com/repos/boot-clj/boot/pulls/682,160534752,"@@ -1,17 +1,28 @@ (set-env!- :source-paths #{""test""}- :dependencies '[[org.clojure/tools.reader ""1.0.0-alpha2""]])+ :dependencies '[[org.clojure/tools.reader ""1.0.0-alpha2""]+                 [metosin/boot-alt-test ""0.3.2"" :scope ""test""]])++(ns-unmap 'boot.user 'test)  (require '[boot.test :refer [runtests test-report test-exit]]-         'boot.task.built-in-test-         'boot.test-test)+         '[metosin.boot-alt-test :refer [alt-test]])  (import boot.App) -(ns-unmap 'boot.user 'test)--(deftask test []-  (boot.util/info ""Testing against version %s\n"" (App/config ""BOOT_VERSION""))-  (comp (runtests)+(deftask integration-test []+  (set-env! :source-paths #{""integration-test""})"
https://api.github.com/repos/boot-clj/boot/pulls/684,161805910,"@@ -465,7 +466,9 @@   ([expr]      (let [{:keys [meta? expr]} (read-string expr)]        (binding [*print-meta* meta?]-         (pr-str (eval expr)))))+         (->> (eval expr)+              (walk/postwalk identity) ; make sure all lazy seqs are realized #683"
https://api.github.com/repos/boot-clj/boot/pulls/703,205450016,"@@ -8,6 +8,16 @@  [702]: https://github.com/boot-clj/boot/pull/702 +#### Breaking++Updated nREPL to 0.4.3. The new nREPL has a new artefact coordinates"
https://api.github.com/repos/boot-clj/boot/pulls/724,254354540,"@@ -8,7 +8,7 @@     [boot.from.io.aviso.exception :refer [*fonts*]]))  (def ^:dynamic *default-dependencies*-  (atom '[[nrepl/nrepl ""0.4.4"" :exclusions [[org.clojure/clojure]]]]))+  (atom '[[nrepl/nrepl ""0.5.3""]]))"
https://api.github.com/repos/boot-clj/boot/pulls/738,267253500,"@@ -1,28 +1,28 @@ (set-env!  :source-paths #{""src"" ""test""}  :dependencies '[[net.cgrand/parsley          ""0.9.3"" :exclusions [org.clojure/clojure]]-                 [mvxcvi/puget                ""1.0.1""]+                 [mvxcvi/puget                ""1.1.0""]"
https://api.github.com/repos/cemerick/friend/pulls/103,13042858,"@@ -15,20 +15,22 @@            (org.openid4java.message.ax AxMessage FetchRequest FetchResponse)            (org.openid4java.message.sreg SRegMessage SRegRequest SRegResponse))) -(def ^{:private true} ax-props-  {""country"" ""http://axschema.org/contact/country/home""-   ""email"" ""http://axschema.org/contact/email""  ;""http://schema.openid.net/contact/email"".-   ""firstname"" ""http://axschema.org/namePerson/first""-   ""language"" ""http://axschema.org/pref/language""-   ""lastname"" ""http://axschema.org/namePerson/last""})+(def ^{:private true} ax-props (atom+                                {""country"" ""http://axschema.org/contact/country/home""+                                 ""email"" ""http://axschema.org/contact/email""+                                 ""firstname"" ""http://axschema.org/namePerson/first""+                                 ""language"" ""http://axschema.org/pref/language""+                                 ""lastname"" ""http://axschema.org/namePerson/last""+                                 }))"
https://api.github.com/repos/cerner/clara-rules/pulls/111,32820877,"@@ -0,0 +1,45 @@+(ns clara.rules.engine.impl)"
https://api.github.com/repos/cerner/clara-rules/pulls/162,50312394,"@@ -121,7 +124,17 @@                          [rule                           (for [token (mem/get-tokens-all memory rule-node)                                 insertion (mem/get-insertions memory rule-node token)]-                            {:explanation (first (to-explanations session [token])) :fact insertion})]))}))+                            {:explanation (first (to-explanations session [token])) :fact insertion})]))++     :fact->explanations (reduce (fn [previous [insertion info]]+                                   (update previous insertion (fnil conj []) info))+                                 {}+                                 (mapcat (fn [[rule rule-node]]+                                           (for [token (mem/get-tokens-all memory rule-node)+                                                 insertion (mem/get-insertions memory rule-node token)]+                                             [insertion {:rule rule+                                                         :explanation (first (to-explanations session [token]))}]))+                                         rule-to-nodes))}))"
https://api.github.com/repos/cerner/clara-rules/pulls/164,52952156,"@@ -284,3 +284,48 @@     (is (= 1 (count temp-history)))     (is (= [{:?his (->TemperatureHistory [temp-10-mci])}]             temp-history))))++(deftest test-grouping-accum+  (let [grouping-accum (acc/grouping-by :temperature)+        grouping-query (dsl/parse-query [] [[?t <- grouping-accum+                                             :from [Temperature]]])++        convert-return-fn (fn [m]+                            (if (seq m)"
https://api.github.com/repos/cerner/clara-rules/pulls/176,56168964,"@@ -898,6 +898,8 @@                            ;; Propagate properties like salience to the generated production.                            (:props production) (assoc :props (:props production)) +                           true (assoc-in [:props :clara-rules/internal-salience] :extracted-negation)"
https://api.github.com/repos/cerner/clara-rules/pulls/187,62251449,"@@ -152,26 +152,34 @@ (def ^:dynamic *rule-context* nil)  (defn- flush-updates-  ""Flush pending updates in the current session. Returns true if there were some items to flush,-  false otherwise""+  ""Flush all pending updates in the current session. Returns true if there were+   some items to flush, false otherwise""   [current-session]+  (letfn [(flush-all [current-session flushed-items?]+            (let [{:keys [rulebase transient-memory transport insertions get-alphas-fn listener]} current-session+                  pending-updates @(:pending-updates current-session)] -  (let [{:keys [rulebase transient-memory transport insertions get-alphas-fn listener]} current-session-        pending-updates @(:pending-updates current-session)]+              ;; Remove the facts here so they are re-inserted if we flush recursively.+              (reset! (:pending-updates current-session) []) -    ;; Remove the facts here so they are re-inserted if we flush recursively.-    (reset! (:pending-updates current-session) [])+              (if (empty? pending-updates)+                flushed-items?+                (do+                  (doseq [partition (partition-by :type pending-updates)+                          :let [facts (mapcat :facts partition)]+                          [alpha-roots fact-group] (get-alphas-fn facts)+                          root alpha-roots] -    (doseq [partition (partition-by :type pending-updates)-            :let [facts (mapcat :facts partition)]-            [alpha-roots fact-group] (get-alphas-fn facts)-            root alpha-roots]+                    (if (= :insert (:type (first partition)))+                      (alpha-activate root fact-group transient-memory transport listener)+                      (alpha-retract root fact-group transient-memory transport listener))) -      (if (= :insert (:type (first partition)))-        (alpha-activate root fact-group transient-memory transport listener)-        (alpha-retract root fact-group transient-memory transport listener)))+                  ;; There may be new :pending-updates due to the flush just+                  ;; made.  So keep flushing until there are none left.  Items+                  ;; were flushed though, so flush-items? is now true.+                  (flush-all current-session true)))))]"
https://api.github.com/repos/cerner/clara-rules/pulls/191,63234985,"@@ -687,58 +685,75 @@               (= previous-result converted-result))        (send-tokens transport memory listener (:children node)-                 [(->Token (conj (:matches token) [converted-result (:id node)]) new-bindings)]))))+                   [(->Token (conj (:matches token) [converted-result (:id node)]) new-bindings)]))))  (defn- has-keys?   ""Returns true if the given map has all of the given keys.""   [m keys]   (every? (partial contains? m) keys))  ;; The AccumulateNode hosts Accumulators, a Rete extension described above, in the Rete network-;; It behavios similarly to a JoinNode, but performs an accumulation function on the incoming+;; It behaves similarly to a JoinNode, but performs an accumulation function on the incoming ;; working-memory elements before sending a new token to its descendents. (defrecord AccumulateNode [id accum-condition accumulator result-binding children binding-keys]   ILeftActivate   (left-activate [node join-bindings tokens memory transport listener]-    (let [previous-results (mem/get-accum-reduced-all memory node join-bindings)]+    (let [previous-results (mem/get-accum-reduced-all memory node join-bindings)+          convert-return-fn (:convert-return-fn accumulator)]       (mem/add-tokens! memory node join-bindings tokens)        (doseq [token tokens]          (cond -         ;; If there are previously accumulated results to propagate, simply use them.-         (seq previous-results)-         (doseq [[fact-bindings previous] previous-results]-           (send-accumulated node accum-condition accumulator result-binding token previous fact-bindings transport memory listener))--         ;; There are no previously accumulated results, but we still may need to propagate things-         ;; such as a sum of zero items.-         ;; If all variables in the accumulated item are bound and an initial-         ;; value is provided, we can propagate the initial value as the accumulated item.--         (and (has-keys? (:bindings token)-                         binding-keys) ; All bindings are in place.-              (:initial-value accumulator)) ; An initial value exists that we can propagate.-         (let [fact-bindings (select-keys (:bindings token) binding-keys)-               previous (:initial-value accumulator)]--           ;; Send the created accumulated item to the children.-           (send-accumulated node accum-condition accumulator result-binding token previous fact-bindings transport memory listener)--           (l/add-accum-reduced! listener node join-bindings previous fact-bindings)--           ;; Add it to the working memory.-           (mem/add-accum-reduced! memory node join-bindings previous fact-bindings))--         ;; Propagate nothing if the above conditions don't apply.-         :default nil))))+          ;; If there are previously accumulated results to propagate, simply use them.+          (seq previous-results)+          (doseq [[fact-bindings previous] previous-results+                  :let [converted (when previous+                                    (convert-return-fn previous))]+                  :when converted]+            (send-accumulated node accum-condition accumulator result-binding token+                              converted fact-bindings transport memory listener))++          ;; There are no previously accumulated results, but we still may need to propagate things+          ;; such as a sum of zero items.+          ;; If all variables in the accumulated item are bound and an initial+          ;; value is provided, we can propagate the initial value as the accumulated item.++          (and (has-keys? (:bindings token)+                          binding-keys) ; All bindings are in place.+               (:initial-value accumulator)) ; An initial value exists that we can propagate.+          (let [fact-bindings (select-keys (:bindings token) binding-keys)+                initial-value (:initial-value accumulator)+                ;; Note that we check that the :initial-value is truthy above, which is why we+                ;; don't need (when initial-value (convert-return-fn initial-value)) here.+                initial-converted (convert-return-fn initial-value)]+            +            (l/add-accum-reduced! listener node join-bindings initial-value fact-bindings)++            ;; Add it to the working memory.+            (mem/add-accum-reduced! memory node join-bindings initial-value fact-bindings)++            (when initial-converted"
https://api.github.com/repos/cerner/clara-rules/pulls/201,66372547,"@@ -1368,11 +1376,16 @@                                    (update-in node-map [[condition env]] conj node-id)                                    (assoc node-map [condition env] [node-id])))                                {}-                               condition-to-node-ids)]+                               condition-to-node-ids)++        ;; We sort the alpha nodes by the sum of the node ids they correspond to+        ;; in order to make the order of alpha nodes for any given type consistent.+        condition-to-node-entries (sort-by (fn [[k v]] (apply + v))"
https://api.github.com/repos/cerner/clara-rules/pulls/202,66501445,"@@ -3876,16 +3926,18 @@               {:?temps [[] 20]} 1})           (str ""Two Cold facts with single firing for node type "" node-type)) -      ;; FIXME: The correct assertion here is on equality to {:?temps [[] nil]}.-      ;; Since (->Cold 10) is retracted we should use the initial value here.-      ;; This is an existing defect that has been logged at https://github.com/rbrush/clara-rules/issues/188       (is (= (-> empty-session                  (insert (->Cold 10) (->Hot 100))                  (fire-rules)                  (retract (->Cold 10))                  (fire-rules)                  (query q1))-             [{:?temps [[] 10]}])+             (if (= ""AccumulateWithJoinFilterNode"" node-type)+               [{:?temps [[] 10]}]+               ;; FIXME: The correct assertion here is on equality to {:?temps [[] nil]}.+               ;; Since (->Cold 10) is retracted we should use the initial value here.+               ;; This is an existing defect that has been logged at https://github.com/rbrush/clara-rules/issues/188"
https://api.github.com/repos/cerner/clara-rules/pulls/206,70450049,"@@ -5,6 +5,7 @@             :url ""http://www.eclipse.org/legal/epl-v10.html""}   :dependencies [[org.clojure/clojure ""1.7.0""]                  [org.clojure/clojurescript ""1.7.170"" :scope ""provided""]+                 [org.clojure/math.combinatorics ""0.1.3"" :scope ""test""]"
https://api.github.com/repos/cerner/clara-rules/pulls/207,70474353,"@@ -1511,15 +1511,16 @@           ;; The alpha nodes weren't cached for the type, so get them now.           (let [ancestors (conj (ancestors-fn fact-type) fact-type) -                ;; Get all alpha nodes for all ancestors.-                new-nodes (distinct-                           (reduce-                            (fn [coll ancestor]-                              (concat-                               coll-                               (get-in merged-rules [:alpha-roots ancestor])))-                            []-                            ancestors))]+                ;; Get all alpha nodes for all ancestors.  Keep them sorted to maintain+                ;; deterministic ordering of fact propagation across the network.+                ;; Alpha nodes do not have a :node-id of their own right now, so sort+                ;; by the :node-id of their :children.+                new-nodes (sort-by #(mapv :node-id (:children %))+                                   (into []+                                         (comp (map #(get (get merged-rules :alpha-roots) %))"
https://api.github.com/repos/cerner/clara-rules/pulls/210,74288681,"@@ -1133,64 +1163,83 @@                   previously-reduced? (not= :clara.rules.memory/no-accum-reduced previous-candidates)                   previous-candidates (when previously-reduced? previous-candidates)]] -      ;; Combine the newly reduced values with any previous items.-      (let [combined-candidates (into previous-candidates candidates)]+      ;; Combine the newly reduced values with any previous items.  Ensure that new items are always added to the end so that+      ;; we have a consistent order for retracting results from accumulators such as acc/all whose results can be in any order.  Making this+      ;; ordering consistent allows us to skip the filter step on previous elements on right-activations.+      (let [combined-candidates (into []+                                      cat+                                      [previous-candidates candidates])]          (l/add-accum-reduced! listener node join-bindings combined-candidates bindings) -        (mem/add-accum-reduced! memory node join-bindings combined-candidates bindings)-        (doseq [token matched-tokens+        (mem/add-accum-reduced! memory node join-bindings combined-candidates bindings))+      +      (doseq [token matched-tokens++              :let [previous-filtered-facts (filter-accum-facts join-filter-fn token previous-candidates)++                    new-filtered-facts (filter-accum-facts join-filter-fn token candidates)]++              ;; If no new elements matched the token, we don't need to do anything for this token+              ;; since the final result is guaranteed to be the same.+              :when (seq new-filtered-facts)"
https://api.github.com/repos/cerner/clara-rules/pulls/214,74645169,"@@ -241,7 +256,78 @@               [(persistent! items-removed) (persistent! result)]))))  #?(:clj-   (deftype RuleOrderedActivation [node-id token activation rule-load-order]+   (defn fast-token-compare [compare-fn token other-token]+     ;; Fastest path is if the two tokens are truly identical.+     (or (identical? token other-token)+         ;; Assumption is that both arguments given are tokens already.+         (and (let [bindings (:bindings token)+                    other-bindings (:bindings other-token)]+                ;; Calling `count` on these Clojure maps shows up as a bottleneck+                ;; even with clojure.lang.IPersistentMap being clojure.lang.Counted unfortunately.+                (and (= (.size ^java.util.Map bindings)+                        (.size ^java.util.Map other-bindings))+                     ;; `every?` is too slow for a performance critical place like this.  It+                     ;; calls `seq` too many times on the underlying maps.  Instead `seq` one+                     ;; time and keep using that same seq.+                     ;; Also avoiding Clojure destructuring since even that is not as fast+                     ;; pre-1.9.0.+                     (if-let [^clojure.lang.ISeq entries (.seq ^clojure.lang.Seqable bindings)]+                       ;; Type hint to Indexed vs MapEntry just because MapEntry seems to be a+                       ;; less stable impl detail to rely on.+                       (loop [^clojure.lang.Indexed entry (.first entries)+                              entries (.next entries)]+                         (let [k (some-> entry (.nth 0))+                               v (some-> entry (.nth 1))]+                           (if (and k+                                    ;; other-bindings will always be persistent map so invoke+                                    ;; it directly.  It is faster than `get`.+                                    (compare-fn v (other-bindings k)))+                             (recur (some-> entries .first)+                                    (some-> entries .next))+                             ;; If there is no k left, then every entry matched.  If there is a k,+                             ;; that means the comparison failed, so the maps aren't equal.+                             (not k))))+                       ;; Empty bindings on both sides.+                       true))) ++              ;; Check the :matches on each token.  :matches need to be in the same order on both+              ;; tokens to be considered the same.+              (let [^clojure.lang.Indexed matches (:matches token)+                    ^clojure.lang.Indexed other-matches (:matches other-token)+                    count-matches (.size ^java.util.List matches)]+                (and (= count-matches+                        (.size ^java.util.List other-matches))+                     (loop [i 0]+                       (cond+                         (= i count-matches)+                         true++                         ;; Compare node-id's first.  Fallback to comparing facts.  This will+                         ;; most very likely be the most expensive part to execute.+                         (let [^clojure.lang.Indexed m (.nth matches i)+                               ^clojure.lang.Indexed om (.nth other-matches i)]+                           ;; A token :matches tuple is of the form [fact node-id].+                           (and (= (.nth m 1) (.nth om 1))+                                (compare-fn (.nth m 0) (.nth om 0))))+                         (recur (inc i))++                         :else+                         false))))))))++#?(:clj+   (defprotocol IdentityComparable+     (using-token-identity [this bool])))++#?(:clj+   (deftype RuleOrderedActivation [node-id+                                   token+                                   activation+                                   rule-load-order+                                   ^:unsynchronized-mutable use-token-identity?]"
https://api.github.com/repos/cerner/clara-rules/pulls/216,75076338,"@@ -907,6 +907,41 @@            (set batch-inserts)            (set single-inserts))))) +(def test-accum-needing-token-partitions-correctly-on-fact-binding+  (let [q (dsl/parse-query []+                           [[WindSpeed]+                            [?ts <- (acc/all) :from [Temperature (= ?loc location)]]])"
https://api.github.com/repos/cerner/clara-rules/pulls/219,77009755,"@@ -1255,54 +1289,63 @@          (if (:join-filter-expressions beta-node) -          (eng/->AccumulateWithJoinFilterNode-           id-           ;; Create an accumulator structure for use when examining the node or the tokens-           ;; it produces.-           {:accumulator (:accumulator beta-node)-            ;; Include the original filter expressions in the constraints for inspection tooling.-            :from (update-in condition [:constraints]-                             into (-> beta-node :join-filter-expressions :constraints))}-           compiled-accum-           (binding [*compile-ctx* {:condition condition-                                    :join-filter-expressions (:join-filter-expressions beta-node)-                                    :env (:env beta-node)-                                    :msg ""compiling accumulate with join filter node""}]-             (compile-expr id-                           (compile-join-filter (:join-filter-expressions beta-node)-                                                (:join-filter-join-bindings beta-node)-                                                (:env beta-node))))-           (:result-binding beta-node)-           children-           join-bindings-           (:new-bindings beta-node))+          (let [join-filter-expr (compile-join-filter (:join-filter-expressions beta-node)+                                                      (:join-filter-join-bindings beta-node)+                                                      (:env beta-node))]+            (with-meta+              (eng/->AccumulateWithJoinFilterNode+               id+               ;; Create an accumulator structure for use when examining the node or the tokens+               ;; it produces.+               {:accumulator (:accumulator beta-node)+                ;; Include the original filter expressions in the constraints for inspection tooling.+                :from (update-in condition [:constraints]+                                 into (-> beta-node :join-filter-expressions :constraints))}+               compiled-accum+               (binding [*compile-ctx* {:condition condition+                                        :join-filter-expressions (:join-filter-expressions beta-node)+                                        :env (:env beta-node)+                                        :msg ""compiling accumulate with join filter node""}]+                 (compile-expr id+                               join-filter-expr))+               (:result-binding beta-node)+               children+               join-bindings+               (:new-bindings beta-node))+              {:accum-expr accum-expr+               :join-filter-expr join-filter-expr}))            ;; All unification is based on equality, so just use the simple accumulate node.-          (eng/->AccumulateNode-           id-           ;; Create an accumulator structure for use when examining the node or the tokens-           ;; it produces.-           {:accumulator (:accumulator beta-node)-            :from condition}-           compiled-accum-           (:result-binding beta-node)-           children-           join-bindings-           (:new-bindings beta-node))))+          (with-meta+            (eng/->AccumulateNode+             id+             ;; Create an accumulator structure for use when examining the node or the tokens+             ;; it produces.+             {:accumulator (:accumulator beta-node)+              :from condition}+             compiled-accum+             (:result-binding beta-node)+             children+             join-bindings+             (:new-bindings beta-node))+            {:accum-expr accum-expr})))"
https://api.github.com/repos/cerner/clara-rules/pulls/220,77445685,"@@ -329,6 +329,7 @@ (defrecord AlphaNode [env children activation]   IAlphaActivate   (alpha-activate [node facts memory transport listener]+    (l/alpha-activate! listener node facts)"
https://api.github.com/repos/cerner/clara-rules/pulls/228,83398941,"@@ -254,4 +254,24 @@             (check-fact expected-fact fact)))))))   (deftest test-durability-fressian-serde-  (durability-test :fressian))+  (testing ""SerDe of the rulebase along with working memory""+    (durability-test :fressian))++  (testing ""Repeated SerDe of rulebase""+    (let [rb-serde (fn [s]+                     (with-open [baos (java.io.ByteArrayOutputStream.)]+                       (d/serialize-rulebase s (df/create-session-serializer baos))+                       (let [rb-data (.toByteArray baos)]+                         (with-open [bais (java.io.ByteArrayInputStream. rb-data)]+                           (d/deserialize-rulebase (df/create-session-serializer bais))))))++          s (mk-session 'clara.durability-rules)+          rb (-> s eng/components :rulebase)+          deserialized1 (rb-serde s)+          ;; Need a session to do the 2nd round of SerDe.+          restored (d/assemble-restored-session deserialized1 {})+          deserialized2 (rb-serde restored)]+      +      (is (= (-> rb :id-to-node keys set)+             (-> deserialized1 :id-to-node keys set)+             (-> deserialized2 :id-to-node keys set))))))"
https://api.github.com/repos/cerner/clara-rules/pulls/233,84560961,"@@ -659,19 +665,32 @@   IRightActivate   (right-activate [node join-bindings elements memory transport listener]     (l/right-activate! listener node elements)-    (mem/add-elements! memory node join-bindings elements)-    ;; Retract tokens that matched the activation, since they are no longer negated.-    (retract-tokens transport-                    memory-                    listener-                    children-                    (for [token (mem/get-tokens memory node join-bindings)--                          :when (matches-some-facts? token-                                                     elements-                                                     join-filter-fn-                                                     condition)]-                      token)))+    ;; Put the previous elements into a persistent collection since LocalMemory will return+    ;; a mutable list here on the JVM, and we need to examine the previous elements on+    ;; a per-token basis here.+    (let [previous-elements (into [] (mem/get-elements memory node join-bindings))]"
https://api.github.com/repos/cerner/clara-rules/pulls/235,87931994,"@@ -64,7 +64,13 @@                         ;; Map of queries to the nodes hosting them.                         query-nodes :- {sc/Any QueryNode}                         ;; Map of id to one of the beta nodes (join, accumulate, etc).-                        id-to-node :- {sc/Num BetaNode}])+                        id-to-node :- {sc/Num BetaNode}+                        ;; Function for sorting activation groups of rules for firing.+                        activation-group-sort-fn+                        ;; Function that takes a rule and returns its activation group.+                        activation-group-fn+                        ;; Function that takes facts and determines what alpha nodes they match."
https://api.github.com/repos/cerner/clara-rules/pulls/242,89808826,"@@ -1507,32 +1519,62 @@                                ;; Internal system types always use Clojure's type mechanism.                                (type fact)                                ;; All other types defer to the provided function.-                               (fact-type-fn fact))))]+                               (fact-type-fn fact))))++        ;; Wrap the ancestors-fn so that we don't send internal facts such as NegationResult+        ;; to user-provided productions.  Note that this work is memoized inside fact-type->roots.+        wrapped-ancestors-fn (fn [fact-type]+                               (if (isa? fact-type :clara.rules.engine/system-type)+                                 ;; Exclude system types from having ancestors for now+                                 ;; since none of our use-cases require them.  If this changes+                                 ;; we may need to define a custom hierarchy for them.+                                 #{}+                                 (ancestors-fn fact-type)))++        fact-type->roots (memoize+                          (fn [fact-type]+                            ;; There is no inherent ordering here but we put the AlphaRootsWrapper instances+                            ;; in a vector rather than a set to avoid nondeterministic ordering (and thus nondeterministic+                            ;; performance).+                            (into []+                                  ;; If a given type in the ancestors has no matching alpha roots,+                                  ;; don't return it as an ancestor.  Fact-type->roots is memoized on the fact type,+                                  ;; but work is performed per group returned on each call the to get-alphas-fn.  Therefore+                                  ;; removing groups with no alpha nodes here will improve performance on subsequent calls.="
https://api.github.com/repos/cerner/clara-rules/pulls/244,90432582,"@@ -29,12 +29,12 @@ ;; Token with no bindings, used as the root of beta nodes. (def empty-token (->Token [] {})) -;; Record indicating the negation existing in the working memory.-(defrecord NegationResult [gen-rule-name])+;; A marker interface to identify internal facts.+(definterface ISystemFact)"
https://api.github.com/repos/cerner/clara-rules/pulls/246,91325938,"@@ -39,23 +39,34 @@             ReadHandler]            [java.util             ArrayList-            IdentityHashMap]+            IdentityHashMap+            Map+            WeakHashMap]            [java.io             InputStream             OutputStream])) +;; Use this map to cache the symbol for the map->RecordNameHere+;; factory function created for every Clojure record to improve+;; serialization performance.+;; See https://github.com/cerner/clara-rules/issues/245 for more extensive discussion.+(def ^:private class->factory-fn-sym (WeakHashMap.))+ (defn record-map-constructor-name   ""Return the 'map->' prefix, factory constructor function for a Clojure record.""   [rec]-  (let [class-name (-> rec class .getName)-        idx (.lastIndexOf class-name (int \.))-        ns-nom (.substring class-name 0 idx)-        nom (.substring class-name (inc idx))]-    ;; There could be some sort of cache for these based on class.  It may speed-    ;; up serialization, but doesn't seem worth it yet.-    (symbol (str (cm/demunge ns-nom)-                 ""/map->""-                 (cm/demunge nom)))))+  (let [klass (class rec)]+    (if-let [cached-sym (.get ^Map class->factory-fn-sym klass)]"
https://api.github.com/repos/cerner/clara-rules/pulls/248,91953028,"@@ -184,12 +184,15 @@ ;;; indexed-session-memory-state for more details. (defrecord MemIdx [idx]) +;;; Same as MemIdx but specific to internal objects, such as Token or Element.+(defrecord InternalMemIdx [idx])"
https://api.github.com/repos/cerner/clara-rules/pulls/252,92874802,"@@ -803,35 +807,55 @@        ;; The reasoning here is the same as remove-elements!        (when-not (coll-empty? to-remove)          (let [activation-group (activation-group-fn production)-               ^java.util.Queue activations (.get activation-map activation-group)]--           (when-not (coll-empty? activations)+               ^java.util.Queue activations (.get activation-map activation-group)+               removed-activations (java.util.LinkedList.)+               unremoved-activations (java.util.LinkedList.)]++           (if (coll-empty? activations)+             ;; If there are no activations present under the group+             ;; then we can't remove any.+             [[] to-remove]              ;; Remove as many activations by identity as possible first.              (let [not-removed (loop [to-remove-item (first to-remove)                                       to-remove (next to-remove)                                       not-removed (transient [])]                                  (if to-remove-item-                                   (let [act (->rule-ordered-activation to-remove-item true)]+                                   (let [^RuleOrderedActivation act (->rule-ordered-activation to-remove-item true)]                                      (if (.remove activations act)-                                       (recur (first to-remove) (next to-remove) not-removed)+                                       (do+                                         (.add removed-activations (.activation ^RuleOrderedActivation act))"
https://api.github.com/repos/cerner/clara-rules/pulls/251,93032644,"@@ -56,3 +56,22 @@           (persistent!)))     :cljs     (def tuned-group-by clojure.core/group-by))+"
https://api.github.com/repos/cerner/clara-rules/pulls/256,95239284,"@@ -235,15 +235,21 @@   ""Compiles a sequence of constraints into a structure that can be evaluated.     Callers may also pass a collection of equality-only-variables, which instructs-   this function to only do an equality check on them rather than create a unification binding.""+   this function to only do an equality check on them rather than create a unification binding.++   The returned expression evaluates to a two item vector, [bindings error], which contains+   the evaluated bindings in the first argument and a map with information on any exception+   that might have been thrown by evaluating a constraint as the second vector entry.""   ([exp-seq]-   (compile-constraints exp-seq #{}))+   (compile-constraints exp-seq #{} 0))   ([exp-seq equality-only-variables]+   (compile-constraints exp-seq equality-only-variables 0))+  ([exp-seq equality-only-variables constraint-idx]"
https://api.github.com/repos/cerner/clara-rules/pulls/258,95257395,"@@ -1493,19 +1493,22 @@  ;; Wrap the fact-type so that Clojure equality and hashcode semantics are used ;; even though this is placed in a Java map.-(deftype AlphaRootsWrapper [roots roots-hash]+(deftype AlphaRootsWrapper [fact-type fact-type-hash roots]   Object   (equals [this other]     ;; Since we memoize the function that retrieves these on the fact type, and since the alpha roots for     ;; any given type primary type T (excluding descendants and ancestors) are a disjoint     ;; set with respect to the alpha roots for any other primary type T2, we know that we will     ;; only have one AlphaRootsWrapper object for any given set of alpha roots per get-alphas-fn instance."
https://api.github.com/repos/cerner/clara-rules/pulls/269,102289186,"@@ -59,10 +59,15 @@         session (-> empty-session                     (insert (->Temperature 30 ""MCI""))                     (insert (->Temperature 10 ""MCI""))-                    (insert (->Temperature 80 ""MCI"")))+                    (insert (->Temperature 80 ""MCI""))+                    fire-rules)"
https://api.github.com/repos/cerner/clara-rules/pulls/271,104310660,"@@ -72,14 +74,14 @@ ;; Returns a new session with the additional facts inserted. (defprotocol ISession -  ;; Inserts a fact.-  (insert [session fact])+  ;; Inserts facts.+  (insert [session facts]) -  ;; Retracts a fact.+  ;; Retracts facts.   (retract [session fact])"
https://api.github.com/repos/cerner/clara-rules/pulls/273,105679568,"@@ -646,8 +646,8 @@       (into [type] constraints))))  (defn- join-node-matches-  [node join-filter-fn token fact env]-  (let [beta-bindings (try (join-filter-fn token fact {})+  [node join-filter-fn token fact fact-bindings env]+  (let [beta-bindings (try (join-filter-fn token fact fact-bindings {})                            (catch #?(:clj Exception :cljs :default) e                                (throw-condition-exception {:cause e"
https://api.github.com/repos/cerner/clara-rules/pulls/279,109293988,"@@ -118,6 +118,14 @@   ;; Right-activate the node with items reduced in the above pre-reduce step.   (right-activate-reduced [node join-bindings reduced  memory transport listener])) +(defprotocol IAccumInspect+  ;; Takes a token that was previously propagated from the node"
https://api.github.com/repos/cerner/clara-rules/pulls/283,111819745,"@@ -0,0 +1,90 @@+(ns clara.tools.fact-graph+  (:require [clara.tools.inspect :as i]+            [schema.core :as sc]))++;; This node will have either facts or results of accumulations as its parents.+;; Its children will be facts that the rule inserted.+(sc/defrecord RuleActivationNode [rule :- sc/Str+                                  id :- sc/Int])++;; The parents of this node are facts over which an accumulation was run.+;; It will have a single child, the result of the accumulation.  So, for example,+;; with the condition [?t <- (acc/min :temperature) :from [Temperature]], if we have+;; (->Temperature 50 ""MCI"") and (->Temperature 30 ""MCI"") the child of this node will be+;; an AccumulationResult with the :result 30 and the parents will be the two Temperature facts.+(sc/defrecord AccumulationNode [id :- sc/Int])++;; As alluded to above, this node represents the result of an accumulation.  Its child will be a+;; RuleActivationNode.  Note that there will be an AccumulationResult for each distinct rules firing.+(sc/defrecord AccumulationResultNode [id :- sc/Int+                                      result :- sc/Any])++(def ^:private empty-fact-graph {:forward-edges {}+                                 :backward-edges {}})++;; Use a counter, whose value will be added to internal nodes, to the ensure that+;; these nodes are not equal to each other.  This ensures that the number of the internal+;; nodes accurately reflects the cardinality of each fact in the session.+(def ^:private ^:dynamic *id-counter* nil)"
https://api.github.com/repos/cerner/clara-rules/pulls/288,114546175,"@@ -12,4 +12,4 @@     (println ""FAIL"")))  (defn ^:export run []-  (test/run-tests 'clara.test-rules 'clara.test-common))+  (test/run-tests 'clara.test-rules 'clara.test-common 'clara.test-salience))"
https://api.github.com/repos/cerner/clara-rules/pulls/301,119432956,"@@ -47,7 +47,12 @@   ""Creates a condition with the given optional result binding when parsing a rule.""   [condition result-binding expr-meta]   (let [type (if (symbol? (first condition))-               (if-let [resolved (resolve (first condition))]+               (if-let [resolved (and+                                  ;; If we are compiling ClojureScript rules we don't want+                                  ;; to resolve the symbol in the ClojureScript compiler's+                                  ;; Clojure environment.  See issue 300.+                                  (not (com/compiling-cljs?))+                                  (resolve ("
https://api.github.com/repos/cgrand/enlive/pulls/109,14888667,"@@ -26,16 +26,18 @@                                 ^java.nio.file.Path dir (.watchable wk)                                 paths (map (fn [^java.nio.file.WatchEvent e]                                              (.resolve dir (.context e))) -                                           (.pollEvents wk))]+                                           (.pollEvents wk))+                                name (ns-name ns)]                             (if (some @file-paths paths)                               (do                                 (.close ws)                                 ;; file updates concurrent with reloading may be skipped-                                (println ""Reloading"" (ns-name ns))-                                (alter-meta! ns assoc ::deps #{}-                                  ::watch-fn nil)-                                (require (ns-name ns) :reload)-                                (auto-reload ns))+                                (println ""Reloading"" name)+                                (alter-meta! ns assoc+                                             ::deps #{}+                                             ::watch-fn nil)+                                (require name :reload)+                                (auto-reload (find-ns name)))"
https://api.github.com/repos/cgrand/enlive/pulls/128,34274678,"@@ -14,16 +14,20 @@ On the [Enlive Google Group](http://groups.google.com/group/enlive-clj)  ## Artifact -All artifacts are published to [clojars](https://clojars.org/enlive). Latest version is `1.1.5`:+All artifacts are published to [clojars](https://clojars.org/enlive). Latest version is `1.1.6`:  ```-[enlive ""1.1.5""]+[enlive ""1.1.6""]"
https://api.github.com/repos/cgrand/enlive/pulls/130,34448659,"@@ -992,7 +992,7 @@ (defn- nodify [node-spec]   (cond     (string? node-spec) node-spec-    (vector? node-spec)+    (and (vector? node-spec) (not (map? (first node-spec)))) "
https://api.github.com/repos/clj-commons/aleph/pulls/139,23899112,"@@ -164,35 +166,58 @@  (defn request   ""Takes an HTTP request, as defined by the Ring protocol, with the extensions defined-   by [clj-http](https://github.com/dakrone/clj-http), and returns a deferred representing the HTTP response.  Also allows for a custom `pool` or `middleware` to be defined.""-  [{:keys [pool middleware]+   by [clj-http](https://github.com/dakrone/clj-http), and returns a deferred representing+   the HTTP response.  Also allows for a custom `pool` or `middleware` to be defined.++   |:---|:---+   | `pool` | a custom connection pool+   | `middleware` | custom client middleware for the request+   | `socket-timeout` | timeout in milliseconds for the pool to allocate a socket+   | `connection-timeout` | timeout in milliseconds for the connection to become established+   | `request-timeout` | timeout in milliseconds for the arrival of a response over the established connection""+  [{:keys [pool+           middleware+           socket-timeout+           connection-timeout+           request-timeout]     :or {pool default-connection-pool          middleware identity}     :as req}]   (let [k (client/req->domain req)         start (System/currentTimeMillis)-        timeout (clojure.core/get req :socket-timeout)-        conn (flow/acquire pool k)]-    (d/chain (if timeout-               (d/timeout! conn timeout)-               conn)-      (fn [conn]-        (let [end (System/currentTimeMillis)]-          (-> (first conn)-            (d/chain-              (fn [conn']-                (let [end (System/currentTimeMillis)]-                  (-> (middleware conn')-                    (d/chain #(% req))-                    (d/catch #(do (flow/release pool k conn) (throw %)))-                    (d/chain-                      (fn [rsp]-                        (d/chain (:aleph/complete rsp)-                          (fn [_]-                            (flow/release pool k conn)))-                        (-> rsp-                          (dissoc :aleph/complete)-                          (assoc :connection-time (- end start)))))))))))))))+        maybe-timeout! (fn [d timeout]+                         (if timeout+                           (d/timeout! d timeout)+                           d))]+    (-> (flow/acquire pool k)+      (maybe-timeout! socket-timeout)+      (d/chain+        (fn [conn]+          (let [socket-end (System/currentTimeMillis)+                socket-time (- socket-end start)]+            (-> (first conn)+              (maybe-timeout! connection-timeout)+              (d/catch TimeoutException+                       #(do (flow/dispose pool k conn) (throw %)))+              (d/chain+                (fn [conn']+                  (let [connection-end (System/currentTimeMillis)+                        connection-time (- connection-end socket-end)]+                    (-> (middleware conn')+                      (d/chain #(% req))+                      (maybe-timeout! request-timeout)+                      (d/catch TimeoutException+                               #(do (flow/dispose pool k conn) (throw %)))+                      (d/catch #(do (flow/release pool k conn) (throw %)))"
https://api.github.com/repos/clj-commons/aleph/pulls/140,24012028,"@@ -157,6 +164,18 @@                        :socket-timeout 2000}))]         (is (= (.replace ^String words ""\n"" """") (bs/to-string body))))))) +(deftest test-connection-timeout+  (with-handler basic-handler+    (is (thrown? TimeoutException+          @(http/get ""http://192.0.2.0"" ;; ""TEST-NET"" in RFC 5737"
https://api.github.com/repos/clj-commons/aleph/pulls/323,118981682,"@@ -59,19 +60,20 @@                (URI.                  (name (or (:scheme req) :http))                  nil-                 (or (:host req) (:server-name req))+                 (when-some [host (or (:host req) (:server-name req))]"
https://api.github.com/repos/clj-commons/aleph/pulls/355,167741479,"@@ -94,6 +95,7 @@    | `stats-callback` | an optional callback which is invoked with a map of hosts onto usage statistics every ten seconds    | `max-queue-size` | the maximum number of pending acquires from the pool that are allowed before `acquire` will start to throw a `java.util.concurrent.RejectedExecutionException`, defaults to `65536`    | `control-period` | the interval, in milliseconds, between use of the controller to adjust the size of the pool, defaults to `60000`+   | `dns-options` | an optional map with async DNS resolver settings, for more information check `aleph.netty/create-dns-resolver`. When set, ignores `name-resolver` setting from `connection-options` in favor of shared DNS resolver instace"
https://api.github.com/repos/clj-commons/aleph/pulls/379,182230621,"@@ -615,19 +615,16 @@         (= \/ (-> origin-path (subs (count norm-path)) first))))))  (defn req->cookie-origin [{:keys [url] :as req}]-  (if (some? url)-    (let [{:keys [server-name server-port uri scheme]} (parse-url url)]-      {:host server-name-       :port server-port-       :secure? (= :https scheme)-       :path (cond-               (nil? uri) ""/""-               (str/starts-with? uri ""/"") uri-               :else (str ""/"" uri))})-    {:host (some-> (or (:host req) (:server-name req)) IDN/toASCII)-     :port (or (:port req) (:server-port req) -1)-     :secure? (= :https (or (:scheme req) :http))-     :path ""/""}))+  (let [{:keys [server-name server-port uri scheme]} (if (some? url)+                                                       (parse-url url)+                                                       req)]+    {:host server-name"
https://api.github.com/repos/clj-commons/aleph/pulls/401,208900361,"@@ -345,6 +348,21 @@         (.remove (.pipeline ctx) this))       (.fireUserEventTriggered ^ChannelHandlerContext ctx evt)))) +(defn coerce-log-level [level]+  (if (instance? LogLevel level)+    level+    (let [netty-level (case level+                        :trace LogLevel/TRACE+                        :debug LogLevel/DEBUG+                        :info LogLevel/INFO+                        :warn LogLevel/WARN+                        :error LogLevel/ERROR+                        nil)]"
https://api.github.com/repos/clj-commons/aleph/pulls/411,229466047,"@@ -146,3 +158,94 @@           (.addBodyHttpData encoder attr))))     (let [req' (.finalizeRequest encoder)]       [req' (when (.isChunked encoder) encoder)])))++(defmulti http-data->map+  (fn [^InterfaceHttpData data]+    (.getHttpDataType data)))++(defmethod http-data->map InterfaceHttpData$HttpDataType/Attribute+  [^Attribute attr]+  (let [content (.getValue attr)]+    {:part-name (.getName attr)+     :content content+     :name nil+     :charset (-> attr .getCharset .toString)+     :mime-type nil+     :transfer-encoding nil+     :memory? (.isInMemory attr)+     :file? false+     :file nil+     :size (count content)}))++(defmethod http-data->map InterfaceHttpData$HttpDataType/FileUpload+  [^FileUpload data]+  (let [memory? (.isInMemory data)]+    {:part-name (.getName data)+     :content (when memory?+                (bs/to-input-stream (netty/acquire (.content data))))+     :name (.getFilename data)+     :charset (-> data .getCharset .toString)+     :mime-type (.getContentType data)+     :transfer-encoding (.getContentTransferEncoding data)+     :memory? memory?+     :file? true+     :file (when-not memory? (.getFile data))+     :size (.length data)}))++(defn- read-attributes [^HttpPostRequestDecoder decoder parts]+  (while (.hasNext decoder)+    (s/put! parts (http-data->map (.next decoder)))))++(defn decode-request+  ""Takes a ring request and returns a manifold stream which yields+   parts of the mutlipart/form-data encoded body. In case the size of+   a part content exceeds `:memory-limit` limit (16KB by default),+   corresponding payload would be written to a temp file. Check `:memory?`+   flag to know whether content might be read directly from `:content` or+   should be fetched from the file specified in `:file`.++   Note, that if your handler works with multipart requests only,+   it's better to set `:raw-stream?` to `true` to avoid additional+   input stream coercion.""+  ([req] (decode-request req {}))+  ([{:keys [body] :as req}+    {:keys [body-buffer-size+            memory-limit]+     :or {body-buffer-size 65536+          memory-limit DefaultHttpDataFactory/MINSIZE}}]+   (let [body (if (s/stream? body)+                body+                (netty/to-byte-buf-stream body body-buffer-size))+         destroyed? (atom false)+         req' (http-core/ring-request->netty-request req)+         factory (DefaultHttpDataFactory. (long memory-limit))+         decoder (HttpPostRequestDecoder. factory req')+         parts (s/stream)]++     ;; on each HttpContent chunk, put it into the decoder+     ;; and resume our attempts to get the next attribute available+     (s/connect-via+      body+      (fn [chunk]+        (let [content (DefaultHttpContent. chunk)]+          (.offer decoder content)+          (read-attributes decoder parts)+          ;; TODO(kachayev): I'm still not sure this is"
https://api.github.com/repos/clj-commons/aleph/pulls/422,229468794,"@@ -609,6 +614,16 @@        ([_ ctx]          (let [ch (.channel ctx)]            (reset! in (netty/buffered-source ch (constantly 1) 16))++           ;; Start handshake timeout timer+           (reset! timeout-task"
https://api.github.com/repos/clj-commons/aleph/pulls/436,240044676,"@@ -131,9 +131,9 @@     (dissoc m k)))  (defn url-encode-  ([s]+  ([^String s]"
https://api.github.com/repos/clj-commons/aleph/pulls/430,241368947,"@@ -534,33 +534,41 @@         :channel-read        ([_ ctx msg]-         (try-           (let [ch (.channel ctx)]-             (if-not (instance? WebSocketFrame msg)-               (.fireChannelRead ctx msg)-               (let [^WebSocketFrame msg msg]-                 (cond--                   (instance? TextWebSocketFrame msg)-                   (netty/put! ch in (.text ^TextWebSocketFrame msg))--                   (instance? BinaryWebSocketFrame msg)-                   (let [body (.content ^BinaryWebSocketFrame msg)]-                     (netty/put! ch in-                       (if raw-stream?-                         (netty/acquire body)-                         (netty/buf->array body))))--                   (instance? PingWebSocketFrame msg)-                   (netty/write-and-flush ch (PongWebSocketFrame. (netty/acquire (.content msg))))--                   (instance? CloseWebSocketFrame msg)-                   (.close handshaker ch (netty/acquire msg))--                   :else-                   (.fireChannelRead ctx msg)))))-           (finally-             (netty/release msg)))))]))+         (let [ch (.channel ctx)]+           (cond+             (instance? TextWebSocketFrame msg)"
https://api.github.com/repos/clj-commons/aleph/pulls/474,254319981,"@@ -147,11 +147,11 @@  (defn client-handler   [response-stream ^long buffer-capacity]-  (let [response (atom nil)-        buffer (atom [])+  (let [response (volatile! nil)+        buffer (volatile! [])         buffer-size (AtomicInteger. 0)-        stream (atom nil)-        complete (atom nil)+        stream (volatile! nil)+        complete (volatile! nil)"
https://api.github.com/repos/clj-commons/aleph/pulls/484,256204973,"@@ -378,6 +394,21 @@       ([_ ctx msg]         (cond +          ;; Happens when io.netty.handler.codec.http.HttpObjectAggregator is part of the pipeline.+          (instance? FullHttpRequest msg)+          (if (invalid-request? msg)+            (reject-invalid-request ctx msg)+            (let [^FullHttpRequest req msg+                  content (.content req)+                  s (netty/source (netty/channel ctx))]+              (when-not (zero? (.readableBytes content))+                ;; Retain the content of FullHttpRequest one extra time to+                ;; compensate for it being released together with the request.+                (.retain content)+                (netty/put! (.channel ctx) s content))"
https://api.github.com/repos/clj-commons/aleph/pulls/488,258226461,"@@ -205,7 +205,20 @@    | `max-frame-size` | maximum aggregate message size, in bytes, defaults to `1048576`.    | `bootstrap-transform` | an optional function that takes an `io.netty.bootstrap.Bootstrap` object and modifies it.    | `epoll?` | if `true`, uses `epoll` when available, defaults to `false`-   | `heartbeats` | optional configuration to send Ping frames to the server periodically (if the connection is idle), configuration keys are `:send-after-idle` (in milliseconds), `:payload` (optional, empty frame by default) and `:timeout` (optional, to close the connection if Pong is not received after specified timeout).""+   | `heartbeats` | optional configuration to send Ping frames to the server periodically (if the connection is idle), configuration keys are `:send-after-idle` (in milliseconds), `:payload` (optional, empty frame by default) and `:timeout` (optional, to close the connection if Pong is not received after specified timeout).+   | `name-resolver` | specify the mechanism to resolve the address of the unresolved named address. When not set or equals to `:default`, JDK's built-in domain name lookup mechanism is used (blocking). Set to`:noop` not to resolve addresses or pass an instance of `io.netty.resolver.AddressResolverGroup` you need.+   | `proxy-options` | a map to specify proxy settings. HTTP, SOCKS4 and SOCKS5 proxies are supported. Note, that when using proxy `connections-per-host` configuration is still applied to the target host disregarding tunneling settings. If you need to limit number of connections to the proxy itself use `total-connections` setting.+   Supported `proxy-options` are"
https://api.github.com/repos/clj-commons/aleph/pulls/499,268756406,"@@ -88,6 +88,9 @@ (def default-response-executor   (flow/utilization-executor 0.9 256 {:onto? false})) +(def default-timer"
https://api.github.com/repos/clj-commons/aleph/pulls/485,268762343,"@@ -330,34 +338,128 @@      (netty/write-and-flush ch empty-last-content))) -(defn send-chunked-file [ch ^HttpMessage msg ^File file]-  (let [raf (RandomAccessFile. file ""r"")-        len (.length raf)-        ci (HttpChunkedInput. (ChunkedFile. raf))]-    (try-set-content-length! msg len)+(def default-chunk-size 8192)++(deftype HttpFile [^File fd ^long offset ^long length ^long chunk-size])++(defmethod print-method HttpFile [file ^java.io.Writer w]+  (.write w (format ""HttpFile[fd:%s offset:%s length:%s]""+                    (.-fd file)+                    (.-offset file)+                    (.-length file))))++(defn new-http-file"
https://api.github.com/repos/clj-commons/aleph/pulls/480,268770291,"@@ -272,6 +294,23 @@     (executor/with-executor response-executor       ((middleware          (fn [req]+           ;; xxx: if I'm working with unix-socket here,+           ;; I probably want to reshape the request slightly+           ;; to prevent troubles caused by java.net.URL parser+           ;; let's say I want to run something like+           ;;+           ;; (http/get ""/images/json"" {:unix-socket ""/var/run/docker.sock""})+           ;;+           ;; ""/images/json"" is not a valid URL, no protocol, no host+           ;; Which is a bad thing when I need to setup a connection to+           ;; a remote address, but it's perfectly valid for unix socket+           ;; What I can do here: take URL requested, try to parse it+           ;; and if it fails just to put some dummy values to a host & port+           ;; SSL will not work, but if don't pass any server name I should+           ;; not expect it work at the first place. The only thing...+           ;; I don't know the connection pool configuration here, meaning+           ;; I have no idea if it's allowed to pass URI with no additional+           ;; information"
https://api.github.com/repos/clj-commons/aleph/pulls/502,272895459,"@@ -88,14 +88,22 @@       (is (= ""YES"" @(s/try-take! c 5e3))))))  (deftest test-raw-echo-handler-  (testing ""websocket client: raw-stream?""+  (testing ""websocket client: raw-stream? with binary message""     (with-handler echo-handler       (let [c @(http/websocket-client ""ws://localhost:8080"" {:raw-stream? true})]         (is @(s/put! c (.getBytes ""raw client hello"" ""UTF-8"")))         (let [msg @(s/try-take! c 5e3)]           (is (= ""raw client hello""                  (when msg (bs/to-string (netty/release-buf->array msg))))))))) +  (testing ""websocket client: raw-stream? with text message""+    (with-handler echo-handler+      (let [c @(http/websocket-client ""ws://localhost:8080"" {:raw-stream? true})]+        (is @(s/put! c ""text client hello""))+        (let [msg @(s/try-take! c 5e3)]+          (is (= ""text client hello""+                 (when msg (bs/to-string (netty/release-buf->array msg)))))))))"
https://api.github.com/repos/clj-commons/aleph/pulls/514,337211340,"@@ -24,14 +24,16 @@ (alter-meta! #'->TcpConnection assoc :private true)  (defn- ^ChannelHandler server-channel-handler-  [handler {:keys [raw-stream?] :as options}]+  [handler {:keys [raw-stream? exception-handler] :as options}]   (let [in (atom nil)]     (netty/channel-inbound-handler        :exception-caught       ([_ ctx ex]-        (when-not (instance? IOException ex)-          (log/warn ex ""error in TCP server"")))+       (if (some? exception-handler)+         (exception-handler @in ex)+         (when-not (instance? IOException ex)+           (log/warn ex ""error in TCP server""))))"
https://api.github.com/repos/clj-commons/aleph/pulls/553,500579499,"@@ -54,7 +54,8 @@    | `idle-timeout` | when set, forces keep-alive connections to be closed after an idle time, in milliseconds    | `continue-handler` | optional handler which is invoked when header sends \""Except: 100-continue\"" header to test whether the request should be accepted or rejected. Handler should return `true`, `false`, ring responseo to be used as a reject response or deferred that yields one of those.    | `continue-executor` | optional `java.util.concurrent.Executor` which is used to handle requests passed to :continue-handler.  To avoid this indirection you may specify `:none`, but in this case extreme care must be taken to avoid blocking operations on the handler's thread.-   | `num-event-loop-threads` | optional, defaults to double number of available processors.""+   | `num-event-loop-threads` | optional, defaults to double number of available processors.+   | `error-logger` | optional, function to be invoked on each exception propagated through the pipeline up to `request-handler`. Supposed to be used only for logging, crash reporting, metrics, etc rather than error recovery."""
https://api.github.com/repos/clj-commons/aleph/pulls/564,589934027,"@@ -923,7 +924,13 @@               (not (empty? name-servers)))             (.nameServerProvider ^DnsServerAddressStreamProvider               (dns-name-servers-provider name-servers)))]-    (DnsAddressResolverGroup. b)))+    b))"
https://api.github.com/repos/clj-commons/aleph/pulls/583,830513091,"@@ -1 +1,3 @@-{:config-paths [""../resources/clj-kondo.exports/clj-commons/aleph""]}+{:config-paths [""../resources/clj-kondo.exports/clj-commons/aleph""]+ :linters      {:unsorted-required-namespaces {:level :warning}}"
https://api.github.com/repos/clj-commons/aleph/pulls/589,837034847,"@@ -192,9 +195,12 @@      (with-server (http/start-server ~handler {:port port :compression-level 3})        ~@body))) -(defmacro with-ssl-handler [handler & body]-  `(with-server (http/start-server ~handler {:port port, :ssl-context (netty/self-signed-ssl-context)})-     ~@body))+(def default-ssl-options {:port port, :ssl-context (netty/self-signed-ssl-context)})++(defmacro with-ssl-handler+   [handler options & body]+   `(with-server (http/start-server ~handler ~options)"
https://api.github.com/repos/clj-commons/aleph/pulls/591,837956792,"@@ -84,37 +90,47 @@  (deftest reject-unknown-transfer-encoding   (is (thrown? IllegalArgumentException-        (mp/encode-body [{:part-name ""part1""-                          :content ""content1""-                          :transfer-encoding :uknown-transfer-encoding}]))))+      (mp/encode-body [{:part-name ""part1""+                        :content ""content1""+                        :transfer-encoding :uknown-transfer-encoding}]))))  (deftest test-content-as-file-  (let [body (mp/encode-body [{:part-name ""part1""-                               :content file-to-send}-                              {:part-name ""part2""-                               :mime-type ""application/png""-                               :content file-to-send}-                              {:part-name ""part3""-                               :name ""text-file-to-send.txt""-                               :content file-to-send}-                              {:part-name ""part4""-                               :charset ""UTF-8""-                               :content file-to-send}-                              {:content file-to-send}-                              {:content file-to-send-                               :transfer-encoding :base64}])-        body-str (bs/to-string body)]-    (is (.contains body-str ""name=\""part1\""""))-    (is (.contains body-str ""name=\""part2\""""))-    (is (.contains body-str ""name=\""part3\""""))-    (is (.contains body-str ""name=\""part4\""""))-    (is (.contains body-str ""name=\""file.txt\""""))-    (is (.contains body-str ""filename=\""file.txt\""""))-    (is (.contains body-str ""filename=\""text-file-to-send.txt\""""))-    (is (.contains body-str ""Content-Type: text/plain\r\n""))-    (is (.contains body-str ""Content-Type: text/plain; charset=UTF-8\r\n""))-    (is (.contains body-str ""Content-Type: application/png\r\n""))-    (is (.contains body-str ""Content-Transfer-Encoding: base64\r\n""))))+  (let [parts [{:part-name ""part1""+                :content file-to-send}+               {:part-name ""part2""+                :mime-type ""application/png""+                :content file-to-send}+               {:part-name ""part3""+                :name ""text-file-to-send.txt""+                :content file-to-send}+               {:part-name ""part4""+                :charset ""UTF-8""+                :content file-to-send}+               {:content file-to-send}+               {:content file-to-send+                :transfer-encoding :base64}]+        validate (fn [^String body-str]+                   (is (.contains body-str ""name=\""part1\""""))+                   (is (.contains body-str ""name=\""part2\""""))+                   (is (.contains body-str ""name=\""part3\""""))+                   (is (.contains body-str ""name=\""part4\""""))+                   (is (.contains body-str ""name=\""file.txt\""""))+                   (is (.contains body-str ""filename=\""file.txt\""""))+                   (is (.contains body-str ""filename=\""file.txt\""""))+                   (is (.contains (str/lower-case body-str) (str/lower-case ""Content-Type: text/plain\r\n"")))+                   (is (.contains (str/lower-case body-str) (str/lower-case ""Content-Type: text/plain; charset=UTF-8\r\n"")))+                   (is (.contains (str/lower-case body-str) (str/lower-case ""Content-Type: application/png\r\n""))))]+    (testing ""legacy encode-body""+      (let [body (mp/encode-body parts)+            body-str (bs/to-string body)]+        (validate body-str)+        (is (.contains body-str ""Content-Transfer-Encoding: base64\r\n""))))+    (testing ""encode-request""+      (let [req (core/ring-request->netty-request {:request-method :get})+            [_ body] (mp/encode-request req parts)+            body-str (-> ^ChunkedInput body ^HttpContent (.readChunk ByteBufAllocator/DEFAULT) .content bs/to-string)]+        (validate body-str)+        (is (.contains body-str ""content-transfer-encoding: binary\r\n""))))))"
https://api.github.com/repos/clj-commons/aleph/pulls/590,838139902,"@@ -459,13 +459,16 @@     (netty/write ch fr)     (netty/write-and-flush ch empty-last-content))) +(defn- file->stream [^HttpFile file]+  (-> file+      (bs/to-byte-buffers {:chunk-size (.-chunk-size file)})+      s/->source))+ (defn send-file-body [ch ssl? ^HttpMessage msg ^HttpFile file]   (cond     ssl?-    (send-streaming-body ch msg-      (-> file-        (bs/to-byte-buffers {:chunk-size (.-chunk-size file)})-        s/->source))+    (let [body (when (pos-int? (.length file)) (file->stream file))]+      (send-streaming-body ch msg body))"
https://api.github.com/repos/clj-commons/aleph/pulls/592,846596763,"@@ -554,8 +554,11 @@                             ;; might be different in case we use :multipart                             (reset! save-body body)) -                          (netty/safe-execute ch-                            (http/send-message ch true ssl? req' body))))+                          (-> (netty/safe-execute ch+                                                  (http/send-message ch true ssl? req' body))+                              (d/catch' (fn [e]+                                          (s/put! responses e)"
https://api.github.com/repos/clj-commons/aleph/pulls/593,846929471,"@@ -13,7 +13,7 @@ (def other-dependencies   '[[org.clojure/tools.logging ""1.1.0"" :exclusions [org.clojure/clojure]]     [manifold ""0.1.9""]-    [org.clj-commons/byte-streams ""0.2.10""]+    [org.clj-commons/byte-streams ""0.3.0""]"
https://api.github.com/repos/clj-commons/aleph/pulls/601,878861385,"@@ -633,7 +633,7 @@ (defn attach-idle-handlers [^ChannelPipeline pipeline idle-timeout]   (if (pos? idle-timeout)     (doto pipeline-      (.addLast ""idle"" ^ChannelHandler (IdleStateHandler. 0 0 idle-timeout TimeUnit/MILLISECONDS))+      (.addFirst ""idle"" ^ChannelHandler (IdleStateHandler. 0 0 idle-timeout TimeUnit/MILLISECONDS))       (.addLast ""idle-close"" ^ChannelHandler (close-on-idle-handler)))"
https://api.github.com/repos/clj-commons/aleph/pulls/604,902218151,"@@ -203,41 +201,30 @@   (->> (bs/convert x (bs/stream-of ByteBuf) {:chunk-size chunk-size})     (s/onto nil))) +(defn ensure-dynamic-classloader+  ""Ensure the context class loader is always a `clojure.lang.DynamicClassLoader`+  to prevent `ClassNotFoundException`.+  https://github.com/clj-commons/aleph/issues/603.""+  []+  (let [thread (Thread/currentThread)+        context-class-loader (.getContextClassLoader thread)+        compiler-class-loader (.getClassLoader clojure.lang.Compiler)]+    (when-not (instance? DynamicClassLoader context-class-loader)+      (.setContextClassLoader+        thread (DynamicClassLoader. (or context-class-loader+                                        compiler-class-loader))))))"
https://api.github.com/repos/clj-commons/aleph/pulls/602,902267122,"@@ -186,7 +192,7 @@                                     client/close-connection))                :control-period control-period                :max-queue-size max-queue-size-               :controller (Pools/utilizationController+               :controller (create-pool-ctrl-fn                             target-utilization                             connections-per-host                             total-connections)"
https://api.github.com/repos/clj-commons/aleph/pulls/608,932074572,"@@ -40,15 +53,15 @@        :channel-active       ([_ ctx]-        (let [ch (.channel ctx)]-          (handler-            (doto-              (s/splice-                (netty/sink ch true netty/to-byte-buf)-                (reset! in (netty/source ch)))-              (reset-meta! {:aleph/channel ch}))-            (->TcpConnection ch)))-        (.fireChannelActive ctx))+       (when-not (-> ctx .pipeline (.get SslHandler))+         (call-handler ctx))+       (.fireChannelActive ctx))++      :user-event-triggered+      ([_ ctx evt]+       (when (instance? SslHandshakeCompletionEvent evt)"
https://api.github.com/repos/clj-commons/aleph/pulls/611,934785500,"@@ -100,6 +100,21 @@           nil))       (no-url req)))) +(defn exception-handler [ctx ex response-stream]+  (cond+    ;; could happens when io.netty.handler.codec.http.HttpObjectAggregator+    ;; is part of the pipeline+    (instance? TooLongFrameException ex)+    (s/put! response-stream ex)++    ;; when SSL handshake failed+    (netty/ssl-handshake-error? ex)+    (let [^Throwable handshake-error (.getCause ^Throwable ex)]+      (s/put! response-stream handshake-error))++    (not (instance? IOException ex))+    (log/warn ex ""error in HTTP client"")))"
https://api.github.com/repos/clj-commons/aleph/pulls/612,936275045,"@@ -725,63 +728,192 @@  ;;; +(defn coerce-ssl-provider [provider]+  (case provider+    :jdk SslProvider/JDK+    :openssl SslProvider/OPENSSL+    :openssl-refcnt SslProvider/OPENSSL_REFCNT))++(set! *warn-on-reflection* false)"
https://api.github.com/repos/clj-commons/aleph/pulls/521,946387754,"@@ -168,13 +168,13 @@               ;; handle request on a separate thread               (try                 (d/future-with executor-                  (handler req'))+                               (handler req'))"
https://api.github.com/repos/clj-commons/aleph/pulls/619,952209655,"@@ -0,0 +1,14 @@+(ns aleph.netty-test+  (:require+   [aleph.netty :as netty]+   [clojure.test :refer [deftest is]]+   [manifold.stream :as s])+  (:import+   (io.netty.channel.embedded EmbeddedChannel)))++(deftest closing-a-channel-sink+  (let [ch (EmbeddedChannel.)+        s (netty/sink ch)]+    (is (= true @(s/put! s ""foo"")))+    (is (nil? @(netty/wrap-future (netty/close ch))))+    (is (= false @(s/put! s ""foo"")))))"
https://api.github.com/repos/clj-commons/aleph/pulls/622,954206886,"@@ -240,19 +240,19 @@ (defn wrap-future   [^Future f]   (when f-    (if (.isSuccess f)-      (d/success-deferred (.getNow f) nil)-      (let [d (d/deferred nil)-            ;; Ensure the same bindings are installed on the Netty thread (vars,-            ;; classloader) than the thread registering the-            ;; `operationComplete` callback.-            bound-operation-complete (bound-fn* operation-complete)]-        (.addListener f-          (reify GenericFutureListener-            (operationComplete [_ _]-              (ensure-dynamic-classloader)-              (bound-operation-complete f d))))-        d))))+    (let [d (d/deferred nil)]+      (if (.isDone f)+        (operation-complete f d)"
https://api.github.com/repos/clj-commons/aleph/pulls/627,967751962,"@@ -541,7 +541,14 @@         (d/chain' (fn [_] (s/close! body))))     body)) +(defn init-stream-to-string-conversion! []+  (bs/to-string (doto (s/stream 1) (s/put! ""x"") s/close!)))"
https://api.github.com/repos/clj-commons/aleph/pulls/632,989131747,"@@ -0,0 +1,9 @@+# How to contribute to aleph"
https://api.github.com/repos/clj-commons/aleph/pulls/633,990878159,"@@ -1,9 +1,47 @@ # How to contribute to Aleph -This document is a work in progress!+Thanks for helping out! Aleph is a collaborative project that wouldn’t exist without the generous time and effort of many people.++This document is a work in progress, so if there's anything you feel needs to be added, pleae let us know, or file a PR.++## Local development environment++We require a recent version of [Leiningen](https://leiningen.org/), and a minimum Java version of 8. Running the deps update script will require bash on your system. Other than that, we have no specific requirements.++## Testing++`lein test` should be run, and pass, before pushing up to GitHub.++If you are fixing a bug, create a test that demonstrates it _first_, then write the fix. This ensures our understanding of the problem is correct.++## Linting++[clj-kondo](https://github.com/clj-kondo/clj-kondo) is recommended for linting. Because of the potemkin library and various proto-potemkin macros, Aleph can trigger a lot of false positives, and clj-kondo is the least bad at understanding them. (Handling this is ongoing; PRs welcome.)   ## Updating dependencies -After you've made your changes to `project.clj`, be sure to run the tests with `lein test`!+There’s some extra steps to test when updating dependencies:++1. Obviously, after you've made your changes to `project.clj`, be sure to rerun the tests with `lein test`."
https://api.github.com/repos/clj-commons/aleph/pulls/634,992059492,"@@ -28,12 +28,13 @@                                    [org.slf4j/slf4j-simple ""1.7.30""]                                    [com.cognitect/transit-clj ""1.0.324""]                                    [spootnik/signal ""0.2.4""]-                                   [me.mourjo/dynamic-redef ""0.1.0""]]}-             :lein-to-deps {:source-paths [""deps""]}-             ;; This is for self-generating certs for testing ONLY:-             :test {:dependencies [[org.bouncycastle/bcprov-jdk15on ""1.69""]+                                   [me.mourjo/dynamic-redef ""0.1.0""]+                                   ;; This is for self-generating certs for testing ONLY:+                                   [org.bouncycastle/bcprov-jdk15on ""1.69""]"
https://api.github.com/repos/clj-commons/aleph/pulls/596,996648267,"@@ -162,42 +170,87 @@     (let [req' (.finalizeRequest encoder)]       [req' (when (.isChunked encoder) encoder)]))) +(defrecord MultipartChunk [part-name+                           content+                           name+                           charset+                           mime-type+                           transfer-encoding+                           memory?+                           file?+                           file+                           size+                           ^ReferenceCounted raw-http-data]+  ReferenceCounted+  (refCnt [_]+    (.refCnt raw-http-data))+  (retain [_]+    (.retain raw-http-data))+  (retain [_ increment]+    (.retain raw-http-data increment))+  (^ReferenceCounted touch [_]+    (.touch raw-http-data))+  (^ReferenceCounted touch [_ ^Object hint]+    (.touch raw-http-data hint))+  (release [_]+    (.release raw-http-data))+  (release [_ decrement]+    (.release raw-http-data decrement)))+ (defmulti http-data->map   (fn [^InterfaceHttpData data]     (.getHttpDataType data)))  (defmethod http-data->map InterfaceHttpData$HttpDataType/Attribute   [^Attribute attr]   (let [content (.getValue attr)]-    {:part-name (.getName attr)-     :content content-     :name nil-     :charset (-> attr .getCharset .toString)-     :mime-type nil-     :transfer-encoding nil-     :memory? (.isInMemory attr)-     :file? false-     :file nil-     :size (count content)}))+    (map->MultipartChunk+     {:part-name (.getName attr)+      :content content+      :name nil+      :charset (-> attr .getCharset .toString)+      :mime-type nil+      :transfer-encoding nil+      :memory? (.isInMemory attr)+      :file? false+      :file nil+      :size (count content)+      :raw-http-data attr})))  (defmethod http-data->map InterfaceHttpData$HttpDataType/FileUpload   [^FileUpload data]   (let [memory? (.isInMemory data)]-    {:part-name (.getName data)-     :content (when memory?-                (bs/to-input-stream (netty/acquire (.content data))))-     :name (.getFilename data)-     :charset (-> data .getCharset .toString)-     :mime-type (.getContentType data)-     :transfer-encoding (.getContentTransferEncoding data)-     :memory? memory?-     :file? true-     :file (when-not memory? (.getFile data))-     :size (.length data)}))+    (map->MultipartChunk+     {:part-name (.getName data)+      :content (when memory?+                 (bs/to-input-stream (netty/acquire (.content data))))+      :name (.getFilename data)+      :charset (-> data .getCharset .toString)+      :mime-type (.getContentType data)+      :transfer-encoding (.getContentTransferEncoding data)+      :memory? memory?+      :file? true+      :file (when-not memory? (.getFile data))+      :size (.length data)+      :raw-http-data data})))  (defn- read-attributes [^HttpPostRequestDecoder decoder parts]-  (while (.hasNext decoder)-    (s/put! parts (http-data->map (.next decoder)))))+  (d/loop []+    (if-not (.hasNext decoder)+      (d/success-deferred true) ;; go for another chunk of body+      (let [^InterfaceHttpData data (.next decoder)]+        (if (nil? data)"
https://api.github.com/repos/clj-commons/aleph/pulls/639,1012172972,"@@ -577,12 +577,16 @@            epoll?            compression?            continue-handler-           continue-executor]+           continue-executor+           shutdown-quiet-period+           shutdown-timeout]"
https://api.github.com/repos/clj-commons/aleph/pulls/642,1018233370,"@@ -52,8 +52,8 @@    | `idle-timeout` | when set, connections are closed after not having performed any I/O operations for the given duration, in milliseconds. Defaults to `0` (infinite idle time).    | `continue-handler` | optional handler which is invoked when header sends \""Except: 100-continue\"" header to test whether the request should be accepted or rejected. Handler should return `true`, `false`, ring responseo to be used as a reject response or deferred that yields one of those.    | `continue-executor` | optional `java.util.concurrent.Executor` which is used to handle requests passed to :continue-handler.  To avoid this indirection you may specify `:none`, but in this case extreme care must be taken to avoid blocking operations on the handler's thread.-   | `shutdown-quiet-period` | optional period in seconds for which new connections will still be serviced after a scheduled shutdown via `java.io.Closeable#close`. Defaults to 2 seconds.-   | `shutdown-timeout` | optional grace period in seconds on which to wait for the event loop group to empty during a scheduled shutdown. Defaults to 15 seconds.""+   | `shutdown-hook` | An optional 0-arity function to run during `java.io.Closeable#close`, will be called once the server has stopped listening to incoming requests.+   | `shutdown-hook-timeout` | Interval in seconds within which the shutdown hook must complete."""
https://api.github.com/repos/clj-commons/aleph/pulls/652,1063955933,"@@ -41,7 +40,7 @@ (deftest test-classloader   (testing ""classloader: ensure the class loader is always a DynamicClassLoader""     (let [result (CompletableFuture.)]-      (with-dynamic-redefs [netty/operation-complete (partial operation-complete result)]+      (with-redefs [netty/operation-complete (partial operation-complete result)]"
https://api.github.com/repos/clj-commons/aleph/pulls/656,1086255639,"@@ -206,23 +217,32 @@    flag to know whether content might be read directly from `:content` or    should be fetched from the file specified in `:file`. +   If you want to use temporary files storage, you will have to fallback+   to `:manual-cleanup?` otherwise the files will be removed from the filesystem+   before you had time to copy them on another location.+   Instead of returning a manifold stream, it will return vector composed of a+   manifold stream and a callback to clean the resources.+   See: https://cljdoc.org/d/aleph/aleph/CURRENT/doc/http/handling-multipart-requests#manual-cleanup+    Note, that if your handler works with multipart requests only,    it's better to set `:raw-stream?` to `true` to avoid additional    input stream coercion.""   ([req] (decode-request req {}))   ([{:keys [body] :as req}     {:keys [body-buffer-size-            memory-limit]+            memory-limit+            manual-cleanup?]      :or {body-buffer-size 65536           memory-limit DefaultHttpDataFactory/MINSIZE}}]"
https://api.github.com/repos/clj-commons/aleph/pulls/654,1086260334,"@@ -16,6 +16,8 @@                  [io.netty/netty-transport ~netty-version]                  [io.netty/netty-transport-native-epoll ~netty-version :classifier ""linux-x86_64""]                  [io.netty/netty-transport-native-epoll ~netty-version :classifier ""linux-aarch_64""]+                 [io.netty/netty-transport-native-kqueue ~netty-version :classifier ""osx-x86_64""]+                 [io.netty.incubator/netty-incubator-transport-native-io_uring ""0.0.12.Final"" :classifier ""linux-x86_64""]"
https://api.github.com/repos/clj-commons/aleph/pulls/658,1087269624,"@@ -305,15 +308,22 @@                      (netty/flush ch)                      body))] -    (let [src (if (or (sequential? body') (s/stream? body'))+    (let [d (d/deferred)+          src (if (or (sequential? body') (s/stream? body'))                 (->> body'                      s/->source-                     (s/map (fn [x]-                              (try-                                (netty/to-byte-buf x)-                                (catch Throwable e-                                  (log/error e ""error converting "" (.getName (class x)) "" to ByteBuf"")-                                  (netty/close ch))))))+                     (s/transform+                      (comp+                       (map+                        (fn [x]+                          (try+                            (netty/to-byte-buf x)+                            (catch Throwable e+                              (log/error ""error converting"" (.getName (class x)) ""to ByteBuf"")+                              (d/error! d e)+                              (netty/close ch)+                              nil))))"
https://api.github.com/repos/clj-commons/kibit/pulls/134,29708942,"@@ -118,7 +118,7 @@ Put the following into your `~/.emacs`: ;; Teach compile the syntax of the kibit output (require 'compile) (add-to-list 'compilation-error-regexp-alist-alist-	     '(kibit ""At \\([^:]+\\):\\([[:digit:]]+\\):"" 1 2 nil 0))+	     '(kibit ""At \\([^:]+\\):\\([[:digit:]]+\\):"" 1 2 nil 2))"
https://api.github.com/repos/clj-commons/kibit/pulls/139,37501614,"@@ -30,20 +31,22 @@   (sort-by #(.getAbsolutePath ^File %)            (filter clojure-file? (file-seq dir)))) -(defn run [source-paths & args]+(defn run [source-paths rules & args]   (let [[options file-args usage-text] (apply (partial cli args) cli-specs)         source-files (mapcat #(-> % io/file find-clojure-sources-in-dir)                              (if (empty? file-args) source-paths file-args))]-    (mapcat (fn [file] (try (check-file file :reporter (name-to-reporter (:reporter options)-                                                                         cli-reporter))-                            (catch Exception e-                              (println ""Check failed -- skipping rest of file"")-                              (println (.getMessage e)))))+    (mapcat (fn [file] (try (check-file file+                                       :reporter (name-to-reporter (:reporter options)+                                                                   cli-reporter)+                                       :rules (or rules all-rules))+                           (catch Exception e"
https://api.github.com/repos/clj-commons/kibit/pulls/161,66880219,"@@ -39,10 +39,10 @@                                         :reporter (name-to-reporter (:reporter options)                                                                     cli-reporter)                                         :rules (or rules all-rules))-                            (catch Exception e+                            (catch Throwable e                               (binding [*out* *err*]-                                (println ""Check failed -- skipping rest of file"")-                                (println (.getMessage e))))))+                                (println (str ""At "" (.getPath file) "":0:\nCheck failed -- skipping rest of file""))"
https://api.github.com/repos/clj-commons/kibit/pulls/179,107082236,"@@ -0,0 +1,28 @@+(ns leiningen.kibit+  (:require [leiningen.core.eval :refer [eval-in-project]]+            [clojure.tools.namespace.find :refer [find-namespaces]])+  (:import [java.io File]))+++(defn ^:no-project-needed kibit+  [project & args]+  (let [src-paths (get-in project [:kibit :source-paths] [""rules""])+        kibit-project `{:dependencies [[jonase/kibit ""0.1.3""]]"
https://api.github.com/repos/clj-commons/kibit/pulls/184,113526216,"@@ -20,5 +20,7 @@   ;; set   [(into #{} ?coll) (set ?coll)] -  [(take ?n (repeatedly ?coll)) (repeatedly ?n ?coll)])+  [(take ?n (repeatedly ?coll)) (repeatedly ?n ?coll)]+  [(doall (map ?fn ?coll)) (run! ?fn ?coll)]"
https://api.github.com/repos/clj-commons/kibit/pulls/198,129702389,"@@ -0,0 +1,20 @@+(ns resources.keywords+  (:require [clojure.java.io :as io]))++(defn aliased-keyword-access"
https://api.github.com/repos/clj-commons/kibit/pulls/228,277457066,"@@ -1,11 +1,13 @@ language: clojure+lein: 2.9.1 install:-- ""pushd kibit""-- ""lein deps""-- ""popd""+- ""LEIN_USE_BOOTCLASSPATH=no lein cache-version"""
https://api.github.com/repos/clj-commons/kibit/pulls/236,707478477,"@@ -41,17 +42,60 @@   (sort-by #(.getAbsolutePath ^File %)            (filter clojure-file? (file-seq dir)))) +(declare read-edn-file)++(defn- opts [^java.io.File cfg-file]"
https://api.github.com/repos/clj-commons/kibit/pulls/159,707531570,"@@ -31,23 +31,54 @@   (sort-by #(.getAbsolutePath ^File %)            (filter clojure-file? (file-seq dir)))) -(defn run [source-paths rules & args]+(defn filtered-rules+  [rules excludes file]+  (let [file-entry (get excludes (.getName file))"
https://api.github.com/repos/clj-commons/kibit/pulls/252,1179843327,"@@ -140,10 +140,16 @@ instead of: Add the following to your aliases  ```clojure-:kibit {:extra-deps {jonase/kibit {:mvn/version ""0.1.8""}}-         :main-opts [""-e"" ""(require,'[kibit.driver,:as,k])(k/external-run,[\""src\""],nil)""]}+:kibit {:extra-deps {jonase/kibit {:mvn/version ""0.2.0""}}"
https://api.github.com/repos/clj-commons/seesaw/pulls/15,36613,"@@ -1376,6 +1377,65 @@       (keyword? s) (input-impl nil f (drop 1 args))       :else        (input-impl f  s (drop 2 args))))) ++;*******************************************************************************+; File input+(let [last-directory (atom nil)]+ (defn-match ^{:arglists '[[parent & {:keys [directory multi-select? remember-directory? filters success-fn abort-fn]}]]}+   file-input+   ""Show a file chooser dialog.++      (file-input [source] & options)++  source  - optional parent component+  options - additional options++  Additional options:++    :parent               The parent component.+    :directory            The initial directory to list files from. Default: \"".\"".+    :multi-select?        Flag specifying whether to allow/disallow selection of multiple files. Default: false.+    :remember-directory?  Flag specifying whether to remember the directory for future file-input invocations in case of successful exit. Default: true.+    :filters              A seq of lists where each list contains a filter name and a seq of extensions as strings for that filter. Default: [].+    :success-fn           Function which will be called with the JFileChooser and the File which has been selected by the user. Its result will be returned. Default: return selected File. In the case of MULTI-SELECT? being true, a seq of File instances will be passed instead of a single File.+    :abort-fn             Function which will be called with the JFileChooser on user abort of the dialog. Its result will be returned. Default: returns nil.++  Examples:++    ; ask & return single file+    (file-input)++    ; ask & return including a filter for image files+    (file-input :filters [[\""Images\"" [\""png\"" \""jpeg\""]]])++    ; ask & return file as string+    (file-input :success-fn (fn [fc file] (.getAbsolutePath file)))++  Returns result of SUCCESS-FN in case of the user selecting a file, or result of ABORT-FN otherwise.""+   ([] (file-input :parent nil))+   ([(and java.awt.Component ?parent) & ?kw]+      (apply file-input parent kw))"
https://api.github.com/repos/clj-commons/seesaw/pulls/21,37042,"@@ -1307,6 +1307,79 @@   ;*******************************************************************************+; Dialog+(def ^{:private true} dialog-options {+  :modal? #(do (check-args (isa? (type %2) Boolean) "":snap-to-ticks? must be a boolean."")+               (.setModal %1 %2))+})++(def ^:private current-modal-dialogs (atom nil))++(defn return-from-dialog+  ""Return from the current dialog with the specified value. The dialog+  must be modal and created from within the DIALOG fn with both+  VISIBLE? and MODAL? set to true.""+  [x]+  (if (empty? @current-modal-dialogs)+    (throw (IllegalArgumentException. ""Cannot return from dialog, as there is no modal dialog.""))+    (let [{:keys [dialog result]} (first @current-modal-dialogs)]+     (try+       (reset! result x)+       (invoke-later (.dispose dialog))+       (finally+        (swap! current-modal-dialogs (fn [v] (drop 1 v))))))))++(defn dialog+  ""Create a dialog and display it.++      (dialog ... options ...)++  Besides the default & frame options, options can also be one of:++    :modal?  A boolean value indicating whether this dialog is to be a+              modal dialog.  If :modal? *and* :visible? are set to+              true (:visible? is true per default), the function will+              block with a dialog. The function will return once the user:+              a) Closes the window by using the system window+                 manager (e.g. by pressing the \""X\"" icon in many OS's)+              b) A function from within an event calls the dialogs+                 dispose method.+              c) A function from within an event calls RETURN-FROM-DIALOG+                  with a return value.+              In the case of a) and b), this function returns nil. In the+              case of c), this function returns the value passed to+              RETURN-FROM-DIALOG.++  Returns a JDialog if :visible? & :modal? are not both true. Otherwise+  will block & return a value as further documented for argument :modal?.++""+  [& {:keys [width height visible? pack? modal?] +      :or {width 100 height 100 visible? true pack? true}+      :as opts}]+  (let [dlg-result (atom nil)+        dlg (apply-options (JDialog.) +                           (dissoc opts :width :height :visible? :pack?) (merge dialog-options frame-options))]+    (cond-doto dlg+      true     (.setSize width height)+      pack?    (.pack))+    (if (and modal? visible?)+      (do+        (listen dlg+                :window-opened+                (fn [_] (when (.isModal dlg)+                          (swap! current-modal-dialogs (fn [v] (concat [{:dialog dlg :result dlg-result}] v)))))+                #{:window-closed}+                (fn [_]+                  (println ""blub"")"
https://api.github.com/repos/clj-commons/seesaw/pulls/57,115766,"@@ -33,6 +34,7 @@                                             (java.io.File. (str dir))))))   :multi? (bean-option [:multi? :multi-selection-enabled] JFileChooser boolean)   :selection-mode (bean-option [:selection-mode :file-selection-mode] JFileChooser file-selection-modes)+  :filter #(.setFileFilter ^JFileChooser %1 %2)"
https://api.github.com/repos/clj-commons/seesaw/pulls/153,6646275,"@@ -17,23 +17,14 @@             [seesaw.widget-options :as widget-options]             clojure.reflect             clojure.string)-  (:import [org.fife.ui.rsyntaxtextarea SyntaxConstants]))--(defn- normalize-style-name [s]-  (-> (name s)-    (clojure.string/replace ""_"" ""-"")-    (clojure.string/lower-case)-    (.substring (count ""SYNTAX_STYLE_""))-    keyword))+  (:import [org.fife.ui.rsyntaxtextarea AbstractTokenMakerFactory])) +;;; Go through the available syntax highlighting modes,+;;; e.g. ""text/clojure"" and then for backwards compatibility map them to+;;; keywords without the text/ namespace, e.g. :clojure (def ^{:private true} syntax-table-  (->> (clojure.reflect/reflect SyntaxConstants)-    :members-    (map :name)-    ; there's gotta be a better way-    (map (fn [n]-           [(normalize-style-name n) (eval `(. SyntaxConstants ~n))]))-    (into {})))+  (let [keys (.keySet (AbstractTokenMakerFactory/getDefaultInstance))]+    (into {} (map (juxt (comp keyword name keyword) identity) keys))))"
https://api.github.com/repos/clj-commons/seesaw/pulls/157,7683237,"@@ -65,7 +65,11 @@           (apply file-filter f)          :else-          (illegal-argument ""not a valid filter: %s"" f)))))+        (illegal-argument ""not a valid filter: %s"" f)))))++(defn- set-suggested-name [^JFileChooser chooser suggested-name]+  (.setSelectedFile chooser (if (instance? java.io.File suggested-name)"
https://api.github.com/repos/clj-commons/seesaw/pulls/185,21215526,"@@ -72,11 +72,15 @@     (default-option :dir       (fn [^JFileChooser chooser dir]          (.setCurrentDirectory chooser (if (instance? java.io.File dir) dir -                                          (java.io.File. (str dir))))))+                                          (java.io.File. (str dir))))))         (bean-option [:multi? :multi-selection-enabled] JFileChooser boolean)     (bean-option [:selection-mode :file-selection-mode] JFileChooser file-selection-modes)     (default-option :filters set-file-filters)-    (bean-option [:all-files? :accept-all-file-filter-used] JFileChooser boolean)))+    (bean-option [:all-files? :accept-all-file-filter-used] JFileChooser boolean)+    (default-option :suggest-name"
https://api.github.com/repos/clj-commons/seesaw/pulls/182,69988212,"@@ -1,4 +1,4 @@-(defproject seesaw ""1.4.5-SNAPSHOT""+(defproject seesaw ""1.4.5"""
https://api.github.com/repos/clj-commons/seesaw/pulls/219,214337665,"@@ -20,7 +20,7 @@   ;   :aliases { ""examples"" [""run"" ""-m"" ""seesaw.test.examples.launcher""] } -  :dependencies [[org.clojure/clojure ""1.8.0""]+  :dependencies [[org.clojure/clojure ""1.4.0""]"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/156,283154803,"@@ -12,6 +12,8 @@                         ""-J-Dclojure.spec.skip-macros=true""                         ""-J-Dclojure.compiler.direct-linking=true""                         ""-H:IncludeResources=clj_kondo/impl/cache/built_in/.*/.*transit.json$""+                        ""-H:ReflectionConfigurationFiles=reflection.json"""
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/231,290558989,"@@ -1,58 +1,25 @@ (ns clj-kondo.main   {:no-doc true}   (:gen-class)+  (:refer-clojure :exclude [run!])"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/517,333440523,"@@ -1372,26 +1400,9 @@                                  (:children parsed)))]       analyzed-expressions)     (catch Exception e-      (if dev? (throw e)-          {:findings [(let [m (.getMessage e)]-                        (if-let [[_ msg row col]-                                 (and m-                                      (re-find #""(.*)\[at line (\d+), column (\d+)\]""-                                               m))]-                          {:level :error-                           :filename filename-                           :col (Integer/parseInt col)-                           :row (Integer/parseInt row)-                           :type :syntax-                           :message (str/trim msg)}-                          {:level :error-                           :filename filename-                           :col 0-                           :row 0-                           :type :syntax-                           :message (str ""can't parse ""-                                         filename "", ""-                                         (or m (str e)))}))]}))+      (if dev?+        (throw e)+        (->findings e filename)))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/523,334191867,"@@ -22,8 +22,31 @@                 (and (Double/isInfinite thing)                      (< thing 0)))))) +(defn- parse-error+  ""Parse the source, which is expected to contain a syntax error, and return the+  error message produced from rewrite-clj.""+  [source]+  (try+    (parse-string source)+    nil+    (catch Exception e+      (.getMessage e))))++(deftest parse-string-test+  ;; This test has every syntax error that can cause rewrite-clj to throw using+  ;; the `clj-kondo.impl.rewrite-clj.parser.utils/throw-reader` function.+  ;; This allows us to test for regressions when that function is refactored.+  (are [source message] (= message (parse-error source))+    ""["" ""Unexpected EOF. [at line 1, column 2]""+    ""[}"" ""Unmatched delimiter: } [at line 1, column 2]""+    ""#"" ""Unexpected EOF. [at line 1, column 2]""+    "":"" ""unexpected EOF while reading keyword. [at line 1, column 2]""+    ""\"""" ""Unexpected EOF while reading string. [at line 1, column 2]""+    ""#?"" "":reader-macro node expects 1 value. [at line 1, column 3]""+    ""#:"" ""Unexpected EOF. [at line 1, column 3]""))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/534,334672599,"@@ -50,7 +51,7 @@     "":""  [[""unexpected EOF while reading keyword."" 1 2]]     ""\"""" [[""Unexpected EOF while reading string."" 1 2]]     ""#?"" [["":reader-macro node expects 1 value."" 1 3]]-    ""[1..1]"" [[""Invalid number: 1..1."" 0 0]]+    ""[1..1]"" [[""Invalid number: 1..1."" 1 4]]"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/747,376811423,"@@ -0,0 +1,42 @@+(ns clj-kondo.single-arity-comparison-test+  (:require+   [clj-kondo.test-utils :refer [lint! assert-submaps]]+   [clojure.test :as t :refer [deftest is testing]]))++(deftest single-arity-comparison-test+  (testing ""test full linting error for single arity comparison in clojure""+    (assert-submaps+     '({:file ""<stdin>"", :row 1, :col 1, :level :warning,+        :message ""single arity use of clojure.core/= is constantly true""})+     (lint! ""(= 1)"")))++  (testing ""test full linting error for single arity comparison in cljs""+    (assert-submaps+     '({:file ""<stdin>"", :row 1, :col 1, :level :warning,+        :message ""single arity use of cljs.core/not= is constantly false""})+     (lint! ""(not= 1)"" ""--lang"" ""cljs"")))++  (testing ""test linting comparison operators with single arity""+    (doseq [lang [""clj"" ""cljs""]+            op [""="" "">"" ""<"" "">="" ""<="" ""==""]+            :let [errors (lint! (str ""("" op "" 1)"") ""--lang"" lang)]]+      (is (= (count errors) 1))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/751,376832447,"@@ -2483,6 +2483,32 @@   (is (empty? (lint! ""(ns main.core (:require [\""/vendors/daterangepicker\""]))""                      ""--lang"" ""cljc"" ""--cache"" ""true"")))) +(deftest lint-bangs!+  (are [input expected] (testing input"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/823,399558902,"@@ -0,0 +1,14 @@+(ns clj-kondo.jdbc-test+  (:require+   [clj-kondo.test-utils :refer [lint!]]+   [clojure.java.io :as io]+   [clojure.test :as t :refer [deftest is testing]]+   [missing.test.assertions]))++(deftest next-jdbc-test"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/826,401464020,"@@ -5,6 +5,7 @@    [clj-kondo.impl.config :as config]    [clj-kondo.impl.findings :as findings]    [clj-kondo.impl.namespace :as namespace]+   [clj-kondo.impl.rewrite-clj.node.protocols :as node]"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/831,401687052,"@@ -103,11 +104,17 @@              :canonical-paths false ;; set to true to see absolute file paths and jar files              }}) +(def renamed-config-keys+  {:if :missing-else-branch})+ (defn merge-config! [cfg* cfg]   (if (empty? cfg) cfg*       (let [cfg (cond-> cfg-                  (:skip-comments cfg)-                  (-> (update :skip-args vconj 'clojure.core/comment 'cljs.core/comment)))]+                        (:skip-comments cfg)+                        (-> (update :skip-args vconj 'clojure.core/comment 'cljs.core/comment))++                        :always+                        (update-in [:linters] set/rename-keys renamed-config-keys))]"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/839,405180845,"@@ -54,23 +54,29 @@                                      (:arg-types ctx)))]          (mapcat #(analyze-expression** ctx %) children)))))) -(defn analyze-keys-destructuring-defaults [ctx m defaults]-  (let [defaults (into {}-                       (for [[k _v] (partition 2 (:children defaults))-                             :let [sym (:value k)]-                             :when sym]-                         [(:value k) (meta k)]))]-    (doseq [[k v] defaults]-      (when-not (contains? m k)-        (findings/reg-finding!-         ctx-         {:message (str k "" is not bound in this destructuring form"") :level :warning-          :row (:row v)-          :col (:col v)-          :end-row (:end-row v)-          :end-col (:end-col v)-          :filename (:filename ctx)-          :type :unbound-destructuring-default}))))+(defn analyze-keys-destructuring-defaults [ctx m defaults opts]+  (let [skip-reg-binding? (when (:fn-args? opts)+                            (-> ctx :config :linters :unused-binding+                                :exclude-destructured-keys-in-fn-args))]+    (when-not skip-reg-binding?+      (let [defaults (into {}+                           (for [[k _v] (partition 2 (:children defaults))+                                 :let [sym (:value k)]+                                 :when sym]+                             [(:value k) (meta k)]))]+        (doseq [[k v] defaults]+          (let [binding (get m k)]+            (if-not binding+              (findings/reg-finding!+               ctx+               {:message (str k "" is not bound in this destructuring form"") :level :warning+                :row (:row v)+                :col (:col v)+                :end-row (:end-row v)+                :end-col (:end-col v)+                :filename (:filename ctx)+                :type :unbound-destructuring-default})+              (namespace/reg-destructuring-default! ctx v binding)))))))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/849,406647052,"@@ -38,6 +38,7 @@ Some linters are not enabled by default. Right now these linters are:  - `:missing-docstring`: warn when public var doesn't have a docstring. - `:unsorted-required-namespaces`: warn when namespaces in `:require` are not sorted.+- `:refer`: warn when there is **any** usage of `:refer` or `:refer-all` in your namespace requirements."
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/824,409048733,"@@ -2082,16 +2082,16 @@     (when (.exists (io/file "".clj-kondo""))       (rename-path "".clj-kondo"" "".clj-kondo.bak""))     (make-dirs "".clj-kondo"")-    (lint! ""(ns app.core) (defn foo [])"" ""--cache"")+    (lint! ""(ns app.core) (defn foo [])"" ""--cache"" ""true"")"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/868,415037992,"@@ -191,6 +191,21 @@                    (str ns-name ""/"" fn-name)                    (some? const-true)))))))) +(defn- lint-missing-clause-in-try+  [call]+  (when (utils/one-of (:name call) [try try+])"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/879,422380396,"@@ -75,3 +77,4 @@ clj-kondo*.snap .DS_Store !corpus/*jar lsp+run();"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/953,467524283,"@@ -0,0 +1,6 @@+- id: clj-kondo+  name: clj-kondo+  description: A linter for Clojure code that sparks joy+  entry: --entrypoint clj-kondo borkdude/clj-kondo:latest --lint"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1044,506427173,"@@ -95,7 +95,7 @@ This is the code for the hook: (ns hooks.with-bound   (:require [clj-kondo.hooks-api :as api])) -(defn with-bound [{:keys [:node]}]+(defn with-bound [{:keys [node]}]"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1114,553235468,"@@ -109,7 +112,48 @@              (do                (reset! findings [])                (analyze ""1..1"")-               @findings))))))+               @findings))))++    (testing ""duplicate map keys"""
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1117,555386264,"@@ -740,10 +740,15 @@ foo/foo ;; this does use the private var   (assert-submaps    '({:file ""<stdin>"",       :row 1,-      :col 1,+      :col 9,+      :level :warning,+      :message ""Missing else branch.""}+     {:file ""<stdin>"",+      :row 1,+      :col 35,       :level :warning,       :message ""Missing else branch.""})-   (lint! ""(if-let [x 1] true)""))+   (lint! ""#?(:clj (if-let [x 1] true) :cljs (if-let [x 1] true))"" ""--lang"" ""cljc""))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1118,556439245,"@@ -2529,6 +2529,36 @@ foo/foo ;; this does use the private var  "" {:linters {:unsorted-required-namespaces {:level :warning}}}))))) +(deftest require-prefix-form-containing-periods-test"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1124,558193350,"@@ -326,6 +326,34 @@         :to clojure.core}]      var-usages))) +(deftest ^:test-refresh/focus analysis-signatures-test"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1130,559448734,"@@ -96,3 +96,10 @@                        :filename filename                        :lang (when (= :cljc (:base-lang ctx)) (:lang ctx))                        :id (:id binding)))))++(defn reg-keyword-usage! [{:keys [:analysis] :as ctx} filename usage]"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1132,559768995,"@@ -81,4 +82,19 @@     (is (empty? (lint! ""(import '[java.util Foo]) (defn foo [^Foo x] x)"")))     (is (empty? (lint! ""(import '[java.util Foo]) (try 1 (catch Foo _e nil))"")))     (is (empty? (lint! ""(ns foo (:import [foo Bar])) (defn foo [x] x) (defn bar [x] (-> x ^Bar (.execute)))""))))-)+  (testing ""return import info""+    (assert-submaps+      '({:type :unused-import,+         :message ""Unused import Date"",+         :level :warning,+         :row 1,+         :end-row 1,+         :end-col 33,+         :col 29,+         :import java.util.Date"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1133,560119062,"@@ -207,8 +207,11 @@  (defn reg-alias!   [{:keys [:base-lang :lang :namespaces]} ns-sym alias-sym aliased-ns-sym]-  (swap! namespaces assoc-in [base-lang lang ns-sym :qualify-ns alias-sym]-         aliased-ns-sym))+  (swap! namespaces+         (fn [n]+           (-> n+               (assoc-in [base-lang lang ns-sym :qualify-ns alias-sym] aliased-ns-sym)+               (assoc-in [base-lang lang ns-sym :aliases alias-sym] aliased-ns-sym)))))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1214,593202374,"@@ -228,8 +228,8 @@ and CLJC (`.cljc`)<sup>1</sup>. 4. Scope: `Current file` 5. In the Program field, type `clj-kondo` 6. In the Arguments field, type `--lint $FilePath$`<br>-You may use a custom config E.g `--lint $FilePath$ --config ""{:lint-as {manifold.deferred/let-flow clojure.core/let}}""`-7. In the Working directory field, type `$FileDir$`+You may use a custom config E.g `--lint $FilePath$ --config ""{:lint-as {manifold.deferred/let-flow clojure.core/let}}""` or `--lint $FilePath$ --config your-custom-path/clj-kondo.conf.js""`"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1260,617869500,"@@ -126,14 +126,34 @@     (testing ""no namespace for key :a""       (let [a (analyze ""#:xml{:_/a 1}""                        {:config {:output {:analysis {:keywords true}}}})]-        (is (= '{:row 1, :col 7, :end-row 1, :end-col 11, :name ""a"", :filename ""<stdin>""}-               (first (:keywords a))))))+        (assert-submaps"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1261,618430183,"@@ -188,10 +188,19 @@ directory, use `--cache false`.  ## Exit codes +Exit codes can be controlled by the `--fail-level <level>` option. The+default fail level is `warning` which will return the following exit codes:+ - `0`: no errors or warnings were found - `2`: one or more warnings were found - `3`: one or more errors were found +If `--fail-level error` is supplied a 0 exit will occur for any level:"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1264,618759884,"@@ -391,10 +391,11 @@  (defn normalize-sym-name   ""Strips foo.bar.baz into foo, as it ignores property access in CLJS. Assumes simple symbol.""-  [lang sym]-  (if (identical? :cljs lang)+  [ctx sym]+  (if (identical? :cljs (:lang ctx))     (let [name-str (str sym)]       (if (and+           (not (get-in ctx [:ns :aliases sym]))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1266,619852081,"@@ -19,9 +19,9 @@  (defn reg-keyword!   ([k]-   (reg-keyword! k true))+   (reg-keyword! k nil))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1302,654903246,"@@ -136,9 +136,9 @@                 idacs                 [:clj :cljs :cljc])]     (reduce (fn [idacs lang]-              (update-in idacs [lang :defs]-                         (fn [defs]-                           (update-defs idacs cache-dir lang defs)))+              #_(update-in idacs [lang :defs]"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1343,680497633,"@@ -982,6 +983,10 @@                           var-name                           expr                           (assoc (meta expr)+                                 :name-row (:row (meta var-name))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1358,691632585,"@@ -2178,8 +2178,10 @@           ;; analyze-expressions should go first in order to process ignores           (when (identical? :edn lang)             (let [fn (.getName (io/file filename))]-              (when (= fn ""deps.edn"")-                (deps-edn/lint-deps-edn ctx (first (:children parsed)))))))))+              (condp = fn"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1387,712211961,"@@ -1817,6 +1816,8 @@                                     :end-row (:end-row expr-meta)                                     :col col                                     :end-col (:end-col expr-meta)+                                    :scope-end-row (:end-row expr-meta)"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1418,729699898,"@@ -925,6 +927,7 @@   (let [children (next (:children expr))         var-name-node (->> children first (meta/lift-meta-content2 ctx))         metadata (meta var-name-node)+        user-coded-meta (dissoc metadata :row :col :end-row :end-col)"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1421,730305387,"@@ -453,6 +453,7 @@                ctx                (-> (node->line filename k :unused-referred-var (str ""#'"" var-ns ""/"" (:name v) "" is referred but never used""))                    (assoc :ns (export-ns-sym var-ns)"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1462,753710288,"@@ -114,6 +114,15 @@       (assert-submaps        '[{:name ""kw"" :reg user/mydef}]        (:keywords a))))+  (testing ""var usage in re-frame.core/reg-event-db body makes reg available in :context under :in-reg key""+    (let [a (analyze ""(require '[re-frame.core :as rf])+                      (rf/reg-event-db ::a (constantly {}))""+                     {:config {:output {:analysis {:keywords true}}}})]+      (assert-submaps+       '[{:name require}+         {:name constantly :context {:in-reg {:k :a :reg re-frame.core/reg-event-db}}}"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1466,760069057,"@@ -1896,11 +1896,14 @@                         ([re-frame.core reg-event-db]                          [re-frame.core reg-event-fx]                          [re-frame.core reg-event-ctx]-                         [re-frame.core reg-sub]                          [re-frame.core reg-sub-raw]                          [re-frame.core reg-fx]                          [re-frame.core reg-cofx])                         (re-frame/analyze-reg ctx expr (symbol (str resolved-namespace) (str resolved-name)))+                        ([re-frame.core subscribe])+                        (re-frame/analyze-subscribe ctx (next (:children expr)) (str resolved-namespace))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1487,763805371,"@@ -23,6 +23,13 @@            body))))    defined-by)) +(defn analyze-testing [ctx expr resolved-as-namespace]+  (let [[testing testing-str & rest-children] (:children expr)+        kns (keyword resolved-as-namespace)]+    (common/analyze-children (assoc-in ctx [:context kns :testing-str] (utils/sexpr testing-str))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1489,766191143,"@@ -486,10 +490,11 @@               ctx)         private? (or (= ""defn-"" call)                      (:private var-meta))-        docstring (or (some-> meta-node2-meta :doc str)-                      (some-> meta-node-meta :doc str)-                      docstring-                      (some-> var-leading-meta :doc str))+        [doc-node docstring] (if docstring+                               [doc-node docstring]+                               ;; TODO: too late to get raw var-leading-meta node"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1493,767158417,"@@ -40,3 +40,10 @@                                                                     is-expr                                                                     args)))]     (common/analyze-expression** ctx new-node)))++(defn testing-hook [{:keys [node]}]+  (let [[testing testing-str & children] (:children node)+        new-node (assoc node :children+                        (list* (assoc-in testing [:context :clojure.test :testing-str] (utils/sexpr testing-str))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1491,767335237,"@@ -551,9 +551,25 @@         (if (identical? :cljs (:lang ctx))           [(ctx-with-linters-disabled ctx [:unresolved-symbol :private-call])            nil]-          [ctx {:quote? true}])]+          [ctx {:quote? true}])+        clauses        (rest children)+        test-constants (reduce (fn [acc c]+                                 (if (= :list (:tag c))+                                   (into acc (:children c))+                                   (conj acc c)))+                               []+                               (take-nth 2 (if (even? (count clauses))+                                             clauses+                                             (butlast clauses))))]     (analyze-expression** ctx matched-val)-    (loop [[constant expr & exprs] (rest children)]+    (doseq [[_ occs] (group-by identity test-constants)"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1497,768096059,"@@ -751,6 +738,32 @@ This will disable the warning in: (defmulti f (fn [a b] a)) ``` +### Used underscored bindings++*Keyword:* `:used-underscored-binding`.++*Description:* warn when a underscored (ie marked as unused) binding is used.++*Default level:* `:off`.++*Example trigger:* `(cond :else 1 (odd? 1) 2)`."
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1499,769173078,"@@ -2374,26 +2373,11 @@ i/blank? (i/starts-with?) i/x                        :type-mismatch {:level :error}}})))   (is (empty? (lint! "" (ns dev.clj-kondo {:clj-kondo/config '{:linters {:missing-docstring {:level :warning}}}}-(:require [potemkin :refer [import-vars]]))+(:require [potemkin :refer [import-vars]]+          [clojure.string]))  (import-vars [clojure.string blank?, starts-with?, ends-with?, includes?])""                      {:linters {:unresolved-symbol {:level :error}}})))-  (is (empty? (lint! ""-(ns foo.bar)--(defn foo []) ;; non-empty to generated ns cache--;; dynamically generated baz"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1512,771861610,"@@ -354,6 +354,20 @@                   (and call?                        (not (utils/linter-disabled? call :single-logical-operand))                        (lint-single-logical-operand call))]]+      (when (and (not (utils/linter-disabled? ctx :two-argument-reduce))+                 (= fn-name 'reduce)+                 (= 2 arity)+                 (#{'clojure.core 'cljs.core} fn-ns))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1513,772661801,"@@ -359,7 +359,7 @@               arg-list (sexpr arg-vec)               arity (analyze-arity arg-list)               ret (cond-> {:arg-bindings (dissoc arg-bindings :analyzed)-                           :arity arity"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1524,777913819,"@@ -359,3 +365,4 @@ and error counts on the message line: ```kak define-command -hidden -override lint-show-counters %{} ```+::q!::q"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1541,785260202,"@@ -2115,30 +2115,59 @@                         m)                       (cons call analyzed)))))))))) -(defn lint-keyword-call! [ctx kw namespaced? arg-count expr]+(defn analyze-keyword-call [ctx kw namespaced? arg-count expr]   (let [callstack (:callstack ctx)-        config (:config ctx)]-    (when-not (config/skip? config :invalid-arity callstack)-      (let [ns (:ns ctx)-            ?resolved-ns (if namespaced?-                           (if-let [kw-ns (namespace kw)]-                             (or (get (:qualify-ns ns) (symbol kw-ns))-                                 ;; because we couldn't resolve the namespaced-                                 ;; keyword, we print it as is-                                 (str "":"" (namespace kw)))-                             ;; if the keyword is namespace, but there is no-                             ;; namespace, it's the current ns-                             (:name ns))-                           (namespace kw))-            kw-str (if ?resolved-ns (str ?resolved-ns ""/"" (name kw))-                       (str (name kw)))]-        (when (or (zero? arg-count)-                  (> arg-count 2))-          (findings/reg-finding! ctx-                                 (node->line (:filename ctx) expr :invalid-arity-                                             (format ""keyword :%s is called with %s args but expects 1 or 2""-                                                     kw-str-                                                     arg-count))))))))+        config (:config ctx)+        ns (:ns ctx)+        ?resolved-ns (if namespaced?+                       (if-let [kw-ns (namespace kw)]+                         (or (get (:qualify-ns ns) (symbol kw-ns))+                             ;; because we couldn't resolve the namespaced+                             ;; keyword, we print it as is+                             (str "":"" (namespace kw)))+                         ;; if the keyword is namespace, but there is no+                         ;; namespace, it's the current ns+                         (:name ns))+                       (namespace kw))+        kw-str (if ?resolved-ns (str ?resolved-ns ""/"" (name kw))+                   (str (name kw)))]+    (when (and (not (config/skip? config :invalid-arity callstack))+               (or (zero? arg-count)+                   (> arg-count 2)))+      (findings/reg-finding! ctx+                             (node->line (:filename ctx) expr :invalid-arity+                                         (format ""keyword :%s is called with %s args but expects 1 or 2""+                                                 kw-str+                                                 arg-count))))+    ;; With one argument to the keyword call, we can check if the return is a map.+    ;; Another linter warning we could create is to check if the 2-arity version+    ;; will never return the default value.+    (when (= arg-count 1)+      (let [analyzed (first (analyze-children (update ctx :callstack conj [nil :list]) (rest (:children expr))))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1548,787147154,"@@ -7,6 +7,7 @@ For a list of breaking changes, check [here](#breaking-changes). - Fix [#1537](https://github.com/clj-kondo/clj-kondo/issues/1537): stackoverflow with potemkin import vars with cyclic references - Fix [#1545](https://github.com/clj-kondo/clj-kondo/issues/1545): `recur` in `cond->` gives warning about `recur` not in tail position. - Fix [#1535](https://github.com/clj-kondo/clj-kondo/issues/1535): support CLJS vars / protocols references via dot rather than slash.+- Fix [#1547](https://github.com/clj-kondo/clj-kondo/issues/1547): catch tasks undefined tasks present in `:depends`. ([@mknoszlig](https://github.com/mknoszlig))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1551,789186778,"@@ -188,8 +188,10 @@   (let [tasks (edn-utils/sexpr-keys expr)         known-task? (set (keys tasks))]     (doseq [[_ t-def] tasks-            dep-task   (:children (last (:children t-def)))+            [td-key td-body]   (partition 2 (:children t-def))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1559,790911506,"@@ -246,20 +246,20 @@ A regex is also permitted, e.g. to exclude all test namespaces: Expected map, found: java.lang.String ``` -### Bb.edn+### Bb.edn dependency on undefined task  *Keyword:* `:bb.edn`"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1565,796164173,"@@ -73,10 +73,10 @@ jobs:   lint:     runs-on: ubuntu-latest     steps:-    - name: Setup clj-kondo-      uses: DeLaGuardo/setup-clj-kondo@822352b8aa37d5c94135e67f7b4e2f46c08008a8+    - name: Install clj-kondo"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1567,798727133,"@@ -286,10 +286,48 @@ Depending on undefined task: compile          b {:depends [a]}}} ``` +### Bb.edn global requires++*Keyword:* `:bb.edn-global-requires`++*Description:* warn on top level `:requires` key.++*Default level:* `:warning`++*Example trigger:*++`bb.edn`:++``` clojure+{:requires [[babashka.fs :as fs]]}+```++*Example message:*++```+Global :requires belong in the :tasks map.+```++### Bb.edn task docstring missing++*Keyword:* `:bb.edn-task-docstring-missing`"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1595,812850377,"@@ -40,6 +41,20 @@           (common/analyze-children ctx args)))       (common/analyze-children ctx children)))) +(defn analyze-inject-cofx [ctx expr ns]+  (let [kns (keyword ns)+        [cofx-id cofx-param] (next (:children expr))]+    (common/analyze-children (assoc-in ctx [:context kns :cofx-ref] true) [cofx-id])+    (when cofx-param+      (common/analyze-children ctx [cofx-param]))))"
https://api.github.com/repos/clj-kondo/clj-kondo/pulls/1596,814669713,"@@ -414,6 +414,23 @@                                     :syntax                                     ""namespace name expected""))))                  'user)+        _ (let [expected-file-path (-> (str (munge ns-name))+                                       (str/replace #""\."" ""/""))]+            (when-not (or (= ""<stdin>"" (:filename ctx))+                          (= 'user ns-name)+                          ;; Test for .indexOf because there can be something before+                          ;; (e.g. 'corpus/' in the tests), and the ""expected-file-path""+                          ;; does not include the extension.+                          (and (seq (:filename ctx)) (<= 0 (.indexOf ^String (:filename ctx) ^String expected-file-path))))"
https://api.github.com/repos/clojure/clojurescript/pulls/48,25112381,"@@ -34,6 +34,23 @@ Latest stable release: 0.0-2850 * Look at the [Sample Applications](https://github.com/clojure/clojurescript/tree/master/samples). * [Companies using ClojureScript](https://github.com/clojure/clojurescript/wiki/Companies-Using-ClojureScript) +### Getting Up and Running with Leiningen++The simplest way to try ClojureScript is using the [Leiningen](http://leiningen.org/) [mies emplate](https://github.com/swannodette/mies)."
https://api.github.com/repos/clojure/clojurescript/pulls/69,126289144,"@@ -585,50 +117,86 @@ nil if the end of stream has been reached"")       obj)      :else-    (reader-error nil-      (str ""JS literal expects a vector or map containing ""-           ""only string or unqualified keyword keys""))))-+    (throw+      (js/Error.+        (str ""JS literal expects a vector or map containing ""+             ""only string or unqualified keyword keys"")))))  (defn ^:private read-uuid   [uuid]   (if (string? uuid)     (cljs.core/uuid uuid)-    (reader-error nil ""UUID literal expects a string as its representation."")))--(def ^:dynamic *tag-table*-  (atom (add-data-readers-          {""inst""  read-date-           ""uuid""  read-uuid-           ""queue"" read-queue-           ""js""    read-js})))+    (throw (js/Error. ""UUID literal expects a string as its representation.""))))  (def ^:dynamic *default-data-reader-fn*   (atom nil)) -(defn maybe-read-tagged-type-  [rdr initch]-  (let [tag (read-symbol rdr initch)-        pfn (get @*tag-table* (str tag))-        dfn @*default-data-reader-fn*]-    (cond-     pfn (pfn (read rdr true nil false))-     dfn (dfn tag (read rdr true nil false))-     :else (reader-error rdr-                         ""Could not find tag parser for "" (str tag)-                         "" in "" (pr-str (keys @*tag-table*))))))+(def ^:dynamic *tag-table*+  (atom"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/21,4676436,"@@ -167,8 +167,7 @@ It is also possible to use the +contains?+ function, which takes a collection and a key, and returns true if and only if the collection has a specific entry for that key, even if the value is +nil+. -.The meaning of +contains?+"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/44,4700390,"@@ -0,0 +1,130 @@+==== Converting between strings, symbols, and keywords++===== Problem++You have a string, a symbol, or a keyword, and you'd like to convert it into a+different one of these string-like data types.++===== Solution++To convert from a string to a symbol, use the +symbol+ function.++[source,clojure]+----+(symbol ""valid?"")+;; -> valid?+----++To convert from a symbol to a string, use +str+.++[source,clojure]+----+(str 'valid?)+;; -> ""valid?""+----++When you have a keyword and want a string, you can use +name+, or +str+ if you+want the leading colon.++[source,clojure]+----+(name :triumph)+;; -> ""triumph""++;; Or, to include the leading colon:+(str :triumph)+;; -> "":triumph""+----++To convert from a symbol or string to a keyword, use +keyword+.++[source,clojure]+----+(keyword ""fantastic"")+;; -> :fantastic++(keyword 'fantastic)+;; -> ""fantastic""+----++You'll need an intermediate step through +name+, to go from keyword to symbol.++[source,clojure]+----+(symbol (name :wonderful))+;; -> wonderful+----+++===== Discussion++The primary conversion functions here are +str+, +keyword+, and +symbol+ - each+named for the data type they return. One of these, +symbol+, is a bit stricter"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/14,4702376,"@@ -77,6 +78,37 @@ retrieve the discrete list of modes. ;; -> (:smith :doe) ---- +////+Standard deviation:+Author: Jean Niklas L'orange. Github: hyPiRion+////++Find the sample _standard deviation_ by"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/41,4702650,"@@ -0,0 +1,128 @@+==== Combining Maps++===== Problem++You have two or more maps you wish to combine to produce a single map.++===== Solution++The core +merge+ and +merge-with+ functions allow you to easily combine+two or more maps in various ways. The source maps may or may not have+keys in common and you can combine, select, and process the source map+values to produce the result map.++To combine maps with no keys in common, use the +merge+ function.++[source,clojure]+----+(def arizona-bird-counts {:cactus-wren 8 :phainopepla 4 :mourning-dove 20})+(def florida-bird-counts {:gull 20 :anhinga 8 :pelican 14 :egret 4})++(merge florida-bird-counts arizona-bird-counts)+;; -> {:mourning-dove 20, :pelican 14, :phainopepla 4, :cactus-wren 8,+;;     :egret 4, :gull 20, :anhinga 8}+----++++Merge+ can also be used to combine maps which have some, or all,+keys in common. The source maps are processed from left to right so+the value for a shared (common) key will be the value contained+in the rightmost map with that key:++[source,clojure]+----+(def vote-count-AM   {""W.H.Harrison"" 82, ""J.K.Polk"" 54, ""M.Fillmore"" 12, ""U.S.Grant"" 727})+(def vote-count-NOON {""Z.Taylor"" 77, ""W.H.Harrison"" 441, ""J.K.Polk"" 254})+(def vote-count-PM   {""W.H.Harrison"" 2360, ""J.K.Polk"" 554, ""M.Fillmore"" 1312})++(merge vote-count-AM vote-count-NOON vote-count-PM)+;; -> {""J.K.Polk"" 554, ""U.S.Grant"" 727, ""Z.Taylor"" 77,+;;     ""M.Fillmore"" 1312, ""W.H.Harrison"" 2360}+----++Note that map entries whose keys are not shared between argument maps+are still added to the result map.+++Use the core +merge-with+ function when you wish to combine, filter, or+process the values while merging the source maps. +Merge-with+ takes an"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/52,4716213,"@@ -128,12 +128,15 @@ each value in +coll+ occurs. This would be something like +{:a 1 :b 2}+ * <3> The list of occurrences is now sortable; the last pair in the sorted list will be the modes, or most frequently occurring values. * <4> The final step is processing the raw mode pairs into discrete values. Taking +second+ turns +[2 [[:alan 2]]]+ into +[[:alan 2]]+, and +(map first)+ turns that into '(:alan). -+standard-deviation+ is a bit more mathematical than mean, median and mode. To-get a better understanding on how it works, we can go through the first example-step by step:+The standard deviation measures how much, on average, the individual values in a+population deviate from the mean: The higher the standard deviation is, the+""farther away"" will the individual values be (on average). As"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/63,4761898,"@@ -3,3 +3,4 @@  include::local-io/csv/read-write-csv.asciidoc[] include::console/read-unbuffered-keystroke/read-unbuffered-keystroke.asciidoc[]+include::read-write-clojure-data-structures/read-write-clojure-data-structures.asciidoc[]"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/72,4785165,"@@ -0,0 +1,36 @@+=== Retrieve and parse RSS data++// By Osbert Feng (osbert)++==== Problem++You need to parse RSS data.++==== Solution++Use +feedparser-clj.core/parse-feed+ to parse RSS data from a URL.++[source,clojure]+----++(feedparser-clj.core/parse-feed ""https://github.com/clojure-cookbook/clojure-cookbook/commits/master.atom"")+;; -> {:authors [...] :entries [{:link ""LINK"" :title ""TITLE"" :contents ""CONTENT""} {:link ... }] ... }+----+++feedparser-clj.core/parse-feed+ can also be fed a java.io.InputStream to read from a file.++[source,clojure]+----+(with-open [file-stream (clojure.java.io/input-stream ""master.atom"")]+  (feedparser-clj.core/parse-feed file-stream))+;; -> {:authors [...] :entries [{:link ""LINK"" :title ""TITLE"" :contents ""CONTENT""} {:link ... }] ... }+----++==== Discussion++The +feedparser-clj+ library makes it easy to parse RSS feeds,+returning a single map structure that closely mimics the underlying+XML feed.++Most of the time, what you care about will be under the :entries key,"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/78,4810905,"@@ -0,0 +1,78 @@+==== Bare-Bones Clojure"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/108,5032247,"@@ -0,0 +1,117 @@+=== Full text search++// By Osbert Feng (osbert)++=== Problem++You want to support flexible full text search over a dataset. For+example, return all people that have ""Clojure"" in their job+descriptions in the ""United States"".++==== Solution++Use +clucy+, a Clojure wrapper for Lucene.++[source,clojure]+----+(def index (clucy.core/memory-index))+;; -> #'user/index+++(clucy.core/add index+   {:name ""Alice"" :description ""Clojure expert"" :location ""North Carolina, United States""}+   {:name ""Bob"" :description ""Clojure novice"" :location ""Berlin, Germany""}+   {:name ""Eve"" :description ""Eavesdropper"" :location ""Maryland, United States""})+;; -> nil++(clucy.core/search index ""description:clojure AND location:\""united states\"""" 10)+;; -> ({:name ""Alice"", :location ""North Carolina, United States"", :description ""Clojure expert""})+----++==== Discussion++Lucene is a Java library for information retrieval. To use Lucene, you+generate documents and index them for later retrieval. Documents+consist of fields and terms.+++clucy+ wraps Lucene in a convenient manner for use in Clojure, and is+capable of generating Lucene documents directly from simple Clojure+maps, where keys map to fields and values map to terms.+++clucy.core/search+ takes an index, a query string, and the number of+results to return as parameters. Lucene is able to efficiently query+in part because it is not necessary to return all matching documents,+just the top +n+.++[NOTE]++clucy+ does not work as well out of the box with nested values in your+maps. Be sure to flatten out values into simple strings for proper+indexing and retrieval.++Indexes in Lucene can stored in RAM or on disk if you wish to persist+your search index after your program terminates. This eliminates the+time required to rebuild an index and also can be a way of persisting+your application state if search is the only access pattern.++[source,clojure]+----+(def index (clucy.core/disk-index ""/tmp/index""))+----++As part of the process for generating documents, Lucene calls an+analyzer on your strings to generate tokens for indexing. The default++StandardAnalyzer+ is sufficient for most most purposes, and can be+customized with a list of ""stop words"" to be ignored during token+generation.++[source,clojure]+----+(import 'org.apache.lucene.analysis.standard.StandardAnalyzer)+;; -> org.apache.lucene.analysis.standard.StandardAnalyzer++(import 'org.apache.lucene.analysis.util.CharArraySet)+;; -> org.apache.lucene.analysis.util.CharArraySet++(def stop-words+  (doto (CharArray. clucy.core/*version* 3 true)+    (.add ""do"")+    (.add ""not"")+    (.add ""index"")))++(binding [clucy.core/*analyzer* (StandardAnalyzer.+                                 clucy.core/*version*+                                 stop-words)]+  ;; Do index add + search here+  )+----++However, in other situations you may need to use a different Analyzer+or write your own. For example, the +EnglishAnalyzer+ stems off words"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/131,5124392,"@@ -0,0 +1,82 @@+=== Conventions Used in This Book++==== Source Code++Clojure source code appears in monospaced font, like this:++[source,clojure]+----+(ns my-project.core)++(defn add+  [x y]+  (+ x y))+----++When a Clojure expression is evaluated for a return value, that value+is denoted with a comment followed by an arrow, like this:++[source,clojure]+----+(add 1 2)+;; -> 3+----++NOTE: Comments in Clojure start with a single semicolon. By+convention, comments with two semicolons explain the preceding+expression and are left-aligned to the same indentation+level. Comments with a single semicolon are typically used for the+right-hand margin, on the same line as the code being+commented. Three semicolons or more are used for top-level section and+file headers.++When an expression produces output, it is denoted by a comment+containing `*out*` followed by a comment with each line of output.++[source,clojure]+----+(do (println ""Hello!"") (println ""Goodbye!""))+;; -> nil+;; *out*+;; Hello!+;; Goodbye!+----++==== REPL Sessions++REPLs (Read-Eval-Print Loop) are interactive prompts that evaluate+expressions and print the result. The Bash prompt, +irb+, and the++python+ prompt are examples of REPLs.++A Clojure REPL session is denoted by a monospace font with a prompt+that includes the current namespace and a ""+>+"" symbol, indicating the+point where you should type your code. Output and return values appear+after the prompt.++// CONTRIBUTOR NOTE: there is currently no syntax highlighting for the"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/177,5830329,"@@ -0,0 +1,46 @@+=== Sending a Ping Request++// By Jason Webb (bigjason)++===== Problem++You want to ping an IP address to check availability.++===== Solution++Use the java +java.net/InetAddress+ class to test if the address +isReachable+.++[source,clojure]+----+(.isReachable (java.net.InetAddress/getByName ""oreilly.com"") 5000)+;; -> true+----++===== Discussion++Using +isReachable+ works great if the correct permissions can be obtained.  On+a typical Unix like implementation you will need to start your Clojure instance with++sudo+ to get an actual ICMP ping sent.  Otherwise a standard connection will+be attempted on port 7, which in most cases will be blocked by a firewall.  More+information can be found in the Java docs (see footnote below).++A common need when pinging another machine is to time the ping.  A quick macro+can be used for this.++[source,clojure]+----+(defmacro wrap-time+  ""Evaluates expr and returns {:milliseconds :exp-result}""+  [expr]+  `(let [start# (. System (nanoTime))+         ret# ~expr+         total# (/ (double (- (. System (nanoTime)) start#)) 1000000.0)]+     {:time (if (not (contains? #{:timeout :error} ret#)) total# 0)+      :result ret#}))++(wrap-time (.isReachable (java.net.InetAddress/getByName ""oreilly.com"") 5000))+;; -> {:result true, :time 187.255}+----++===== See Also+See the http://docs.oracle.com/javase/1.5.0/docs/api/java/net/InetAddress.html#isReachable(int)[InetAddress/isReachable documentation] for more details."
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/174,5857206,"@@ -0,0 +1,251 @@+[[sec_webapps_templatating_with_selmer]]++=== Creating templates for web applications with Selmer++//Author: Dmitri Sotnikov++===== Problem++You want to create server side page templates using syntax similar to Django and Jinja. You want to be able+to insert dynamic content and use template inheritance to structure the templates.++===== Solution++Use Selmer to create your template and call it with a context map containing the dynamic content.++First, add Selmer to your project file:++.project.clj+[source,clojure]+----+(defproject selmer-templating ""1.0.0-SNAPSHOT""+            :dependencies [[org.clojure/clojure ""1.5.1""]+                           [selmer ""0.4.0""]])+----++A Selmer template is simply an HTML file that contains special tags that will be populated with the+dynamic content at runtime. A simple template might look as follows:++.src/views/templates/base.html+[source, html]+----+<!DOCTYPE html>+<html lang=""en"">+  <body>+    <header>+      <h1>{{header}}</h1>+      <ul id=""navigation"">+        {% for item in nav-items %}+        <li>+            <a href=""{{item.link}}"">{{item.name}}</a>+        </li>+        {% endfor %}+      </ul>+    </header>+  </body>+</html>+----++The template can then be rendered by calling the +selmer.parser/render-file+ function:++[source, clojure]+----+(ns selmer-templating+  (:require [selmer.parser :refer [render-file]))++(render-file ""views/templates/base.html""+             {:header ""Hello Selmer""+              :nav-items [{:name ""Home"" :link ""/""}+                          {:name ""About"" :link ""/about""}]})+----++When +render-file+ runs it will populate the tags with the content provided.++When the content is rendered we can apply filters to variables for additional post-processing.+Below, we use the +upper+ filter to convert our heading to upper case:++[source, html]+----+<h1>{{header|upper}}</h1>+----++We can extract parts of the template into individual snippets using the +include+ tag. For example,+if we wanted to define the header in a separate file we could do the following:++.src/views/templates/header.html+[source, html]+----+<header>+  <h1>{{header}}</h1>+  <ul id=""navigation"">+    {% for item in nav-items %}+    <li>+        <a href=""{{item.link}}"">{{item.name}}</a>+    </li>+    {% endfor %}+  </ul>+</header>+----++.src/views/templates/base.html+[source, html]+----+<!DOCTYPE html>+<html lang=""en"">+  <body>+    {% include ""views/templates/header.html"" %}+  </body>+</html>+---- ++The +include+ tag will simply be replaced by the contents of the file it points to when the template +is compiled.++We can also extend our base template when we create individual pages.+To do that we would first define a block in our base template. This will serve as an anchor+for the child tempalte to overrdie."
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/169,5951602,"@@ -6,3 +6,22 @@ include::database-up-n-running/database-up-n-running.asciidoc[] include::text-search/text-search.asciidoc[]  include::cassandra-with-cassaforte/cassandra-with-cassaforte.asciidoc[]++=== Datomic"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/140,5952175,"@@ -0,0 +1,87 @@+==== Making a Window++// By John Walker++==== Problem++You want to make a window with trivial content.++==== Solution++The +Seesaw+ library is the best method of dealing with GUI's in Clojure. Since +Seesaw+ is based on +Swing+, it is necessary to make an initial call to +native!+ for styling frames to the host desktop or window environment.++[source,clojure]+----+(ns example.seesaw+(:require [seesaw.core :refer [frame native! pack! show!]]))++(native!)+;; -> nil+----++Use +frame+ to create a frame.++[source,clojure]+----+(frame :title ""Police"" :content ""Cool text!"")+;; -> #<JFrame$Tag$a79ba523 seesaw.core.proxy$javax.swing.JFrame$Tag$a79ba523[frame6,0,19,0x0,invalid,hidden,layout=java.awt.BorderLayout,title=Police,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]>"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/190,5959625,"@@ -0,0 +1,166 @@+////+:Author: Ian Davis, Aria Haghighi+:Email: ian@getprismatic.com, aria@getprismatic.com+////++=== DOM manipulation and client side templating in ClojureScript++===== Problem++You want to create and manipulate  DOM nodes natively in ClojureScript++===== Solution++Use https://github.com/Prismatic/dommy[Dommy], an open source project that provides fast, funtional DOM+manipulation and templating.++Add the following dependency to your +project.clj+:++[source, clojure]+----+[prismatic/dommy ""0.1.1""]++----++Creating new DOM nodes is easy with Dommy:++[source, clojure]+----+(deftemplate login-form []+  [:#login-form.modal.anohter-class"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/192,5961057,"@@ -0,0 +1,278 @@+=== Creating custom project templates++// by Travis Vachon (travis)++===== Problem+"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/220,6037392,"@@ -0,0 +1,95 @@+[[sec_webapps__luminus]]++=== Luminus++// By Dmitri Sotnikov++==== Problem++Create a skeleton web application with the common boilerplate initialized."
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/221,6037589,"@@ -0,0 +1,64 @@+[[extend_built_in]]++=== Extending a Built-in Type++===== Problem++You need to extend one of the built-in types with your own functions.++===== Solution++Suppose for example you would like to add domain specific functions to the core +java.lang.String+ type. In this example, we will add a +first-name+ and +last-name+ function to +String+.++Define a protocol with the functions you need. The protocol declares the signature of the functions.++[source,clojure]+----+(defprotocol Person+  ""Represents the name of a person.""+  (first-name [person])+  (last-name [person]))+----++Extend the type to the "
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/216,6089007,"@@ -0,0 +1,76 @@+=== Clojure and Blinking Arduino++// By Max Gonzih (Gonzih)++===== Problem++You have new shiny Arduino and want to play with it.+But you don't want to write C++ code for it.+You want to use Clojure with it.++===== Solution++You should use Clodiuno library for communication with Arduino.++.project.clj+[source,clojure]+----+(defproject arduino-blink ""1.0.0-SNAPSHOT""+              :dependencies [[clodiuno ""0.0.4-SNAPSHOT""]])+----++In order to connect to your Arduino via serial port you need to deploy Firmata code to your Arduino."
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/215,6091815,"@@ -0,0 +1,345 @@+=== Consuming from RabbitMQ+// By Michael Klishin (michaelklishin)++===== Problem++You want to communicate with other applications over http://rabbitmq.com[RabbitMQ]+and need to consume messages from Clojure.++===== Solution++Use http://clojurerabbitmq.info[Langohr], a small feature complete RabbitMQ client, to communicate+with RabbitMQ.++In order to successfully go through this recipe, you should have+RabbitMQ installed. You can find details on how to install RabbitMQ+here: http://www.rabbitmq.com/download.html.++Include Langohr into your project file:++.project.clj+[source,clojure]+----+(defproject langohr-example ""1.0.0-SNAPSHOT""+              :dependencies [[com.novemberain/langohr ""1.4.1""]])+----++Next, make sure that RabbitMQ is running and connect to it.++[source,clojure]+----+(ns langohr.example+  (:require [langohr.core :as rmq]))++;; Will connect to a RabbitMQ cluster node on localhost:5672+(let [conn (rmq/connect {:hostname ""localhost""})]+  (comment ...))+----++AMQP 0-9-1 is a multi-channeled protocol. It multiplexes several+lightweight channels over a single TCP connection. Next, lets+open a channel we can use to consume messages:++[source,clojure]+----+(ns langohr.example+  (:require [langohr.core    :as rmq]+            [langohr.channel :as lch]))++;; Connect and open a channel that will be used to interact+;; with RabbitMQ+(let [conn (rmq/connect {:hostname ""localhost""})+      ch   (lch/open conn)]+  (comment ...))+----++Having a channel open, you can declare or use existing queues.+Queues have names that can either be given by clients or+generated by RabbitMQ.++To create a queue with a provided name,+use *langohr.queue/declare*:++[source,clojure]+----+(ns langohr.example+  (:require [langohr.core     :as rmq]+            [langohr.channel  :as lch]+            [langohr.basic    :as lb]+            [langohr.queue    :as lq]))++(let [conn (rmq/connect {:hostname ""localhost""})+      ch   (lch/open conn)+      q    ""tasks.imaging.resize""]+  (lq/declare ch q)+  (comment ...))+----++To create a queue with server-generated name,+use *langohr.queue/declare-server-named*:"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/230,6092883,"@@ -0,0 +1,93 @@+=== Resource to sequence +// by Gerrit Jansen van Vuuren (gerritjvv)++===== Problem++You have a resource that you want to access as a sequence, but you do not want to keep a connection open and close it only when the whole sequence have been read+thus potentially leaking the connection.++===== Solution++The solution is simple and here we'll embed it as a pattern (monad) with some simple constructs:++1. A select function+2. The initial position++The select function takes a single argument which is the last index position of data returned, and returns a snapshot of the data from the position+to N amount of rows (here N is up to the function itself).++The initial position depends on the context that this pattern is used in, it can be 0, 1, 10 etc. ++++[source,clojure]+----++(defn buffered-select [f-select init-pos]+    ""Creates a lazy sequence of messages for this datasource""+    (letfn [  +            (m-seq [buff pos] +                 (if-let [buff2 (if (empty? buff) (f-select pos) buff)]+                    (cons (first buff2) (lazy-seq (m-seq (rest buff2) (inc pos) )))))+           ]+         (m-seq nil init-pos)))++----++To use "
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/233,6139230,"@@ -0,0 +1,215 @@+=== Working with SQL Korma++// by Dmitri Sotnikov++===== Problem++You want to work with data stored in a relational database without writing SQL by hand.++===== Solution++Use SQL Korma as a DSL for generating SQL queries.++First, add Korma along with the databse driver to your `project.clj` file:++[source,clojure]+----+(defproject couch-time ""1.0.0""+  :dependencies [[org.clojure/clojure ""1.5.1""]+                 [korma ""0.3.0-RC5""]+                 [org.postgresql/postgresql ""9.2-1002-jdbc4""]])+----++Next, define a databse connection. Korma uses to create pooled connections."
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/235,6139695,"@@ -0,0 +1,300 @@+// Author: Tom Hicks, after documentation by Sean Corfield and Stephen Gilardi.++=== Manipulating an SQL Database++==== Problem++You want your Clojure program to manipulate tables and records in an SQL database.++==== Solution++Use the +clojure.java.jdbc+ library for JDBC-based access to SQL databases.++The previous recipe,+link:/databases/connecting-to-an-SQL-database/connecting-to-an-SQL-database.asciidoc[Connecting+to an SQL Database], describes how to prepare your project to use the++clojure.java.jdbc+ library. Follow that recipe to ensure that you have added the necessary library+dependencies to your Leiningen project file, required the necessary namespaces+of the +clojure.java.jdbc+ library, and created a database specification for+the database you intend to access. When ready, your source code should look+something like this:++[source,clojure]+----+(ns myproj.core+  (:require [clojure.java.jdbc :as jdbc]+            [clojure.java.jdbc.sql :as sql]+            [clojure.java.jdbc.ddl :as ddl]))++(def db-spec ...)+----++To create a new table, use the +ddl/create-table+ function to generate the+necessary DDL statement, then pass the statement into the +jdbc/db-do-commands++function to execute it.++[source,clojure]+----+(jdbc/db-do-commands db-spec+  (ddl/create-table :fruit+    [:name ""varchar(16)"" ""PRIMARY KEY""]+    [:appearance ""varchar(32)""]+    [:cost :int ""NOT NULL""]+    [:unit ""varchar(16)""]+    [:grade :real]))+;; -> (0)+----++Insert complete records into a table using the +jdbc/insert!+ function, providing a+vector of the column values for each row. Be sure to provide the column values+in the order in which the columns were declared in the table.++[source,clojure]+----+(jdbc/insert! db-spec :fruit+  nil ; column names omitted+  [""Red Delicious"" ""dark red"" 20 ""bushel"" 8.2]+  [""Plantain"" ""mild spotting"" 48 ""stalk"" 7.4]+  [""Kiwifruit"" ""fresh""  35 ""crate"" 9.1]+  [""Plum"" ""ripe"" 12 ""carton"" 8.4])+;; -> (1 1 1 1)+----++To query the database, generate the SQL for the query with the +sql/select++function, then pass the result to the +jdbc/query+ function for execution.++[source,clojure]+----+(jdbc/query db-spec+  (sql/select * :fruit (sql/where {:appearance ""ripe""})))+;; -> ({:grade 8.4, :unit ""carton"", :cost 12, :appearance ""ripe"", :name ""Plum""})+----++If you no longer need a particular table, use the +ddl/drop-table+ function to+generate the appropriate DDL statement and then execute it with the++jdbc/db-do-commands+ function.++[source,clojure]+----+(jdbc/db-do-commands db-spec (ddl/drop-table :fruit))+;; -> (0)+----++==== Discussion"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/239,6143680,"@@ -0,0 +1,202 @@+=== Resource to sequence +// by Gerrit Jansen van Vuuren (gerritjvv)++===== Problem++You have a resource that you want to access as a sequence, but you do not want to keep a connection open and close it only when the whole sequence have been read+thus potentially leaking the connection.++===== Solution++The solution is simple.++1. A select function+2. The initial position++The select function takes a single argument which is the last index position of data returned, and returns a snapshot of the data from the position+to N amount of rows (here N is up to the function itself).++The initial position depends on the context that this pattern is used in, it can be 0, 1, 10 etc. ++++[source,clojure]+----++(defn buffered-select [f-select init-pos]+    ""Creates a lazy sequence of messages for this datasource""+    (letfn [  +            (m-seq [buff pos] +                 (if-let [buff2 (if (empty? buff) (f-select pos) buff)]+                    (cons (first buff2) (lazy-seq (m-seq (rest buff2) (inc pos) )))))+           ]+         (m-seq nil init-pos)))++----++You can explore the usage of this recipe by going through a simple database paging example.++To run the example you'll need to use leinigen and add the following dependencies to your project.clj file.++1. [org.clojure/java.jdbc ""0.3.0-alpha4""]+2. [org.hsqldb/hsqldb ""2.3.0""]+++Some helper functions and setup are required, paste the below code into your repl.++[source,clojure]+----"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/240,6222312,"@@ -0,0 +1,160 @@+[[sec_aggregating_large_files]]+=== Aggregating Large Files++===== Problem++You need to generate aggregate statistics from terabytes of log+files. For example:++Simple input log file (<date> <URL> <USER-ID>):+----+20130512020202 /             11+20130512020412 /             23+20130512030143 /post/clojure 11+20130512040256 /post/datomic 23+20130512050910 /post/clojure 11+20130512051012 /post/clojure 14+----++Output aggregate statistics:+----+{+""URL""  {""/""              2+        ""/post/datomic""  1+        ""/post/clojure""  3}+""User"" {""23"" 2+        ""11"" 3+        ""14"" 1}+""Day""  {""20130512"" 6}+}+----++===== Solution++Cascalog allows you to write distributed processing jobs that run+locally or on a Hadoop cluster.++Add the following to the dependencies vector of your project.clj:+[source,clojure]+----+[cascalog ""1.10.2""]+[cascalog/cascalog-more-taps ""1.10.2""]+----++Then add this query to your project:+[source,clojure]+----+(ns cookbook.aggregation+  (:require [cascalog.api :refer :all]+            [cascalog.more-taps :refer [hfs-delimited]]))++(defn init-aggregate-stats [date url user]+  (let [day (.substring date 0 8)]+    {""URL""  {url 1}+     ""User"" {user 1}+     ""Day""  {date 1}}))++(def combine-aggregate-stats+  (partial merge-with (partial merge-with +)))++(defparallelagg aggregate-stats+  :init-var    #'init-aggregate-stats+  :combine-var #'combine-aggregate-stats)++(defmain Main [in out & args]+  (?<-+    (hfs-textline out :sinkmode :replace)+    [?out]+    ((hfs-delimited in) ?date ?url ?user)+    (aggregate-stats ?date ?url ?user :> ?out)))+----++Then execute it locally+[source,terminal]+$ lein run -m cookbook.aggregation.Main <in-path> <out-path>++or execute it over your Hadoop cluster+[source,terminal]+----+$ lein uberjar+$ hadoop jar target/cookbook-standalone.jar cookbook.aggregation.Main <in-path> <out-path>+----++===== Discussion"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/247,6505865,"@@ -0,0 +1,99 @@+=== Publish to MQTT Broker+// By Sandeep Nangia (nangia)++===== Problem++http://mqtt.org[MQTT] is an extremely lightweight publish/subscribe messaging protocol. It is useful for connections where bandwidth is at premium. Thus it is a good protocol to use for machine to machine communication e.g. for scenarios like Internet of Things. You want to publish some messages to some devices using MQTT protocol.++===== Solution++Use http://www.eclipse.org/paho/[Paho], a Java library to communicate with a MQTT broker. In order to communicate via MQTT, you need to have an existing MQTT broker implementation. Example implementations are http://mosquitto.org/[Mosquitto], Websphere, RabbitMQ amongst others. In this recipe, we are going to use the test broker provided at tcp://test.mosquitto.org:1883.++First thing needed is that you need to build the Paho library which is available at git://git.eclipse.org/gitroot/paho/org.eclipse.paho.mqtt.java.git using Maven. Once you have this built you would have mqtt-client-0.4.0.jar (0.4 for the current version). The next step is to install this into local Maven repository. This can be done by the following command:++[source,shell]+--------+mvn install:install-file -Durl=file:repo -DgroupId=local -DartifactId=mqttclient \+	-Dversion=0.4 -Dpackaging=jar -Dfile=./mqtt-client-0.4.0.jar+--------+++Once this is done one can refer to this library in your project file.++.project.clj+[source,clojure]+----+(defproject mqttclojure ""0.1.0-SNAPSHOT""+  :dependencies [[org.clojure/clojure ""1.4.0""]+                 [local/mqttclient ""0.4""]]+  :repositories {""project"" ""file:repo""})++----++Next we make sure that we add the appropriate imports where we use this library.++.publisher.clj+[source,clojure]+----+(ns mqttclojure.core)++(import '(org.eclipse.paho.client.mqttv3 MqttClient MqttConnectOptions MqttMessage))++----++Now we define a few variables and supporting functions that we will use to publish to the queue. ++.publisher.clj+[source,clojure]+----+(def pubclientid ""SNPublisher01"")+(def topic-string ""SNInterestingChannel/Channel1"")+(def keepaliveinterval 200)+(def qos 0)+(def msgtosend ""Hello from Sandeep4"")++(defn make-client-and-connect [serveraddr clientid]+  (let [client (MqttClient. serveraddr clientid)]+    (.connect client)+    client))++(defn publish-msg [client topic-string msgtosend keepaliveinternal qos]+  (let [topic (.getTopic client topic-string)+        msg   (MqttMessage. (.getBytes msgtosend))+        _ (do (.setQos msg qos) true)+        token (.publish topic msg)]+    (do"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/249,6575262,"@@ -143,6 +143,9 @@ You'll also need to update the +:require+ statement in that file:             [backtype.storm [clojure :refer [topology spout-spec bolt-spec]] [config :refer :all]]) ---- +Now delete the old stormy-topology function, and change the +run!+"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/253,6655151,"@@ -56,6 +56,38 @@ benchmarking is what you're after. Additionally, you shouldn't try to use +currentTimeMillis+ as some sort of unique value - UUIDs do a much better job of this. +If you are familiar with the Java ecosystem, you may have heard of"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/248,6711849,"@@ -141,14 +155,56 @@ passed as an argument to later invocations of the +combine-var+ function. Pairs of output will be combined until there is only one output left, which is the final output. -For example, in this query, the +init-var+ takes the date, url and-user id for each line and transforms them into a nested map with a-value of one for each defined key.  Then +combine-var+ is called with-pairs of nested maps. Combine var just merges the maps, using-+merge-with+ and the addition function. As each new map is combined-in, the counts go up for the defined keys. When all the maps have been-combined, you are left with a single map of maps that contain counts-for each value.+Here is the query, with explanations inline:++[source,clojure]+----+;; Require the Cascalog functions you'll need.+(ns cookbook.aggregation+  (:require [cascalog.api :refer :all]+            [cascalog.more-taps :refer [hfs-delimited]]))++;; Define a functions that takes a date, url and user and returns a"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/256,6740330,"@@ -0,0 +1,114 @@+=== Publish to MQTT Broker+// By Sandeep Nangia (nangia)++===== Problem++You want to publish some messages using MQTT protocol."
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/314,7369115,"@@ -0,0 +1,70 @@+=== Use core.async to decouple consumers and producers"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/344,8577117,"@@ -161,4 +161,98 @@ ClojureScript             | Clojure in the browser  This is by no means a final list, but it should serve to give a general idea the shape of the book. +### How to Setup AsciiDoc and Source Highlight++This is the basic guide to setting up enough of asciidoc and source-highlight setupo to allow previewing/proofreading in a browser.++It's not the ultimate setup and you probably don't want to publish anything with it but it works well enough for beginners to get started. These instructions are tested on Mac OS X. Linux should be pretty close after you get asciidoc and source-highlight installed with the appropriate package manager.++* Install asciidoc+```+brew install asciidoc+```++* Install source-highlight+```+brew install source-highlight+```++* For Clojure highlighting, copy+https://gist.github.com/265810/78857041d922c21488415a9b7ec0300aece47009"
https://api.github.com/repos/clojure-cookbook/clojure-cookbook/pulls/451,82834294,"@@ -6,61 +6,59 @@ by Ryan Neufeld; originally submitted by Nicolas Bessi ==== Problem  You want to write command-line tools in Clojure that can parse input-arguments.(((command lines, parsing input arguments)))(((parsing, input arguments)))(((""development ecosystem"", ""command line parsing"")))(((tools.cli library)))(((""Clojure"", ""clojure.tools.cli/cli"")))+arguments.(((command lines, parsing input arguments)))(((parsing, input arguments)))(((""development ecosystem"", ""command line parsing"")))(((tools.cli library)))(((""Clojure"", ""clojure.tools.cli/parse-opts"")))  ==== Solution  Use the https://github.com/clojure/tools.cli[+tools.cli+] library. -Before starting, add `[org.clojure/tools.cli ""0.2.4""]` to your project's+Before starting, add `[org.clojure/tools.cli ""0.3.1""]` to your project's dependencies, or start a REPL using +lein-try+:  [source,shell-session] ---- $ lein try org.clojure/tools.cli ---- -Use the +clojure.tools.cli/cli+ function in your project's +-main++Use the +clojure.tools.cli/parse-opts+ function in your project's +-main+ function entry point to parse command-line arguments:footnote:[Since +tools.cli+ is so cool, this example can run entirely at the REPL.]  [source,clojure] -----(require '[clojure.tools.cli :refer [cli]])+(require '[clojure.tools.cli :refer [parse-opts]])  (defn -main [& args]-  (let [[opts args banner] (cli args-                                [""-h"" ""--help"" ""Print this help""-                                 :default false :flag true])]-    (when (:help opts)-      (println banner))))+  (let [{:keys [:options :arguments :summary :errors]} (parse-opts args"
https://api.github.com/repos/clojure/core.async/pulls/20,5174938,"@@ -38,34 +38,6 @@             (do (.splice takes idx 1)                 (recur idx))))))) -  impl/WritePort"
https://api.github.com/repos/clojure/core.logic/pulls/12,2429468,"@@ -2982,7 +2991,8 @@ (defn reify-constraints [v r cs]   (let [rcs (->> (vals (:cm cs))                  (filter reifiable?)-                 (map #(reifyc % v r)))]+                 (map #(reifyc % v r))+                 (filter #(not (nil? %))))]"
https://api.github.com/repos/clojure/core.typed/pulls/8,16573748,"@@ -521,6 +609,13 @@                    (c/HSeq->HSequential s))                  t) +        ; repeat Heterogeneous* can always accept nil"
https://api.github.com/repos/clojure-liberator/liberator/pulls/47,4586588,"@@ -141,6 +141,17 @@                         [:li [:a {:href ""/drag-drop/athletes""} ""Athletes""]]                         [:li [:a {:href ""/x-liberator/requests/""} ""Liberator request dump""]]]])))  +(defhandler handle-unprocessable-entity 422 ""Entity is invalid"")++(defresource simple-splice+  :method-allowed? (request-method-in :get :post)+  :available-media-types [""text/html""]+  :post! (fn [ctx]+           (if (= ""pass"" (get-in ctx [:request :params :flag]))+             true ; continue on default processing path+             #(handle-unprocessable-entity %))) ;change default flow to new handler"
https://api.github.com/repos/clojure-liberator/liberator/pulls/67,6386727,"@@ -451,7 +458,7 @@   media-type-available?   accept-language-exists?) -(defhandler handle-options 201 nil)"
https://api.github.com/repos/clojure-liberator/liberator/pulls/100,9622052,"@@ -552,6 +552,9 @@    :put!                      true    :delete!                   true +   ;; The default function used extract a ring response from a handler's response+   :as-response               as-response"
https://api.github.com/repos/clojure-liberator/liberator/pulls/115,11133872,"@@ -124,7 +127,13 @@        (apply str)))  (defn build-allow-header [resource]-  (clojure.string/join "", "" (map (comp clojure.string/upper-case name) ((:allowed-methods resource)))))+  (join "", "" (map (comp upper-case name) ((:allowed-methods resource)))))"
https://api.github.com/repos/clojure-liberator/liberator/pulls/175,20786632,"@@ -19,9 +19,9 @@   :plugins [[lein-midje ""3.1.3"" :exclusions [leiningen-core]]             [lein-ring ""0.8.10"" :exclusions [org.clojure/clojure]]] -  :profiles {:dev {:dependencies [[ring/ring-jetty-adapter ""1.2.1"" :exclusions [joda-time]]+  :profiles {:dev {:dependencies [[ring/ring-jetty-adapter ""1.3.1"" :exclusions [joda-time]]                                   [ring-mock ""0.1.2""]-                                  [ring/ring-devel ""1.2.1"" :exclusions [joda-time]]+                                  [ring/ring-devel ""1.3.1"" :exclusions [joda-time]]"
https://api.github.com/repos/clojure-liberator/liberator/pulls/113,22571758,"@@ -0,0 +1,100 @@+;; Copyright (c) Philipp Meier (meier@fnogol.de). All rights reserved.+;; The use and distribution terms for this software are covered by the Eclipse+;; Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php) which+;; can be found in the file epl-v10.html at the root of this distribution. By+;; using this software in any fashion, you are agreeing to be bound by the+;; terms of this license. You must not remove this notice, or any other, from+;; this software.++(ns liberator.async+  (:require [clojure.core.async :as async :refer [go <!]]+            [clojure.core.async.impl.protocols :as async-p]))++(def channel?+  ""Returns true if argument is a core.async channel""+  (partial satisfies? async-p/Channel))++(defmacro go?"
https://api.github.com/repos/clojure-liberator/liberator/pulls/196,25567619,"@@ -5,7 +5,7 @@            java.util.Date))  (defn make-function [x]-  (if (or (fn? x) (keyword? x)) x (constantly x)))+  (if (or (fn? x) (keyword? x) (var? x)) x (constantly x)))"
https://api.github.com/repos/clojure-liberator/liberator/pulls/197,25568261,"@@ -28,11 +25,11 @@ (def OK (is-status 200)) (def CREATED (is-status 201)) (def ACCEPTED (is-status 202))-(def NO-CONTENT (all (is-status 204) (body nil?)))+(def NO-CONTENT (every-checker (is-status 204) (body nil?)))"
https://api.github.com/repos/clojure-liberator/liberator/pulls/220,31987580,"@@ -138,8 +138,9 @@          {:status status}           ;; ETags-         (when-let [etag (gen-etag context)]-           {:headers {""ETag"" etag}})+         (when (and (= 200 status) (#{:get :head} (:request-method request)))"
https://api.github.com/repos/clojure-liberator/liberator/pulls/223,31987791,"@@ -5,7 +5,10 @@         checkers         [ring.mock.request :only [request header]])) -+(facts ""customize the initial context""+       (let [resp ((resource :initialize {::field ""some initial context""}+                             :handle-ok (fn [ctx] (::field ctx))) (request :get ""/""))]"
https://api.github.com/repos/clojure-liberator/liberator/pulls/224,33935945,"@@ -3,6 +3,18 @@ layout: default title: Actions --- +# Initializing the context++```:initialize-context``` is the first action performed when a request+is being handled --- its purpose is to allow additional values to be+inserted into the context (in addition to the standard+```:representation```, ```:request``` and ```:resource``` keys --- see+the [execution model](execution-model.html) documentation) before the+request is processed further.  Note that this action should not, in+general, modify the state of the server --- it is intended solely to+provide a convenient way to thread additional values through the+execution flow.+"
https://api.github.com/repos/clojure-liberator/liberator/pulls/233,41086526,"@@ -0,0 +1,19 @@+(ns test-parse+  (:use liberator.core+        midje.sweet+        checkers+        [ring.mock.request :only [request]]+        [clojure.data.json :only [write-str]]))++(def request-entity (atom nil))"
https://api.github.com/repos/clojure-liberator/liberator/pulls/234,42325592,"@@ -2,6 +2,8 @@  # Unreleased +* The `defresource` macro no longer implicitly bind `request`."
https://api.github.com/repos/clojure-liberator/liberator/pulls/242,45708836,"@@ -2,6 +2,8 @@  # Unreleased +* Map serialization supports java.util.Map"
https://api.github.com/repos/clojure-liberator/liberator/pulls/142,79151217,"@@ -132,11 +140,11 @@                      "" header in the http response.""]]                    [:ol (map (fn [[id [d {:keys [request-method uri]} log]]]                                [:ul-                                [:a {:href (h (str (with-slash mount-url) id))}+                                [:a {:href (h (str (with-slash (str *context* mount-url)) id))}                                  [:span (h request-method)] "" "" [:span (h uri)]]                                 [:span "" at "" [:span (h d)] "" "" [:span ""("" (seconds-ago d) ""s ago)""]]]) @logs)])]))) -(defn css-url [] (str (with-slash mount-url) ""styles.css""))+(defn css-url [] (str (with-slash (str *context* mount-url)) ""styles.css""))"
https://api.github.com/repos/clojure-liberator/liberator/pulls/283,124539135,"@@ -118,32 +145,49 @@              resp (r (request :post ""/"")) ]          (fact ""Post to existing if post to missing forbidden is allowed"" resp => CREATED))) - (facts ""PUT requests""-       (let [r (resource :method-allowed? [:put]+       (let [r (resource :method-allowed? (request-method-in :put)"
https://api.github.com/repos/clojure-liberator/liberator/pulls/284,124539900,"@@ -38,10 +38,12 @@ modified-since?             | Was the resource modified since the date given in moved-permanently?          | Was the resource moved permanently?                                                                                           | false                                             | moved-temporarily?          | Was the resource moved temporarily?                                                                                           | false                                             | multiple-representations?   | Should the response be 310 multiple representations?                                                                          | false                                             |+post-enacted?               | Was the post request finally processed?                                                                                       | true                                              |"
https://api.github.com/repos/clojure-liberator/liberator/pulls/304,244112399,"@@ -76,9 +76,9 @@   (cond    (-> newval meta :replace) newval    (and (map? curr) (map? newval)) (merge-with combine curr newval)-   (and (list? curr) (coll? newval)) (concat curr newval)-   (and (vector? curr) (coll? newval)) (concat curr newval)-   (and (set? curr) (coll? newval)) (set (concat curr newval))+   (and (list? curr) (coll? newval)) (apply list (concat curr newval))"
https://api.github.com/repos/clojure-liberator/liberator/pulls/299,245620218,"@@ -163,10 +163,16 @@  (defn split-qval [caq]   (let [[charset & params] (string/split caq #""[\s\r\n]*;[\s\r\n]*"")+        parse (fn [s]+                (let [[param value] (string/split s #""[\s\r\n]*="")+                      failure (protocol-exception ""Quality value of header is malformed"")]+                  (when (= ""q"" param)+                    (try+                      (Float/parseFloat value)+                      (catch NumberFormatException e (throw failure))+                      (catch NullPointerException e (throw failure))))))         q (first (reverse (sort (filter (comp not nil?)-                                        (map #(let [[param value] (string/split % #""[\s\r\n]*="")]-                                                (if (= ""q"" param) (Float/parseFloat value)))"
https://api.github.com/repos/dakrone/cheshire/pulls/34,2760202,"@@ -53,15 +53,16 @@  (declare generate) -(definline generate-map [^JsonGenerator jg obj ^String date-format ^Exception e]+(definline generate-map [^JsonGenerator jg obj ^String date-format ^Exception e+                         key-fn]   `(do      (.writeStartObject ~jg)      (doseq [m# ~obj]        (let [k# (key m#)              v# (val m#)]-         (.writeFieldName ~jg (if (keyword? k#)-                                (.substring (str k#) 1)-                                (str k#)))+         (.writeFieldName ~jg (~key-fn (if (keyword? k#)+                                         (.substring (str k#) 1)+                                         (str k#))))"
https://api.github.com/repos/dakrone/cheshire/pulls/100,59079519,"@@ -24,9 +49,12 @@          generator (.createGenerator                     ^JsonFactory (or factory/*json-factory*                                      factory/json-factory)-                    ^Writer sw)]-     (when (:pretty opt-map)+                    ^Writer sw)+         print-pretty (:pretty opt-map)]+     (when (= true print-pretty)        (.useDefaultPrettyPrinter generator))+     (when (map? print-pretty)"
https://api.github.com/repos/dakrone/cheshire/pulls/122,132774953,"@@ -0,0 +1,41 @@+(ns cheshire.exact+  (:require [cheshire.factory :as factory]+            [cheshire.parse :as parse]+            [cheshire.core :as core])+  (:import (java.io StringReader Reader BufferedReader+                    Writer)+           (com.fasterxml.jackson.core JsonFactory)))++(defn- exact-parse [jp parsed]+  (let [valid-json? (try (nil? (.nextToken jp))+                         (catch Exception _ false))]+    (if valid-json?+      parsed+      (throw (Exception. ""Invalid json"")))))"
https://api.github.com/repos/dakrone/cheshire/pulls/158,343746684,"@@ -116,7 +116,10 @@ (defn generate [^JsonGenerator jg obj ^String date-format ^Exception ex key-fn]   (cond    (nil? obj) (.writeNull ^JsonGenerator jg)-   (get (:impls JSONable) (class obj)) (#'to-json obj jg)++   (get (:impls JSONable) (class obj))+   (binding [*date-format* date-format]"
https://api.github.com/repos/dakrone/cheshire/pulls/195,1018311562,"@@ -37,6 +37,18 @@ clj-json had no features, but was fast. Cheshire encodes JSON fast, with added support for more types and the ability to use custom encoders. +## Import++### Leiningen/Boot+```clojure+[cheshire ""5.11.0""]+```"
https://api.github.com/repos/dakrone/clj-http/pulls/127,3663105,"@@ -87,9 +87,18 @@ (defn add-client-params!   ""Add various client params to the http-client object, if needed.""   [http-client kvs]-  (doto http-client+  (let [cookie-spec-factory (:cookie-spec-factory kvs)        "
https://api.github.com/repos/dakrone/clj-http/pulls/163,7666322,"@@ -80,13 +80,13 @@ (defn maybe-force-proxy [^DefaultHttpClient client                          ^HttpEntityEnclosingRequestBase request                          proxy-host proxy-port]-  (let [uri (.getURI request)]-    (when (and (nil? (#{""localhost"" ""127.0.0.1""} (.getHost uri))) proxy-host)-      (let [target (HttpHost. (.getHost uri) (.getPort uri) (.getScheme uri))-            route (HttpRoute. target nil (HttpHost. proxy-host proxy-port)-                              (.. client getConnectionManager getSchemeRegistry-                                  (getScheme target) isLayered))]-        (set-client-param client ConnRoutePNames/FORCED_ROUTE route)))+  (when proxy-host+    (let [uri (.getURI request)+          target (HttpHost. (.getHost uri) (.getPort uri) (.getScheme uri))+          route (HttpRoute. target nil (HttpHost. proxy-host proxy-port)+                            (.. client getConnectionManager getSchemeRegistry+                                (getScheme target) isLayered))]+      (set-client-param client ConnRoutePNames/FORCED_ROUTE route))     request))"
https://api.github.com/repos/dakrone/clj-http/pulls/187,9761362,"@@ -140,6 +140,16 @@   [{:keys [status]}]   (<= 500 status 599)) +(defn throws-exceptions?+  [req]+  (let [te? (clojure.core/get req :throw-exceptions)]+    (if (nil? te?)+      (let [te? (clojure.core/get req :throw-exceptions?)]+        (if (nil? te?)+          true"
https://api.github.com/repos/dakrone/clj-http/pulls/218,16428642,"@@ -135,3 +135,15 @@   [^CookieStore cookie-store]   (when cookie-store     (into {} (map to-cookie (.getCookies cookie-store)))))++(defn add-cookie-to-cookie-store+  ""Add a ClientCookie to a cookie-store""+  [^CookieStore cookie-store ^ClientCookie cookie]+  (.addCookie cookie-store cookie)+  )++(defn clear-cookies-from-cookie-store"
https://api.github.com/repos/dakrone/clj-http/pulls/220,16945034,"@@ -0,0 +1,72 @@+;; extra required dependencies for this example:+;; :dependencies [[commons-io ""2.4""]]"
https://api.github.com/repos/dakrone/clj-http/pulls/235,21514645,"@@ -31,7 +46,22 @@                        :scheme ""http""})]     (is (= 200 (:status resp)))     (is (= ""close"" (get-in resp [:headers ""connection""])))-    (is (= ""get"" (:body resp)))))+    (is (= ""get"" (:body resp))))+  (let [params {:a ""1"" :b {:c ""2""}}]+    (doseq [[content-type read-fn]+            [[nil parse-form-params]+             [:x-www-form-urlencoded parse-form-params]+             [:edn read-string]+             [:transit+json #(parse-transit % :json)]+             [:transit+msgpack #(parse-transit % :msgpack)]]]+      (let [resp (request {:uri ""/post""+                           :method :post+                           :content-type content-type+                           :form-params params})]+        (is (= 200 (:status resp)))+        (is (= ""close"" (get-in resp [:headers ""connection""])))+        (prn (:body resp))"
https://api.github.com/repos/dakrone/clj-http/pulls/297,49014582,"@@ -1,4 +1,4 @@-(defproject clj-http ""3.0.0-SNAPSHOT""+(defproject lambdakazan/clj-http ""2.0.4-SNAPSHOT"""
https://api.github.com/repos/dakrone/clj-http/pulls/303,53594722,"@@ -6,53 +6,32 @@            (java.security KeyStore)            (java.security.cert X509Certificate)            (javax.net.ssl SSLSession SSLSocket)-           (org.apache.http.config RegistryBuilder)-           (org.apache.http.conn ClientConnectionManager)-           (org.apache.http.conn.params ConnPerRouteBean)+           (org.apache.http.config RegistryBuilder Registry)            (org.apache.http.conn HttpClientConnectionManager)-           (org.apache.http.conn.ssl SSLSocketFactory TrustStrategy-                                     X509HostnameVerifier SSLContexts)+           (org.apache.http.conn.ssl SSLSocketFactory)            (org.apache.http.conn.scheme PlainSocketFactory                                         SchemeRegistry Scheme)-           (org.apache.http.conn.ssl BrowserCompatHostnameVerifier-                                     SSLConnectionSocketFactory SSLContexts)            (org.apache.http.conn.socket PlainConnectionSocketFactory)-           (org.apache.http.impl.conn BasicClientConnectionManager-                                      PoolingClientConnectionManager-                                      SchemeRegistryFactory-                                      SingleClientConnManager)+           (org.apache.http.impl.conn PoolingClientConnectionManager)            (org.apache.http.impl.conn BasicHttpClientConnectionManager-                                      PoolingHttpClientConnectionManager)))--(def ^SSLSocketFactory insecure-socket-factory-  (SSLSocketFactory. (reify TrustStrategy-                       (isTrusted [_ _ _] true))-                     (reify X509HostnameVerifier-                       (^void verify [this ^String host ^SSLSocket sock]-                        ;; for some strange reason, only TLSv1 really-                        ;; works here, if you know why, tell me.-                        (.setEnabledProtocols-                         sock (into-array String [""TLSv1""]))-                        (.setWantClientAuth sock false)-                        (let [session (.getSession sock)]-                          (when-not session-                            (.startHandshake sock))-                          (aget (.getPeerCertificates session) 0)-                          ;; normally you'd want to verify the cert-                          ;; here, but since this is an insecure-                          ;; socketfactory, we don't-                          nil))-                       (^void verify [_ ^String _ ^X509Certificate _]-                        nil)-                       (^void verify [_ ^String _ ^""[Ljava.lang.String;"" _-                                      ^""[Ljava.lang.String;"" _]-                        nil)-                       (^boolean verify [_ ^String _ ^SSLSession _]-                        true))))--(def ^SSLSocketFactory secure-ssl-socket-factory-  (doto (SSLSocketFactory/getSocketFactory)-    (.setHostnameVerifier SSLSocketFactory/STRICT_HOSTNAME_VERIFIER)))+                                      PoolingHttpClientConnectionManager)+           (org.apache.http.conn.ssl SSLConnectionSocketFactory+                                     DefaultHostnameVerifier+                                     NoopHostnameVerifier+                                     TrustStrategy)+           (org.apache.http.ssl SSLContexts)+           (org.apache.http.pool ConnPoolControl)))++(def ^SSLConnectionSocketFactory insecure-socket-factory+  (SSLConnectionSocketFactory.+   (-> (SSLContexts/custom)+       (.loadTrustMaterial nil (reify TrustStrategy+                                 (isTrusted [_ _ _] true)))+       (.build))+   NoopHostnameVerifier/INSTANCE))++(def ^SSLConnectionSocketFactory secure-ssl-socket-factory+  (SSLConnectionSocketFactory/getSocketFactory))"
https://api.github.com/repos/dakrone/clj-http/pulls/332,79076184,"@@ -616,11 +616,6 @@     (are [in out] (is-applied client/wrap-nested-params                               {:query-params in :form-params in}                               {:query-params out :form-params out})-      {""x"" [""0"" ""1""]} {""x[0]"" ""0"" ""x[1]"" ""1""}"
https://api.github.com/repos/dakrone/clj-http/pulls/341,91172737,"@@ -308,7 +308,9 @@      :protocol-version  {:name (.getProtocol protocol-version)                          :major (.getMajor protocol-version)                          :minor (.getMinor protocol-version)}-     :reason-phrase (.getReasonPhrase status)}))+     :reason-phrase (.getReasonPhrase status)+     :trace-redirects (mapv #(.toString %)"
https://api.github.com/repos/dakrone/clj-http/pulls/358,106821530,"@@ -274,7 +274,7 @@  (defn shutdown-manager   ""Shut down the given connection manager, if it is not nil""-  [manager]+  [^org.apache.http.conn.HttpClientConnectionManager manager]"
https://api.github.com/repos/dakrone/clj-http/pulls/368,112358690,"@@ -0,0 +1,54 @@+(ns clj-http.examples.caching-middleware"
https://api.github.com/repos/dakrone/clj-http/pulls/480,261436765,"@@ -202,28 +202,30 @@     (when max-redirects (.setMaxRedirects config max-redirects))     (.build config))) -(defmulti ^:private construct-http-host (fn [proxy-host proxy-port]+(defmulti ^:private construct-http-host (fn [proxy-host proxy-port proxy-scheme]                                           (class proxy-host))) (defmethod construct-http-host String-  [^String proxy-host ^Long proxy-port]-  (if proxy-port-    (HttpHost. proxy-host proxy-port)-    (HttpHost. proxy-host)))+  [^String proxy-host ^Long proxy-port ^String proxy-scheme]+  (cond+    (and proxy-host proxy-port proxy-scheme) (HttpHost. proxy-host proxy-port proxy-scheme)+    (and proxy-host proxy-port) (HttpHost. proxy-host proxy-port)+    :else (HttpHost. proxy-host))) (defmethod construct-http-host java.net.InetAddress-  [^InetAddress proxy-host ^Long proxy-port]-  (if proxy-port-    (HttpHost. proxy-host proxy-port)-    (HttpHost. proxy-host)))+  [^InetAddress proxy-host ^Long proxy-port ^String proxy-scheme]+  (cond+    (and proxy-host proxy-port proxy-scheme) (HttpHost. proxy-host proxy-port proxy-scheme)+    (and proxy-host proxy-port) (HttpHost. proxy-host proxy-port)+    :else (HttpHost. proxy-host)))  (defn ^HttpRoutePlanner get-route-planner"
https://api.github.com/repos/dakrone/clj-http/pulls/483,274224982,"@@ -181,7 +181,8 @@   (let [regular (conn-mgr/make-regular-conn-manager {})         regular-reusable (conn-mgr/make-reusable-conn-manager {})         async (conn-mgr/make-regular-async-conn-manager {})-        async-reusable (conn-mgr/make-reuseable-async-conn-manager {})]+        async-reusable (conn-mgr/make-reusable-async-conn-manager {})+        async-reuseable (conn-mgr/make-reuseable-async-conn-manager {})]"
https://api.github.com/repos/dakrone/clj-http/pulls/495,293020933,"@@ -141,7 +141,7 @@   ""Resolve and apply cheshire's json stream decoding dynamically.""   [& args]   {:pre [json-enabled?]}-  (apply (ns-resolve (symbol ""cheshire.core"") (symbol ""decode-stream"")) args))+  (doall (apply (ns-resolve (symbol ""cheshire.core"") (symbol ""decode-stream"")) args)))"
https://api.github.com/repos/dakrone/clj-http/pulls/498,303232987,"@@ -10,10 +10,23 @@ * Changelog List of user-visible changes that have gone into each release -** 3.10.0 (Unreleased)+** 3.10.1 (Unreleased)+- TBD+** 3.10.0 - Add trust-manager and key-managers support to the client -   https://github.com/dakrone/clj-http/pull/469-+- Improving consistency of connection option names+  https://github.com/dakrone/clj-http/pull/483+  https://github.com/dakrone/clj-http/issues/477+- Ensure Socket Timeout is set for BasicHttpClientConnectionManager+  https://github.com/dakrone/clj-http/pull/463+- Reduce body allocation and copying+  https://github.com/dakrone/clj-http/pull/475+** 3.9.1+- Fix issue in body where first byte value is 255+  https://github.com/dakrone/clj-http/pull/449+- Add custom `:unexceptiona-status` option"
https://api.github.com/repos/dakrone/clj-http/pulls/507,310762414,"@@ -427,7 +430,10 @@ (deftest ^:integration t-json-output-coercion   (run-server)   (let [resp (client/get (localhost ""/json"") {:as :json})-        resp-array (client/get (localhost ""/json-array"") {:as :json-strict})+        resp-array (client/get (localhost ""/json-array"") {:as :json})+        resp-array-strict (client/get (localhost ""/json-array"") {:as :json-strict})+        resp-large-array (client/get (localhost ""/json-large-array"") {:as :json})+        resp-large-array-strict (client/get (localhost ""/json-large-array"") {:as :json-strict})"
https://api.github.com/repos/dakrone/clj-http/pulls/516,321459030,"@@ -1168,12 +1168,26 @@      (throw (IllegalArgumentException. ""Host URL cannot be nil""))))  (defn- request*-  [req [respond raise]]-  (if (opt req :async)+  [req & [respond raise]]+  {:pre [(not (and (:async req) (:async-future req)))]}"
https://api.github.com/repos/dakrone/clj-http/pulls/522,337840599,"@@ -128,12 +128,14 @@ (defn create-multipart-entity   ""Takes a multipart vector of maps and creates a MultipartEntity with each   map added as a part, depending on the type of content.""-  [multipart {:keys [mime-subtype multipart-mode]+  [multipart {:keys [mime-subtype multipart-mode multipart-charset]"
https://api.github.com/repos/dakrone/clj-http/pulls/531,369321658,"@@ -1275,7 +1275,7 @@ manager must be used.  ;; Async http clients may also be created and re-used: (let [acm (conn/make-reuseable-async-conn-manager {})-      ahclient (core/build-async-http-client {} acm ""https://example.com"" false)]+      ahclient (core/build-async-http-client {} acm)]"
https://api.github.com/repos/dakrone/clj-http/pulls/529,445313566,"@@ -0,0 +1,15 @@+name: Clojure CI++on: [push]++jobs:+  build:++    runs-on: ubuntu-latest++    steps:+    - uses: actions/checkout@v1+    - name: Install dependencies+      run: lein deps+    - name: Run tests+      run: lein test :all"
https://api.github.com/repos/dakrone/clj-http/pulls/545,450477698,"@@ -232,20 +232,28 @@       get-custom-strategy-registry))  (defn ^BasicHttpClientConnectionManager make-regular-conn-manager-  [{:keys [keystore trust-store+  [{:keys [dns-resolver+           keystore trust-store            key-managers trust-managers            socket-timeout] :as req}]+   (let [conn-manager (cond                        (or key-managers trust-managers)-                       (BasicHttpClientConnectionManager. (get-managers-scheme-registry req))+                       (BasicHttpClientConnectionManager. (get-managers-scheme-registry req)+                                                          nil nil+                                                          (when dns-resolver dns-resolver))"
https://api.github.com/repos/dakrone/clj-http/pulls/547,450996360,"@@ -0,0 +1,19 @@+status = error+dest = err+name = PropertiesConfig++filter.threshold.type = ThresholdFilter+filter.threshold.level = debug++appender.console.type = Console+appender.console.name = STDOUT+appender.console.layout.type = PatternLayout+appender.console.layout.pattern = %d | %-5p | [%t] | %c | %m%n++rootLogger.level = info+rootLogger.appenderRef.stdout.ref = STDOUT++# Set this to debug to log all data to/from server+# See https://hc.apache.org/httpcomponents-client-4.5.x/logging.html+logger.wire.name = org.apache.http.wire+logger.wire.level = info"
https://api.github.com/repos/dakrone/clj-http/pulls/562,495621983,"@@ -613,6 +614,8 @@ controlled by the ~:multi-param-style~ option: ;; with :multi-param-style :indexed, a repeating param with array suffix and ;; index (Rails-style): :a [1 2 3] => ""a[0]=1&a[1]=2&a[2]=3""+;; with :multi-param-style :enumerated, a param with enumerated values"
https://api.github.com/repos/dakrone/clj-http/pulls/574,521865882,"@@ -125,6 +125,28 @@   [{:keys [^ContentBody content]}]   content) +(defn- multipart-workaround+  ""Workaround for AsyncHttpClient to bypass 25kb restriction on getContent.++  See https://github.com/dakrone/clj-http/issues/560,+  https://issues.apache.org/jira/browse/HTTPASYNC-163+  ""+  [^org.apache.http.entity.mime.MultipartFormEntity mp-entity]+  (reify org.apache.http.HttpEntity+    (isRepeatable [_] (.isRepeatable mp-entity))+    (isChunked [_] (.isChunked mp-entity))+    (isStreaming [_] (.isStreaming mp-entity))+    (getContentLength [_] (.getContentLength mp-entity))+    (getContentType [_] (.getContentType mp-entity))+    (getContentEncoding [_] (.getContentEncoding mp-entity))+    (consumeContent [_] (.consumeContent mp-entity))+    (getContent [_]+      (let [os (java.io.ByteArrayOutputStream.)]+        (.writeTo mp-entity os)+        (.flush os)+        (java.io.ByteArrayInputStream. (.toByteArray os))))"
https://api.github.com/repos/dakrone/clj-http/pulls/615,865441496,"@@ -104,6 +104,8 @@     {:status 200 :body ""delete-with-body""}     [:post ""/multipart""]     {:status 200 :body (:body req)}+    [:head ""/head-with-body""]+    {:status 200 :headers {""body"" (slurp (:body req))}}"
https://api.github.com/repos/dakrone/clj-http/pulls/630,1089648230,"@@ -1539,6 +1539,8 @@ (deftest t-coercion-methods   (let [json-body (ByteArrayInputStream. (.getBytes ""{\""foo\"":\""bar\""}""))         json-ms949-body (ByteArrayInputStream. (.getBytes ""{\""foo\"":\""안뇽\""}"" ""MS949""))+        xml-body (ByteArrayInputStream. (.getBytes ""<?xml version=\""1.0\"" encoding=\""UTF-8\"" ?><foo>bar</foo>""))+        xml-auto-body (ByteArrayInputStream. (.getBytes ""<?xml version=\""1.0\"" encoding=\""UTF-8\"" ?><foo>bar</foo>""))"
https://api.github.com/repos/datacrypt-project/hitchhiker-tree/pulls/21,74841685,"@@ -194,74 +196,77 @@  (defn -main   [& [root & args]]-  (let [outputs (atom [])]-    (doseq [args (or (->> args-                          (partition-by #(= % ""--""))-                          (map-indexed vector)-                          (filter (comp even? first))-                          (map second)-                          (seq))-                     [[]])] ; always do one iteration-      (let [{:keys [options arguments errors summary]} (parse-opts args options)-            tree-to-test (atom {})-            results (atom [])]-        (cond-          (or (= ""-h"" root)-              (= ""--help"" root)-              (nil? root)-              (:help options)) (exit 0 (usage summary))-          (not= (count arguments) 0) (exit 1 (usage summary))-          errors (exit 1 (error-msg errors)))-        (let [backend (case (:backend options)-                        ""testing"" (core/->TestingBackend)-                        ""redis"" (do (redis/start-expiry-thread!)-                                    (redis/->RedisBackend)))-              delete-xform (case (:delete-pattern options)-                             ""forward"" identity-                             ""reverse"" reverse-                             ""shuffle"" shuffle-                             ""zero"" #(repeat (count %) 0.0))-              [tree-name structure]-              (case (:data-structure options)-                ""b-tree"" [""b-tree"" (core-b-tree (:tree-width options) backend)]-                ""fractal"" [""fractal"" (msg-b-tree (:tree-width options) backend)]-                ""sorted-set"" [""sorted-set"" (sorted-set-repr)])-              flush-freq (:flush-freq options)-              codename (str tree-name-                            ""__flush_""-                            flush-freq-                            ""__b_""-                            (:tree-width options)-                            ""__""-                            (:backend options)-                            ""__n_""-                            (:num-operations options)-                            ""__del_""-                            (:delete-pattern options))]-          (doseq [ds (generate-test-datasets)-                  :let [codename (str codename-                                      ""_""-                                      (:name ds))-                        out (create-output-dir-                              root-                              codename)-                        _ (println ""Doing"" codename)-                        bench-res (benchmark (:num-operations options) ds flush-freq structure out delete-xform)]]-            (swap! results conj-                   {:tree tree-name-                    :ds (:name ds)-                    :freq flush-freq-                    :n (:num-operations options)-                    :b (:tree-width options)-                    :delete-pattern (:delete-pattern options)-                    :results bench-res}))-          ;(println ""results"")-          ;(clojure.pprint/pprint @results)-          (swap! outputs conj (template-one-sheet @results)))))-    (excel/render-to-file-      ""template_benchmark.xlsx""-      (.getPath (File. root ""analysis.xlsx""))-      {""SingleDS""-       (map-indexed (fn [i s]-                      (assoc s :sheet-name (str ""Trial "" (inc i))))-                    @outputs)})))+  (jdbc/with-db-connection [db (sqlite/db-spec "":memory:"")]"
https://api.github.com/repos/datacrypt-project/hitchhiker-tree/pulls/23,77384594,"@@ -0,0 +1,100 @@+(ns hitchhiker.s3+  (:require [amazonica.aws.s3 :as s3]+            [clojure.string :refer [split]]+            [hitchhiker.tree.core :as core]+            [taoensso.nippy :as nippy])+  (:import [com.google.common.io ByteStreams]+           [java.util UUID]+           [java.io ByteArrayInputStream]))++;;; Main node data stored in uuid key+;;;   bucket-name/8E3806E4-865D-43C8-A823-9CCF7D9D88CB+;;; References from node -> node uses sub object:+;;;   bucket-name/F9FD37E5-5BF3-4681-93A0-A56E9823A068/->2793532B-8FC9-4E0D-8CD4-19AE87F3133E+;;; References to node uses sub object:+;;;   bucket-name/0834FB96-CC7A-4531-8A8E-B9FB811F5D5B/<-A38D2654-EDF2-460A-9D88-388DEC77AA05++(defrecord S3Addr [last-key bucket key storage-addr]+  core/IResolve+  (dirty? [_] false)+  (last-key [_] last-key)+  (resolve [_]+    (with-open [in (:input-stream (s3/get-object bucket key))]+      (nippy/thaw (ByteStreams/toByteArray in)))))++(defn synthesize-storage-addr+  [bucket key]+  (doto (promise)+    (deliver {:bucket bucket :key key})))++(defn s3-addr+  [last-key bucket key]+  (->S3Addr last-key bucket key (synthesize-storage-addr bucket key)))++(nippy/extend-thaw :b-tree/s3-addr+                   [data-input]+                   (let [last-key (nippy/thaw-from-in! data-input)+                         bucket (nippy/thaw-from-in! data-input)+                         key (nippy/thaw-from-in! data-input)]+                     (s3-addr last-key bucket key)))++(nippy/extend-freeze S3Addr :b-tree/s3-addr+                     [{:keys [last-key bucket key]} data-output]+                     (nippy/freeze-to-out! data-output last-key)+                     (nippy/freeze-to-out! data-output bucket)+                     (nippy/freeze-to-out! data-output key))++(defn write-object+  [bucket key bytes]+  (println ""write-object"" bucket key (count bytes))+  (s3/put-object :bucket-name bucket+                 :key key+                 :metadata {:content-length (count bytes)}+                 :input-stream (ByteArrayInputStream. bytes)))++(defn delete-object+  [bucket key]+  (doall (for [other-key (map :key (:object-summaries+                                    (s3/list-objects :bucket-name bucket+                                                     :prefix (str key ""/->""))))]+           (s3/delete-object :bucket-name bucket+                             :key (str (last (split other-key ""/->"")) ""/<-"" key))+           ; TODO: delete other-key if no refs?+           ))+  (doall (for [other-key (map :key (:object-summaries+                                    (s3/list-objects :bucket-name bucket+                                                     :prefix (str key ""/<-""))))]+           (s3/delete-object :bucket-name bucket+                             :key (str (last (split other-key ""/<-"")) ""/->"" key))))+  (s3/delete-object :bucket-name bucket :key key))++(defn add-refs+  [node-key child-keys]+  (doall+   (for [{:keys [bucket key]} child-keys]+     (do+       (write-object bucket (str node-key ""/->"" key) (byte-array 0))+       (write-object bucket (str key ""/<-"" node-key) (byte-array 0))))))++(defrecord S3Backend [#_service bucket]+  core/IBackend+  (new-session [_]+    (atom {:writes 0 :deletes 0}))"
https://api.github.com/repos/datacrypt-project/hitchhiker-tree/pulls/24,77423534,"@@ -0,0 +1,69 @@+(ns hitchhiker.tracing-gc+  (:require [hitchhiker.tree.core :as hh]))++;; Note: this implementation is single-threaded, and could be made parallel without too much effort++;; We might need to trace millions or billions of keys. That might not fit in memory, so this could be backed+;; by leveldb or hsql so that we can spill to disk when necessary. We don't need a functional datastructure here.+(defprotocol IGCScratch+  (add-to-work-queue! [this addr] ""Adds the given address to the work queue to be processed"")+  (pop-from-work-queue! [this] ""Pops the next element off of the work queue, or returns nil if we're done"")+  (observe-addr! [this addr] ""Marks the given addr as being currently active"")+  (observed? [this addr] ""Returns true if the given addr was observed""))+;+;;; The workq is a ref containing a collection of addresses we still need to scan.+;;; The observed-set is a ref containing the set of addresses we know are active+;;; For simplicity, adding an addr to the workq automatically observes it as well+;;;   ^^ this allows us to only add new addrs to the workq, without a separate set of ""in workq""+(defrecord InMemScratch [workq observed-set]+  IGCScratch+  (add-to-work-queue! [_ addr]+    (dosync+      (when-not (contains? @observed-set addr)+        (alter workq conj addr)+        (alter observed-set conj addr))))+  (pop-from-work-queue! [_]+    (dosync+      (when (seq @workq)+        (let [head (peek @workq)]+          (alter workq pop)+          head))))+  (observe-addr! [_ addr]+    (dosync+      (alter conj observed-set addr)))+  (observed? [_ addr]+    (contains? @observed-set addr)))++(defn in-mem-scratch+  ""Creates an instance of in memory GC scratch""+  []+  (->InMemScratch [] #{}))++(defn trace-gc!+  ""Does a tracing GC and frees up all unused keys.+   This is a simple mark-sweep algorithm.+   +   gc-scratch should be an instance of IGCScratch+   gc-roots should be a list of the roots, which should implement IResolve. These are generated by calls to anchor-root.+   all-keys should be a lazy sequence that will contain every key in storage. This algorithm will not hold the whole sequence in memory+   delete-fn will be called on every key that should be deleted during the sweep phase""+  [gc-scratch gc-roots all-keys delete-fn]+  ;; First, we'll initialize the work queue+  (doseq [root gc-roots]+    (add-to-work-queue! gc-scratch root))+  ;; Now, we'll do the mark phase+  (loop []+    (when-let [addr (pop-from-work-queue! gc-scratch)]+      (observe-addr! gc-scratch addr)+      (let [node (hh/resolve addr)]"
https://api.github.com/repos/datacrypt-project/hitchhiker-tree/pulls/30,109553726,"@@ -0,0 +1,162 @@+(ns hitchhiker.konserve+  (:refer-clojure :exclude [resolve subvec])+  (:require [clojure.core.rrb-vector :refer [catvec subvec]]+            #?(:clj [clojure.core.async :refer [chan promise-chan put!] :as async]+               :cljs [cljs.core.async :refer [chan promise-chan put!] :as async])+            [konserve.core :as k]+            [konserve.memory :refer [new-mem-store]]+            [hasch.core :refer [uuid]]+            [clojure.set :as set]+            #?(:clj [hitchhiker.tree.core :refer [go-try <?] :as core]+               :cljs [hitchhiker.tree.core :as core])+            [hitchhiker.tree.messaging :as msg])+  #?(:cljs (:require-macros [hitchhiker.tree.core :refer [go-try <?]])))+"
https://api.github.com/repos/day8/re-frame/pulls/107,37152611,"@@ -1,43 +1,43 @@-(defproject re-frame ""0.4.1""-  :description  ""A Clojurescript MVC-like Framework For Writing SPAs Using Reagent.""-  :url          ""https://github.com/Day8/re-frame.git""-  :license      {:name ""MIT""}-  :dependencies [[org.clojure/clojure ""1.6.0""]-                 [org.clojure/clojurescript ""0.0-3211""]+(defproject re-frame ""0.4.2-TRANSDUCERS""+  :description ""A Clojurescript MVC-like Framework For Writing SPAs Using Reagent.""+  :url ""https://github.com/Day8/re_frame.git"""
https://api.github.com/repos/day8/re-frame/pulls/183,71621024,"@@ -0,0 +1,43 @@+(ns re-frame.interop)++(defn next-tick [f]+  (.start (Thread. f)))"
https://api.github.com/repos/day8/re-frame/pulls/186,71966676,"@@ -79,7 +79,7 @@      (let [query-id   (first-in-vector v)            handler-fn (get @qid->fn query-id)]        (when ^boolean js/goog.DEBUG-         (when-let [not-reactive (remove #(implements? reagent.ratom/IReactiveAtom %) dynv)]"
https://api.github.com/repos/day8/re-frame/pulls/193,74871148,"@@ -0,0 +1,126 @@+(ns todomvc.core-test+  (:require #?(:cljs [cljs.test :refer-macros [deftest is]]+               :clj  [clojure.test :refer [deftest is]])+            [day8.re-frame.test :as rf-test]+            [re-frame.core :as rf]+            todomvc.db+            todomvc.events+            todomvc.subs))++(deftest basic--sync+  (rf-test/run-test-sync+    (rf/dispatch-sync [:initialise-db])++    (let [showing         (rf/subscribe [:showing])+          sorted-todos    (rf/subscribe [:sorted-todos])+          todos           (rf/subscribe [:todos])+          visible-todos   (rf/subscribe [:visible-todos])+          all-complete?   (rf/subscribe [:all-complete?])+          completed-count (rf/subscribe [:completed-count])+          footer-counts   (rf/subscribe [:footer-counts])]+      (is (= :all @showing))+      (is (empty? @sorted-todos))+      (is (empty? @todos))+      (is (empty? @visible-todos))+      (is (= false (boolean @all-complete?)))+      (is (= 0 @completed-count))+      (is (= [0 0] @footer-counts))++      (rf/dispatch [:add-todo ""write first test""])+      (is (= 1 (count @todos) (count @visible-todos) (count @sorted-todos)))+      (is (= 0 @completed-count))+      (is (= [1 0] @footer-counts))+      (is (= {:id 1, :title ""write first test"", :done false}+             (first @todos)))++      (rf/dispatch [:add-todo ""write second teXt""])+      (is (= 2 (count @todos) (count @visible-todos) (count @sorted-todos)))+      (is (= 0 @completed-count))+      (is (= [2 0] @footer-counts))+      (is (= {:id 2, :title ""write second teXt"", :done false}+             (second @todos)))++      (rf/dispatch [:save 2 ""write second test""])+      (is (= 2 (count @todos) (count @visible-todos) (count @sorted-todos)))+      (is (= 0 @completed-count))+      (is (= [2 0] @footer-counts))+      (is (= {:id 2, :title ""write second test"", :done false}+             (second @todos)))++      (rf/dispatch [:toggle-done 1])+      (is (= 2 (count @todos) (count @visible-todos) (count @sorted-todos)))+      (is (= 1 @completed-count))+      (is (= [1 1] @footer-counts))+      (is (= {:id 1, :title ""write first test"", :done true}+             (first @todos)))++      (rf/dispatch [:set-showing :active])+      (is (= :active @showing))+      (is (= 2 (count @todos) (count @sorted-todos)))+      (is (= 1 (count @visible-todos)))+      (is (= 1 @completed-count))+      (is (= [1 1] @footer-counts))+      (is (= {:id 2, :title ""write second test"", :done false}+             (first @visible-todos)))++      (rf/dispatch [:set-showing :done])+      (is (= :done @showing))+      (is (= 2 (count @todos) (count @sorted-todos)))+      (is (= 1 (count @visible-todos)))+      (is (= 1 @completed-count))+      (is (= [1 1] @footer-counts))+      (is (= {:id 1, :title ""write first test"", :done true}+             (first @visible-todos)))++      (rf/dispatch [:toggle-done 2])+      (is (= true (boolean @all-complete?))))))+++(deftest basic--async+  (rf-test/run-test-async+    (rf/dispatch-sync [:initialise-db])++    (let [showing         (rf/subscribe [:showing])+          sorted-todos    (rf/subscribe [:sorted-todos])+          todos           (rf/subscribe [:todos])+          visible-todos   (rf/subscribe [:visible-todos])+          all-complete?   (rf/subscribe [:all-complete?])+          completed-count (rf/subscribe [:completed-count])+          footer-counts   (rf/subscribe [:footer-counts])]+      (is (= :all @showing))+      (is (empty? @sorted-todos))+      (is (empty? @todos))+      (is (empty? @visible-todos))+      (is (= 0 @completed-count))++      (rf/dispatch [:add-todo ""write first test""])+      (rf-test/wait-for [:add-todo]+        (is (= [{:id 1, :title ""write first test"", :done false}] @todos))++        (rf/dispatch [:add-todo ""write second teXt""])"
https://api.github.com/repos/day8/re-frame/pulls/205,78277750,"@@ -26,15 +26,15 @@    ([kind id required?]    (let [handler (get-handler kind id)]-     (when debug-enabled?-       (when (and required? (nil? handler))+     (when debug-enabled?                                   ;; This is in a separate when so Closure DCE can run"
https://api.github.com/repos/day8/re-frame/pulls/235,78340891,"@@ -57,7 +57,7 @@ Here's an `-fx` handler which counts up to some number in chunks:       ;; We are at the beginning, so:       ;;     - modify db, causing popup of Modal saying ""Working ...""       ;;     - begin iterative dispatch. Give initial version of ""so-far""-      {:disptch 1[:count-to false {:counter 0} finish-at]  ;; dispatch to self+      {:disptch [:count-to false {:counter 0} finish-at]  ;; dispatch to self"
https://api.github.com/repos/day8/re-frame/pulls/249,84318740,"@@ -323,6 +324,37 @@ usage: {:dispatch-n (list [:do :all] [:three :of] [:these])} ``` +#### :dispatch-debounce++[Debounces](https://css-tricks.com/the-difference-between-throttling-and-debouncing/#article-header-id-1) dispatch events. +Will only dispatch the event after `wait` milliseconds have passed, and no more dispatches for this `:id` have been seen.+Repeated dispatches will reset the timer. Use this in scenarios where you want to wait for quiescence+before dispatching.++Expects either a single map, or a sequence of maps.++usage:++```cljs+{:dispatch-debounce [{:id       ::re-render-markdown+                      :wait     250"
https://api.github.com/repos/day8/re-frame/pulls/336,111654789,"@@ -183,14 +183,18 @@                              f)                           ;; one sugar pair-                         2 (fn inp-fn-                             ([_] (subscribe (second input-args)))-                             ([_ _] (subscribe (second input-args))))+                         2 (let [[label vec] input-args]+                             (when-not (= :<- )"
https://api.github.com/repos/day8/re-frame/pulls/347,119326466,"@@ -1,7 +1,9 @@ (ns re-frame.interceptor   (:require-    [re-frame.loggers :refer [console]]-    [re-frame.interop :refer [ratom? empty-queue debug-enabled?]]))+   [re-frame.loggers :refer [console]]+   [re-frame.interop :refer [ratom? empty-queue debug-enabled?]]+   [clojure.set :as set]+   ))"
https://api.github.com/repos/day8/re-frame/pulls/361,127343230,"@@ -13,7 +13,7 @@     (rf/dispatch [:timer now])))  ;; <-- dispatch used  ;; Call the dispatching function every second.-;; `defonce` is like `def` but it ensures only instance is ever+;; `defonce` is like `def` but it ensures only instance one is ever"
https://api.github.com/repos/day8/re-frame/pulls/418,140919359,"@@ -301,23 +304,30 @@          (let [subscriptions (inputs-fn query-vec)                reaction-id   (atom nil)                reaction      (make-reaction-                               (fn [] (trace/with-trace {:operation (first-in-vector query-vec)-                                                         :op-type   :sub/run-                                                         :tags      {:query-v  query-vec-                                                                     :reaction @reaction-id}}-                                        (computation-fn (deref-input-signals subscriptions query-id) query-vec))))]+                               (fn []+                                 (let [sub-value (computation-fn (deref-input-signals subscriptions query-id) query-vec)]+                                   (trace/with-trace {:operation (first-in-vector query-vec)+                                                      :op-type   :sub/run+                                                      :tags      {:sub-value  sub-value+                                                                  :query-v    query-vec+                                                                  :reaction   @reaction-id}}+                                                     sub-value))))]+            (reset! reaction-id (reagent-id reaction))            reaction))         ([db query-vec dyn-vec]          (let [subscriptions (inputs-fn query-vec dyn-vec)                reaction-id   (atom nil)                reaction      (make-reaction                                (fn []-                                 (trace/with-trace {:operation (first-in-vector query-vec)-                                                    :op-type   :sub/run-                                                    :tags      {:query-v  query-vec-                                                                :dyn-v    dyn-vec-                                                                :reaction @reaction-id}}-                                   (computation-fn (deref-input-signals subscriptions query-id) query-vec dyn-vec))))]+                                 (let [sub-value (computation-fn (deref-input-signals subscriptions query-id) query-vec dyn-vec)]"
https://api.github.com/repos/day8/re-frame/pulls/423,146378842,"@@ -115,6 +115,21 @@  (def clear-event (partial registrar/clear-handlers events/kind)) ;; think unreg-event-* +;; -- error handler ----------------------------------------------------------++(defn reg-event-error-handler+  ""Register the given event error `handler` (function) that will catch unhandled exceptions+  thrown in the interceptors/handler chain.+  A single error handler can exist at a given time: a previously registered error handler+  would be overwritten by the new one provided to this function.+  The error handler receives an ExceptionInfo object with keys+  #{:direction   ;; :before or :after+    :interceptor ;; id of the interceptor where the original exception was thrown+    :exception   ;; original exception+   }""+  [handler]+  (registrar/register-handler :error :error-handler handler))"
https://api.github.com/repos/day8/re-frame/pulls/432,154538630,"@@ -1,21 +0,0 @@-<?xml version=""1.0"" encoding=""UTF-8""?>"
https://api.github.com/repos/day8/re-frame/pulls/450,168628109,"@@ -145,13 +145,29 @@           (interceptor/invoke-interceptors :before)           interceptor/change-direction           (interceptor/invoke-interceptors :after))-      (is (= @after-db-val {:a 1})))))+      (is (= @after-db-val {:a 1}))))+  (testing ""when db effect is falsey""+    (let [ctx (context [:a :b] [] {:a 1})]+      (-> ctx+          (assoc-effect :db false)+          ((:after (after (fn [db] (is (false? db)))))))+      (-> ctx+          (assoc-effect :db nil)+          ((:after (after (fn [db] (is (nil? db))))))))))  (deftest test-enrich   (testing ""when no db effect is returned""     (let [ctx (context [] [] {:a 1})]       (is (= ::not-found (get-effect ctx :db ::not-found)))-      (-> ctx (:after (enrich (fn [db] (is (= db {:a 1})))))))))"
https://api.github.com/repos/day8/re-frame/pulls/565,365464621,"@@ -0,0 +1,53 @@+### Question++How do I access the value of a subscription from within a Reagent or JavaScript event (such as on-click)?++### The Wrong Way++You should NOT do this:+```clj+[:input {:type ""button"" +         :value ""Click me!""+         :on-click #(let [sub-val  @(subscribe [:something])]   ;;<--- Eeek+       ....)}]+```++because that `subscribe`:+1. might create a memory leak (the subscription might not be ""freed"")+2. makes the event handler impure (it grabs a global value)"
https://api.github.com/repos/day8/re-frame/pulls/718,620910396,"@@ -14,7 +14,7 @@ through the hierarchy in the form of `props`.  All very functional.  Except there are some problems:   - it can be a PITA to pass every little bit of data through many, many layers. -    Manual and time consuming.+    Manual and time-consuming."
https://api.github.com/repos/day8/re-frame/pulls/749,775586123,"@@ -239,7 +239,7 @@ it is a map which contains a `:db` key. <br> *<3>* The handler is returning a data structure (map) which describes two side-effects:    - a change to application state, via the `:db` key-  - a further event, via the `:dispatch` key+  - a further event, via the `:fx` key calling the `:dispatch` effect handler"
https://api.github.com/repos/day8/re-frame/pulls/760,930305237,"@@ -56,6 +56,7 @@ Commercial grade video training for re-frame and Reagent: * [Catlantis](https://github.com/madvas/catlantis) - React Native App about cats * [Lymchat](https://github.com/tiensonqin/lymchat) - React Native App to learn different cultures * [ventas](https://github.com/JoelSanchez/ventas) - Ecommerce platform made with a full-clojure stack+* [ONS Structual Search](https://github.com/Swirrl/ook) - Structural search engine for data cubes"
https://api.github.com/repos/duct-framework/duct/pulls/89,268655746,"@@ -9,42 +9,47 @@    ""src/{{dirs}}/handler""    ""test/{{dirs}}/handler""]) -(defn example-profile [{:keys [profiles]}]-  {:vars {:example? true}+(defn example-profile [{:keys [profiles project-ns]}]+  {:vars {:example? true+          :cascading-routes [(keyword (str project-ns "".handler/example""))]}    :templates    (cond      (profiles :site)-     {""src/{{dirs}}/handler/example.clj""       (resource ""example/handler.clj"")+     {""src/{{dirs}}/handler/example.clj"" (resource ""example/handler.clj"")"
https://api.github.com/repos/dundalek/closh/pulls/167,345504370,"@@ -45,8 +46,15 @@   ""Changes current working directory to a path of a first given argument.""   [& args]   ;; flatten is used because we can get arguments from expand which are collections-  (let [dir (or (first args)-                (getenv ""HOME""))]+  (let [arg      (first args)+        go-back? (= ""-"" arg)+        dir      (or (if go-back?+                       (getenv ""OLDPWD"")+                       arg)+                     (getenv ""HOME""))]+    (setenv ""OLDPWD"" (process/cwd))     (process/chdir (str dir)) ; Extra (str ..) to handle case when directory name is a number     (setenv ""PWD"" (process/cwd))+    (when go-back?+      (core/shx ""pwd"" [] {:redir [[:set 0 :stdin] [:set 2 :stderr] [:set 1 :stdout]]}))"
https://api.github.com/repos/dundalek/closh/pulls/185,1040051641,"@@ -58,16 +59,17 @@           sci-complete?)   (deftest scripting-errors-test -    (are [result regex cmd] (= result (->> (:stderr (process-value cmd))-                                           (re-find regex)-                                           (second)))+    (are [result regex cmd]+         (= result (->> (:stderr (process-value cmd))+                        (re-find regex)+                        (second))) -      ""5:3""-      #""/throw1\.cljc:(\d+:\d+)""+      ""5"""
https://api.github.com/repos/emezeske/lein-cljsbuild/pulls/245,6933313,"@@ -85,25 +85,30 @@ (defn- run-tests [project {:keys [test-commands crossover-path builds]} args]   (when (> (count args) 1)     (throw (Exception. ""Only expected zero or one arguments."")))+  (when (and (= (count args) 1) (not (get test-commands (first args))))+    (throw (Exception."
https://api.github.com/repos/emezeske/lein-cljsbuild/pulls/374,36125984,"@@ -137,10 +148,53 @@       {}       watch?) => nil :times 1)) +(fact ""checkouts path are recognized and passed correctly""+  (let [checkout-a-dir (io/file checkouts-dir ""lib-a"")+        checkout-a-project (io/file checkout-a-dir ""project.clj"")+        checkout-a-checkouts (io/file checkout-a-dir ""checkouts"")++        checkout-b-dir (io/file checkouts-dir ""lib-b"")+        checkout-b-project (io/file checkout-b-dir ""project.clj"")+        checkout-b-checkouts (io/file checkout-b-dir ""checkouts"")]"
https://api.github.com/repos/emezeske/lein-cljsbuild/pulls/415,40510564,"@@ -1,10 +1,20 @@-if (phantom.args.length != 1) {-    console.log('Expected a target URL parameter.');-    phantom.exit(1);+console.log(""Phantom version: "" + phantom.version.major + ""."" + phantom.version.minor + ""."" +  phantom.version.patch);+if (phantom.version.major > 1) {+    var args = require('system').args;+    if (args.length < 2) {+        console.log('Expected a target URL parameter.');+        phantom.exit(1);+    }+    var url = require('system').args[1];"
https://api.github.com/repos/emezeske/lein-cljsbuild/pulls/429,46636759,"@@ -7,14 +7,14 @@ (defproject org.example/sample ""1.0.0-SNAPSHOT""   ; Your project must use Clojure 1.4 or above to support   ; ClojureScript compilation.-  :dependencies [[org.clojure/clojure ""1.5.1""]+  :dependencies [[org.clojure/clojure ""1.7.0""]                  ; Your project should specify its own dependency on                  ; ClojureScript-                 [org.clojure/clojurescript ""0.0-3211""+                 [org.clojure/clojurescript ""1.7.189"""
https://api.github.com/repos/emezeske/lein-cljsbuild/pulls/454,86044684,"@@ -71,13 +72,18 @@          (map (fn [[k v]] (vec (cons k v)))))))  (defn make-subproject [project crossover-path builds]-  (with-meta-    (merge+  (let [deps (classpath/merge-versions-from-managed-coords"
https://api.github.com/repos/Engelberg/instaparse/pulls/61,8389833,"@@ -9,7 +9,8 @@             [instaparse.abnf :as abnf]             [instaparse.viz :as viz]             [instaparse.repeat :as repeat]-            [instaparse.combinators-source :as c]))+            [instaparse.combinators-source :as c]+            [clojure.java.io :as io]))"
https://api.github.com/repos/Engelberg/instaparse/pulls/149,91829261,"@@ -1,19 +1,52 @@-(defproject instaparse ""1.4.3""+(defproject instaparse ""1.4.4-SNAPSHOT""   :description ""Instaparse: No grammar left behind""   :url ""https://github.com/Engelberg/instaparse""   :license {:name ""Eclipse Public License""             :url ""http://www.eclipse.org/legal/epl-v10.html""}-  :dependencies [[org.clojure/clojure ""1.8.0""]]+  :dependencies [[org.clojure/clojure ""1.8.0""]+                 [org.clojure/clojurescript ""1.8.40""]]   :profiles {:dev {:dependencies                     [[org.clojure/tools.trace ""0.7.5""]                     [criterium ""0.3.1""]                     [rhizome ""0.2.5""]]}              :1.5 {:dependencies [[org.clojure/clojure ""1.5.1""]]}              :1.6 {:dependencies [[org.clojure/clojure ""1.6.0""]]}-             :1.7 {:dependencies [[org.clojure/clojure ""1.7.0""]]}-             :1.8 {:dependencies [[org.clojure/clojure ""1.8.0""]]}}-  :aliases {""test-all"" [""with-profile"" ""+1.5:+1.6:+1.7:+1.8"" ""test""]}-  :test-paths [""test""]+             :1.7 {:dependencies [[org.clojure/clojure ""1.7.0""]+                                  [org.clojure/clojurescript ""0.0-3196""]]}+             :1.8 {:dependencies [[org.clojure/clojure ""1.8.0""]+                                  [org.clojure/clojurescript ""1.8.34""]]}+             :1.9 {:dependencies [[org.clojure/clojure ""1.9.0-alpha14""]+                                  [org.clojure/clojurescript ""1.9.14""]]}}+  :aliases {""test-all"" [""do""+                        ""cljsee"" ""once,""+                        ""with-profile"" ""+1.5:+1.6:+1.7:+1.8:+1.9"" ""test""]+            ""test-cljs"" [""cljsbuild"" ""test"" ""unit-tests""]+            ""test-cljs-all"" [""with-profile"" ""+1.7:+1.8:+1.9"" ""do"" ""clean,"" ""test-cljs""]}+  :test-paths [""test/"" ""target/generated/test/clj""]+  :source-paths [""src/"" ""target/generated/src/clj""]+  :cljsee {:builds [{:source-paths [""src/""]+                     :output-path ""target/generated/src/clj""+                     :rules :clj}"
https://api.github.com/repos/Engelberg/instaparse/pulls/172,140817777,"@@ -11,3 +11,9 @@   (-> (apply str message)       #?(:clj IllegalArgumentException.)       throw))++(defn regexp-flags [re]+  (cond-> """"+    (.-ignoreCase re) (str ""i"")+    (.-multiline re) (str ""m"")+    (.-unicode re) (str ""u"")))"
https://api.github.com/repos/facebookarchive/duckling_old/pulls/84,59818088,"@@ -154,36 +154,41 @@   ""quarta da próxima semana""   (datetime 2013 2 20 :day-of-week 3) +  ""sexta que vem"" ; when today is Tuesday, ""mercredi prochain"" is tomorrow+  ""sexta feira da semana que vem""+  ""sexta-feira da próxima semana""+  (datetime 2013 2 22 :day-of-week 3)"
https://api.github.com/repos/facebookarchive/duckling_old/pulls/86,60261412,"@@ -121,18 +121,11 @@   ;;      ""ordinals (first..19th)""-  #""(?i)(первый|второй|третий|четвертый|пятый|шестой|седьмой|восьмой|девятый|десятый|одинадцатый|двенадцатый|тринадцатый|четырнадцатый|пятнадцатый|шестнадцатый|семнадцатый|восемнадцатый|девятнадцатый|двадцатый)""+  #""(?i)(перв|втор|трет|четверт|пят|шест|седьм|восьм|девят|десят|одинадцат|двенадцат|тринадцат|четырнадцат|пятнадцат|шестнадцат|семнадцат|восемнадцат|девятнадцат|двадцат)?(-)?(ый|ой|ий|ая|ое|ья|ье|ую|ые|ых)""   {:dim :ordinal-   :value (get {""первый"" 1 ""второй"" 2 ""третий"" 3 ""четвертый"" 4 ""пятый"" 5-              ""шестой"" 6 ""седьмой"" 7 ""восьмой"" 8 ""девятый"" 9 ""десятый"" 10 ""одинадцатый"" 11-              ""двенадцатый"" 12 ""тринадцатый"" 13 ""четырнадцатый"" 14 ""пятнадцатый"" 15 ""шестнадцатый"" 16-              ""семнадцатый"" 17 ""восемнадцатый"" 18 ""девятнадцатый"" 19 ""двадцатый"" 20}+   :value (get {""перв"" 1 ""втор"" 2 ""трет"" 3 ""четверт"" 4 ""пят"" 5+              ""шест"" 6 ""седьм"" 7 ""восьм"" 8 ""девят"" 9 ""десят"" 10 ""одинадцат"" 11+              ""двенадцат"" 12 ""тринадцат"" 13 ""четырнадцат"" 14 ""пятнадцат"" 15 ""шестнадцат"" 16 ""семнадцат"" 17 ""восемнадцат"" 18 ""девятнадцат"" 19 ""двадцат"" 20}               (-> %1 :groups first .toLowerCase))} -  ""ordinal (digits)""-  #""0*(\d+)(-)?(ый|ой|ий)""-  {:dim :ordinal-   :value (read-string (first (:groups %1)))}  ; read-string not the safest"
https://api.github.com/repos/facebookarchive/duckling_old/pulls/135,80905803,"@@ -134,7 +134,8 @@                                     (subs sentence pos end)                                     (:name rule)                                     sentence-                                    e (.printStackTrace e))+                                    e+                                    (with-out-str (clojure.stacktrace/print-stack-trace e)))"
https://api.github.com/repos/facebookarchive/duckling_old/pulls/154,80908042,"@@ -354,6 +354,28 @@   #""(?i)fin de matin[ée]e""   (assoc (interval (hour 10 false) (hour 12 false) false) :form :part-of-day :latent true) +  ""au déjeuner""+  #""(?i)(pendant(le )?|au)? d[eéè]jeuner"""
https://api.github.com/repos/facebookarchive/duckling_old/pulls/203,97074348,"@@ -17,31 +17,31 @@   ;;    ""named-day""-  #""(?i)luned[ìi]|lun?\.?""+  #""(?i)luned[iì]|lun\.?""   (day-of-week 1)    ""named-day""-  #""(?i)marted[iì]|mar?\.?"""
https://api.github.com/repos/facebookarchive/duckling_old/pulls/214,98395340,"@@ -0,0 +1,322 @@+(+  ;Context map+  ; Tuesday Feb 12, 2013 at 4:30am is the ""now"" for the tests+  {:reference-time (time/t -2 2017 1 27 4 30)}++  ; dagen+  ""nu""+  ""op dit moment""+  ""zo snel mogelijk""+  (datetime 2017 1 27 4 30 00)++  ""vandaag""+  ""momenteel""+  (datetime 2017 1 27)++  ""gisteren""+  (datetime 2017 1 26)++  ""morgen""+  (datetime 2017 1 28)++  ""morgen avond"""
https://api.github.com/repos/facebookarchive/duckling_old/pulls/215,106712112,"@@ -1,8 +1,8 @@-(defproject wit/duckling ""0.4.23""+(defproject gnardari/duckling ""0.4.24"""
https://api.github.com/repos/Factual/drake/pulls/60,3501680,"@@ -0,0 +1,9 @@+(ns drake.options+  (:refer-clojure :exclude [file-seq])"
https://api.github.com/repos/Factual/drake/pulls/79,5781074,"@@ -325,6 +332,138 @@           (.run (get-protocol step) step)))       should-build))) ++(defn- assoc-promise [steps]+  ""Associates a promise instance for each step+  a promise of value 1 is delivered on success+  a promise of value 0 is delirvered on failure+  ""+  (map (fn [step] (assoc step :promise (promise)) ) steps)+)++(defn- assoc-order [steps]+  ""Associates an integer which is the order mentionned in the user confirmation (when --auto flag is not passed)""+  (map-indexed (fn [idx step] (assoc step :order (+ idx 1)) ) steps)+)+++(defn- assoc-deps [parse-tree steps]+  ""Associates dependencies as set object containing the indexes for each step""+  (def indexes (into #{} (map (fn [step] (:index step)) steps))) ; contains? does not work on list but works on set+  (map (fn [step] (assoc step :deps +    (->>+      (expand-step parse-tree (:index step) nil)+      (into #{}) ; turn into set to remove duplicates+      (keep #(if (contains? indexes %) %)) ; only keep the step contained in the list of step to execute+      (keep #(if (not= (:index step) %) %)) ; do not mark the step itself as its dependency"
https://api.github.com/repos/Factual/drake/pulls/85,5943914,"@@ -537,6 +551,41 @@  (declare parse-state) +(def inline-shell-helper+  (p/complex+    [tokens command-sub+     _ (p/opt inline-ws)+     _ (p/opt inline-comment)+     _ (p/failpoint line-break (illegal-syntax-error-fn ""inline shell command""))+     vars (p/get-info :vars)+     methods (p/get-info :methods)+     line (p/get-info :line)]++    (parse-state+      (struct state-s+              (ensure-ends-with-newline tokens)+              vars +              methods +              0 +              line) ; try to preserve line number as best we can+      )+    )+  )"
https://api.github.com/repos/Factual/drake/pulls/91,6364405,"@@ -22,9 +22,16 @@         drake.utils)   (:gen-class :methods [#^{:static true} [run_opts [java.util.Map] void]])) +(import"
https://api.github.com/repos/Factual/drake/pulls/92,6364829,"@@ -63,56 +58,71 @@   (rm [_ path])   (mv [_ from to])) -;; TODO(artem)-;; I tried a lot of things but still don't know how to create a common-;; ancestor in Clojure and inherit two other classes from it-;; TODO(artem)-;; We have to figure it out somehow, since adding direct calls to these-;; functions in all descendants is a bit tiring.+(defn assert-files-exist [fs files]+  (doseq [f files]+    (when (not (exists? fs f))+      (throw+ {:msg (str ""file not found: "" f)}))))+ (defn file-info-impl [fs path]   {:path path-   :mod-time (.mod-time fs path)-   :directory (.directory? fs path)})+   :mod-time (mod-time fs path)+   :directory (directory? fs path)})"
https://api.github.com/repos/Factual/drake/pulls/106,7647947,"@@ -2,6 +2,7 @@  * bugfix: [#98](https://github.com/Factual/drake/issues/98) --help now doesn't run workflow (thanks marshallshen) * Upgrade to c4 0.2.0, which no longer bundles the Facebook API+* New feature: temp targets (https://github.com/Factual/drake/issues/88)"
https://api.github.com/repos/Factual/drake/pulls/181,33563138,"@@ -176,6 +181,23 @@       :vars vars       :opts (if-not method opts (merge (:opts method) opts))))) +(defn- make-input-stats"
https://api.github.com/repos/Factual/drake/pulls/193,36139327,"@@ -657,12 +657,21 @@         p/emptiness)]    (dissoc prod :vars))) +(defn- attach-exec-dir+  [prod file-path]+  (if-let [dir (dfs/get-directory file-path)]+    (update-in prod [:steps]+               (fn [steps]+                 (mapv #(assoc % :exec-dir (.getPath dir)) steps)))+    prod))+ (def call-or-include-helper   ""See call-or-include-line below""   (p/complex    [_ percent-sign     directive  (p/semantics (p/alt (p/lit-conc-seq ""include"" nb-char-lit)-                               (p/lit-conc-seq ""call"" nb-char-lit))+                               (p/lit-conc-seq ""call"" nb-char-lit)+                               (p/lit-conc-seq ""new-directive"" nb-char-lit))"
https://api.github.com/repos/Factual/drake/pulls/234,851403572,"@@ -26,7 +32,9 @@                  [factual/sosueme ""0.0.15""]                  [factual/c4 ""0.2.1""]                  [hdfs-clj ""0.1.3""]    ;; for HDFS support-                 [org.apache.hadoop/hadoop-core ""0.20.2""]+                 [org.apache.hadoop/hadoop-mapreduce-client-core ""2.6.0-cdh5.13.0""]+	         [org.apache.hadoop/hadoop-hdfs ""2.6.0-cdh5.13.0""]+                 [org.apache.hadoop/hadoop-common ""2.6.0-cdh5.13.0""]"
https://api.github.com/repos/frankiesardo/auto-parcel/pulls/15,24711781,"@@ -33,20 +34,55 @@  *     abstract int id();  *   }</pre>  *+ * @see <a href=""https://github.com/google/auto/tree/master/value"">AutoParcel User's Guide</a>+ *+ *  * @author Éamonn McManus  * @author Kevin Bourrillion- * @see <a href=""http://goo.gl/Ter394"">AutoParcel User's Guide</a>  */-@Retention(RetentionPolicy.SOURCE) @Target(ElementType.TYPE)+@Retention(RetentionPolicy.SOURCE)+@Target(ElementType.TYPE) public @interface AutoParcel {-  /**-   * Specifies whether the generated class should cache each instance's {@link Object#hashCode-   * hashCode} value in a field once it is first computed. <b>Note:</b> most classes should have-   * no need of this behavior and should omit this parameter entirely. Use only if certain of its-   * performance benefit to your application.-   *-   * <p><b>Warning:</b> while using mutable field types is strongly discouraged in general, using-   * this feature makes it <i>especially</i> dangerous.-   */-  boolean cacheHashCode() default false;-}\ No newline at end of file++    /**+     * Specifies that AutoParcel should generate an implementation of the annotated class or interface,+     * to serve as a <i>builder</i> for the value-type class it is nested within. As a simple example,+     * here is an alternative way to write the {@code Person} class mentioned in the {@link AutoParcel}+     * example: <pre>+     *+     *   &#64;AutoParcel+     *   abstract class Person {+     *     static Builder builder() {+     *       return new AutoParcel_Person.Builder();+     *     }+     *+     *     abstract String name();+     *     abstract int id();+     *+     *     &#64;AutoParcel.Builder+     *     interface Builder {+     *       Builder name(String x);+     *       Builder id(int x);+     *       Person build();+     *     }+     *   }</pre>+     *+     * <p><b>This API is provisional and subject to change.</b></p>+     *+     *+     * @author Éamonn McManus+     */+    @Retention(RetentionPolicy.SOURCE)+    @Target(ElementType.TYPE)+    public @interface Builder {}++    /**+     * Specifies that the annotated method is a validation method. The method should be a non-private+     * no-argument method in an AutoParcel class. It will be called by the {@code build()} method of+     * the {@link Builder @AutoParcel.Builder} implementation, immediately after constructing the new+     * object. It can throw an exception if the new object fails validation checks.+     */+    @Retention(RetentionPolicy.SOURCE)+    @Target(ElementType.METHOD)+    public @interface Validate {}"
https://api.github.com/repos/frankiesardo/icepick/pulls/32,19467199,"@@ -82,8 +82,14 @@ private String emitFieldRestoreState(Collection<AnnotatedField> annotatedFields)   }    private String emitRestoreState(AnnotatedField field) {-    return ""    target."" + field.getName() + "" = "" + field.getTypeCast() + "" savedInstanceState.get""-        + field.getBundleMethod() + ""("" + BASE_KEY + "" + \"""" + field.getName() + ""\"");\n"";+    final StringBuilder result = new StringBuilder("
https://api.github.com/repos/fulcrologic/fulcro/pulls/10,128804814,"@@ -186,6 +186,23 @@ Within IntelliJ:  Now you should be able to start it from the Run menu. +For Emacs + Cider:++* Add a piggieback dev-time dependency and repl-option in `project.clj`:+[source]+----+  :profiles {:dev {:source-paths [""src/dev"" ""src/main""]+                   :repl-options {:nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}+                   :dependencies [[binaryage/devtools ""0.9.4""]+                                  [com.cemerick/piggieback ""0.2.1""]+                                  [org.clojure/tools.namespace ""0.3.0-alpha4""]+                                  [figwheel-sidecar ""0.5.11""]+                                  [org.clojure/tools.nrepl ""0.2.13""]]}})+----+* With `src/def/user.clj` open in a buffer, choose `M-x cider-jack-in-clojurescript` or `C-c M-J` (`M-J` with capital J)."
https://api.github.com/repos/fulcrologic/fulcro/pulls/76,153094937,"@@ -1342,14 +1342,14 @@ In `src/dev/user.clj`, we'll add the following for development use: (defn go   ""Start the server. Optionally supply a path to your desired config. Relative paths will scan classpath. Absolute   paths will come from the filesystem. The default is config/dev.edn.""-  ([] (go :dev))+  ([] (go ""config/dev.edn))"
https://api.github.com/repos/fulcrologic/fulcro/pulls/98,156824914,"@@ -2816,20 +2816,21 @@   ""Converts a sequence of calls as if each call should run in sequence (deferring even the optimistic side until   the prior calls have completed in a full-stack manner), and returns a tx that can be submitted via the normal   `transact!`.""-  [tx]+  [ref tx]   (let [ast-nodes     (:children (query->ast tx))         {calls true reads false} (group-by #(= :call (:type %)) ast-nodes)         first-call    (first calls)         dispatch-key  (:dispatch-key first-call)         get-remote    (or (some-> (resolve 'fulcro.client.data-fetch/get-remote) deref) (fn [sym]                                                                                           (log/error ""FAILED TO FIND MUTATE. CANNOT DERIVE REMOTES FOR ptransact!"")                                                                                           :remote))-        remote        (get-remote dispatch-key)+        remote        (or (get-remote dispatch-key) :remote)"
https://api.github.com/repos/fulcrologic/fulcro/pulls/106,158187771,"@@ -79,6 +80,8 @@      :without              without      :post-mutation        post-mutation      :post-mutation-params post-mutation-params+     :initialize           (when (and initialize SubqueryClass server-property-or-ident (prim/has-initial-app-state? SubqueryClass))+                             {server-property-or-ident (prim/get-initial-state SubqueryClass (if (map? initialize) initialize {}))})"
https://api.github.com/repos/fulcrologic/fulcro/pulls/114,159316536,"@@ -6040,7 +6039,7 @@ Fortunately, Fulcro actually makes handling this case relatively easy as well. H  1. Write a custom networking implementation for the client that detects the *kind* of error, and retries recoverable ones until they succeed. Possibly with exponential backoff. (If an infinite loop happens, the user will eventually hit reload.)-2. Make your server mutations idempotent, so that a client can safely re-apply one that fails.+2. Make your server mutations are idempotent, so that a client can safely re-apply the one that fails."
https://api.github.com/repos/fulcrologic/fulcro/pulls/137,166737366,"@@ -1460,7 +1460,8 @@                                   (seq? join) first)                     join        (cond-> join                                   (util/ident? join) (hash-map '[*]))-                    [key sel] (util/join-entry join)+                    [key sel]   (util/join-entry join)+                    key         (if (list? key) (first key) key) ; handles {(:key {:param 42}) [:subquery]}"
https://api.github.com/repos/fulcrologic/fulcro/pulls/147,169468485,"@@ -184,6 +184,21 @@                       [k valid]))      :clj  {})) +(defn- mutation-query? [tx]+  (boolean (some #(util/mutation? %) tx)))++(defn- split-parser+  ""Generate a parser that splits reads and writes across two parsers: the supplied query parser for queries, and the built-in+  parser for mutations.""+  [query-parser]+  (let [mutation-parser (prim/parser {:read (constantly nil) :mutate app/write-entry-point})]+    (fn split-parser*+      ([env query target]+       (if (mutation-query? query)+         (mutation-parser env query target)+         (query-parser (assoc env :target target) query)))"
https://api.github.com/repos/fulcrologic/fulcro/pulls/149,169859833,"@@ -132,21 +138,21 @@    If you don't supply a server adapter, it defaults to http-kit.   ""-  ([parser]-   (make-websockets parser nil {}))-  ([parser http-server-adapter sente-socket-server-options]-   (map->Websockets {:server-options (merge {:user-id-fn (fn [r] (:client-id r))} sente-socket-server-options)-                     :server-adapter (or http-server-adapter (hk/get-sch-adapter))-                     :parser         parser})))+  [parser websockets-uri {:keys [http-server-adapter transit-handlers sente-options]}]"
https://api.github.com/repos/fulcrologic/fulcro/pulls/159,171451757,"@@ -0,0 +1,808 @@+(ns fulcro.client.alpha.dom+  (:refer-clojure :exclude [map meta time])+  #?(:clj+     (:require [clojure.string :as str]+               [fulcro.client.impl.protocols :as p]+               [clojure.core.reducers :as r]+               [fulcro.checksums :as chk]))+  #?(:clj (:import (cljs.tagged_literals JSValue))))++(declare tags+  a+  abbr+  address+  area+  article+  aside+  audio+  b+  base+  bdi+  bdo+  big+  blockquote+  body+  br+  button+  canvas+  caption+  cite+  code+  col+  colgroup+  data+  datalist+  dd+  del+  details+  dfn+  dialog+  div+  dl+  dt+  em+  embed+  fieldset+  figcaption+  figure+  footer+  form+  h1+  h2+  h3+  h4+  h5+  h6+  head+  header+  hr+  html+  i+  iframe+  img+  ins+  input+  textarea+  select+  option+  kbd+  keygen+  label+  legend+  li+  link+  main+  map+  mark+  menu+  menuitem+  meta+  meter+  nav+  noscript+  object+  ol+  optgroup+  output+  p+  param+  picture+  pre+  progress+  q+  rp+  rt+  ruby+  s+  samp+  script+  section+  small+  source+  span+  strong+  style+  sub+  summary+  sup+  table+  tbody+  td+  tfoot+  th+  thead+  time+  title+  tr+  track+  u+  ul+  var+  video+  wbr++  ;; svg+  circle+  clipPath+  ellipse+  g+  line+  mask+  path+  pattern+  polyline+  rect+  svg+  text+  defs+  linearGradient+  polygon+  radialGradient+  stop+  tspan)++(def tags+  '[a+    abbr+    address+    area+    article+    aside+    audio+    b+    base+    bdi+    bdo+    big+    blockquote+    body+    br+    button+    canvas+    caption+    cite+    code+    col+    colgroup+    data+    datalist+    dd+    del+    details+    dfn+    dialog+    div+    dl+    dt+    em+    embed+    fieldset+    figcaption+    figure+    footer+    form+    h1+    h2+    h3+    h4+    h5+    h6+    head+    header+    hr+    html+    i+    iframe+    img+    ins+    kbd+    keygen+    label+    legend+    li+    link+    main+    map+    mark+    menu+    menuitem+    meta+    meter+    nav+    noscript+    object+    ol+    optgroup+    output+    p+    param+    picture+    pre+    progress+    q+    rp+    rt+    ruby+    s+    samp+    script+    section+    small+    source+    span+    strong+    style+    sub+    summary+    sup+    table+    tbody+    td+    tfoot+    th+    thead+    time+    title+    tr+    track+    u+    ul+    var+    video+    wbr++    ;; svg+    circle+    clipPath+    ellipse+    g+    line+    mask+    path+    pattern+    polyline+    rect+    svg+    text+    defs+    linearGradient+    polygon+    radialGradient+    stop+    tspan])++;; (defmacro ^:private gen-react-dom-inline-fns []+;;   (when (boolean (:ns &env))+;;     `(do+;;        ;; ~@(clojure.core/map gen-react-dom-inline-fn tags)+;;        ~@(clojure.core/map gen-dom-macro tags)+;;        )))++;; #?(:clj (gen-react-dom-inline-fns))++;; (defn ^:private gen-react-dom-fn [tag]+;;   `(defn ~tag [opts# & children#]+;;      {:style/indent 1}+;;      (.apply ~(symbol ""js"" ""React.createElement"") nil+;;        (cljs.core/into-array+;;          (cons ~(name tag) (cons opts# (cljs.core/map fulcro.util/force-children children#)))))))++;; (defmacro ^:private gen-react-dom-fns []+;;   (let [raw-inputs?  (boolean (System/getProperty ""rawInputs"" nil))+;;         tags         (if raw-inputs?+;;                        (concat tags '[input textarea select option])+;;                        tags)+;;         extra-inputs (when-not raw-inputs?+;;                        '[(def input (wrap-form-element ""input""))+;;                          (def textarea (wrap-form-element ""textarea""))+;;                          (def option (wrap-form-element ""option""))+;;                          (def select (wrap-form-element ""select""))])]+;;     `(do+;;        ~@(clojure.core/map gen-react-dom-fn tags)+;;        ~@extra-inputs)))++;; ===================================================================+;; Server-side rendering++;; https://github.com/facebook/react/blob/57ae3b/src/renderers/dom/shared/SVGDOMPropertyConfig.js+;; https://github.com/facebook/react/blob/57ae3b/src/renderers/dom/shared/HTMLDOMPropertyConfig.js+#?(:clj+   (def supported-attrs"
https://api.github.com/repos/fulcrologic/fulcro/pulls/219,202550184,"@@ -365,8 +365,8 @@ void-tags  (defn- is-element? [e]   (or-    (instance? fulcro.client.impl.protocols.IReactComponent e)-    (instance? fulcro.client.impl.protocols.IReactDOMElement e)+    (instance? p/IReactComponent e)+    (instance? p/IReactDOMElement e)"
https://api.github.com/repos/fulcrologic/fulcro/pulls/220,203537977,"@@ -546,6 +546,20 @@   :args (s/cat :state map? :entity-ident util/ident? :field (s/? keyword?))   :ret map?) +(defn delete-form-state*"
https://api.github.com/repos/fulcrologic/fulcro/pulls/247,225207911,"@@ -2185,7 +2196,10 @@       (p/queue! reconciler (into xs (remove symbol?) (keys v)))       (when-not (empty? snds)         (doseq [[remote _] snds]+          (swap! (get-network-activity reconciler) assoc-in [remote :status] :active)"
https://api.github.com/repos/fulcrologic/fulcro/pulls/259,234046000,"@@ -73,7 +73,7 @@ ; easier to access, so the user don't have to require a impl namespace to reference (def mutate app/write-entry-point) -(defn new-fulcro-client+(defn make-fulcro-client"
https://api.github.com/repos/fulcrologic/fulcro/pulls/261,234267400,"@@ -174,6 +174,26 @@   (let [value (ensure-integer (if event (target-value event) value))]     (set-value! component field value))) +#?(:cljs+   (defn- ensure-double+     ""Helper for set-integer!, use that instead. It is recommended you use this function only on UI-related"
https://api.github.com/repos/fulcrologic/fulcro/pulls/269,244419742,"@@ -18,8 +18,8 @@      ([initial-state opts] (initial-state->script-tag initial-state opts identity))      ([initial-state opts string-transform]       (let [state-string (-> (util/transit-clj->str initial-state opts)-                             (clojure.string/replace #""'"" ""\\\\'"")"
https://api.github.com/repos/fulcrologic/fulcro/pulls/296,259127459,"@@ -479,7 +479,7 @@                                        current-value (cond                                                        (map? items) (subform-ident k items)                                                        (vector? items) (mapv #(subform-ident k %) items)-                                                       :else [])+                                                       :else items)"
https://api.github.com/repos/fulcrologic/fulcro/pulls/314,277731259,"@@ -1,6 +1,8 @@ (ns fulcro.tempid   #?(:clj (:import [java.io Writer]))) +(def tag ""fulcro/tempid"")"
https://api.github.com/repos/fulcrologic/fulcro/pulls/317,287162949,"@@ -125,16 +125,19 @@   body to a transit+json encoded body. addl-transit-handlers is a map from data type to transit handler (like   you would pass using the `:handlers` option of transit). The   additional handlers are used to encode new data types into transit. See transit documentation for more details."""
https://api.github.com/repos/fulcrologic/fulcro/pulls/327,321573637,"@@ -1059,10 +1059,10 @@    `::comp/component-class` - The defsc name of the component to use for normalization and query. Only needed if the     actor was not declared using a Fulcro component or component class.-  `::uism/post-event`:: An event to send when the load is done (instead of calling a mutation)-  `::uism/post-event-params`:: Extra parameters to send as event-data on the post-event.-  `::uism/fallback-event`:: The event to send if the load triggers a fallback.-  `::uism/fallback-event-params`:: Extra parameters to send as event-data on a fallback.+  `::uism/ok-event`:: An event to send when the load is done (instead of calling a mutation)"
https://api.github.com/repos/fulcrologic/fulcro/pulls/331,321985946,"@@ -17,13 +17,11 @@   ""Checks the given `idents` and returns a subset of them where the data they refer to has changed    between `old-state` and `new-state`.""   [old-state new-state idents]-  (reduce-    (fn [result ident]-      (if (identical? (get-in old-state ident) (get-in new-state ident))-        result-        (cons ident result)))-    (list)-    idents))"
https://api.github.com/repos/fulcrologic/fulcro/pulls/339,333830446,"@@ -269,6 +269,9 @@                                          (cond-> {:marker load-marker-default :parallel false :refresh [] :without #{}}                                            query-transform-default (assoc :update-query query-transform-default))                                          config)+         config        (cond-> config+                         (and (:update-query config) query-transform-default)+                         (assoc :update-query (comp query-transform-default (:update-query config))))"
https://api.github.com/repos/fulcrologic/fulcro/pulls/337,334244246,"@@ -0,0 +1,303 @@+(ns com.fulcrologic.fulcro.algorithms.normalized-state-helpers+  ""Functions that can be used against a normalized Fulcro state database.""+  #?(:cljs (:require-macros com.fulcrologic.fulcro.algorithms.normalized-state-helpers))+  (:refer-clojure :exclude [get-in])+  (:require+    [clojure.set :as set]+    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]+    #?(:clj  [com.fulcrologic.fulcro.dom-server :as dom]+       :cljs [com.fulcrologic.fulcro.dom :as dom])+    [edn-query-language.core :as eql]+    [clojure.spec.alpha :as s]+    [ghostwheel.core :refer [>defn =>]]+    [com.fulcrologic.fulcro.algorithms.data-targeting :as targeting]+    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]+    [com.fulcrologic.fulcro.algorithms.merge :as merge]+    [com.fulcrologic.fulcro.components :as comp]))++(def integrate-ident*+  ""[state ident & named-parameters]++  Integrate an ident into any number of places in the app state. This function is safe to use within mutation+  implementations as a general helper function.++  The named parameters can be specified any number of times. They are:++  - append:  A vector (path) to a list in your app state where this new object's ident should be appended. Will not append+  the ident if that ident is already in the list.+  - prepend: A vector (path) to a list in your app state where this new object's ident should be prepended. Will not place+  the ident if that ident is already in the list.+  - replace: A vector (path) to a specific location in app-state where this object's ident should be placed. Can target a to-one or to-many.+   If the target is a vector element then that element must already exist in the vector.++  NOTE: `ident` does not have to be an ident if you want to place denormalized data.  It can really be anything.++  Returns the updated state map.""+  targeting/integrate-ident*)++(def remove-ident*+  "" [state-map ident path-to-idents]++  Removes an ident, if it exists, from a list of idents in app state. This+  function is safe to use within mutations.""+  merge/remove-ident*)+++(>defn tree-path->db-path+  ""Convert a 'denormalized' path into a normalized one by walking the path in state and honoring ident-based edges.++  For example, one might find this to be true for a normalized db:++  ```+  state => {:person/id {1 {:person/id 1 :person/spouse [:person/id 3]}+                        3 {:person/id 3 :person/first-name ...}}}++  (tree-path->db-path state [:person/id 1 :person/spouse :person/first-name])+  => [:person/id 3 :person/first-name]+  ```+  ""+  ([state path]+   [map? vector? => vector?]+   (loop [[h & t] path+          new-path []]+     (if h+       (let [np (conj new-path h)+             c (clojure.core/get-in state np)]+         (if (eql/ident? c)+           (recur t c)+           (recur t (conj new-path h))))+       (if (not= path new-path)+         new-path+         path)))))+++(>defn get-in+  ""Just like clojure.core/get-in, but if an element of the path is an ident it will follow the ident instead.""+  ([state-map path]+   [map? vector? => any?]+   (get-in state-map path nil))++  ([state-map path not-found]+   [map? vector? any? => any?]+   (clojure.core/get-in state-map (tree-path->db-path state-map path) not-found)))+++(defn ui->props+  ""Obtain a tree of props for a UI instance from the current application state. Useful in mutations where you want+  to denormalize an entity from the state database. `this` can often be obtained from the mutation `env` at the+  `:component` key.""+  ([this]+   (ui->props (comp/component->state-map this) (comp/react-type this) (comp/get-ident this)))+  ([state-map component-class ident]+   (fdn/db->tree (comp/get-query component-class state-map) (get-in state-map ident) state-map)))+++(defn- dissoc-in+  ""Dissociates an entry from a nested associative structure returning a new+             nested structure. keys is a sequence of keys. Any empty maps that result+             will not be present in the new structure.""+  [m [k & ks :as keys]]+  (if ks+    (if-let [nextmap (get m k)]+      (let [newmap (dissoc-in nextmap ks)]+        (if (seq newmap)+          (assoc m k newmap)+          (dissoc m k)))+      m)+    (dissoc m k)))+++(defn- normalized-paths+  ""Walks the tree in a depth first manner and returns the normalized possible paths""+  [m]+  (letfn [(paths* [ps ks m]+            (reduce-kv+              (fn [ps k v]+                (if (map? v)+                  (paths* ps (conj ks k) v)+                  (conj ps (conj ks k))))+              ps+              m))]+    (filter #(< (count %) 4)+            (paths* () [] m))))+++(>defn remove-entity*+  ""Remove the given entity at the given ident. Also scans all tables and removes any to-one or to-many idents that are+  found that match `ident` (removes dangling pointers to the removed entity).++  The optional `cascade` parameter is a set of keywords that represent edges that should cause recursive deletes+  (i.e. it indicates edge names that *own* something, indicating it is safe to remove those entities as well).++  Returns the new state map with the entity(ies) removed.""++  ([state-map ident]+   [map? eql/ident? => map?]+   (remove-entity* state-map ident #{}))++  ([state1 ident cascade]+   [map? eql/ident? (s/coll-of keyword? :kind set?) => map?]+   (let [tables (keep (fn [k]+                        (let [candidate (get state1 k)]+                          (when (and (map? candidate) (every? map? (vals candidate)))+                            k))) (keys state1))++         non-tables (keep (fn [k]+                            (let [candidate (get state1 k)]+                              (when (vector? candidate)+                                [k])))+                          (keys state1))++         remove-idents-at-path (fn [state1 path]+                                 (let [v (clojure.core/get-in state1 path)]+                                   (cond+                                     (int? v) state1+                                     (= v ident) (dissoc-in state1 path)+                                     (every? eql/ident? v) (merge/remove-ident* state1 ident path)+                                     :else state1)))++         candidate-paths (fn [state table-name]+                           (filter (fn [a-path]+                                     (let [vl (clojure.core/get-in state a-path)]+                                       (if (coll? vl)+                                         (or+                                           (some #{ident} vl)+                                           (= ident vl))+                                         (= ident (take 2 a-path)))))+                                   (normalized-paths state)))++         remove-ident-from-table (fn [state1 table]"
https://api.github.com/repos/fulcrologic/fulcro/pulls/356,366690285,"@@ -155,23 +155,50 @@           (update-state             this (.-props this)             (gobj/getValueByKeys event ""target"" ""value""))))+      (componentDidUpdate [this prev-props prev-state snapshot]+        (let [state-value    (gobj/getValueByKeys this ""state"" ""value"")+              this-node      (js/ReactDOM.findDOMNode this)+              value-node     (if (is-form-element? this-node)+                               this-node+                               (gdom/findNode this-node #(is-form-element? %)))+              element-value  (gobj/get value-node ""value"")++              props          (.-props this)++              ;; diff the old and new props to determine if any changed or were added/removed+              ;; value and onChange are elided because they always change when the field is updated+              diff           (clojure.data/diff (js->clj prev-props) (js->clj props))+              old            (-> (first diff)+                               (dissoc ""value"")+                               (dissoc ""onChange""))+              new            (-> (second diff)+                               (dissoc ""value"")+                               (dissoc ""onChange""))+              props-changed? (or (not-empty new) (not-empty old))++              next-props     (if props-changed?+                               (let [new-props #js {}]+                                 (gobj/extend new-props props)+                                 new-props)+                               props)]++          ;; delete keys for props that went away+          ;; ... setState is always a merge and the only way to ""delete"" keys is to set to nil+          (when props-changed?+            (doseq [old-k (gobj/getKeys prev-props)]+              (when-not (gobj/get next-props old-k)+                (gobj/set next-props old-k nil)))) -      (UNSAFE_componentWillReceiveProps [this new-props]"
https://api.github.com/repos/fulcrologic/fulcro/pulls/363,370216797,"@@ -0,0 +1,109 @@+(ns com.fulcrologic.fulcro.algorithms.transit-old+  ""This version is for use with older versions of Transit, such as what is supported on Datomic Cloud++   Transit functions for the on-the-wire EDN communication to common remotes. Includes support for Fulcro tempids,+   and can be extended to support additional application-specific data types.""+  #?(:clj+     (:refer-clojure :exclude [ref]))+  (:require [cognitect.transit :as t]+            #?(:cljs [com.cognitect.transit :as ct])+            [com.fulcrologic.fulcro.algorithms.tempid :as tempid #?@(:cljs [:refer [TempId]])])+  #?(:clj+     (:import [com.cognitect.transit+               TransitFactory WriteHandler ReadHandler]+              [com.fulcrologic.fulcro.algorithms.tempid TempId])))++#?(:cljs"
https://api.github.com/repos/fulcrologic/fulcro/pulls/370,377108627,"@@ -550,8 +551,9 @@   Only affects declared fields and sub-forms.""   [state-map entity-ident]   [map? eql/ident? => map?]-  (update-forms state-map (fn reset-form-step [e {:keys [::pristine-state] :as config}]-                            [(merge e pristine-state) config]) entity-ident))"
https://api.github.com/repos/fulcrologic/fulcro/pulls/369,377724204,"@@ -799,13 +805,16 @@   ""Given a state map and a query, returns a state map with the query normalized into the database. Query fragments   that already appear in the state will not be added.  Part of dynamic query implementation.""   [state-map query]-  (let [new-state (normalize-query-elements state-map query)-        new-state (if (nil? (::queries new-state))-                    (assoc new-state ::queries {})-                    new-state)-        top-query (link-query query)]-    (if-let [queryid (some-> query meta :queryid)]-      (util/deep-merge {::queries {queryid {:query top-query :id queryid}}} new-state)+  (let [queryid       (some-> query meta :queryid)+        component-key (class->registry-key (some-> query meta :component))+        query'        (vary-meta query dissoc :queryid :component)"
https://api.github.com/repos/fulcrologic/fulcro/pulls/377,386628022,"@@ -22,6 +22,11 @@     #?(:clj [cljs.analyzer :as ana])     [com.fulcrologic.fulcro.algorithms.indexing :as indexing])) +;; ident of the current component, derived from its class.+;; Since we don't know its props yet, if the ""id"" part depends on props,+;; it will be `nil`.+(def ^:dynamic *current-comp-ident* nil)"
https://api.github.com/repos/fulcrologic/fulcro/pulls/382,388714440,"@@ -18,12 +18,10 @@      :body    ""Invalid request.""}))  (defn generate-response-  ""Generate a Fulcro-compatible response containing at least a status code, headers, and body. You should-  pre-populate at least the body of the input-response.-  The content type of the returned response will always be pegged to 'application/transit+json'.""-  [{:keys [status body headers] :or {status 200} :as input-response}]-  (-> (assoc input-response :status status :body body)-    (update :headers assoc ""Content-Type"" ""application/transit+json"")))+  ""Generate a Fulcro-compatible response containing at least a status code, and+  body. You should pre-populate at least the body of the input-response.""+  [{:keys [status body] :or {status 200} :as input-response}]+  (assoc input-response :status status :body body))"
https://api.github.com/repos/fulcrologic/fulcro/pulls/383,389396336,"@@ -1181,9 +1181,13 @@                queried-keywords      (-legal-keys template)                has-wildcard?         (some #{'*} template)                to-sym                (fn [k] (symbol (namespace k) (name k)))-               illegal-syms          (mapv to-sym (set/difference destructured-keywords queried-keywords))]+               illegal-syms          (mapv to-sym (set/difference destructured-keywords queried-keywords))+               component-query       #(and (list? %) (= (name `get-query) (name (first %))) %)"
https://api.github.com/repos/fulcrologic/fulcro/pulls/438,550337816,"@@ -838,7 +838,8 @@       The options are: -     `:router-targets` - (REQUIRED) A *vector* of ui components that are router targets. The first one is considered the \""default\"".+     `:router-targets` - (REQUIRED) A *vector* of ui components that are router targets. The first one is considered the \""default\""+     (purely for the purpose if initial state; you always need to explicitly route to a particular target)."
https://api.github.com/repos/fulcrologic/fulcro/pulls/461,579836173,"@@ -868,7 +868,10 @@                     (log/warn ""String ref on "" (component-name class) "" should be a function.""))                    (when (or (nil? props) (not (gobj/containsKey props ""fulcro$value"")))-                    (log/error ""Props middleware seems to have the corrupted props for "" (component-name class))))))+                    (log/error ""Props middleware seems to have the corrupted props for "" (component-name class)))++                  (when (sequential? (gobj/get props ""fulcro$value""))"
https://api.github.com/repos/fulcrologic/fulcro/pulls/465,588971981,"@@ -181,13 +182,23 @@                                       (= ""ui"" ident-ns)                                       (str/starts-with? ident-ns ""com.fulcrologic.fulcro.""))))))))) +(defn- check-root-query-valid [query]+  (when (and #?(:clj true :cljs goog.DEBUG)+             query+             (false? (s/valid? ::eql/query query)))+    (throw (ex-info (str ""The composed root query is not valid EQL. See `(comp/get-query """
https://api.github.com/repos/fulcrologic/fulcro/pulls/468,592048703,"@@ -19,7 +19,7 @@             [java.util Base64]             [java.nio.charset StandardCharsets]))) -(defn atom? [a] (instance? Atom a))+(defn atom? [a] #?(:cljs (satisfies? IAtom a) :clj (instance? Atom a)))"
https://api.github.com/repos/fulcrologic/fulcro/pulls/476,619527863,"@@ -331,11 +331,14 @@   `env` - The env of the mutation   `class` - A component class that represents the return type.  You may supply a fully-qualified symbol instead of the   actual class, and this method will look up the class for you (useful to avoid circular references).+  `opts` (optional):+   - `query-params` - Optional parameters to add to the generated query    Returns an update `env`, and is a valid return value from mutation remote sections.""   ([env class]    (returning env class nil))-  ([env class query-params]+  ([env class {:keys [query-params]"
https://api.github.com/repos/fulcrologic/fulcro/pulls/478,621262398,"@@ -797,6 +797,21 @@            ast-nodes (-> query eql/query->ast :children)]        (get-subquery-component* component ast-nodes query-path))))) +(defn get-traced-props+  ""Uses `fdn/traced-db->tree` to get the props of the component at `ident`. If `prior-props` are not stale,+   those are returned instead.""+  [state-map component {:keys [ident prior-props]}]+  (let [query (get-query component state-map)]+    (if (fdn/possibly-stale? state-map prior-props)+      (fdn/traced-db->tree state-map ident query)+      prior-props)))++(defn component-exists?"
https://api.github.com/repos/fulcrologic/fulcro/pulls/481,694395476,"@@ -56,8 +56,10 @@   `augment-response`. Runs each in turn and accumulates their effects. The result is   meant to be a Ring response (and is used as such by `handle-api-request`.""   [response]"
https://api.github.com/repos/fulcrologic/fulcro/pulls/483,700317565,"@@ -1,4 +1,7 @@-{:paths   [""src/main""]+{:paths   [""src/main""+           ;; include clj-kondo exports in the JAR so that they can be imported,+           ;; see https://github.com/clj-kondo/clj-kondo/blob/master/doc/config.md#exporting-and-importing-configuration+           ""clj-kondo-exports""]"
https://api.github.com/repos/fulcrologic/fulcro/pulls/486,706402502,"@@ -25,22 +32,103 @@ (specification ""Default query elision""   (behavior ""Removes ui-namespaced keys that are in props, joins, idents, and mutation joins""     (are [query result]-      (= result (eql/ast->query (app/default-global-eql-transform (eql/query->ast query))))-      [:ui/name :x] [:x]+      (= result (remove #{:com.wsscode.pathom.core/errors} +                        (eql/ast->query (app/default-global-eql-transform (eql/query->ast query)))))+      [:ui/name :x]  [:x]       '[(:ui/name {:b 2}) :x] [:x]       [{:ui/name [:b]} :x] [:x]       [[:ui/name 42] :x] [:x]       [{[:ui/name 42] [:t]} :x] [:x]       [:ui/name :x :ui/adsf-b] [:x]))   (behavior ""Removes ui and fulcro keys from mutation join queries, but NOT mutation params""-    (are [query result]+    (are [query result] ; FIXME fails due to added :tempids       (= result (eql/ast->query (app/default-global-eql-transform (eql/query->ast query))))       [{'(f {:ui/param 1 :com.fulcrologic.fulcro/param 42}) [:ui/a :b {:com.fulcrologic.fulcro.core/boo [:y]}]}]       [{'(f {:ui/param 1 :com.fulcrologic.fulcro/param 42}) [:b]}]))   (behavior ""Removes items that are namespaced to Fulcro itself""     (are [query result]-      (= result (eql/ast->query (app/default-global-eql-transform (eql/query->ast query))))+      (= result (remove #{:com.wsscode.pathom.core/errors} +                        (eql/ast->query (app/default-global-eql-transform (eql/query->ast query)))))       [{[::uism/asm-id 42] [:y]} :x] [:x]       [::uism/asm-id :x] [:x]       [{::uism/asm-id [:y]} :x] [:x]       [::dr/id ::dr/current-route [::uism/asm-id '_] :x] [:x])))++(defn sort-nested +  ""Sort keywords in vectors anywhere in the query to simplify comparison""+  [query]+  (letfn [(compare-any [x y]+            (if (every? keyword? [x y])+              (compare x y)+              (if (keyword? x) -1 1)))]+    (walk/postwalk+      #(cond-> %+         (vector? %) (->> (sort compare-any) vec))+      query)))++(defn transform-query [query]+  (-> query+      eql/query->ast+      rapp/default-global-eql-transform+      eql/ast->query))+(-> (eql/query->ast '[{(my-mutation) [:x]}]) :children first)+(defn superset?*+  ""Takes an `expected` set, and will check that `actual` contains at least all the elements in it.+   Eg:+   ```+   ; PASSES+   #{:a :b} =check=> (superset?* #{:a})++   ; FAILS+   #{:a} =check=> (superset?* #{:a :b})+   ```""+  [expected]+  ;(assert-is! `superset?* set? expected)+  (_/and*+    (_/is?* seqable?)+    (_/checker [actual]+      (when-not (set/subset? expected (set actual))+        {:actual {:extra-values (set/difference expected (set actual))}+         :expected `(~'superset?* ~expected)+         :message ""Found values missing from the set""}))))++;; (letfn [(transform [query] (sort-nested (transform-query query)))]+;;   (transform '[(mutation6)]))++(specification ""Default EQL transform additions""+  (behavior ""Adds ::p/errors to all queries BUT not mutations""+    (letfn [(transform [query] (sort-nested (transform-query query)))]+      (assertions+        (transform [:a]) => [:a ::p/errors]"
https://api.github.com/repos/fulcrologic/fulcro/pulls/493,747069590,"@@ -0,0 +1,18 @@+(ns com.fulcrologic.fulcro.algorithms.do-not-use.log-once+  ""Some misc. logging functions. These are primarily meant for internal use, and are subject to+  relocation and removal in the future.++  You have been warned. Changes to this ns (or its complete removal)+  will not be considered breaking changes to the library, and no mention of said changes+  will even appear in the changelog.""+  (:require+    [taoensso.encore :as encore]+    [taoensso.timbre :as log]))++; TODO Should we limit the size and use a LRU cache or st.? Hopefully not really an issue in a webapp?+; Or implement a DIY TTL so we repeat the error sometimes? (=> {<args> (js/Date.now)})++;(encore/memoize 60000 (constantly nil))++(defn error-once! [& args]"
https://api.github.com/repos/fulcrologic/fulcro/pulls/494,748765401,"@@ -18,74 +20,193 @@       (let [class (-> query meta :component)             ident (get-ident class data)]         (if-not (nil? ident)-          (vary-meta (normalize* (get query (first ident)) data refs union-seen transform)+          (vary-meta (normalize* (get query (first ident)) data tables union-seen transform)             assoc ::tag (first ident))                      ; FIXME: What is tag for?           (throw (ex-info ""Union components must have an ident"" {}))))        (vector? data) data                                   ;; already normalized        :else-      (loop [q (seq query) ret data]+      (loop [q (seq query), ret data]         (if-not (nil? q)           (let [expr (first q)]             (if (util/join? expr)-              (let [[k sel] (util/join-entry expr)-                    recursive?  (util/recursion? sel)-                    union-entry (if (util/union? expr) sel union-seen)-                    sel         (if recursive?+              (let [[join-key subquery] (util/join-entry expr)+                    recursive?  (util/recursion? subquery)+                    union-entry (if (util/union? expr) subquery union-seen)+                    subquery    (if recursive?                                   (if-not (nil? union-seen)                                     union-seen                                     query)-                                  sel)-                    class       (-> sel meta :component)-                    v           (get data k)]+                                  subquery)+                    class       (-> subquery meta :component)+                    v           (get data join-key)]                 (cond                   ;; graph loop: db->tree leaves ident in place                   (and recursive? (eql/ident? v)) (recur (next q) ret)                   ;; normalize one                   (map? v)-                  (let [x (normalize* sel v refs union-entry transform)]+                  (let [x (normalize* subquery v tables union-entry transform)]                     (if-not (or (nil? class) (not (has-ident? class)))                       (let [i (get-ident class x)]-                        (swap! refs update-in [(first i) (second i)] merge x)-                        (recur (next q) (assoc ret k i)))-                      (recur (next q) (assoc ret k x))))+                        ;; Why don't we simply `update-in i ..` as we do below in normalize many?! Incidental?+                        (swap! tables update-in [(first i) (second i)] merge x) ; add x to the normalized client DB+                        (recur (next q) (assoc ret join-key i)))+                      (recur (next q) (assoc ret join-key x))))                    ;; normalize many                   (and (vector? v) (not (eql/ident? v)) (not (eql/ident? (first v))))-                  (let [xs (into [] (map #(normalize* sel % refs union-entry transform)) v)]+                  (let [xs (into [] (map #(normalize* subquery % tables union-entry transform)) v)]                     (if-not (or (nil? class) (not (has-ident? class)))                       (let [is (into [] (map #(get-ident class %)) xs)]-                        (if (vector? sel)+                        ;; Where does the code come from? A little lesson of history:+                        ;; There was no if and no union handling in https://github.com/omcljs/om/commit/bbd94ac17a4c208f928a84915a050b787b65cb6a+                        ;; and it was added by https://github.com/omcljs/om/commit/3882cb5b9a3db95fa94b016bbe7bfe7f8b1db638 ""query union WIP"";+                        ;; Later https://github.com/omcljs/om/commit/baaf4510d9970f1d9aa8dfcbe28bc89242bae87b#diff-8245f06a64876f1022b17c2eb5102ed6a658612b2da113093ea29185b5829682L2025+                        ;; ""OM-802: Recursive query normalization incorrect "" changed the old brqnch code to also use reduce+                        ;; but keeping the zipmap, likely without noticing the branches becane so similar so as to be mergable+                        ;; The `(when-not (empty? is) ..` was added by https://github.com/omcljs/om/commit/8a34c2cf90d45de3c464eceb4a2866de2d99e5f0+                        ;; and was necessary at that time b/c it still used `swap! refs update-in` and thus misbehaved for empty is+                        (if (vector? subquery)                           (when-not (empty? is)-                            (swap! refs-                              (fn [refs]-                                (reduce (fn [m [i x]]-                                          (update-in m i merge x))-                                  refs (zipmap is xs)))))+                            (swap! tables+                              (fn [tables']+                                (reduce (fn merge-to-client-db [m [i x]] (update-in m i merge x))+                                  ;; Why zipmap and not `map vector` as in the other merge-to-client-db?+                                  ;; Incidental or intentional? Do we accept duplicates there but only want the last one+                                  ;; here for some reason?+                                  ;; Seems incidental; acc. to https://github.com/omcljs/om/commit/baaf4510d9970f1d9aa8dfcbe28bc89242bae87b+                                  ;; it needed map because it merged it with tables[(ffirst is)]+                                  tables' (zipmap is xs)))))                           ;; union case-                          (swap! refs-                            (fn [refs']-                              (reduce-                                (fn [ret [i x]]-                                  (update-in ret i merge x))-                                refs' (map vector is xs)))))-                        (recur (next q) (assoc ret k is)))-                      (recur (next q) (assoc ret k xs))))+                          ;;  The difference from non-union is that we process duplicates in v in merge-to-client-db (why??)+                          ;;  and that we don't check `is` for not empty (likely a perf. optimization not needed in this+                          ;;  rarely visited path?)+                          (swap! tables+                            (fn [tables']+                              (reduce (fn merge-to-client-db [m [i x]] (update-in m i merge x))+                                ;; Note: `is` might have multiple `[<kwd> nil]` occurrences if `v` has 2+ entity types+                                ;; the union does not handle, depending on its :ident impl. Do we care? why?+                                tables' (map vector is xs)))))+                        (recur (next q) (assoc ret join-key is)))+                      (recur (next q) (assoc ret join-key xs))))                    ;; missing key                   (nil? v)                   (recur (next q) ret)                    ;; can't handle-                  :else (recur (next q) (assoc ret k v))))+                  :else (recur (next q) (assoc ret join-key v))))               (let [k (if (seq? expr) (first expr) expr)                     v (get data k)]                 (if (nil? v)                   (recur (next q) ret)                   (recur (next q) (assoc ret k v))))))           ret))))) +(defn- upsert-ident+  ""Insert or merge a data entity into a state table under the given `ident`.+  Ex.: `(upsert-ident {} [:person/id 1] #:person{:id 1 :age 42}) => {:person/id {1 #:person{:id 1, :age 42}}}`""+  [state ident entity-map]+  (try+    (update-in state ident merge entity-map)+    (catch Exception e+      (when-not (map? entity-map)+        (throw (ex-info (str ""Query join indicates the data should contain a data map but the actual data is ""+                             (pr-str entity-map)+                             "" Joined component's ident: "" ident)+                        {:ident ident, :data entity-map})))+      (throw e))))++(comment+  (upsert-ident+    {:x 1, :person/id {1 #:person{:id 1, :age 42}}}+    [:person/id 1] ""not a map!"")+  ())++(defn- normalize-with-friendly-errors+  ""Like `normalize*` but with error logger. Possibly slower and buggy. Use to report errorrs after normalize* failed.""+  [query data tables union-seen transform]+  ;; `tables` is an (atom {}) where we collect normalized tables for all components encountered during processing, i.e.+  ;; we only return the ""top-level keys"" with their data/idents and all ""tables"" are inside this+  (let [data (if (and transform (not (vector? data)))+               (transform query data)+               data)]+    (cond+      (= '[*] query) data++      ;; union case+      (map? query)+      (let [class (-> query meta :component)+            ident (get-ident class data)]+        (if-not (nil? ident)+          (normalize-with-friendly-errors (get query (first ident)) data tables union-seen transform)+          (throw (ex-info ""Union components must have an ident"" {}))))++      (vector? data) data                                   ;; already normalized++      :else+      (loop [q (seq query), ret data]+        (if-not (nil? q)+          (let [expr (first q)]+            (if (util/join? expr)+              (let [[join-key subquery] (util/join-entry expr)+                    recursive?  (util/recursion? subquery)+                    union-entry (if (util/union? expr) subquery union-seen)+                    subquery    (if recursive?+                                  (if-not (nil? union-seen)+                                    union-seen+                                    query)+                                  subquery)+                    class       (-> subquery meta :component)+                    v           (get data join-key)]+                (cond+                  ;; graph loop: db->tree leaves ident in place+                  (and recursive? (eql/ident? v)) (recur (next q) ret)+                  ;; normalize one+                  (map? v)+                  (let [x (normalize-with-friendly-errors subquery v tables union-entry transform)]+                    (if-not (or (nil? class) (not (has-ident? class)))+                      (let [i (get-ident class x)]+                        ;; Why don't we simply `update-in i ..` as we do below in normalize many?! Incidental?+                        (swap! tables upsert-ident i x)+                        (recur (next q) (assoc ret join-key i)))+                      (recur (next q) (assoc ret join-key x))))++                  ;; normalize many+                  (and (vector? v) (not (eql/ident? v)) (not (eql/ident? (first v))))+                  (let [xs (into [] (map #(normalize-with-friendly-errors subquery % tables union-entry transform)) v)]+                    (if-not (or (nil? class) (not (has-ident? class)))+                      (let [is (into [] (map #(get-ident class %)) xs)]+                        ;; union + normal case+                        (swap! tables+                               (fn [tables']+                                 (reduce (fn merge-to-client-db [m [i x]] (upsert-ident m i x))+                                         tables' (map vector is xs))))+                        (recur (next q) (assoc ret join-key is)))+                      (recur (next q) (assoc ret join-key xs))))++                  ;; missing key+                  (nil? v)+                  (recur (next q) ret)++                  ;; can't handle+                  :else (recur (next q) (assoc ret join-key v))))+              (let [k (if (seq? expr) (first expr) expr)+                    v (get data k)]+                (if (nil? v)+                  (recur (next q) ret)+                  (recur (next q) (assoc ret k v))))))+          ret)))))++(defn- better-normalize* [query data tables union-seen transform]+  (try+    (normalize* query data tables union-seen transform)+    (catch #?(:clj Exception :cljs :default) e+      (normalize-with-friendly-errors query data tables union-seen transform)+      (log/warn ""Unexpectedly, normalize* failed but normalize-with-friendly-errors did not. Please report it (with the inputs) to Fulcro"")"
https://api.github.com/repos/fulcrologic/fulcro/pulls/507,801857410,"@@ -116,6 +116,9 @@     (when (and (not has-fields?) queries-for-config?)       (throw (ex-info (str ""Attempt to add form configuration to "" (rc/component-name class) "", but it does not declare any fields!"")                {:offending-component class})))+    (when (and has-fields? (empty? fields))"
https://api.github.com/repos/fulcrologic/fulcro/pulls/521,988155759,"@@ -83,19 +83,26 @@  (declare run-queue! available-work?) +(defn current-thread-id +  ""Get the current thread id on the JVM. Returns 0 on JS.""+  []+  #?(:clj (.getId (Thread/currentThread))+     :cljs 0))+ #?(:clj    (defmacro in-transaction [app-sym & body]      `(let [id# (:com.fulcrologic.fulcro.application/id ~app-sym)]-        (swap! apps-in-tx update id# (fnil inc 0))+        (swap! apps-in-tx update id# conj (current-thread-id))"
https://api.github.com/repos/functional-koans/clojure-koans/pulls/55,6115869,"@@ -40,8 +40,8 @@    ""Often you will need to get the keys, but the order is undependable""   (= (list __ __ __)-     (sort (keys {2006 ""Torino"" 2010 ""Vancouver"" 2014 ""Sochi""})))"
https://api.github.com/repos/functional-koans/clojure-koans/pulls/107,57492176,"@@ -32,5 +32,8 @@   ""Symbolism is all around us""   (= 'hello (symbol __)) +  ""Introducing nil"""
https://api.github.com/repos/functional-koans/clojure-koans/pulls/147,327136009,"@@ -0,0 +1,70 @@+(ns koans.25-threading-macros+  (:require [koan-engine.core :refer :all]))++(def a-list+  '(1 2 3 4 5))++(def a-list-with-maps+  '({:a 1} {:a 2} {:a 3}))++(defn function-that-takes-a-map [m a b]+  (do+    (println (str ""Other unused arguments: "" a "" "" b))"
https://api.github.com/repos/incanter/incanter/pulls/65,543030,"@@ -85,6 +100,12 @@ (deftest variance-test   (is (= (map variance (trans test-mat)) [1001.5833333333334 5416.666666666667]))) +(deftest variance-precision-test+  (is (within 1E-13 7.354943E-10 (variance ($ :sensitive precision-ds0))))"
https://api.github.com/repos/incanter/incanter/pulls/111,2495820,"@@ -474,22 +474,21 @@     (testing ""Matrix decomposition/mult functions""       (is (nil? (meta (kronecker 4 m))))       (is (nil? (meta (mmult m (trans m)))))-      (is (nil? (some map? -                      (for [op [solve decomp-cholesky decomp-svd decomp-eigenvalue decomp-lu decomp-qr]] +      (is (nil? (some map?+                      (for [op [solve decomp-cholesky decomp-svd decomp-eigenvalue decomp-lu]]  ;; decomp-qr                         (meta (-> m op)))))))     (testing ""Matrix math ops""-      (is (nil? (some map? -                      (for [op [plus minus mult div pow atan2]] +      (is (nil? (some map?+                      (for [op [plus minus mult div pow atan2]]                         (meta (-> m #(op % %)))))))-      (is (nil? (some map? -                      (for [op [sqrt sq log log2 log10 exp abs sin asin cos acos tan atan]] +      (is (nil? (some map?+                      (for [op [sqrt sq log log2 log10 exp abs sin asin cos acos tan atan]]                         (meta (-> m op)))))))-    (testing ""Known Matrix metadata holes""-      (is (nil? (some nil? -                      (for [op [seq trans pow atan2]] -                        (meta (-> m op)))))))))--+    ;(testing ""Known Matrix metadata holes""  ;; TODO wrong test? (meta (seq mat)) should be nil+      ;(is (nil? (some nil?+                      ;(for [op [seq trans pow atan2]]+                        ;(meta (-> m op)))))))+    ))"
https://api.github.com/repos/incanter/incanter/pulls/302,32919875,"@@ -2,16 +2,24 @@   incanter.interp.utils)  (defn binary-search-""  Finds index of rightmost value in sorted vector that is less or equal to given value.""+  ""  Finds index of rightmost value in sorted vector that is less or equal to given value.""   [vec value]   (loop [left 0          right (dec (count vec))]-    (if (= (- right left) 1)-      (if (<= (nth vec right) value) right left)-      (let [middle (quot (+ left right) 2)]-        (if (<= (nth vec middle) value)-          (recur middle right)-          (recur left middle))))))+    (let [middle (quot (+ left right) 2)]+      (cond+       (= right left)+       0++       (= (- right left) 1)+       (if (<= (nth vec right) value) right left)++"
https://api.github.com/repos/jepsen-io/jepsen/pulls/17,11123743,"@@ -0,0 +1,74 @@+(ns jepsen.elasticsearch+  (:require [clojurewerkz.elastisch.native          :as esn]+            [clojurewerkz.elastisch.native.document :as esd]+            [clojurewerkz.elastisch.native.index    :as esi]+            [jepsen.load :refer [ok]])+  (:use jepsen.set-app)+  (:import [org.elasticsearch.indices IndexMissingException]))++++(def index ""jepsen_index"")+(def es-type ""set_app"")+(def mapping {es-type+              {:properties+               {:elements {:type ""integer"" :store ""true""}}}})+(def base-doc {:elements []})++(defn clean-index! []+  (try+    (esi/delete index)+    (esi/refresh index)+    (catch IndexMissingException e+      )))++(defn ensure-index! []+  (esi/create index :mappings mapping)+  (esi/refresh index))++(defn seed-index! []+  (esd/create index es-type base-doc))++(defn connect! []+  (esn/connect! [[""n1"" 9300]"
https://api.github.com/repos/jepsen-io/jepsen/pulls/23,11762038,"@@ -0,0 +1,219 @@+(ns jepsen.system.consul+  (:require [clojure.tools.logging    :refer [debug info warn]]+            [clojure.java.io          :as io]+            [clojure.string           :as str]+            [clojure.core           :as ccore]+            [jepsen.core              :as core]+            [jepsen.util              :refer [meh timeout]]+            [jepsen.codec             :as codec]+            [jepsen.core              :as core]+            [jepsen.control           :as c]+            [jepsen.control.net       :as net]+            [jepsen.control.util      :as cu]+            [jepsen.client            :as client]+            [jepsen.db                :as db]+            [jepsen.generator         :as gen]+            [jepsen.os.debian         :as debian]+            [knossos.core             :as knossos]+            [cheshire.core            :as json]+            [slingshot.slingshot      :refer [try+]]+            [clj-http.client        :as http]+            [base64-clj.core :as base64]))++(def binary ""/usr/bin/consul"")+(def pidfile ""/var/run/consul.pid"")+(def data-dir ""/var/lib/consul"")+(def log-file ""/var/log/consul.log"")++(defn peer-addr [node]+  (str (name node) "":8300""))++(defn addr [node]+  (str (name node) "":8500""))++(defn peers+  ""The command-line peer list for an consul cluster.""+  [test]+  (->> test+       :nodes+       (map peer-addr)+       (str/join "","")))++(defn running?+  ""Is consul running?""+  []+  (try+    (c/exec :start-stop-daemon :--status+            :--pidfile pidfile+            :--exec binary)+    true+    (catch RuntimeException _ false)))++(defn start-consul!"
https://api.github.com/repos/jepsen-io/jepsen/pulls/29,12869225,"@@ -0,0 +1,37 @@+# Running Jepsen++This directory contains a bunch of files to ease the setup of boxes for running jepsen tests. This setup is heavily based on+informations provided in the [../lxc.md](../lxc.md) file but in an executable form. It might be useful to people that do not run+natively on OSes providing lxc/containers implementation nor have access to dedicated testing infrastructure, yet want to study+jepsen, run the test suite it provides and test implementation for other databases/systems.++* The `Vagrantfile`is a [vagrant](http://vagrantup.com) file (!) that creates a VM box containing all the needed tools to run+jepsen. For detailed usage please refer to Vagrant's documentation. Normally the following should give you, after a couple of+coffees, a working VM containing five configured LXC boxes configured for running jepsen:++> vagrant up+> ..... [long]+> vagrant ssh+> cd /jepsen+> lein with-profile elasticsearch test :only jepsen.system.elasticsearch-test++* Configuration of the vagrant's VM is provided as a bunch of scripts (yes, this should be+  puppet/chef/salt/pick-your-own-scm-tool) which may be used independently from Vagrant itself:+      * `setup.sh` install dev packages: git, java and lein+      * `net.sh` setup the virtual network that connects all LXC boxes +      * `lxc.sh` creates the five LXC boxes and configures them+      *  `functions.sh` contains auxiliary functions useful to other scripts+      * Note that scripts should be idempotent+* **Caveat**: Tests might need to be modified as the authentication configuration of LXC boxes is a bit rough. Modify the tests+  accordingly by adding `:ssh` keys to the `core/run!`function's parameters. Normally, logging in as `root` with key+  `~/.ssh/id_rsa` should work fine.++# TODO++* Ensure all tests for all systems run correctly+    * elasticsearch works fine+    * etcd does not compile cleanly because of go compiler version not being correct"
https://api.github.com/repos/jepsen-io/jepsen/pulls/33,13516425,"@@ -131,6 +131,11 @@        (map escape)        (apply exec*))) +(defn scp*"
https://api.github.com/repos/jepsen-io/jepsen/pulls/40,15372752,"@@ -0,0 +1,54 @@+(ns jepsen.tests+  ""Provide utilities for writing tests using jepsen.""+  (:use jepsen.core)+  (:require [jepsen.os :as os]+            [jepsen.db :as db]+            [jepsen.client :as client]+            [jepsen.generator :as gen]+            [jepsen.model :as model]+            [jepsen.checker :as checker]))+++(def noop-test+  ""Boring test stub.+  Typically used as a basis for writing more complex tests.+  ""+  {:nodes     [:n1 :n2 :n3 :n4 :n5]+   :os        os/noop+   :db        db/noop+   :client    client/noop+   :nemesis   client/noop+   :generator gen/void+   :model     model/noop+   :checker   checker/linearizable})++(defn atom-db+  ""Wraps an atom as a database.""+  [state]+  (reify db/DB+    (setup!    [db test node] (reset! state 0))+    (teardown! [db test node] (reset! state :done))))++(defn atom-client"
https://api.github.com/repos/jepsen-io/jepsen/pulls/42,16669471,"@@ -96,9 +102,8 @@ (defn partition-random-node   ""Isolates a single node from the rest of the network.""   []-  (partitioner (fn [nodes]-                 (let [loner (rand-nth nodes)]-                   (complete-grudge [[list loner] (remove loner nodes)])))))"
https://api.github.com/repos/jepsen-io/jepsen/pulls/48,23630823,"@@ -24,17 +24,26 @@ (def log-file ""/var/log/etcd.log"")  (defn peer-addr [node]-  (str (name node) "":7001""))+  (str (net/ip node) "":2380""))  (defn addr [node]-  (str (name node) "":4001""))+  (str (net/ip node) "":2380""))"
https://api.github.com/repos/jepsen-io/jepsen/pulls/51,28442465,"@@ -175,20 +178,18 @@   (setup! [_ test node]     (let [; client (es/connect [[(name node) 9300]])]           client (es/connect (str ""http://"" (name node) "":9200""))]-      ; Create index+      ;; Create index       (try         (esi/create client index-name                     :mappings {""number"" {:properties                                          {:num {:type ""integer""                                                 :store ""yes""}}}}-                    :settings {""index"" {""refresh_interval"" ""1""}})-        (catch clojure.lang.ExceptionInfo e-          ; Is this seriously how you're supposed to do idempotent-          ; index creation? I've gotta be doing this wrong.-          (let [err (http-error e)]-            (when-not (re-find #""IndexAlreadyExistsException"" err)-              (throw (RuntimeException. err))))))-+                    :settings {""index"" {""refresh_interval"" ""1s""}})+        (catch Throwable t))"
https://api.github.com/repos/jepsen-io/jepsen/pulls/56,30763071,"@@ -17,6 +17,7 @@                   :exclusions [org.slf4j/slf4j-api                                org.slf4j-log4j12                                com.google.guava/guava]]]+  :classifiers [[""rabbitmq"" :rabbitmq]]"
https://api.github.com/repos/jepsen-io/jepsen/pulls/70,35732284,"@@ -0,0 +1,17 @@+(defproject mongodb ""0.1.0-SNAPSHOT""+  :description ""RethinkDB Jepsen Tests""+;  :url ""http://github.com/rethinkdb/jepsen"""
https://api.github.com/repos/jepsen-io/jepsen/pulls/80,41101159,"@@ -0,0 +1,230 @@+(ns jepsen.robustirc+  (:require+    [clojure.tools.logging    :refer [debug info warn]]+    [clojure.java.io          :as io]+    [clojure.string           :as str]+    [clojure.core.async       :as async]+    [clj-http.client :as httpclient]+    [digest :as digest]+    [jepsen+      [client :as client]+      [core :as jepsen]+      [db :as db]+      [tests :as tests]+      [control :as c :refer [|]]+      [checker :as checker]+      [nemesis :as nemesis]+      [generator :as gen]]+    [jepsen.os.debian :as debian]+    [cheshire.core            :as json])+  (:import+    [java.net URL]))++(defn db [version]+  ""Rethinkdb (ignores version).""+  (reify db/DB+    (setup! [this test node]+      (c/su+        (c/ssh* {:cmd ""killall robustirc""})+	(try (c/exec :dpkg-query :-l :golang-go)+	     (catch RuntimeException _+	       (info ""Installing golang-go"")+	       (c/exec :apt-get :install :-y :golang-go)))+	(try (c/exec :dpkg-query :-l :mercurial)+	     (catch RuntimeException _+	       (info ""Installing mercurial"")+	       (c/exec :apt-get :install :-y :mercurial)))+	(c/exec :env ""GOPATH=~/gocode""+	        :go :get :-u ""github.com/robustirc/robustirc"")++        ; generated by resources/gencert.go+        (c/upload (.getFile (io/resource ""cert.pem"")) ""/tmp/cert.pem"")+        (c/upload (.getFile (io/resource ""key.pem"")) ""/tmp/key.pem"")+        (c/ssh* {:cmd ""rm -rf /var/lib/robustirc""})+        (c/ssh* {:cmd ""mkdir -p /var/lib/robustirc""})+        (jepsen/synchronize test)++        (let [cmd (str+                ""/sbin/start-stop-daemon --start --background --exec ~/gocode/bin/robustirc --""+                "" -listen="" (name node) "":13001""+                "" -network_password=secret""+                "" -network_name=jepsen""+                "" -tls_cert_path=/tmp/cert.pem""+                "" -tls_ca_file=/tmp/cert.pem""+                "" -tls_key_path=/tmp/key.pem""+                "" -singlenode"")]+          (if-not (= node (jepsen/primary test))+                (Thread/sleep 1000)+                (do+                  (info node (str ""running: "" cmd))+                  (c/ssh* {:cmd cmd})+                  (Thread/sleep 5000))))+        (jepsen/synchronize test)+        (let [cmd (str+                ""/sbin/start-stop-daemon --start --background --exec ~/gocode/bin/robustirc --""+                "" -listen="" (name node) "":13001""+                "" -network_password=secret""+                "" -network_name=jepsen""+                "" -tls_cert_path=/tmp/cert.pem""+                "" -tls_ca_file=/tmp/cert.pem""+                "" -tls_key_path=/tmp/key.pem""+                "" -join="" (name (jepsen/primary test)) "":13001"")]+          (if (= node (jepsen/primary test))+                (Thread/sleep 100)+                (do+                  (info node (str ""running: "" cmd))+                  (c/ssh* {:cmd cmd})"
https://api.github.com/repos/jepsen-io/jepsen/pulls/139,71085607,"@@ -0,0 +1,14 @@+cat <<EOF +Welcome to Jepsen on Docker+===========================++This container runs the Jepsen tests in sub-containers.++You are currently in the base dir of the git repo for Jepsen.+If you modify the core jepsen library make sure you ""lein install"" it so other tests can access.++To run a test:+   cd mongodb && lein run"
https://api.github.com/repos/jepsen-io/jepsen/pulls/142,71464967,"@@ -24,7 +24,7 @@                  :db        (db)                  :client    (cas-client)                  :model     (model/cas-register)-                 :checker   (checker/compose {:html   timeline/html+                 :checker   (checker/compose {;:html   timeline/html"
https://api.github.com/repos/jepsen-io/jepsen/pulls/170,111240489,"@@ -4,7 +4,7 @@ (refer to https://wiki.debian.org/LXC)  ```sh-aptitude install lxc bridge-utils libvirt-bin debootstrap dnsmasq+aptitude install lxc bridge-utils ebtables libvirt-bin debootstrap dnsmasq gnuplot ```"
https://api.github.com/repos/jepsen-io/jepsen/pulls/178,121301153,"@@ -100,4 +101,4 @@                                   (checker/compose                                     {:timeline     (timeline/html)                                      :linearizable checker/linearizable}))})}-      opts)))+      (dissoc opts :concurrency))))"
https://api.github.com/repos/jepsen-io/jepsen/pulls/193,132734646,"@@ -35,7 +35,9 @@ (def local-server-jar   ""Relative to server fat jar""   (str local-server-dir-       ""/target/jepsen.hazelcast-server-0.1.0-SNAPSHOT-standalone.jar""))+       ""/target/jepsen.hazelcast-server-""+       (System/getProperty ""projectname.version"")"
https://api.github.com/repos/jepsen-io/jepsen/pulls/196,134637436,"@@ -386,15 +388,24 @@                            :workload checker})             :model      model}))) +(defn test-names+  ""Comma separated list of available test""+  []+  (str/join "", ""(map name (keys (tests nil)))))++ (def opt-spec   ""Additional command line options""-  [[nil ""--workload WORKLOAD"" ""Test workload to run, e.g. atomic-long-ids.""-    :parse-fn keyword]])+  [[nil ""--workload WORKLOAD"" (str ""Test workload to run, possible options are "" (test-names) ""Required."")+    :parse-fn keyword"
https://api.github.com/repos/jepsen-io/jepsen/pulls/199,141068033,"@@ -0,0 +1,115 @@+(ns jepsen.raftis+  (:gen-class)+  (:require [clojure.tools.logging :refer :all]+            [clojure.string :as str]+            [taoensso.carmine :as car :refer (wcar)]+            [knossos.model :as model]+            [jepsen [checker :as checker]+                    [cli :as cli]+                    [client :as client]+                    [control :as c]+                    [db :as db]+                    [generator :as gen]+                    [nemesis :as nemesis]+                    [tests :as tests]+                    [util :as util :refer [timeout]]]+            [jepsen.checker.timeline :as timeline]+            [jepsen.control.util :as cu]))++(defn r   [_ _] {:type :invoke, :f :read, :value nil})+(defn w   [_ _] {:type :invoke, :f :write, :value (rand-int 5)})++(defn parse-long+  ""Parses a string to a Long. Passes through `nil`.""+  [s]+  (when s (Long/parseLong s)))++(defn client+  ""A client for a single register""+  [conn]+  (reify client/Client+    (setup! [_ test node]+      (def redis-conn {:pool {} :spec {:host node :port 6379 :timeout-ms 5000}})+      (client redis-conn))++    (invoke! [this test op]+      (try+        (case (:f op)+          :read (assoc op :type :ok, :value (parse-long (get (car/wcar conn (car/get ""r"")) 0 """")))++          :write (do (car/wcar conn (car/set ""r"" (:value op)))+                     (assoc op :type, :ok)))++        (catch clojure.lang.ExceptionInfo e+          (def err_str (str (.getMessage e)))+          (def no_leader (re-find #""ERR write InComplete: no leader node!.*"" err_str))+          (def socket_closed (re-find #""socket closed.*"" err_str))+          (assoc op :type (if (or (or (= :read (:f op)) no_leader) socket_closed) :fail :info), :error err_str))++        (catch java.net.SocketTimeoutException e+          (assoc op :type (if (= :read (:f op)) :fail :info), :error :timeout))++        (catch java.io.EOFException e+          (assoc op :type :fail, :error :eof_exception))++        (catch java.lang.NumberFormatException e+          (assoc op :type :fail, :error (str ""readnil--- "" e)))))++    (teardown! [_ test])))++(def src_dir ""/home/gaodunqiao/raftis"")+(def dir     ""/opt/raftis"")+(def logfile (str dir ""/data/LOG""))+(def binary  ""raftis"")++(defn db+  ""Raftis DB for a particular version.""+  [version]+  (reify db/DB+    (setup! [_ test node]"
https://api.github.com/repos/jepsen-io/jepsen/pulls/214,147866961,"@@ -1,20 +1,69 @@ (ns jepsen.client-  ""Applies operations to a database."")+  ""Applies operations to a database.""+  (:require [clojure.tools.logging :refer :all]+            [clojure.reflect :refer [reflect]]+            [jepsen.util :as util]))  (defprotocol Client-  (setup!  [client test node]+  (open! [client test node]           ""Set up the client to work with a particular node. Returns a client           which is ready to accept operations via invoke!"")+  (close! [client test node]+          ""Close the client connection when work is completed or an invocation+           crashes the client."")+  (setup! [client test] [client test node]+          ""Called once to set up database state for testing. 3 arity form is+           deprecated and will be removed in a future jepsen version."")   (invoke! [client test operation]            ""Apply an operation to the client, returning an operation to be            appended to the history. For multi-stage operations, the client may            reach into the test and conj onto the history atom directly."")   (teardown! [client test]-             ""Tear down the client when work is complete.""))+           ""Tear down the client when work is complete.""))  (def noop   ""Does nothing.""   (reify Client-    (setup!    [this test node] this)+    (setup!    [this test])     (teardown! [this test])-    (invoke!   [this test op] (assoc op :type :ok))))+    (invoke!   [this test op] (assoc op :type :ok))+    (open!     [this test node] this)+    (close!    [this test node])))++(defn reopen!+  ""Takes the worker's current client, closes its connection and+  opens a new connection with the original."""
https://api.github.com/repos/jepsen-io/jepsen/pulls/220,150389073,"@@ -90,6 +118,14 @@        (reduce (fn [m p] (assoc m p (count m)))                {}))) +(defn t-index"
https://api.github.com/repos/jepsen-io/jepsen/pulls/228,151810266,"@@ -187,12 +188,25 @@   (rc/with-conn [s *session*]     (ssh/scp-to *session* current-path node-path))) +(defn file->path+  ""Takes an object, if it's an instance of java.io.File, gets the path, otherwise+  returns the object""+  [x]+  (if (instance? java.io.File x)+    (.getCanonicalPath x)+    x))+ (defn upload-  ""Copies local path(s) to remote node. Takes arguments for clj-ssh/scp-to.""-  [& args]+  ""Copies local path(s) to remote node and returns the remote path.+  Takes arguments for clj-ssh/scp-to.""+  [& [local-paths remote-path & remaining]]"
https://api.github.com/repos/jepsen-io/jepsen/pulls/227,151822694,"@@ -0,0 +1,8 @@+(defproject jepsen-charybdefs ""0.1.0-SNAPSHOT"""
https://api.github.com/repos/jepsen-io/jepsen/pulls/229,152315046,"@@ -270,23 +284,29 @@ (defn session   ""Wraps clj-ssh-session in a wrapper for reconnection.""   [host]-  (rc/open!-    (rc/wrapper {:open    (if *dummy*-                            (fn [] [:dummy host])-                            (fn [] (clj-ssh-session host)))-                 :name    [:control host]-                 :close   (if *dummy*-                            identity-                            ssh/disconnect)-                 :log?    true})))+  (binding [*host* host]"
https://api.github.com/repos/jepsen-io/jepsen/pulls/238,174242098,"@@ -182,7 +182,7 @@ cleaner to have a field on the SetClient. "
https://api.github.com/repos/jepsen-io/jepsen/pulls/256,186096155,"@@ -43,8 +45,8 @@             (info node ""Creating table sets"")"
https://api.github.com/repos/jepsen-io/jepsen/pulls/275,192854829,"@@ -5,10 +5,12 @@   (setup!     [os test node] ""Set up the operating system on this particular                              node."")   (teardown!  [os test node] ""Tear down the operating system on this particular-                             node.""))+                             node."")+  (install-build-essential! [os] ""Install build tools.""))"
https://api.github.com/repos/jepsen-io/jepsen/pulls/277,196652722,"@@ -72,6 +80,9 @@   (reify nemesis/Nemesis     (setup! [nem test]       (c/with-test-nodes test (install!))"
https://api.github.com/repos/jepsen-io/jepsen/pulls/288,220890372,"@@ -112,7 +112,8 @@    [nil ""--replicas COUNT"" ""How many replicas of data should dgraph store?""     :default 3     :parse-fn parse-long-    :validate [pos? ""Must be a positive integer""]]+    ;:validate [pos? ""Must be a positive integer""]"
https://api.github.com/repos/jepsen-io/jepsen/pulls/295,233061470,"@@ -3,30 +3,48 @@                                 Tracing                                 Span)            (io.opencensus.trace.samplers Samplers)-           (io.opencensus.exporter.trace.logging LoggingTraceExporter)))+           (io.opencensus.exporter.trace.logging LoggingTraceExporter)+           (io.opencensus.exporter.trace.jaeger JaegerTraceExporter))) -(def tracer ^Tracer (Tracing/getTracer))-(def trace-exporter (LoggingTraceExporter/register))+(def tracer         (atom nil))+(def trace-exporter (atom nil))+(def sampler        (atom nil))+(def trace-config   (atom nil))"
https://api.github.com/repos/jepsen-io/jepsen/pulls/311,254082344,"@@ -63,6 +66,15 @@          :subdirectory - A directory within this test's store directory where                          output files should be written. Defaults to nil."")) +(defn noop+  ""Creates an empty non-functional checker. 0 arg arity is deprecated.""+  ([]+   (reify Checker+     (check [_ _ model _ _])))+  ([model]"
https://api.github.com/repos/jepsen-io/jepsen/pulls/315,255752800,"@@ -297,19 +298,19 @@   ""Wraps clj-ssh-session in a wrapper for reconnection.""   [host]   (rc/open!-   (rc/wrapper {:open    (if *dummy*-                           (fn [] [:dummy host])-                           (fn [] (try-                                    (clj-ssh-session host)-                                    (catch com.jcraft.jsch.JSchException e-                                      (error ""Error opening SSH session. Verify username, password, and node hostnames are correct.\nSSH configuration is:\n""-                                             (util/pprint-str (binding [*host* host] (debug-data))))"
https://api.github.com/repos/jepsen-io/jepsen/pulls/316,256608222,"@@ -190,35 +191,79 @@ (deftest latencies->quantiles-test   (is (= {0 [[5/2 0]  [15/2 20] [25/2 25]]           1 [[5/2 10] [15/2 25] [25/2 25]]}-         (latencies->quantiles 5 [0 1] (partition 2 [0 0-                                                     1 10-                                                     2 1-                                                     3 1-                                                     4 1-                                                     5 20-                                                     6 21-                                                     7 22-                                                     8 25-                                                     9 25-                                                     10 25])))))+         (cp/latencies->quantiles 5 [0 1] (partition 2 [0 0+                                                        1 10+                                                        2 1+                                                        3 1+                                                        4 1+                                                        5 20+                                                        6 21+                                                        7 22+                                                        8 25+                                                        9 25+                                                        10 25])))))++(defn perf-gen+  ([latency]+   (perf-gen latency nil))+  ([latency nemesis-regions]+   (let [f (rand-nth [:write :read])+         proc (rand-int 100)+         time (* 1e9 (rand-int 100))+         type (rand-nth [:ok :ok :ok :ok :ok+                         :fail :info :info])]+     [{:process proc, :type :invoke, :f f, :time time}+      {:process proc, :type type,    :f f, :time+       (+ time latency)}])))  (deftest perf-test-  (check (perf)-         {:name       ""perf test""-          :start-time 0}-         (->> (repeatedly #(/ 1e9 (inc (rand-int 1000))))-              (mapcat (fn [latency]-                        (let [f (rand-nth [:write :read])-                              proc (rand-int 100)-                              time (* 1e9 (rand-int 100))-                              type (rand-nth [:ok :ok :ok :ok :ok-                                              :fail :info :info])]-                          [{:process proc, :type :invoke, :f f, :time time}-                           {:process proc, :type type,    :f f, :time-                            (+ time latency)}])))-              (take 10000)-              vec)-         {}))+  (let [history (->> (repeatedly #(/ 1e9 (inc (rand-int 1000))))+                     (mapcat perf-gen)+                     (take 10000)+                     vec)]++    (testing ""can render latency-graph""+      (is (= (check (latency-graph)+                    {:name ""latency graph""+                     :start-time 0}+                    history+                    {})+             {:valid? true})))++    (testing ""can render rate-graph""+      (is (= (check (rate-graph)+                    {:name ""rate graph""+                     :start-time 0}+                    history+                    {})+             {:valid? true})))++    (testing ""can render combined perf graph""+      (is (= (check (perf)+                    {:name ""perf graph""+                     :start-time 0}+                    history+                    {})+             {:latency-graph {:valid? true},+              :rate-graph {:valid? true},+              :valid? true})))++    ;; TODO Generate nemesis regions+    (testing ""can accept nemesis regions""+      (let [checker (perf {:nemeses #{{:start #{:start1}+                                       :stop  #{:stop1}}+                                      {:start #{:start2.1 :start2.2}+                                       :stop  #{:stop2}}+                                      {:start #{:start3}+                                       :stop  #{:stop3.1 :stop3.2}}+                                      {:start #{:start4.1 :start4.2 :start4.3}+                                       :stop  #{:stop4.1 :stop4.2 :stop4.3}}}})"
https://api.github.com/repos/jepsen-io/jepsen/pulls/320,258912230,"@@ -0,0 +1,5 @@+n1"
https://api.github.com/repos/jepsen-io/jepsen/pulls/324,260992073,"@@ -0,0 +1,63 @@+(ns jepsen.tests.causal-reverse-test+  (:require [jepsen.tests.causal-reverse :refer :all]+            [knossos.op :refer :all]+            [clojure.test :refer :all]+            [jepsen.checker :as checker]))++(deftest casusal-reverse-test+  (testing ""Can validate sequential histories""+    (let [c (checker)+          valid [(invoke 0 :write 1)+                 (ok     0 :write 1)+                 (invoke 0 :write 2)+                 (ok     0 :write 2)+                 (invoke 0 :read nil)+                 (ok     0 :read [1 2])]+          two-without-one [(invoke 0 :write 1)+                           (ok     0 :write 1)+                           (invoke 0 :write 2)+                           (ok     0 :write 2)+                           (invoke 0 :read nil)+                           (ok     0 :read [2])]+          bigger [(invoke 0 :write 1)+                  (ok     0 :write 1)+                  (invoke 0 :write 2)+                  (ok     0 :write 2)+                  (invoke 0 :write 3)+                  (ok     0 :write 3)+                  (invoke 0 :write 4)+                  (ok     0 :write 4)+                  (invoke 0 :write 5)+                  (ok     0 :write 5)+                  (invoke 0 :read nil)+                  (ok     0 :read [1 2 3 4 5])]]+      (is (:valid?      (checker/check c nil valid nil)))+      (is (not (:valid? (checker/check c nil two-without-one nil))))+      (is (:valid?      (checker/check c nil bigger nil)))))++  (testing ""Can validate concurrent histories""+    (let [c (checker)+          concurrent1 [(invoke 0 :write 2)+                       (invoke 0 :write 1)+                       (ok     0 :write 1)+                       (invoke 0 :read nil)+                       (ok     0 :write 2)+                       (ok     0 :read [1 2])]+          concurrent2  [(invoke 0 :write 1)+                        (invoke 0 :write 2)+                        (ok     0 :write 1)+                        (invoke 0 :read nil)+                        (ok     0 :write 2)+                        (ok     0 :read [2 1])]]+      (is (:valid? (checker/check (checker) nil concurrent1 nil)))+      (is (:valid? (checker/check (checker) nil concurrent2 nil)))))++  (testing ""Can detect reverse causal anomaly""+    (let [c (checker)+          reverse-causal-read [(invoke 0 :write 1)+                               (ok     0 :write 1)+                               (invoke 0 :write 2)+                               (ok     0 :write 2)+                               (invoke 0 :read nil)+                               (ok     0 :read [2 1])]]"
https://api.github.com/repos/jepsen-io/jepsen/pulls/325,261185294,"@@ -5,15 +5,42 @@             [clojure.java.io :as io]             [clojure.string :as str])   (:import (com.hazelcast.core Hazelcast)+           (com.hazelcast.config.cp FencedLockConfig CPSemaphoreConfig)            (com.hazelcast.config Config                                  LockConfig                                  MapConfig-                                 QuorumConfig)))+                                 QuorumConfig)+           ))  (def opt-spec   [[""-m"" ""--members MEMBER-LIST"" ""Comma-separated list of peers to connect to""     :parse-fn (fn [m]-                (str/split m #""\s*,\s*""))]])+                  (str/split m #""\s*,\s*""))]])++(defn prepareCPSubsystemConfig+  ""Prepare Hazelcast CPSubsystemConfig""+  [config members]+  (let [cpSubsystemConfig (.getCPSubsystemConfig config)+        raftAlgorithmConfig (.getRaftAlgorithmConfig cpSubsystemConfig)+        semaphoreConfig (CPSemaphoreConfig. ""jepsen.cpSemaphore"" false)+        lockConfig1 (FencedLockConfig. ""jepsen.cpLock1"" 1)+        lockConfig2 (FencedLockConfig. ""jepsen.cpLock2"" 2)++        _ (.setLeaderElectionTimeoutInMillis raftAlgorithmConfig 1000)"
https://api.github.com/repos/jepsen-io/jepsen/pulls/327,261856410,"@@ -0,0 +1,119 @@+(ns jepsen.tests.monotonic-cycle+  ""A checker which searches for incidents of read skew. Because each register+  is increment-only, we know that there should never exist a pair of reads r1+  and r2, such that for two registers x and y, where both registers are+  observed by both reads, x_r1 < x_r2 and y_r1 > y_r2.++  This problem is equivalent to cycle detection: we have a set of partial+  orders <x, <y, ..., each of which relates states based on whether x increases+  or not. We're trying to determine whether these orders are *compatible*.++  Imagine an order <x as a graph over states, and likewise for <y, <z, etc.+  Take the union of these graphs. If all these orders are compatible, there+  should be no cycles in this graph.++  To do this, we take each key k, and find all values for k. In general, the+  ordering relation <k is the transitive closure, but for cycle detection, we+  don't actually need the full closure--we'll restrict ourselves to k=1's+  successors being those with k=2 (or, if there are no k=2, use k=3, etc). This+  gives us a set of directed edges over states for k; we union the graphs for+  all k together to obtain a graph of all relationships.++  Next, we apply Tarjan's algorithm for strongly connected components, which is+  linear in edges + vertices (which is why we don't work with the full+  transitive closure of <k). The existence of any strongly connected components+  containing more than one vertex implies a cycle in the graph, and that cycle+  will be within that component.++  This isn't suuuper ideal... the connected component could, I guess, be fairly+  large, and then it'd be hard to prove where the cycle lies. But this feels+  like an OK start.""+  (:require [jepsen.checker :as checker]+            [knossos.op :as op]+            [clojure.core.reducers :as r]+            [clojure.set :as set]))++(defn tarjan+  ""Returns the strongly connected components of a graph specified by its nodes+  and a successor function (next) succs from node to nodes. An implementation of+  Tarjan's Strongly Connected Components.+  From: http://clj-me.cgrand.net/2013/03/18/tarjans-strongly-connected-components-algorithm/""+  [nodes succs]+  ;; Env is a map from nodes to stack length or nil, nil means the node is+  ;; known to belong to another SCC (Strongly Connected Component) :stack for+  ;; the current stack and :sccs for the current set of SCCs.+  (letfn [(sc [env node]+            (if (contains? env node)+              env+              (let [stack (:stack env)+                    n     (count stack)+                    env   (assoc env node n :stack (conj stack node))+                    env   (reduce (fn [env next]+                                    (let [env (sc env next)]"
https://api.github.com/repos/jepsen-io/jepsen/pulls/343,267481815,"@@ -82,4 +82,4 @@      :checker (indy/checker                 (checker/compose                   {:timeline     (timeline/html)-                   :linearizable (checker/linearizable)}))}))+                   :linearizable (checker/linearizable {:model (model/cas-register)})}))}))"
https://api.github.com/repos/jepsen-io/jepsen/pulls/362,272173799,"@@ -72,17 +72,14 @@   [version]   (reify db/DB     (setup! [_ test node]+      ;if we have no JDK on nodes, when install it. Works only with Debian/Ubuntu+      (when-not (re-find #""JAVA_HOME"" (get (shell/sh ""printenv"") :out)) (c/su (debian/install-jdk8!)))       (info node ""Installing Apache Ignite"" version)-      (c/su-        (debian/install-jdk8!)-        (cu/ensure-user! user)"
https://api.github.com/repos/jepsen-io/jepsen/pulls/416,325400789,"@@ -80,13 +80,15 @@   ""Downloads a string URL and returns the filename as a string. Skips if the   file already exists.""   ([url]-   (wget! url false))-  ([url force?]+   (wget! url std-wget-opts false))+  ([url opts]+   (wget! url opts false))+  ([url opts force?]"
https://api.github.com/repos/jepsen-io/jepsen/pulls/444,388343491,"@@ -24,15 +23,21 @@ RUN wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein     chmod +x /usr/bin/lein && \     lein self-install +ARG uid+ARG gid++RUN groupadd -g $gid kyle \"
https://api.github.com/repos/jepsen-io/jepsen/pulls/452,405480085,"@@ -35,6 +45,8 @@      :minority      - Chooses a random minority of nodes      :majority      - Chooses a random majority of nodes      :primaries     - All nodes which we think are primaries+     :follower      - Chooses a single random node that we don't think is primary+     :followers     - Chooses a random, non-empty subset of nodes we don't think are primaries"
https://api.github.com/repos/jepsen-io/jepsen/pulls/453,410348359,"@@ -138,35 +138,50 @@     (teardown! [_ test]       (reset-time! test)))) -(defn reset-gen-  ""Randomized reset generator. Performs resets on random subsets of the tests'+(defn reset-gen-select"
https://api.github.com/repos/jepsen-io/jepsen/pulls/455,412041952,"@@ -46,7 +46,8 @@                      nil                      (catch Exception e                        (warn e ""Error opening client"")-                       (set (.client this) nil)"
https://api.github.com/repos/jepsen-io/jepsen/pulls/460,421486470,"@@ -360,6 +360,35 @@  (def ssh ""A remote that does things via clj-ssh."" (SSHRemote. nil)) +(defn- undo-command-changes+  ""The `wrap-sudo` and `wrap-cd` functions adds stuff in front of commands which+  makes docker crap itself, this function undoes that.""+  [cmd]+  (-> cmd+      (str/replace-first ""sudo -S -u root"" """")+      (str/replace-first ""cd /; "" """")))"
https://api.github.com/repos/jepsen-io/jepsen/pulls/464,430401468,"@@ -1,122 +1,146 @@ (ns jepsen.ignite.bank-  ""Simulates transfers between bank accounts""-  (:refer-clojure :exclude [test])-    (:require [clojure.tools.logging   :refer :all]-              [jepsen [ignite          :as ignite]-                      [checker         :as checker]-                      [client          :as client]-                      [nemesis         :as nemesis]-                      [generator       :as gen]]-              [clojure.core.reducers :as r]-              [jepsen.checker.timeline :as timeline]-              [knossos.model           :as model]-              [knossos.op :as op])-    (:import client.Bank-              (org.apache.ignite.transactions TransactionTimeoutException)-              (org.apache.ignite.cache CacheMode CacheAtomicityMode CacheWriteSynchronizationMode)))+    ""Simulates transfers between bank accounts""+    (:refer-clojure :exclude [test])+    (:require [clojure.tools.logging :refer :all]+      [jepsen [ignite :as ignite]+       [checker :as checker]+       [client :as client]+       [nemesis :as nemesis]+       [generator :as gen]]+      [clojure.core.reducers :as r]+      [jepsen.checker.timeline :as timeline]+      [knossos.model :as model]+      [knossos.op :as op])+    (:import (org.apache.ignite Ignition)+      (org.apache.ignite.transactions TransactionConcurrency TransactionIsolation)+      (org.apache.ignite.transactions TransactionTimeoutException)+      (org.apache.ignite.cache CacheMode CacheAtomicityMode CacheWriteSynchronizationMode))) -(def accounts 10)+(def n 10) (def account-balance 100) +(def cache-name ""ACCOUNTS"")++(defn read-values [cache n]+      (vals (.getAll cache (set (range 0 n)))))++(defn read-values-tr [ignite cache n transaction-concurrency transaction-isolation]+      (with-open [tr (.txStart (.transactions ignite) transaction-concurrency transaction-isolation)]+                 (let [values (read-values cache n)]+                      (.commit tr)+                      values)))+ (defn bank-checker-  ""Balances must all be non-negative and sum to the model's total.""-  []-  (reify checker/Checker-    (check [this test history opts]-      (let [bad-reads (->> history-                        (r/filter op/ok?)-                        (r/filter #(= :read (:f %)))-                        (r/map (fn [op]-                          (let [balances (:value op)]-                            (cond-                              (not= accounts (count (keys balances)))-                              {:type :wrong-n-                               :expected accounts-                               :found    (count (keys balances))-                               :op       op}+      ""Balances must all be non-negative and sum to the model's total."""
https://api.github.com/repos/jepsen-io/jepsen/pulls/476,454019434,"@@ -0,0 +1,175 @@+(ns jepsen.generator.test+  (:require [jepsen.generator :as gen]))++(gen/init!)"
https://api.github.com/repos/jepsen-io/jepsen/pulls/478,456552045,"@@ -1,4 +1,4 @@-(defproject jepsen ""0.2.1-SNAPSHOT""+(defproject jepsen ""0.2.2-SNAPSHOT"""
https://api.github.com/repos/jepsen-io/jepsen/pulls/522,764536499,"@@ -112,21 +118,23 @@          opts          {:name    ""zookeeper""           :os      debian/os-          :db      (db ""3.4.9-3+deb9u1"")+          :db      (db ""3.4.13-2"")           :client  (client nil nil)           :nemesis (nemesis/partition-random-halves)           :generator (->> (gen/mix [r w cas])                           (gen/stagger 1)                           (gen/nemesis-                            (gen/seq (cycle [(gen/sleep 5)-                                             {:type :info, :f :start}-                                             (gen/sleep 5)-                                             {:type :info, :f :stop}])))+                           (cycle [(gen/sleep 5)+                                   {:type :info, :f :start}+                                   (gen/sleep 5)+                                   {:type :info, :f :stop}]))                           (gen/time-limit 15))           :model   (model/cas-register 0)           :checker (checker/compose-                     {:perf   (checker/perf)-                      :linear checker/linearizable})}))+                    {:perf   (checker/perf)+                     :linear (checker/linearizable +                              {:model (model/cas-register)+                               :algorithm :linear})})}))"
https://api.github.com/repos/jepsen-io/jepsen/pulls/550,953174563,"@@ -46,75 +48,118 @@  (def tc ""/sbin/tc"") +(defn net-dev"
https://api.github.com/repos/jepsen-io/jepsen/pulls/551,972143227,"@@ -30,10 +30,13 @@             opts))))  (defn file?+  ""Is `filename` a regular file that exists?""   [filename]-  (throw (RuntimeException. ""Use exists? instead; file? will be used to tell if-                            something is a file, as opposed to a directory or-                            link."")))+  (try++   (exec :test :-f filename)+   true+   (catch [:exit 1] _+     false)))"
https://api.github.com/repos/jepsen-io/maelstrom/pulls/7,588976607,"@@ -0,0 +1,106 @@+;;#!/usr/bin/env bb++(ns maelstrom.echo+  (:gen-class)+  (:require+    [cheshire.core :as json]+    [clojure.java.io :as io]))+++;;;;;;;;;;;;;;;;;;; Util functions ;;;;;;;;;;;;;;;;;;;++;;;;;; Input pre-processing functions ;;;;;;++(defn- read-file+  ""Read a file into a vector of strings.+  This is used for local testing in repl""+  [f]+  (with-open [rdr (io/reader (io/input-stream f))]+    (reduce conj [] (line-seq rdr))))+++(defn- process-stdin+  ""Read lines from the stdin and calls the handler""+  [handler]+  (doseq [line (line-seq (java.io.BufferedReader. *in*))]+    (handler line)))+++(defn- parse-json+  ""Parse the received input as json""+  [input]+  (try+    (json/parse-string input true)+    (catch Exception e+      nil)))+++;;;;;; Output Generating functions ;;;;;;++(defn- generate-json+  ""Generate json string from input""+  [input]+  (json/generate-string input))+++(defn- printerr+  ""Print the received input to stderr""+  [input]+  (binding [*out* *err*]+    (println input)))+++(defn- printout+  ""Print the received input to stdout""+  [input]+  (println input))+++(defn reply+  ([src dest body]+   {:src src+    :dest dest+    :body body}))+++(def node-id (atom """"))+++(defn- process-request+  [input]+  (let [body (:body input)+        r-body {:msg_id (rand-int 100)"
https://api.github.com/repos/jepsen-io/maelstrom/pulls/19,654380416,"@@ -88,7 +88,7 @@ like so: {   ""type"":     ""init"",   ""msg_id"":   1,-  ""node_id"":  ""n3"",+  ""node_id"":  ""n1"","
https://api.github.com/repos/jepsen-io/maelstrom/pulls/36,1118851168,"@@ -0,0 +1,79 @@+(ns maelstrom.workload.lock+  ""A distributed lock workload: sends lock and unlock messages."""
https://api.github.com/repos/jepsen-io/maelstrom/pulls/49,1123916359,"@@ -61,6 +58,19 @@ func (kv *KV) Read(ctx context.Context, key string) (any, error) { 	} } +// ReadStruct reads the value of a key in the key/value store and store it in the value pointed by v.+// Returns an *RPCError error with a KeyDoesNotExist code if the key does not exist.+func (kv *KV) ReadStruct(ctx context.Context, key string, v any) error {"
https://api.github.com/repos/jeremykross/konstellate/pulls/8,285786192,"@@ -22,6 +22,12 @@ Once your application is created you can clone it in a new workspace and make ad  ![konstellate-kustomize](https://user-images.githubusercontent.com/3777243/57794412-96d1ec00-7711-11e9-8796-7dddefa30532.gif) +## How to run konstellate on your machine?++Install Clojure on your machine. If you are using Mac it is as simple as running `brew install clojure`."
https://api.github.com/repos/jonase/eastwood/pulls/196,61417183,"@@ -286,3 +286,14 @@   '([coll obj & {:keys [from to many write-concern]                  :or {from :clojure to :clojure many false}}])   :reason ""somnium.congomongo/insert!  uses metadata to override the default value of :arglists for documentation purposes.  This configuration tells Eastwood what the actual :arglists is, i.e. would have been without that.""})++;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+;; Configs to disable warnings in slingshot, version 0.12.2+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;++(disable-warning+ {:linter :suspicious-expression+  :for-macro 'clojure.core/and+  :if-inside-macroexpansion-of #{'slingshot.slingshot/try+}+  :within-depth 10"
https://api.github.com/repos/jonase/eastwood/pulls/215,138430364,"@@ -32,3 +32,8 @@   :within-depth 3   :reason ""when-some with an empty body is warned about, so warning about let with an empty body in its macroexpansion is redundant.""}) +(disable-warning+ {:linter :constant-test+  :if-inside-macroexpansion-of #{'clojure.core/cond-> 'clojure.core/cond->>}"
https://api.github.com/repos/jonase/eastwood/pulls/285,219179373,"@@ -84,39 +83,62 @@ http://dev.clojure.org/jira/browse/CLJ-1445""             (orig-dispatch o)))         (pp/pprint obj))))) +(defn- missing-eastwood-dependency? [project]+  (not (some->> project+                :dependencies+                (some (comp (partial = 'jonase/eastwood) first)))))++(defn- add-eastwood [project]+  (let [eastwood-dep (->> project+                          :plugins+                          (filter (comp (partial = 'jonase/eastwood) first))+                          first)]+    (update project :dependencies (comp vec conj) eastwood-dep)))++;; The rationale for this function is as follows:+;; In order for this code to be run, eastwood has to be present in some+;; :plugin - vector, either in a `project.clj` or in `~/.lein/profiles.clj`.+;; The Eastwood readme does not mandate that you also put eastwood in the+;; `:dependencies` vector if you put it in a `~/.lein/profiles.clj` `:plugin`+;; vector. If this is the case, we need to manually add it here:+;; So being here, we know at least htat we have eastwood defined as a plugin."
https://api.github.com/repos/jonase/eastwood/pulls/292,222775258,"@@ -0,0 +1,31 @@+(ns eastwood.linters.implicit-dependencies+  (:require [eastwood.copieddeps.dep1.clojure.tools.analyzer.ast :as ast]+            [eastwood.copieddeps.dep9.clojure.tools.namespace.parse :as ns-parse]+            [eastwood.util :as util]))+++(defn var->ns-symbol [var]+  (let [^clojure.lang.Namespace ns (-> var meta :ns)]"
https://api.github.com/repos/jonase/eastwood/pulls/350,559240275,"@@ -460,10 +460,13 @@ Return value:                    :rethrow-exceptions? false})  (defn last-options-map-adjustments [opts reporter]-  (let [opts (merge default-opts opts)+  (let [{:keys [namespaces] :as opts} (merge default-opts opts)+        distinct* (fn [x] ;; distinct but keeps original coll type+                    (->> (into (empty x) (distinct) x)"
https://api.github.com/repos/jonase/eastwood/pulls/352,562196804,"@@ -5,8 +5,7 @@   (defn var->ns-symbol [var]-  (let [^clojure.lang.Namespace ns (-> var meta :ns)]-    (.-name ns)))+  (symbol (namespace (symbol var))))"
https://api.github.com/repos/jonase/eastwood/pulls/359,602733959,"@@ -582,9 +583,23 @@               :raw-forms  raw-forms})            (let [a (analyze mform env opts)                  frm (emit-form a)-                 result (try (eval frm) ;; eval the emitted form rather than directly the form to avoid double macroexpansion-                             (catch Exception e-                               (handle-evaluation-exception (ExceptionThrown. e a))))]+                 result (try"
https://api.github.com/repos/jonase/eastwood/pulls/360,602788386,"@@ -2346,6 +2346,28 @@ remains the same throughout the file.  This is a common convention followed by most Clojure source code, and required by several other Clojure development tools. +## Ignored faults++If there are specific instances of linter faults that you need to supress+(e.g. for making a CI build pass), you can use the `:ignored-faults` option.++It has the following shape:++```clj+;;linter-name            ns-name            target+;;---                    ---                ---+{:implicit-dependencies {'example.namespace {:line 3 :column 2}} + :unused-ret-vals       {'another.namespace true}}+```++`{:line 3 :column 2}` matches a given linter (within a specific ns)"
https://api.github.com/repos/jonase/eastwood/pulls/365,605556669,"@@ -312,6 +312,8 @@ Currently only a `:naive` form of parallelism is supported, which just uses `pmap` to run the linters over your namespaces. You can specify `:parallelism?` in your options map, currently `:none` and `:naive` are valid options. +> :parallelism? performs AST analysis/evaluation in parallel and might cause issues."
https://api.github.com/repos/jonase/eastwood/pulls/372,621003199,"@@ -975,12 +979,7 @@ StringWriter.""            w linter (format "" for invocation of macro '%s'"" macro-symbol)            suppress-conditions opt))) -      :constant-test-      (let [suppress-conditions (get-in opt [:warning-enable-config linter])]"
https://api.github.com/repos/jonase/eastwood/pulls/371,621006293,"@@ -68,3 +68,11 @@    :function-symbol 'clojure.core/eduction    :arglists-for-linting '([& xform])    :reason ""eduction takes a sequence of transducer with a collection as the last item""})++(disable-warning+ {:linter :suspicious-test+  :if-inside-macroexpansion-of #{'clojure.test/are}+  ;; only omit the warning if :suspicious-test failed due to a `true` value:+  :qualifier true"
https://api.github.com/repos/jonase/eastwood/pulls/379,626001532,"@@ -90,15 +90,134 @@ jobs:       - run:           name: Prevent any form of caching, for the next step           command:  git clean -fdx-                  +       - run:           name: Run test suite that exercises 3rd-party libs           command: lein with-profile -user,-dev,+test,+warn-on-reflection,+test-3rd-party-deps,+<< parameters.clojure-version >> do clean, test ++  build:+    docker:+      # specify the version you desire here+      - image: circleci/clojure:openjdk-8-lein-2.9.1++      # Specify service dependencies here if necessary+      # CircleCI maintains a library of pre-built images+      # documented at https://circleci.com/docs/2.0/circleci-images/+      # - image: circleci/postgres:9.4++    working_directory: ~/repo++    environment:+      LEIN_ROOT: ""true""+      # Customize the JVM maximum heap limit+      JVM_OPTS: -Xmx3200m++    steps:+      - checkout++      # Download and cache dependencies+      - restore_cache:+          keys:+            - v1-dependencies-{{ checksum ""project.clj"" }}+            # fallback to using the latest cache if no exact match is found+            - v1-dependencies-++      - run: lein deps++      - save_cache:+          paths:+            - ~/.m2+          key: v1-dependencies-{{ checksum ""project.clj"" }}++      - run:+          name: Ensure No Reflection Warnings+          command: ""! lein check 2>&1 | grep 'Reflection warning'""++      # run tests!+      - run: lein do clean, test++  deploy:+    docker:+      # specify the version you desire here+      - image: circleci/clojure:openjdk-8-lein-2.9.1+      # Specify service dependencies here if necessary+      # CircleCI maintains a library of pre-built images+      # documented at https://circleci.com/docs/2.0/circleci-images/+      # - image: circleci/postgres:9.4++    working_directory: ~/repo++    environment:+      LEIN_ROOT: ""true""+      # Customize the JVM maximum heap limit+      JVM_OPTS: -Xmx3200m++    steps:+      - checkout++      # Download and cache dependencies+      - restore_cache:+          keys:+            - v1-dependencies-{{ checksum ""project.clj"" }}+            # fallback to using the latest cache if no exact match is found+            - v1-dependencies-++      # Download and cache dependencies+      - restore_cache:+          keys:+            - v1-dependencies-{{ checksum ""project.clj"" }}+            # fallback to using the latest cache if no exact match is found+            - v1-dependencies-++      - run:+         name: Install babashka+         command: |+           curl -s https://raw.githubusercontent.com/borkdude/babashka/master/install -o install.sh+           sudo bash install.sh+           rm install.sh+      - run:+          name: Install deployment-script+          command: |+            curl -s https://raw.githubusercontent.com/clj-commons/infra/main/deployment/circle-maybe-deploy.bb -o circle-maybe-deploy.bb+            chmod a+x circle-maybe-deploy.bb++      - run: lein deps++      - run:+          name: Setup GPG signing key+          command: |+            GNUPGHOME=""$HOME/.gnupg""+            export GNUPGHOME+            mkdir -p ""$GNUPGHOME""+            chmod 0700 ""$GNUPGHOME""++              echo ""$GPG_KEY"" \+               | base64 --decode --ignore-garbage \+               | gpg --batch --allow-secret-key-import --import++               gpg --keyid-format LONG --list-secret-keys++      - save_cache:+          paths:+            - ~/.m2+          key: v1-dependencies-{{ checksum ""project.clj"" }}+      - run:+         name: Deploy+         command: |+           GPG_TTY=$(tty)+           export EVAL_IN_LEININGEN=true+           export GPG_TTY+           echo $GPG_TTY+           ./circle-maybe-deploy.bb lein deploy clojars"
https://api.github.com/repos/jonase/eastwood/pulls/426,780699100,"@@ -61,15 +61,18 @@                                                   [com.taoensso/tufte ""2.2.0""]                                                   [manifold ""0.1.9-alpha4""]                                                   [metosin/spec-tools ""0.10.5""]-                                                  [org.clojure/core.async ""1.5.644""]]}-             :clj-kondo {:dependencies [[clj-kondo ""2021.12.01""]]}-             :antq {:plugins [[com.github.liquidz/antq ""1.3.0""]]}+                                                  [org.clojure/core.async ""1.5.648""]]}+             :clj-kondo {:dependencies [[clj-kondo ""2021.12.19""]]}+             :antq {:plugins [[com.github.liquidz/antq ""1.3.1""]]+                    :antq {:exclude [""nrepl/nrepl"" ""org.clojure/clojure""]}}              :1.7 {:dependencies [[org.clojure/clojure ""1.7.0""]]}              :1.8 {:dependencies [[org.clojure/clojure ""1.8.0""]]}              :1.9 {:dependencies [[org.clojure/clojure ""1.9.0""]]}              :1.10.1 {:dependencies [[org.clojure/clojure ""1.10.1""]]}              :1.10.2 {:dependencies [[org.clojure/clojure ""1.10.2""]]}              :1.10.3 {:dependencies [[org.clojure/clojure ""1.10.3""]]}+             ;; XXX for the lint CI step, each project needs to be injected the clojure version in question"
https://api.github.com/repos/jonase/eastwood/pulls/434,856310325,"@@ -1010,9 +1010,8 @@ Eastwood has other forms of effective, safe parallelism now. Falling back to seq        -main))    ([& opts]-   (if (and-        (= 1 (count opts))-        (string? (first opts)))-     (eastwood-from-cmdline (edn/read-string (first opts)))-     (let [parsed (->> opts (interpose "" "") (apply str) edn/read-string)]-       (eastwood-from-cmdline parsed)))))+   (let [reducer #(merge %1 (if (string? %2)"
https://api.github.com/repos/korma/Korma/pulls/142,3704942,"@@ -0,0 +1,181 @@+(ns korma.test.connected+  (:require [clojure.string :as string]+            [criterium.core :as cr])+  (:use clojure.test+        korma.config+        korma.core+        korma.db))++(defn underscores->dashes [n]+  (-> n string/lower-case (.replaceAll ""_"" ""-"") keyword))++(defn dashes->underscores [n]+  (-> n name (.replaceAll ""-"" ""_"")))++(def dash-naming-strategy+  ""naming strategy that converts clojure-style names (with dashes) to sql-style names (with udnerscores)""+  {:keys underscores->dashes :fields dashes->underscores})++(defn mem-db []+  (create-db (h2 {:db ""mem:korma_test""+                  :naming dash-naming-strategy})))++(defmacro with-delimiters [& body]+  `(let [delimiters# (:delimiters @options)]+     (try+       (set-delimiters ""\"""" ""\"""")+       ~@body+       (finally+         (set-delimiters delimiters#)))))++(defmacro with-naming [strategy & body]+  `(let [naming# (:naming @options)]+     (try+       (set-naming ~strategy)+       ~@body+       (finally+         (set-naming naming#)))))++(declare user address state)++(defentity user+  (table :users)+  (has-many address {:fk :user-id})+  (entity-fields+   :name :age)++  (transform+   (partial+    map+    #(update-in % [:address] (partial sort-by :id)))))++(defentity address+  (belongs-to user {:fk :user-id})+  (belongs-to state)+  +  (entity-fields+   :number :street :city :zip))++(defentity state+  (entity-fields+   :name))++(def initial-data+  {:state+   [{:id ""CA"" :name ""California""}+    {:id ""PA"" :name ""Pennsylvania""}]+   :user []+   :address []})++(def schema+  [""drop table if exists \""state\"";""+   ""create table \""state\"" (\""id\"" varchar(20), \""name\"" varchar(100));""+   ""drop table if exists \""users\"";""+   ""create table \""users\"" (\""id\"" integer auto_increment primary key, \""name\"" varchar(100), \""age\"" integer);""+   ""drop table if exists \""address\"";""+   ""create table \""address\"" (\""id\"" integer auto_increment primary key, \""user_id\"" integer , \""state_id\"" varchar(20), \""number\"" varchar(20), \""street\"" varchar(200), \""city\"" varchar(200), \""zip\"" varchar(10), foreign key (\""user_id\"") references \""users\""(\""id\""), foreign key (\""state_id\"") references \""state\""(\""id\""));""])++(defn- random-string []+  (str (java.util.UUID/randomUUID)))++(defn populate [num-users]"
https://api.github.com/repos/korma/Korma/pulls/148,4161482,"@@ -15,7 +15,9 @@ ;; Query types ;;***************************************************** -(defn empty-query [ent]+(defn empty-query+  ""Given an entity or a table name (keyword or string) return a query map."""
https://api.github.com/repos/korma/Korma/pulls/167,6314349,"@@ -16,9 +17,15 @@           :fields identity}          strategy)) -(defn extract-options [{:keys [naming delimiters subprotocol]}]+(defn- ->alias-delimiter [alias-delimiter]+  (if alias-delimiter"
https://api.github.com/repos/korma/Korma/pulls/181,6932845,"@@ -693,9 +693,14 @@   (let [table (if (:alias rel)                 [(:table ent) (:alias ent)]                 (:table ent))-        query (join query table (= (:pk rel) (:fk rel)))]-    (sub-query query ent body-fn)))-+        fk-key (:fk-key rel)+        pk (get-in query [:ent :pk])]+    (post-query query +                (partial map +                         #(assoc % (keyword (:name ent))"
https://api.github.com/repos/korma/Korma/pulls/190,7976128,"@@ -36,19 +36,21 @@          (merge ~'this-query ~m)))))  (defn select* -  ""Create an empty select query. Ent can either be an entity defined by defentity,+  ""Create a select query with fields provided in Ent.  If fields are not provided,+  create an empty select query. Ent can either be an entity defined by defentity,   or a string of the table name""   [ent]-  (make-query ent {:type :select-                   :fields [::*]-                   :from [(:ent this-query)]-                   :modifiers []-                   :joins []-                   :where []-                   :order []-                   :aliases #{}-                   :group []-                   :results :results}))+  (let [default-fields (not-empty (:fields ent))]"
https://api.github.com/repos/korma/Korma/pulls/241,14663436,"@@ -241,31 +240,40 @@       (jdbc/print-sql-exception e)))   (throw e)) -(defn- exec-sql [{:keys [results sql-str params]}]-  (try-    (case results-      :results (jdbc/with-query-results rs (apply vector sql-str params)-                 (vec rs))-      :keys (jdbc/do-prepared-return-keys sql-str params)-      (jdbc/do-prepared sql-str params))-    (catch Exception e-      (handle-exception e sql-str params))))+(defn- query-params [sql-str params]+  (let [sql-vec (if (vector? sql-str)+                  sql-str+                  [sql-str])]+    (vec (concat sql-vec params))))++(defn- ->row-fn [f]+  (fn [row]+    (into {} (for [[k v] row]+               [(keyword (f (name k))) v])))) -(defn- ->naming-strategy [{:keys [keys fields]}]-  {:keyword keys-   :entity fields})+(defn- exec-sql [{:keys [results sql-str params options]}]+  (let [{:keys [keys fields]} (:naming (or options @conf/options))]+    (try+      (case results+        :results (jdbc/query *current-conn*+                             (query-params sql-str params)+                             :row-fn (->row-fn fields)+                             :identifiers keys)+        :keys (jdbc/db-do-prepared-return-keys *current-conn* sql-str params)+        (jdbc/db-do-prepared *current-conn* sql-str params))+      (catch Exception e+        (handle-exception e sql-str params)))))  (defmacro with-db   ""Execute all queries within the body using the given db spec""   [db & body]-  `(binding [*current-db* ~db]-     (jdbc/with-connection (korma.db/get-connection ~db)+  `(jdbc/with-db-connection [conn# (korma.db/get-connection ~db)]+     (binding [*current-db* ~db+               *current-conn* conn#]        ~@body))) -(defn do-query [{:keys [db options] :as query}]-  (let [options (or options @conf/options)]-    (jdbc/with-naming-strategy (->naming-strategy (:naming options))-      (if (jdbc/find-connection)-        (exec-sql query)-        (with-db (or db @_default)-          (exec-sql query))))))+(defn do-query [{:keys [db] :as query}]+  (if *current-conn*"
https://api.github.com/repos/korma/Korma/pulls/301,31316184,"@@ -548,17 +548,17 @@    :rpk (raw (eng/prefix child (:pk child)))    :join-table join-table}) -(defn- get-db-keys [parent child]-  (let [fk-key (default-fk-name parent)]+(defn- get-db-keys [parent child {:keys [fk]}]"
https://api.github.com/repos/korma/Korma/pulls/302,31390051,"@@ -548,8 +548,8 @@    :rpk (raw (eng/prefix child (:pk child)))    :join-table join-table}) -(defn- get-db-keys [parent child]-  (let [fk-key (default-fk-name parent)]+(defn- get-db-keys [parent child {:keys [fk]}]"
https://api.github.com/repos/korma/Korma/pulls/303,31589469,"@@ -487,11 +487,20 @@      (= *exec-mode* :query) query      (= *exec-mode* :dry-run) (do                                 (println ""dry run ::"" sql ""::"" (vec params))-                                (let [result-keys (conj (->> query :ent :rel vals-                                                             (map deref)-                                                             (filter (comp #{:belongs-to} :rel-type))-                                                             (map :fk-key))-                                                        (-> query :ent :pk))+                                (let [fk-key (->> query :ent :rel vals+                                                  (map deref)+                                                  (filter (comp #{:belongs-to} :rel-type))+                                                  (map :fk-key))+                                      pk-key (-> query :ent :pk)+                                      result-keys (concat"
https://api.github.com/repos/korma/Korma/pulls/374,170945181,"@@ -1,4 +1,4 @@-(defproject korma ""0.4.3"""
https://api.github.com/repos/krisajenkins/yesql/pulls/64,24659898,"@@ -126,7 +128,7 @@                                                                                       required-args))]                                                              {:keys as-vec}                                                              {})-                                                global-args {:keys ['connection]}]+                                                global-args {:keys ['connection 'identifiers 'row-fn 'result-set-fn]}]"
https://api.github.com/repos/LightTable/LightTable/pulls/1055,8814172,"@@ -1666,8 +1666,8 @@ <h2 id=""chaining"">Chaining</h2> var lyrics = [   {line : 1, words : ""I'm a lumberjack and I'm okay""},   {line : 2, words : ""I sleep all night and I work all day""},-  {line : 3, words : ""He's a lumberjack and he's okay""},-  {line : 4, words : ""He sleeps all night and he works all day""}+  {line : 3, words : ""They's a lumberjack and they's okay""},+  {line : 4, words : ""They sleeps all night and they works all day""}"
https://api.github.com/repos/LightTable/LightTable/pulls/1102,8923622,"@@ -215,3 +215,9 @@                                                                 (js/parseInt l)                                                                 l))})                           (editor/center-cursor cur))))})++(cmd/command {:command :fold-code"
https://api.github.com/repos/LightTable/LightTable/pulls/1114,8953766,"@@ -28,6 +28,14 @@ (def plugins-url ""http://plugins.lighttable.com"") (def ^:dynamic *plugin-dir* nil) +(defn plugin-dir [name]+  (let [lt-plugin (files/join plugins-dir name)+        user-plugin (files/join plugins-dir name)"
https://api.github.com/repos/LightTable/LightTable/pulls/1138,9124881,"@@ -567,19 +586,32 @@  ;(dom/trigger (input) :click) (behavior ::sidebar-menu-          :triggers #{:menu!}-          :reaction (fn [this e]-                      (-> (menu [{:label ""Add folder""-                                  :click (fn [] (cmd/exec! :workspace.add-folder))}-                                 {:label ""Add file""-                                  :click (fn [] (cmd/exec! :workspace.add-file))}-                                 {:label ""Open recent workspace""-                                  :click (fn [] (cmd/exec! :workspace.show-recents))}-                                 {:type ""separator""}-                                 {:label ""Clear workspace""-                                  :click (fn [] (object/raise tree :clear!))}])-                          (show-menu (.-clientX e) (.-clientY e)))-                      ))+          :triggers #{:menu-items}+          :reaction (fn [this items]+                      (conj items+                            {:label ""Add folder""+                             :click (fn [] (cmd/exec! :workspace.add-folder))}+                            {:label ""Add file""+                             :click (fn [] (cmd/exec! :workspace.add-file))}+                            {:label ""Open recent workspace""+                             :click (fn [] (cmd/exec! :workspace.show-recents))}+                            {:type ""separator""}+                            {:label ""Clear workspace""+                             :click (fn [] (object/raise tree :clear!))})))++(behavior ::recent-menu+          :triggers #{:menu-items}+          :reaction (fn [this items]+                      (conj items+                            {:label ""Delete Workspace""+                             :click (fn [] (object/raise this :delete!))})))++(behavior ::sidebar-recents-menu+          :triggers #{:recents.menu!}+          :reaction (fn [this r e]+                      (-> (menu [{:label ""Remove""+                                  :click (fn [] (object/raise this :recent.remove! r))}])+                          (show-menu (.-clientX e) (.-clientY e))))) "
https://api.github.com/repos/LightTable/LightTable/pulls/1197,9211915,"@@ -47,13 +52,18 @@ (behavior ::repeat-pair           :triggers #{:repeat-pair!}           :reaction (fn [this ch]-                      (cond-                       (= ch (get-char this 1)) (move-cursor this 1)-                       (re-seq word-char (get-char this 1)) (editor/insert-at-cursor this ch)-                       (re-seq word-char (get-char this -1)) (editor/insert-at-cursor this ch)-                       :else (do-                               (editor/insert-at-cursor this (str ch ch))-                               (move-cursor this -1)))))+                      (let [ed (pool/last-active)"
https://api.github.com/repos/LightTable/LightTable/pulls/1195,9212033,"@@ -557,9 +557,13 @@  (cmd/command {:command :tabs.goto               :hidden true-              :desc ""Tab: Goto tab #""+              :desc ""Tab: Goto tab #; 8 for last tab"""
https://api.github.com/repos/LightTable/LightTable/pulls/1208,9281794,"@@ -63,12 +63,26 @@              (set! available-drives (into #{} ds)))            ))) +(defn basename+  ([path] (.basename fpath path))+  ([path ext] (.basename fpath path ext)))  (defn get-roots []   (if (= separator ""\\"")     available-drives     #{""/""})) +(defn get-file-parts [path]+  (let [filename (basename path)+        file-parts (string/split filename #""\."")]+    (loop [parts file-parts+           acc []]+      (if (empty? parts)+        acc+        (recur (rest parts) (conj acc (string/join ""."" parts)))))))++(get-file-parts ""index.cljs.hl"")"
https://api.github.com/repos/LightTable/LightTable/pulls/1259,9570879,"@@ -0,0 +1,29 @@+#!/bin/sh+user=$(whoami)+home='/home/'+userDir=$home$user+lightDir='/LightTable'+lightDir=$userDir$lightDir+if [ ! -d $lightDir ]; then+	echo ""FAILED: cannot create icon""+	echo ""LightTable must be in the current home directory""	+	exit 0	+fi+deskText='[Desktop Entry]\nName=LightTable\nExec=/home/'"
https://api.github.com/repos/LightTable/LightTable/pulls/1310,10001060,"@@ -10,11 +10,17 @@   (:require-macros [lt.macros :refer [behavior]]))  (defn rebuild-argv [argstr]-  (-> (subs argstr (.indexOf argstr ""<d><d>dir""))-      (string/replace ""<d>"" ""-"")-      (string/replace ""<s>"" "" "")-      (string/split "" "")-      (to-array)))+  (let [likely-args (count (re-seq #""--"" argstr))+        threshold 4"
https://api.github.com/repos/LightTable/LightTable/pulls/1291,10001156,"@@ -1,6 +1,15 @@ # Initial setup -First install or update [leiningen](http://leiningen.org/). Then we have to do some juggling (unless you fancy building node-webkit from source).+First install or update [leiningen](http://leiningen.org/).++1. Download the lein script. For Windows, download lein.bat.+2. Place it on your $PATH where your shell can find it (eg. ~/bin).+3. Set it to be an executable (chmod a+x ~/bin/lein).+4. Run the Lein script (eg. ""./lein"" or ""sh lein"") without quotes.++You can check your package manager. However, be sure you get version 2.x. Windows users can use this installer."
https://api.github.com/repos/LightTable/LightTable/pulls/1340,10310942,"@@ -52,7 +52,8 @@                   :triggers #{:updated :refresh}                   :debounce 150                   :reaction (fn [ws]-                              (populate-bg sidebar-navigate {:pattern (.-source files/ignore-pattern)+                              (populate-bg sidebar-navigate {:lim (dec (:file-limit @sidebar-navigate))"
https://api.github.com/repos/LightTable/LightTable/pulls/1370,10714623,"@@ -248,14 +248,26 @@ ;; Editor commands ;;**************************************************** +;; See https://github.com/marijnh/CodeMirror/blob/master/addon/comment/comment.js for options+(def line-comment-options {})++(behavior ::line-comment-options+          :triggers #{:object.instant}+          :type :user+          :desc ""Editor: Set options for line commenting""+          :params [{:label ""map""+                    :example ""{:indent true}""}]+          :reaction (fn [this options]+                      (set! line-comment-options options)))"
https://api.github.com/repos/LightTable/LightTable/pulls/1605,16673011,"@@ -32,6 +33,7 @@ (defui console-ui [this]   [:ul.console]   :contextmenu (fn [e]+                 (object/assoc-in! this [:current-event] e)"
https://api.github.com/repos/LightTable/LightTable/pulls/1676,18809782,"@@ -23,6 +23,11 @@ (defn add-behavior [beh]"
https://api.github.com/repos/LightTable/LightTable/pulls/1689,19368911,"@@ -207,16 +207,18 @@ (behavior ::add-file!                   :triggers #{:add.file!}                   :reaction (fn [this f]-                              (add! this :files f)-                              (object/raise this :add f)-                              (object/raise this :updated)))+                              (when-not (some #{f} (:files (-> @this)))"
https://api.github.com/repos/LightTable/LightTable/pulls/1698,19838158,"@@ -24,11 +24,6 @@ (defn by-name [n]   (first (filter #(= n (:name @%)) (vals @cs)))) -(defn ->name [client]-  (if (map? client)-    (:name client)-    client))-"
https://api.github.com/repos/LightTable/LightTable/pulls/1467,20626700,"@@ -1,36 +1,90 @@ #!/usr/bin/env bash -# Check if lein is installed+# debugging:+# set -x+# stop on error:+# set -e++buildVer=0.7.1+ lein version >/dev/null 2>&1 || { echo >&2 ""Please install leiningen before running this script.""; exit 1; } if [ ""$(echo `lein version` | grep 'Leiningen 1.\|2.0')"" ]; then -	echo ""lein version must be 2.1 or above. Do a lein upgrade first""; exit 1;+    echo ""ERROR: lein version must be 2.1 or above. Do a 'lein upgrade' first"";+    exit 1;+fi++curlBinary=curl+which $curlBinary &> /dev/null+retCode=$?+if [ $retCode -ne 0 ]; then+    echo ""ERROR: $curlBinary not found. Please install $curlBinary before running this script.""+    exit $retCode+fi++# Use linux-specific directories not to break non-linux builds by any dumb coicidence.+deployDir=deploy+binariesDir=binaries++echo ""INFO: Fetching binaries""++bits_cpu=$(getconf LONG_BIT)  # bits_cpu can be 32 or 64+bits_tarball=${bits_cpu//32}  # bits_tarball can be 64 or undefined++node_webkit_tarball=$binariesDir/node-webkit/LightTableLinux$bits_cpu-$buildVer.tar.gz+if [ ! -e ""$node_webkit_tarball"" ]; then+    curl -o $node_webkit_tarball \+	https://d35ac8ww5dfjyg.cloudfront.net/playground/bins/$buildVer/LightTableLinux$bits_tarball.tar.gz++    # Remove binaries from the previous $buildVer+    rm -rf $deployDir+fi++node_webkit_tarball_sha1=$node_webkit_tarball.sha1+sha1sum --check $node_webkit_tarball_sha1+retCode=$?+if [ $retCode -ne 0 ]; then+    if [ ! -f $node_webkit_tarball_sha1 ]; then+        echo ""ERROR: File not found: $node_webkit_tarball_sha1""+        echo ""INFO:  Create sha1 file using:""+        echo ""    sha1sum $node_webkit_tarball > $node_webkit_tarball_sha1""+    fi+    exit $retCode fi -which curl &> /dev/null-if [ $? -ne 0 ]; then-	echo ""Please install curl before running this.""-	exit+tar -xzf $node_webkit_tarball++# $deployDir doesn't exist during 1st build of the current $buildVer+if [ -e $deployDir ]; then"
https://api.github.com/repos/LightTable/LightTable/pulls/1756,23407612,"@@ -0,0 +1,64 @@+#!/usr/bin/env bash+set -e++# Build LightTable app and CLI and place in builds/.+# Specify $VERSION to override default build version.+# This script primarily installs dependencies and sets up+# the app before calling build-app.sh to build it.++# Check if lein is installed+lein version >/dev/null 2>&1 || { echo >&2 ""Please install leiningen before running this script.""; exit 1; }+if [ ""$(echo `lein version` | grep 'Leiningen \(1.\|2.0\)')"" ]; then+  echo ""lein version must be 2.1 or above. Do a lein upgrade first""; exit 1;+fi++# Check if npm is installed+npm --version >/dev/null 2>&1 || { echo >&2 ""Please install npm before running this script.""; exit 1; }++# Ensure we start in project root+cd ""$(dirname ""${BASH_SOURCE[0]}"")""; cd ..++# Ensure we have current version of atom-shell+pushd shell+  npm install -g grunt-cli"
https://api.github.com/repos/LightTable/LightTable/pulls/1957,38499019,"@@ -1 +1 @@-{""version"":""0.7.2"",""atom-shell"":""0.19.5""}+{""version"":""0.7.2"",""electron"":""0.19.5""}"
https://api.github.com/repos/LightTable/LightTable/pulls/1969,39115286,"@@ -110,4 +111,10 @@ if [ ""$1"" == ""--tarball"" ]; then   tar -zcvf $RELEASE_TARBALL $RELEASE_DIR fi +if [ ""$1"" == ""--zip"" ]; then+  pushd builds+  ""/cygdrive/c/Program Files/7-Zip/7z.exe"" a $RELEASE_ZIP ""$RELEASE/*"""
https://api.github.com/repos/LightTable/LightTable/pulls/1992,40055199,"@@ -411,42 +411,47 @@     (doseq [dep missing]       (discover-deps dep count-down)))) +(defn check-missing+  ""Check a plugins map for outdated or missing :dependencies and prompt+  to install missing ones""+  [deps]+  (when-let [missing? (missing-deps deps)]+    (popup/popup! {:header ""Some plugin dependencies are missing.""+                   :body [:div+                          [:span ""We found that the following plugin dependencies are missing: ""]+                          (for [{:keys [name version]} missing?]+                            [:div name "" "" version "" ""])+                          [:span ""Would you like us to install them?""]]+                   :buttons [{:label ""Cancel""}+                             {:label ""Install all""+                              :action (fn []+                                        (install-missing missing?))}]})))+ (defn available-plugins-  [& {:keys [ignore-missing]}]+  ""Return a map of plugins by plugin name based on what's read from filesystem""+  []   (let [ds (concat (files/dirs user-plugins-dir)                    (files/dirs plugins-dir)                    [settings/user-plugin-dir])         plugins (->> ds                      (map plugin-info)-                     (filterv identity))-        final (-> (reduce (fn [final p]-                            (if-let [cur (get final (:name p))]-                              ;;check if it's newer-                              (if (deploy/is-newer? (:version cur) (:version p))-                                (assoc! final (:name p) p)-                                final)-                              (assoc! final (:name p) p)))-                          (transient {})-                          plugins)-                  (persistent!))-        missing? (missing-deps final)]-    (when (and missing? (not ignore-missing))-      (popup/popup! {:header ""Some plugin dependencies are missing.""-                     :body [:div-                            [:span ""We found that the following plugin dependencies are missing: ""]-                            (for [{:keys [name version]} missing?]-                              [:div name "" "" version "" ""])-                            [:span ""Would you like us to install them?""]]-                     :buttons [{:label ""Cancel""}-                               {:label ""Install all""-                                :action (fn []-                                          (install-missing missing?))}]}))-    final))+                     (filterv identity))]+    (-> (reduce (fn [final p]+                  (if-let [cur (get final (:name p))]+                    ;;check if it's newer"
https://api.github.com/repos/LightTable/LightTable/pulls/2019,42251407,"@@ -148,20 +148,34 @@  (declare hinter) +(defn remove-long-completitions [hints]+  (filter #(< (.-length (.-completion %)) (:hint-limit @hinter)) hints))+ (def hinter (-> (scmd/filter-list {:items (fn []                                             (when-let [cur (pool/last-active)]                                               (let [token (-> @hinter :starting-token :string)]                                                 (distinct-completions-                                                 (if token-                                                   (remove #(= token (.-completion %))-                                                           (object/raise-reduce cur :hints+ [] token))-                                                   (object/raise-reduce cur :hints+ []))))))+                                                 (remove-long-completitions+                                                  (if token+                                                    (remove #(= token (.-completion %))+                                                            (object/raise-reduce cur :hints+ [] token))+                                                    (object/raise-reduce cur :hints+ [])))+                                                 ))))                                    :key text|completion})                 (object/add-tags [:hinter])))  (defn on-line-change [line ch]   (object/raise hinter :line-change line ch)) +(behavior ::set-hint-limit+          :triggers #{:object.instant}+          :type :user+          :desc ""Hinter: set maximum length of an autocomplete hint"""
https://api.github.com/repos/LightTable/LightTable/pulls/2046,45274700,"@@ -207,7 +207,7 @@                           :let [versions (->> (files/full-path-ls plugin)                                               (filter files/dir?)                                               (map plugin-info)-                                              (sort-by #(version-sort % %2))+                                              (sort-by #(:version %) version-sort)"
https://api.github.com/repos/LightTable/LightTable/pulls/2059,46773842,"@@ -47,30 +47,30 @@     [(first body) (rest body)]     [[] body])) -(defmacro on [name & body]+(defmacro ^:private on [name & body]"
https://api.github.com/repos/LightTable/LightTable/pulls/2105,49262306,"@@ -243,13 +243,7 @@ (defn move!   ""Move file or directory to given path""   [from to]-  (if (dir? from)-    (do-      (.copyDirSyncRecursive wrench from to)-      (.rmdirSyncRecursive wrench from))-    (do-      (save to (:content (open-sync from)))-      (delete! from))))+  (.renameSync fs from to))"
https://api.github.com/repos/LightTable/LightTable/pulls/2107,49274871,"@@ -209,10 +209,10 @@                       (cmd/exec! :window.zoom-reset)))  (behavior ::add-platform-class-                  :triggers #{:init}-                  :reaction (fn [this]-                              (dom/add-class (dom/$ :body) (name platform/platform))-                              ))+          :triggers #{:init}+          :reaction (fn [this]+                      (dom/add-class (dom/$ :body) (name platform/platform))+                      ))"
https://api.github.com/repos/LightTable/LightTable/pulls/2176,60169719,"@@ -21,31 +21,64 @@  (def shell (load/node-module ""shelljs"")) (def fs (js/require ""fs""))+; Update the comment for the following to describe the full situation:+(def original-fs (js/require ""original-fs"")) ;; Required per [fs - reading asar files fails · Issue #1658 · atom/electron](https://github.com/atom/electron/issues/1658) (def zlib (js/require ""zlib"")) (def request (load/node-module ""request""))-(def tar (load/node-module ""tar""))+(def tar (load/node-module ""tar-fs""))+(def zip (load/node-module ""node-stream-zip"")) (def home-path (files/lt-home """")) ;; TODO: get-proxy ;; (def get-proxy (.-App.getProxyForURL (js/require ""nw.gui""))) (def get-proxy) -(defn tar-path [v]+; TODO: Cleanup platform name code++; TODO: Rename to release-file-extension+(def tar-extension (if (platform/win?) "".zip"" "".tar.gz""))++(defn get-release-download-url+  ""Retrieve the download URL for the specified release version and this computer's platform.""+  [v cb]+  (let [release-info-url (str ""https://api.github.com/repos/LightTable/LightTable/releases/tags/""+                              v)]+    (fetch/xhr release-info-url+               {}+               (fn [data]+                 (let [parsed-data (js/JSON.parse data)+                       assets (.-assets parsed-data)+                       platform-name (name platform/platform)+                       platform-asset-name (str ""lighttable-"" v ""-"" platform-name tar-extension)+                       platform-asset (first (filter #(= (.-name %) platform-asset-name)+                                                     assets))+                       download-url (.-browser_download_url platform-asset)+                       ]+                   (cb download-url)+                   )))))++;(get-release-download-url ""0.8.1"" (fn [u] (console/log u)))++(defn tar-path [v cb]   (if (cache/fetch :edge)-    (str ""https://api.github.com/repos/LightTable/LightTable/tarball/master"")-    (str ""https://api.github.com/repos/LightTable/LightTable/tarball/"" v)))+    (cb (str ""https://api.github.com/repos/LightTable/LightTable/tarball/master"")) ; TODO: Fix to use CI build artifact.+    (get-release-download-url v cb)))++;(tar-path ""0.8.1"" (fn [url] (console/log url)))++;  (def version-regex #""^\d+\.\d+\.\d+(-.*)?$"")  (defn get-versions []   (let [vstr (:content (files/open-sync (files/lt-home ""core/version.json"")))]     (js->clj (.parse js/JSON vstr) :keywordize-keys true))) -(defn proxy? []-  (let [p (get-proxy (tar-path ""0.5.0""))]-    (when (str-contains? p ""PROXY"")-      (-> p-          (string/split "" "")-          (second)))))+;; (defn proxy? []"
https://api.github.com/repos/LightTable/LightTable/pulls/2195,65757565,"@@ -0,0 +1,59 @@+## Report a Bug++### *Remove this Section*++Note that issues for this repo are for bugs with LightTable itself. Bugs for a specific language or other plugin should go in its plugin repository e.g. [Clojure](https://github.com/LightTable/Clojure), [JavaScript](https://github.com/LightTable/Javascript), or [Vim](https://github.com/LightTable/Vim).++Questions should generally be asked on the [Light Table Google Groups group](https://groups.google.com/forum/#!forum/light-table-discussion)."
https://api.github.com/repos/LightTable/LightTable/pulls/2222,67507055,"@@ -88,8 +88,6 @@ This is our release checklist which can be dropped in to an issue:  To build api documentation for current LT version and publish generated docs: -1. In project.clj make sure that `[:codox :source-uri]` points to current LT version.-   This step will be removed once [there is upstream support for version in :source-uri](https://github.com/weavejester/codox/issues/107)-2. Run `script/build-api-docs.sh` on a clean git state. Make sure there are no pending git changes as this script will change git branches and push generated api docs to gh-pages.+1. Run `script/build-api-docs.sh` on a clean git state. Make sure there are no pending git changes as this script will change git branches and push generated api docs to gh-pages."
https://api.github.com/repos/LightTable/LightTable/pulls/2253,79112579,"@@ -129,273 +151,512 @@ ;;*********************************************************  (defn ->val-  ""Return editor's CodeMirror object buffer contents""+  ""Return editor `e`'s buffer contents."""
https://api.github.com/repos/LightTable/LightTable/pulls/2274,80353676,"@@ -37,92 +38,228 @@     ([this n not-found]      (or (.item this n) not-found)))) -(defn text-node [text]+(defn text-node+  ""Create a text node containing string `text`.""+  [text]   (js/document.createTextNode text))  (defn $$+  ""Returns a NodeList of all elements within `elem` that matches `query`."
https://api.github.com/repos/LightTable/LightTable/pulls/2276,81611956,"@@ -76,12 +76,44 @@               (not= (:doc doc) ""nil""))      [:pre (:doc doc)])]) +(defn- retrieve-behavior+  ""Helper method for behavior `editor.doc.show!` to determine if the given `ns` and `name`+  match existing behaviors.++  Returns found behavior or `nil`.""+  [ns name]+  (@object/behaviors (keyword (str ns ""/"" (subs name 2)))))++(defn- retrieve-object-def+  ""Helper method for behavior `editor.doc.show!` to determine if the given `ns` and `name`+  match existing object defs. Not recommended to print whole object def... use destructuring.++  Returns found object def or `nil`.""+  [ns name]+  (@object/object-defs (keyword (str ns ""/"" (subs name 2)))))++(defn- retrieve-docstring+  ""Helper method for behavior `editor.doc.show!` that returns the docstring for a matching+  object or behavior, if any exist, or `nil`.""+  [ns name]+  (let [beh-doc (:doc (retrieve-behavior ns name))"
https://api.github.com/repos/LightTable/LightTable/pulls/2238,82526476,"@@ -231,13 +233,13 @@       (when cb (cb e)))))  (defn trash! [path]-  (.moveItemTotrash shell path))+  (.moveItemTotrash electron-shell path))  (defn delete!   ""Delete file or directory""   [path]   (if (dir? path)-    (.rmdirSyncRecursive wrench path)+    (.rm shell ""-rf"" path)"
https://api.github.com/repos/LightTable/LightTable/pulls/2289,87127124,"@@ -494,7 +494,7 @@    (search-input this)])  (defui source-button [plugin]"
https://api.github.com/repos/LightTable/LightTable/pulls/1996,87704748,"@@ -3,8 +3,9 @@ env: - TRAVIS=1 os:   - linux- - osx-lein: clojure+# Clojure is not supported on osx"
https://api.github.com/repos/LightTable/LightTable/pulls/2302,94071237,"@@ -216,7 +216,7 @@ (object/add-behavior! line-input ::exec-active!)  (cmd/command {:command :goto-line"
https://api.github.com/repos/LightTable/LightTable/pulls/2306,94196108,"@@ -0,0 +1,75 @@+(ns lt.objs.cli"
https://api.github.com/repos/LightTable/LightTable/pulls/2353,182630528,"@@ -13,9 +13,6 @@ function initSortable(window) {     }      function dragStart(e) {-      var dt = e.dataTransfer;-      dt.effectAllowed = 'move';-      dt.setData('Text', 'dummy');"
https://api.github.com/repos/LightTable/LightTable/pulls/2370,191085901,"@@ -221,13 +222,14 @@               :desc ""Editor: Go to line""               :options line-input               :exec (fn [l]-                      (when (or (number? l) (not (empty? l)))-                        (let [cur (pool/last-active)]-                          (editor/move-cursor cur {:ch 0-                                                   :line (dec (if-not (number? l)-                                                                (js/parseInt l)-                                                                l))})-                          (editor/center-cursor cur))))})+                      (let [line (if-not (number? l)+                                   (js/parseInt l)"
https://api.github.com/repos/LightTable/LightTable/pulls/2369,191469520,"@@ -0,0 +1,11 @@+name: Light Table+desc: Light Table is a next generation code editor that connects you to your creation with instant feedback. Light Table is very customizable and can display anything a Chromium browser can.+site: http://lighttable.com/+tags:+- ide+- clojure+- clojurescript+- electron+upforgrabs:+    name: good first issue"
https://api.github.com/repos/LightTable/LightTable/pulls/2371,191936613,"@@ -31,7 +31,7 @@  (def ignore-pattern   ""Regex pattern consisting of files, folders, etc... to ignore.""-  #""(^\..*)|\.class$|target/|svn|cvs|\.git|\.pyc|~|\.swp|\.jar|.DS_Store"")+  #""(^\..*)|\.class$|target/|^svn$|^cvs$|\.git|\.pyc|~|\.swp|\.jar|.DS_Store"")"
https://api.github.com/repos/LightTable/LightTable/pulls/2390,255325468,"@@ -0,0 +1,74 @@+# Contributor Covenant Code of Conduct++## Our Pledge++In the interest of fostering an open and welcoming environment, we as+contributors and maintainers pledge to making participation in our project and+our community a harassment-free experience for everyone, regardless of age, body+size, disability, ethnicity, gender identity and expression, level of experience,+nationality, personal appearance, race, religion, or sexual identity and+orientation.++## Our Standards++Examples of behavior that contributes to creating a positive environment+include:++* Using welcoming and inclusive language+* Being respectful of differing viewpoints and experiences+* Gracefully accepting constructive criticism+* Focusing on what is best for the community+* Showing empathy towards other community members++Examples of unacceptable behavior by participants include:++* The use of sexualized language or imagery and unwelcome sexual attention or+advances+* Trolling, insulting/derogatory comments, and personal or political attacks+* Public or private harassment+* Publishing others' private information, such as a physical or electronic+  address, without explicit permission+* Other conduct which could reasonably be considered inappropriate in a+  professional setting++## Our Responsibilities++Project maintainers are responsible for clarifying the standards of acceptable+behavior and are expected to take appropriate and fair corrective action in+response to any instances of unacceptable behavior.++Project maintainers have the right and responsibility to remove, edit, or+reject comments, commits, code, wiki edits, issues, and other contributions+that are not aligned to this Code of Conduct, or to ban temporarily or+permanently any contributor for other behaviors that they deem inappropriate,+threatening, offensive, or harmful.++## Scope++This Code of Conduct applies both within project spaces and in public spaces+when an individual is representing the project or its community. Examples of+representing a project or community include using an official project e-mail+address, posting via an official social media account, or acting as an appointed+representative at an online or offline event. Representation of a project may be+further defined and clarified by project maintainers."
https://api.github.com/repos/LightTable/LightTable/pulls/2391,255328418,"@@ -131,26 +133,26 @@ function start() {     }   });   parseArgs();-};+} -// Set $IPC_DEBUG to debug incoming and outgoing ipc messages for the main process+// Set $IPC_DEBUG to debug incoming and outgoing ipcMain messages for the main process if (process.env[""IPC_DEBUG""]) {-  var oldOn = ipc.on;-  ipc.on = function (channel, cb) {-    oldOn.call(ipc, channel, function() {+  let oldOn = ipcMain.on;+  ipcMain.on = function (channel, cb) {+    oldOn.call(ipcMain, channel, function() {       console.log(""\t\t\t\t\t->MAIN"", channel, Array.prototype.slice.call(arguments).join(', '));       cb.apply(null, arguments);     });   };-  var logSend = function (window) {-    var oldSend = window.webContents.send;+  let logSend = function (window) {+    let oldSend = window.webContents.send;     window.webContents.send = function () {       console.log(""\t\t\t\t\tMAIN->"", Array.prototype.slice.call(arguments).join(', '));       oldSend.apply(window.webContents, arguments);     };   };-  var oldCreateWindow = createWindow;-  var createWindow = function() { logSend(oldCreateWindow()); };+  let oldCreateWindow = createWindow;+  let createWindow = function() { logSend(oldCreateWindow()); };"
https://api.github.com/repos/LightTable/LightTable/pulls/2416,263478952,"@@ -101,7 +101,7 @@         meta[""no-inspect""] = true;         var final = safeStringify(exp);       }-      ipc.sendToHost(""browser-raise"", [meta.obj, meta.ev, {result: final, meta: meta}]);+      ipcRenderer.sendToHost(""browser-raise"", [meta.obj, meta.ev, {result: final, meta: meta}]);"
https://api.github.com/repos/LightTable/LightTable/pulls/2419,265661862,"@@ -341,34 +347,79 @@     }   }; -  CodeMirror.registerHelper(""hint"", ""auto"", function(cm, options) {-    var helpers = cm.getHelpers(cm.getCursor(), ""hint""), words;+  function applicableHelpers(cm, helpers) {+    if (!cm.somethingSelected()) return helpers+    var result = []+    for (var i = 0; i < helpers.length; i++)+      if (helpers[i].supportsSelection) result.push(helpers[i])+    return result+  }++  function resolveAutoHints(cm, pos) {+    var helpers = cm.getHelpers(pos, ""hint""), words     if (helpers.length) {-      for (var i = 0; i < helpers.length; i++) {-        var cur = helpers[i](cm, options);-        if (cur && cur.list.length) return cur;+      var async = false, resolved+      for (var i = 0; i < helpers.length; i++) if (helpers[i].async) async = true+      if (async) {+        resolved = function(cm, callback, options) {+          var app = applicableHelpers(cm, helpers)+          function run(i, result) {+            if (i == app.length) return callback(null)+            var helper = app[i]+            if (helper.async) {+              helper(cm, function(result) {+                if (result) callback(result)+                else run(i + 1)+              }, options)+            } else {+              var result = helper(cm, options)+              if (result) callback(result)+              else run(i + 1)+            }+          }+          run(0)+        }+        resolved.async = true+      } else {+        resolved = function(cm, options) {+          var app = applicableHelpers(cm, helpers)+          for (var i = 0; i < app.length; i++) {+            var cur = app[i](cm, options)+            if (cur && cur.list.length) return cur+          }+        }       }+      resolved.supportsSelection = true+      return resolved     } else if (words = cm.getHelper(cm.getCursor(), ""hintWords"")) {-      if (words) return CodeMirror.hint.fromList(cm, {words: words});+      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }     } else if (CodeMirror.hint.anyword) {-      return CodeMirror.hint.anyword(cm, options);+      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }+    } else {+      return function() {}     }+  }++  CodeMirror.registerHelper(""hint"", ""auto"", {+    resolve: resolveAutoHints   });    CodeMirror.registerHelper(""hint"", ""fromList"", function(cm, options) {     var cur = cm.getCursor(), token = cm.getTokenAt(cur);+    var to = CodeMirror.Pos(cur.line, token.end);+    if (token.string && /\w/.test(token.string[token.string.length - 1])) {+      var term = token.string, from = CodeMirror.Pos(cur.line, token.start);+    } else {+      var term = """", from = to;+    }     var found = [];     for (var i = 0; i < options.words.length; i++) {       var word = options.words[i];-      if (word.slice(0, token.string.length) == token.string)+      if (word.slice(0, term.length) == term)         found.push(word);     } -    if (found.length) return {-      list: found,-      from: CodeMirror.Pos(cur.line, token.start),-            to: CodeMirror.Pos(cur.line, token.end)-    };+    if (found.length) return {list: found, from: from, to: to};"
https://api.github.com/repos/LightTable/LightTable/pulls/2424,270952105,"@@ -95,15 +95,13 @@    window.lttools = {     watch: function(exp, meta) {-      var final;-       if(meta.ev == ""editor.eval.cljs.watch"") {-        final = cljs.core.pr_str(exp);+        var final = cljs.core.pr_str(exp);       } else {         meta[""no-inspect""] = true;-        final = safeStringify(exp);+        var final = safeStringify(exp);       }-      ipcRenderer.sendToHost(""browser-raise"", [meta.obj, meta.ev, {result: final, meta: meta}]);+      ipc.sendToHost(""browser-raise"", [meta.obj, meta.ev, {result: final, meta: meta}]);"
https://api.github.com/repos/LightTable/LightTable/pulls/2430,273561328,"@@ -101,7 +101,7 @@         meta[""no-inspect""] = true;         var final = safeStringify(exp);       }-      ipc.sendToHost(""browser-raise"", [meta.obj, meta.ev, {result: final, meta: meta}]);+      ipcRenderer.sendToHost(""browser-raise"", [meta.obj, meta.ev, {result: final, meta: meta}]);"
https://api.github.com/repos/LightTable/LightTable/pulls/2470,367236296,"@@ -25,108 +26,128 @@ module.exports = function generate_dependencies(it, $keyword) {   out += 'var missing' + ($lvl) + ';';   for (var $property in $propertyDeps) {     $deps = $propertyDeps[$property];-    out += ' if (' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';-    if ($breakOnError) {-      out += ' && ( ';-      var arr1 = $deps;-      if (arr1) {-        var _$property, $i = -1,-          l1 = arr1.length - 1;-        while ($i < l1) {-          _$property = arr1[$i += 1];-          if ($i) {-            out += ' || ';-          }-          var $prop = it.util.getProperty(_$property);-          out += ' ( ' + ($data) + ($prop) + ' === undefined && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? _$property : $prop)) + ') ) ';-        }+    if ($deps.length) {+      out += ' if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';+      if ($ownProperties) {+        out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($property)) + '\') ';       }-      out += ')) {  ';-      var $propertyPath = 'missing' + $lvl,-        $missingProperty = '\' + ' + $propertyPath + ' + \'';-      if (it.opts._errorDataPathProperty) {-        it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;-      }-      var $$outStack = $$outStack || [];-      $$outStack.push(out);-      out = ''; /* istanbul ignore else */-      if (it.createErrors !== false) {-        out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join("", ""))) + '\' } ';-        if (it.opts.messages !== false) {-          out += ' , message: \'should have ';-          if ($deps.length == 1) {-            out += 'property ' + (it.util.escapeQuotes($deps[0]));-          } else {-            out += 'properties ' + (it.util.escapeQuotes($deps.join("", "")));+      if ($breakOnError) {+        out += ' && ( ';+        var arr1 = $deps;+        if (arr1) {+          var $propertyKey, $i = -1,+            l1 = arr1.length - 1;+          while ($i < l1) {+            $propertyKey = arr1[$i += 1];+            if ($i) {+              out += ' || ';+            }+            var $prop = it.util.getProperty($propertyKey),+              $useData = $data + $prop;+            out += ' ( ( ' + ($useData) + ' === undefined ';+            if ($ownProperties) {+              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';+            }+            out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';           }-          out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';         }-        if (it.opts.verbose) {-          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';+        out += ')) {  ';+        var $propertyPath = 'missing' + $lvl,+          $missingProperty = '\' + ' + $propertyPath + ' + \'';+        if (it.opts._errorDataPathProperty) {+          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;         }-        out += ' } ';-      } else {-        out += ' {} ';-      }-      var __err = out;-      out = $$outStack.pop();-      if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */-        if (it.async) {-          out += ' throw new ValidationError([' + (__err) + ']); ';+        var $$outStack = $$outStack || [];+        $$outStack.push(out);+        out = ''; /* istanbul ignore else */+        if (it.createErrors !== false) {+          out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join("", ""))) + '\' } ';+          if (it.opts.messages !== false) {+            out += ' , message: \'should have ';+            if ($deps.length == 1) {+              out += 'property ' + (it.util.escapeQuotes($deps[0]));+            } else {+              out += 'properties ' + (it.util.escapeQuotes($deps.join("", "")));+            }+            out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';+          }+          if (it.opts.verbose) {+            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';+          }+          out += ' } ';         } else {-          out += ' validate.errors = [' + (__err) + ']; return false; ';+          out += ' {} ';         }-      } else {-        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';-      }-    } else {-      out += ' ) { ';-      var arr2 = $deps;-      if (arr2) {-        var $reqProperty, i2 = -1,-          l2 = arr2.length - 1;-        while (i2 < l2) {-          $reqProperty = arr2[i2 += 1];-          var $prop = it.util.getProperty($reqProperty),-            $missingProperty = it.util.escapeQuotes($reqProperty);-          if (it.opts._errorDataPathProperty) {-            it.errorPath = it.util.getPath($currentErrorPath, $reqProperty, it.opts.jsonPointers);+        var __err = out;+        out = $$outStack.pop();+        if (!it.compositeRule && $breakOnError) {+          /* istanbul ignore if */+          if (it.async) {+            out += ' throw new ValidationError([' + (__err) + ']); ';+          } else {+            out += ' validate.errors = [' + (__err) + ']; return false; ';           }-          out += ' if (' + ($data) + ($prop) + ' === undefined) {  var err =   '; /* istanbul ignore else */-          if (it.createErrors !== false) {-            out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join("", ""))) + '\' } ';-            if (it.opts.messages !== false) {-              out += ' , message: \'should have ';-              if ($deps.length == 1) {-                out += 'property ' + (it.util.escapeQuotes($deps[0]));-              } else {-                out += 'properties ' + (it.util.escapeQuotes($deps.join("", "")));-              }-              out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';+        } else {+          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';+        }+      } else {+        out += ' ) { ';+        var arr2 = $deps;+        if (arr2) {+          var $propertyKey, i2 = -1,+            l2 = arr2.length - 1;+          while (i2 < l2) {+            $propertyKey = arr2[i2 += 1];+            var $prop = it.util.getProperty($propertyKey),+              $missingProperty = it.util.escapeQuotes($propertyKey),+              $useData = $data + $prop;+            if (it.opts._errorDataPathProperty) {+              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);             }-            if (it.opts.verbose) {-              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';+            out += ' if ( ' + ($useData) + ' === undefined ';+            if ($ownProperties) {+              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';             }-            out += ' } ';-          } else {-            out += ' {} ';+            out += ') {  var err =   '; /* istanbul ignore else */+            if (it.createErrors !== false) {+              out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join("", ""))) + '\' } ';"
https://api.github.com/repos/logseq/logseq/pulls/667,524883563,"@@ -265,47 +265,80 @@            (ok-handler)))))) +(defn rename-file!+  [file new-name ok-handler]+  (let [repo (state/get-current-repo)+        old-path (:file/path file)+        new-path (let [result (string/split old-path ""/"")"
https://api.github.com/repos/logseq/logseq/pulls/662,524936167,"@@ -197,9 +199,9 @@             path))         [:div          (ui/textarea-          {:placeholder ""Commit message (optional)""-           :on-change (fn [e]-                        (reset! commit-message (util/evalue e)))})+           {:placeholder ""Commit message (optional)"""
https://api.github.com/repos/logseq/logseq/pulls/681,526015831,"@@ -936,3 +932,43 @@         (string/replace ""Ctrl"" ""Cmd"")         (string/replace ""Alt"" ""Opt""))     keyboard-shortcut))++(defn remove-common-preceding+  [col1 col2]+  (loop [col1 col1+         col2 col2]+    (if (and (= (first col1) (first col2))+             (seq col1))+      (recur (rest col1) (rest col2))+      [col1 col2])))++;; fs+(defn get-file-ext+  [file]+  (last (string/split file #""\."")))++(defn get-relative-path+  [current-file-path another-file-path]+  (let [directories-f #(butlast (string/split % ""/""))+        parts-1 (directories-f current-file-path)+        parts-2 (directories-f another-file-path)+        [parts-1 parts-2] (remove-common-preceding parts-1 parts-2)+        another-file-name (last (string/split another-file-path ""/""))]+    (->> (concat+          (if (seq parts-1)+            (repeat (count parts-1) "".."")+            ""."")"
https://api.github.com/repos/logseq/logseq/pulls/730,529297970,"@@ -18,6 +18,8 @@                       :output-feature-set :es6                       :externs [""datascript/externs.js""                                 ""externs.js""]}+   :closure-defines {goog.debug.LOGGING_ENABLED true}"
https://api.github.com/repos/logseq/logseq/pulls/750,530167264,"@@ -1597,38 +1598,46 @@     (when-let [prev-block (util/get-prev-block input)]       (util/parse-int (d/attr prev-block ""level""))))) +;; If it's an indent/outdent action followed by an ""Enter"", only adjust after inserting a block was finished. Maybe we should use a channel to serialize all the events. (defn adjust-block-level!-  [state direction]-  (state/set-editor-op! :indent-outdent)-  (let [{:keys [block block-parent-id value config]} (get-state state)-        start-level (:start-level config)-        format (:block/format block)-        block-pattern (config/get-block-pattern format)-        level (:block/level block)-        previous-level (or (get-previous-block-level block-parent-id) 1)-        [add? remove?] (case direction-                         :left [false true]-                         :right [true false]-                         [(<= level previous-level)-                          (and (> level previous-level)-                               (> level 2))])-        final-level (cond-                      add? (inc level)-                      remove? (if (> level 2)-                                (dec level)-                                level)-                      :else level)-        new-value (block/with-levels value format (assoc block :block/level final-level))]-    (when (and-           (not (and (= direction :left)-                     (and-                      (get config :id)-                      (util/uuid-string? (get config :id)))-                     (<= final-level start-level)))-           (<= (- final-level previous-level) 1))-      (save-block-if-changed! block new-value-                              {:indent-left? (= direction :left)})))-  (state/set-editor-op! nil))+  ([state direction]+   (adjust-block-level! state direction 10))+  ([state direction retry-limit]+   (if (= :insert (state/get-editor-op))+     (if (> retry-limit 0)+       (js/setTimeout #(adjust-block-level! state direction (dec retry-limit)) 20)+       (log/error :editor/indent-outdent-retry-max-limit {:direction direction}))+    (do+      (state/set-editor-op! :indent-outdent)+      (let [{:keys [block block-parent-id value config]} (get-state state)+            start-level (:start-level config)+            format (:block/format block)+            block-pattern (config/get-block-pattern format)+            level (:block/level block)+            previous-level (or (get-previous-block-level block-parent-id) 1)+            [add? remove?] (case direction+                             :left [false true]+                             :right [true false]+                             [(<= level previous-level)+                              (and (> level previous-level)+                                   (> level 2))])+            final-level (cond+                          add? (inc level)+                          remove? (if (> level 2)+                                    (dec level)+                                    level)+                          :else level)+            new-value (block/with-levels value format (assoc block :block/level final-level))]+        (when (and+               (not (and (= direction :left)+                         (and"
https://api.github.com/repos/logseq/logseq/pulls/753,530222992,"@@ -1207,7 +1207,8 @@                             (reset! parents-atom parents)                             (when (seq parents)                               (interpose [:span.mx-2.opacity-50 ""➤""]-                                         parents))))]]+                                         parents))))]+             component (filterv identity component)]"
https://api.github.com/repos/logseq/logseq/pulls/788,533122962,"@@ -506,14 +484,8 @@  (defn periodically-push-tasks   [repo-url]-  (spec/validate :repos/url repo-url)-  (let [push (fn []-               (when (and (not (false? (:git-auto-push (state/get-config repo-url))))-                          ;; (not config/dev?)-)-                 (push repo-url nil)))]-    (js/setInterval push-                    (* (config/git-push-secs) 1000))))+  (js/setInterval #(push-if-auto-enabled! repo-url)"
https://api.github.com/repos/logseq/logseq/pulls/724,534637995,"@@ -0,0 +1 @@+../static"
https://api.github.com/repos/logseq/logseq/pulls/803,534672704,"@@ -127,10 +126,10 @@      :did-mount (fn [state]                   (attach-listeners state)                   state)-     :did-remount (fn [old-state new-state]-                    (detach old-state)-                    (attach-listeners new-state)-                    new-state)+     :will-remount (fn [old-state new-state]"
https://api.github.com/repos/logseq/logseq/pulls/805,534819192,"@@ -66,75 +67,82 @@          {:dangerouslySetInnerHTML           {:__html ""&#10003;""}}])] -     (let [content (get contents path)-           local-content (db/get-file path)]-       (if (not= content local-content)-         (let [local-content (or local-content """")-               content (or content """")-               diff (medley/indexed (diff/diff local-content content))-               diff? (some (fn [[_idx {:keys [added removed]}]]-                             (or added removed))-                           diff)]-           [:div.pre-line-white-space.p-2 {:class (if collapse? ""hidden"")-                                           :style {:overflow ""auto""}}-            (if edit?-              [:div.grid.grid-cols-2.gap-1-               (diff-cp diff)-               (ui/textarea-                {:default-value local-content-                 :on-change (fn [e]-                              (reset! *edit-content (util/evalue e)))})]-              (diff-cp diff))--            (cond-              edit?-              [:div.mt-2-               (ui/button ""Save""-                 :on-click-                 (fn []-                   (reset! *edit? false)-                   (let [new-content @*edit-content]-                     (file/alter-file repo path new-content-                                      {:commit? false-                                       :re-render-root? true})-                     (swap! state/state-                            assoc-in [:github/contents repo remote-oid path] new-content)-                     (mark-as-resolved path))))]--              diff?-              [:div.mt-2-               (ui/button ""Use remote""-                 :on-click-                 (fn []-                   ;; overwrite the file-                   (file/alter-file repo path content-                                    {:commit? false-                                     :re-render-root? true})-                   (mark-as-resolved path))-                 :background ""green"")--               [:span.pl-2.pr-2 ""or""]--               (ui/button ""Keep local""-                 :on-click-                 (fn []-                   ;; overwrite the file-                   (swap! state/state-                          assoc-in [:github/contents repo remote-oid path] local-content)-                   (mark-as-resolved path))-                 :background ""pink"")--               [:span.pl-2.pr-2 ""or""]--               (ui/button ""Edit""-                 :on-click-                 (fn []-                   (reset! *edit? true)))]--              :else-              nil)])))]))+     (let [content (get contents path)]+       (if (or (and delete? (nil? content))+               content)+         (let [local-content (db/get-file path)]+           (if (not= content local-content)+             (let [local-content (or local-content """")+                   content (or content """")+                   diff (medley/indexed (diff/diff local-content content))+                   diff? (some (fn [[_idx {:keys [added removed]}]]+                                 (or added removed))+                               diff)]+               [:div.pre-line-white-space.p-2 {:class (if collapse? ""hidden"")+                                               :style {:overflow ""auto""}}+                (if edit?+                  [:div.grid.grid-cols-2.gap-1+                   (diff-cp diff)+                   (ui/textarea+                    {:default-value local-content+                     :on-change (fn [e]+                                  (reset! *edit-content (util/evalue e)))})]+                  (diff-cp diff))++                (cond+                  edit?+                  [:div.mt-2+                   (ui/button ""Save""+                              :on-click+                              (fn []+                                (reset! *edit? false)+                                (let [new-content @*edit-content]+                                  (file/alter-file repo path new-content+                                                   {:commit? false+                                                    :re-render-root? true})+                                  (swap! state/state+                                         assoc-in [:github/contents repo remote-oid path] new-content)+                                  (mark-as-resolved path))))]++                  diff?+                  [:div.mt-2+                   (ui/button ""Use remote""+                              :on-click+                              (fn []+                                ;; overwrite the file+                                (if delete?+                                  (file/remove-file! repo path)"
https://api.github.com/repos/logseq/logseq/pulls/807,535885334,"@@ -473,27 +473,21 @@              (state/set-db-restoring! false)))     (js/setTimeout setup-local-repo-if-not-exists! 100))) -(defn periodically-pull-  [repo-url pull-now?]-  (spec/validate :repos/url repo-url)-  (p/let [token (helper/get-github-token repo-url)]-    (when token-      (when pull-now? (pull repo-url nil))-      (js/setInterval #(pull repo-url nil)-                      (* (config/git-pull-secs) 1000)))))--(defn periodically-push-tasks-  [repo-url]-  (js/setInterval #(push-if-auto-enabled! repo-url)+(defn periodically-pull-current-repo+  []+  (js/setInterval+   (fn []+     (p/let [repo-url (state/get-current-repo)+             token (helper/get-github-token repo-url)]"
https://api.github.com/repos/logseq/logseq/pulls/798,537512921,"@@ -0,0 +1,189 @@+(ns frontend.components.publishing+  (:require [rum.core :as rum]+            [frontend.context.i18n :as i18n]+            [frontend.db :as db]+            [frontend.state :as state]+            [frontend.util :as util]+            [reitit.frontend.easy :as rfe]+            [frontend.db-mixins :as db-mixins]+            [frontend.config :as config]+            [lambdaisland.glogi :as log]+            [promesa.core :as p]+            [frontend.handler.page :as page-handler]+            [frontend.handler.notification :as notification]+            [clojure.string :as string]+            [frontend.ui :as ui]+            [frontend.components.svg :as svg]+            [frontend.handler.project :as project-handler]))++(defn get-published-pages+  []+  (when-let [repo (state/get-current-repo)]+    (when (db/get-conn repo)+      (->> (db/q repo [:page/published] {:use-cache? false}+             '[:find (pull ?page [*])+               :in $+               :where+               [?page :page/properties ?properties]+               [(get ?properties :published) ?publish]+               [(= ""true"" ?publish)]])+        db/react))))++(defn delete-page-from-logseq+  [project permalink]+  (let [url (util/format ""%s%s/%s"" config/api project permalink)]+    (js/Promise.+      (fn [resolve reject]+        (util/delete url+          (fn [result]+            (resolve result))+          (fn [error]+            (log/error :page/http-delete-failed error)+            (reject error)))))))++(defn update-state-and-notify+  [page-name]+  (page-handler/page-add-properties! page-name {:published false})+  (notification/show! (util/format ""Remove Page \""%s\"" from Logseq server success"" page-name) :success))++(defn update-project+  [project-name data]+  (let [url (util/format ""%sprojects/%s"" config/api project-name)]+    (js/Promise.+      (fn [resolve reject]+        (util/post url data+          (fn [result]+            (resolve result))+          (fn [error]+            (log/error :project/http-update-failed error)+            (reject error)))))))++(defn delete-project+  [project-name]+  (let [url (util/format ""%sprojects/%s"" config/api project-name)]+    (js/Promise.+      (fn [resolve reject]+        (util/delete url+          (fn [result]+            (resolve result))+          (fn [error]+            (log/error :project/http-delete-failed error)+            (reject error)))))))++(defn project+  [editor-state current-project pages]+  (rum/with-context [[t] i18n/*tongue-context*]+    (if (= :display @editor-state)+      (when current-project+        [:div.cp__publishing-pj+         [:span.cp__publishing-pj-name current-project]+         [:span.cp__publishing-edit+          {:on-click+           (fn [_]+             (reset! editor-state :editor))}+          (t :publishing/edit)]])+      [:div.flex.cp__publishing_pj_edit+       [:input#cp__publishing-project-input+        {:placeholder current-project+         :default-value current-project}]+       [:div.cp__publishing-pj-bt+        (ui/button+          (t :publishing/save)+          :on-click (fn [e]+                      (util/stop e)+                      (let [editor (.getElementById js/document ""cp__publishing-project-input"")+                            v (.-value editor)+                            data {:name v}]+                        (-> (p/let [result (update-project current-project data)]+                              (when (:result result)+                                (state/update-current-project :name v)+                                (notification/show! ""Updated project name successfully."" :success)+                                (reset! editor-state :display)))+                            (p/catch+                              (fn [error]+                                (notification/show! ""Failed to updated project name."" :failed))))))+          :background ""green"")]++       [:div.cp__publishing-pj-bt+        (ui/button+          (t :publishing/delete)+          :on-click (fn [e]+                      (util/stop e)+                      (let [confirm-message+                            (util/format+                              ""This operation will also delete all publishing under project \""%s\"", continue?""+                              current-project)]+                        (when (.confirm js/window confirm-message)+                          (p/let [result (delete-project current-project)]+                            (when (:result result)+                              (reset! editor-state :display)+                              (doseq [page pages]+                                (let [page (first page)+                                      page-name (:page/name page)]+                                  (page-handler/page-add-properties! page-name {:published false})))+                              (state/remove-current-project)+                              (notification/show! ""Delete project successful."" :success))))))+          :background ""pink"")]++       [:div.cp__publishing-pj-bt+        (ui/button+          (t :publishing/cancel)+          :on-click (fn [e]+                      (util/stop e)+                      (reset! editor-state :display)))]])))++(rum/defcs my-publishing+  < rum/reactive db-mixins/query+    (rum/local :display ::project-state)+  [state]+  (let [current-repo (state/sub :git/current-repo)+        projects (state/sub [:me :projects])+        pages (get-published-pages)+        editor-state (get state ::project-state)+        current-project (project-handler/get-current-project current-repo projects)]+    (rum/with-context [[t] i18n/*tongue-context*]+      [:div.flex-1+       [:h1.title (t :my-publishing)]+       [:div#cp__publishing-pj-ct+        [:span (t :publishing/current-project)]+        (project editor-state current-project pages)]+       (when current-repo+         [:div#cp__publishing-pg-ct+          [:div (t :publishing/pages)]+          [:table.table-auto+                [:thead+                 [:tr+                  [:th (t :publishing/page-name)]+                  [:th (t :publishing/delete-from-logseq)]]]+                [:tbody+                 (for [page pages]+                   (let [page (first page)+                         {:keys [title permalink]} (:page/properties page)+                         page-name (:page/name page)]+                     [:tr {:key permalink}+                      [:td [:div.flex {}+                            [:span [:a {:on-click (fn [e] (util/stop e))+                                        :href (rfe/href :page {:name title})}+                                    page-name]]+                            [:span [:a {:href (util/format ""%s/%s/%s"" config/website current-project page-name)+                                        :target ""_blank""}+                                    svg/external-link]]]+                       ]+                      [:td [:span.text-gray-500.text-sm+                            [:a {:on-click+                                 (fn [e]+                                   (util/stop e)+                                   (-> (p/let [_ (delete-page-from-logseq current-project permalink)]+                                         (update-state-and-notify page-name))+                                       (p/catch+                                         (fn [error]+                                           (let [status (.-status error)+                                                 not-found-on-server 404]+                                             (if (= not-found-on-server status)+                                               (update-state-and-notify page-name)+                                               (let [message (util/format ""Remove Page \""%s\"" from Logseq server failed."""
https://api.github.com/repos/logseq/logseq/pulls/843,537977765,"@@ -946,9 +946,7 @@           (when (and marker                      (not (string/blank? marker))                      (not= ""nil"" marker))-            {:class (str (string/lower-case marker)-                         ; "" flex flex-row items-center"""
https://api.github.com/repos/logseq/logseq/pulls/856,538355621,"@@ -136,13 +136,13 @@   [format s1 s2]   (when (and s1 s2)     (let [diff-result (diff/diff-words s1 s2)-          block-pattern (config/get-block-pattern format)]+          block-pattern (or (config/get-block-pattern format) ""#"")]"
https://api.github.com/repos/logseq/logseq/pulls/867,539371138,"@@ -309,21 +309,23 @@   (:editor/set-timestamp-block @state))  (defn set-edit-content!-  [input-id value]-  (when input-id-    (when-let [input (gdom/getElement input-id)]-      (util/set-change-value input value))-    (update-state! :editor/content (fn [m]-                                     (assoc m input-id value)))-    ;; followers-    ;; (when-let [s (util/extract-uuid input-id)]-    ;;   (let [input (gdom/getElement input-id)-    ;;         leader-parent (util/rec-get-block-node input)-    ;;         followers (->> (array-seq (js/document.getElementsByClassName s))-    ;;                        (remove #(= leader-parent %)))]-    ;;     (prn ""followers: "" (count followers))-    ;;     ))-))+  ([input-id value] (set-edit-content! input-id value false))+  ([input-id value skip-set-input-value?]"
https://api.github.com/repos/logseq/logseq/pulls/883,539946594,"@@ -28,17 +29,20 @@           (gobj/get js/window ""workerThread"")           (gobj/get js/window.workerThread ""getChangedFiles""))      (->-      (p/let [files (js/window.workerThread.getChangedFiles (util/get-repo-dir repo))]-        (let [files (bean/->clj files)]-          (p/let [remote-latest-commit (get-remote-ref repo)-                  local-latest-commit (get-ref repo)-                  descendent? (git/descendent? repo local-latest-commit remote-latest-commit)-                  diffs (git/get-diffs repo local-latest-commit remote-latest-commit)]-            (let [files (if descendent?-                          (->> (concat (map :path diffs) files)-                               distinct)-                          files)]-              (state/set-changed-files! repo files)))))+      (p/let [files (js/window.workerThread.getChangedFiles (util/get-repo-dir repo))+              files (bean/->clj files)]+        (->+         (p/let [remote-latest-commit (get-remote-ref repo)+                 local-latest-commit (get-ref repo)]+           (p/let [descendent? (git/descendent? repo local-latest-commit remote-latest-commit)"
https://api.github.com/repos/logseq/logseq/pulls/897,542167163,"@@ -57,12 +58,30 @@                        (keyword (util/get-file-ext (:file/path file)))))           files)) +(defn- set-batch!+  [handles]+  (let [handles (map (fn [[path handle]]+                       {:key path+                        :value handle}) handles)]+    (idb/set-batch! handles)))++(defn- set-files-aux!+  [handles]+  (if (seq handles)+    (let [[h t] (split-at 50 handles)]+      (p/let [_ (p/promise (fn [_]"
https://api.github.com/repos/logseq/logseq/pulls/890,543015475,"@@ -1,33 +1,38 @@ (ns frontend.handler.export   (:require [frontend.state :as state]-            [frontend.db :as db]+             [frontend.util :as util]             [cljs-bean.core :as bean]             [clojure.string :as string]             [goog.dom :as gdom]             [frontend.publishing.html :as html]-            [frontend.text :as text]             [frontend.handler.common :as common-handler]             [frontend.extensions.zip :as zip]-            [promesa.core :as p]))+            [promesa.core :as p]+            [frontend.db.simple :as db-simple]+            [frontend.db.react :as db-react]+            [frontend.db.utils :as db-utils]+            [frontend.db.declares :as declares]"
https://api.github.com/repos/logseq/logseq/pulls/930,544106731,"@@ -0,0 +1,184 @@+(ns frontend.handler.extract+  ""Extract helper.""+  (:require [frontend.util :as util]+            [frontend.db :as db]+            [lambdaisland.glogi :as log]+            [clojure.set :as set]+            [frontend.utf8 :as utf8]+            [frontend.date :as date]+            [clojure.string :as string]+            [frontend.format.mldoc :as mldoc]+            [frontend.format.block :as block]+            [frontend.format :as format]+            [cljs-time.core :as t]+            [cljs-time.coerce :as tc]))++(defn reset-contents-and-blocks!"
https://api.github.com/repos/logseq/logseq/pulls/942,544857324,"@@ -32,14 +32,16 @@   string->db with-repo]   [frontend.db.model-  entity pull pull-many-  add-properties! add-q! add-query-component! block-and-children-transform blocks-count blocks-count-cache clean-export! clear-query-state! clear-query-state-without-refs-and-embeds! cloned? delete-blocks delete-file! delete-file-blocks! delete-file-pages! delete-file-tx delete-files delete-pages-by-files filter-only-public-pages-and-blocks get-alias-page get-all-block-contents get-all-tagged-pages get-all-tags get-all-templates get-block-and-children get-block-and-children-no-cache get-block-blocks-cache-atom get-block-by-uuid get-block-children get-block-children-ids get-block-content get-block-file get-block-immediate-children get-block-page get-block-page-end-pos get-block-parent get-block-parents get-block-referenced-blocks get-block-refs-count get-blocks-by-priority get-blocks-contents get-collapsed-blocks get-config get-custom-css get-date-scheduled-or-deadlines get-db-type get-empty-pages get-file get-file-after-blocks get-file-after-blocks-meta get-file-blocks get-file-contents get-file-last-modified-at get-file-no-sub get-file-page get-file-page-id get-file-pages get-files get-files-blocks get-files-full get-files-that-referenced-page get-journals-length get-key-value get-latest-journals get-marker-blocks get-matched-blocks get-page get-page-alias get-page-alias-names get-page-blocks get-page-blocks-cache-atom get-page-blocks-count get-page-blocks-no-cache get-page-file get-page-format get-page-name get-page-properties get-page-properties-content get-page-referenced-blocks get-page-referenced-pages get-page-unlinked-references get-pages get-pages-relation get-pages-that-mentioned-page get-pages-with-modified-at get-public-pages get-tag-pages journal-page? kv local-native-fs? mark-repo-as-cloned! page-alias-set page-blocks-transform pull-block q query-components query-entity-in-component query-state rebuild-page-blocks-children remove-custom-query! remove-key! remove-q! remove-query-component! reset-config! set-file-last-modified-at! set-new-result! sub-key-value template-exists? transact! transact-files-db! with-block-refs-count]+  add-properties! block-and-children-transform blocks-count blocks-count-cache clean-export!  cloned? delete-blocks delete-file! delete-file-blocks! delete-file-pages! delete-file-tx delete-files delete-pages-by-files filter-only-public-pages-and-blocks get-alias-page get-all-block-contents get-all-tagged-pages get-all-tags get-all-templates get-block-and-children get-block-and-children-no-cache get-block-by-uuid get-block-children get-block-children-ids get-block-content get-block-file get-block-immediate-children get-block-page get-block-page-end-pos get-block-parent get-block-parents get-block-referenced-blocks get-block-refs-count get-blocks-by-priority get-blocks-contents get-collapsed-blocks get-config get-custom-css get-date-scheduled-or-deadlines get-db-type get-empty-pages get-file get-file-after-blocks get-file-after-blocks-meta get-file-blocks get-file-contents get-file-last-modified-at get-file-no-sub get-file-page get-file-page-id get-file-pages get-files get-files-blocks get-files-full get-files-that-referenced-page get-journals-length get-latest-journals get-marker-blocks get-matched-blocks get-page get-page-alias get-page-alias-names get-page-blocks get-page-blocks-count get-page-blocks-no-cache get-page-file get-page-format get-page-name get-page-properties get-page-properties-content get-page-referenced-blocks get-page-referenced-pages get-page-unlinked-references get-pages get-pages-relation get-pages-that-mentioned-page get-pages-with-modified-at get-public-pages get-tag-pages journal-page? local-native-fs? mark-repo-as-cloned! page-alias-set page-blocks-transform pull-block rebuild-page-blocks-children  reset-config! set-file-last-modified-at! sub-key-value template-exists? transact-files-db! with-block-refs-count]"
https://api.github.com/repos/logseq/logseq/pulls/963,546512086,"@@ -10,5 +10,5 @@ @import ""./datepicker.css""; @import ""./highlight.css""; @import ""../../static/css/tailwind.core.css""; /* Build by gulp. Check `_buildTailwind` for more detail */-@import ""../../static/css/tailwind.build.css""; /* Build by gulp. Check `_buildTailwind` for more detail */ @import ""./common.css"";+@import ""../../static/css/tailwind.build.css""; /* Build by gulp. Check `_buildTailwind` for more detail */"
https://api.github.com/repos/logseq/logseq/pulls/965,546559669,"@@ -0,0 +1,36 @@+(ns frontend.db.model-test+  (:require [frontend.db.model :as model]+            [frontend.db.conn :as conn]+            [datascript.core :as d]+            [frontend.db-schema :as schema]+            [frontend.handler.repo :as repo-handler]+            [cljs.test :refer [deftest is are testing]]))++(defonce test-db ""test-db"")++(defn- run-db!+  []+  (conn/start! nil test-db))++(deftest test-page-alias-set+  []+  (run-db!)+  (let [files [{:file/path ""a.md""+                :file/content ""---\ntitle: a\nalias: [[b]]\n---""}"
https://api.github.com/repos/logseq/logseq/pulls/974,547064666,"@@ -758,6 +759,7 @@ title: How to take dummy notes?            :content/copy-as-json ""复制为 JSON""            :content/click-to-edit ""点击以编辑""            :settings-page/edit-config-edn ""编辑 config.edn (当前库)""+           :settings-page/show-brackets ""显示 [[]]"""
https://api.github.com/repos/logseq/logseq/pulls/971,547069780,"@@ -218,6 +219,7 @@     (get-page match)))  (rum/defcs sidebar < rum/reactive+  (stop-scroll-boundary-propagation-mixin #(js/document.querySelector ""#right-sidebar""))"
https://api.github.com/repos/logseq/logseq/pulls/982,547824154,"@@ -116,17 +116,26 @@              db-utils/seq-flatten              distinct))) -(defn get-alias-page+(defn get-alias-source-page   [repo alias]   (when-let [conn (and repo (conn/get-conn repo))]-    (some->> (d/q '[:find ?page-                    :in $ ?alias-                    :where-                    [?page :page/alias ?alias]]-                  conn-                  alias)-             db-utils/seq-flatten-             distinct)))+    (let [pages (->>+                 (d/q '[:find (pull ?p [*])"
https://api.github.com/repos/logseq/logseq/pulls/733,548008715,"@@ -0,0 +1,43 @@+(ns frontend.filtering+  (:require [frontend.util :as util]+            [frontend.state :as state]+            [frontend.db :as db]))++(defn get-block-references"
https://api.github.com/repos/logseq/logseq/pulls/961,549187001,"@@ -49,14 +49,14 @@ (defn embed-page   []   (conj-   [[:editor/input ""{{{embed [[]]}}}"" {:last-pattern slash-                                       :backward-pos 5}]]+   [[:editor/input ""{{embed [[]]}}"" {:last-pattern slash"
https://api.github.com/repos/logseq/logseq/pulls/1045,550952166,"@@ -315,6 +322,36 @@                                                  (string/join "" "")                                                  (util/format ""(between %s)"")))))) +(defn- add-bindings!+  [q]+  (let [b? (atom false)+        p? (atom false)+        not? (atom false)]"
https://api.github.com/repos/logseq/logseq/pulls/1073,553322019,"@@ -123,19 +125,51 @@     :else     (js/window.workerThread.rimraf dir))) +(defonce secret ""IRwamok0gbumjx41O0z83V/nzcqrac5vML6P62zS23c="")++(defn new-nonce+  []+  (nacl/randomBytes nacl/secretbox.nonceLength))++(defn encrypt+  [key content]+  (when key+    (let [key-decoded (nacl-util/decodeBase64 key)+          nonce (new-nonce)+          content-decoded (nacl-util/decodeUTF8 content)+          box (nacl/secretbox content-decoded nonce key-decoded)+          full-message (new js/Uint8Array (+ nonce.length box.length))]+      (js/console.log ""nonce"" (nacl-util/encodeBase64 nonce))+      (js/console.log ""box"" (nacl-util/encodeBase64 box))+      (.set full-message nonce)+      (.set full-message box nonce.length)+      (nacl-util/encodeBase64 full-message))))++(defn decrypt+  [key content-with-nonce]+  (when key+    (let [key-decoded (nacl-util/decodeBase64 key)+          content-with-nonce-decoded (nacl-util/decodeBase64 content-with-nonce)+          nonce (.slice content-with-nonce-decoded 0 nacl/secretbox.nonceLength)+          content (.slice content-with-nonce-decoded nacl/secretbox.nonceLength content-with-nonce.length)+          decrypted (nacl-util/encodeUTF8 (nacl/secretbox.open content nonce key-decoded))]+      (println ""decrypted"" decrypted)+      decrypted)))+ (defn read-file   ([dir path]    (read-file dir path (clj->js {:encoding ""utf8""})))   ([dir path option]-   (cond-     (local-db? dir)-     (let [handle-path (str ""handle"" dir ""/"" path)]-       (p/let [handle (idb/get-item handle-path)-               local-file (and handle (.getFile handle))]-         (and local-file (.text local-file))))+   (decrypt secret"
https://api.github.com/repos/logseq/logseq/pulls/1076,553715528,"@@ -257,6 +257,26 @@               body)]     (assoc block :body body))) +(defn extract-filetags+  [content]++  (def filetags-prefix ""#+filetags: "")++  (defn extract-line-filetags"
https://api.github.com/repos/logseq/logseq/pulls/1078,555762387,"@@ -140,6 +141,10 @@   []   (:git/current-repo @state)) +(defn get-current-block"
https://api.github.com/repos/logseq/logseq/pulls/1108,557079373,"@@ -127,19 +128,19 @@              [:svg.h-6.w-6.text-green-400               {:stroke ""currentColor"", :viewBox ""0 0 24 24"", :fill ""none""}               [:path-               {:d ""M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z""-                :stroke-width ""2""+               {:d               ""M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"""
https://api.github.com/repos/logseq/logseq/pulls/1137,558580653,"@@ -360,7 +360,7 @@              {:uuid uuid               :content content               :anchor (str uuid)-              :level 2+              :level 0"
https://api.github.com/repos/logseq/logseq/pulls/1181,563144507,"@@ -762,15 +762,12 @@          (= name ""youtube"")         (let [url (first arguments)]+          ;; javascript regex ""^((?:https?:)?\/\/)?((?:www|m)\.)?((?:youtube\.com|youtu.be))(\/(?:[\w\-]+\?v=|embed\/|v\/)?)(?<id>[\w\-]+)(\S+)?$"""
https://api.github.com/repos/logseq/logseq/pulls/1446,592950833,"@@ -55,13 +55,13 @@               (str (subs content 0 48) ""..."")               content))           ""Page no longer exists!!"")-        (let [page (util/url-decode name)+        (let [page name"
https://api.github.com/repos/logseq/logseq/pulls/1467,594856357,"@@ -100,6 +101,9 @@         ""csharp"" ""text/x-csharp""         ""objective-c"" ""text/x-objectivec""         ""scala"" ""text/x-scala""+        ""js"" ""text/javascript""+        ""ts"" ""text/typescript"""
https://api.github.com/repos/logseq/logseq/pulls/1486,596512301,"@@ -428,7 +428,7 @@   []   (let [current-length (:journals-length @state/state)]     (when (< current-length (db/get-journals-length))-      (state/update-state! :journals-length inc))))+      (state/set-journals-length! (+ current-length 10)))))"
https://api.github.com/repos/logseq/logseq/pulls/1529,600302295,"@@ -280,35 +280,14 @@         (.removeEventListener viewport ""resize"" handler)         (.removeEventListener viewport ""scroll"" handler))))) -;; FIXME: compute the right scroll position when scrolling back to the top-(defn on-scroll-  [on-load on-top-reached]-  (let [node js/document.documentElement-        full-height (gobj/get node ""scrollHeight"")-        scroll-top (gobj/get node ""scrollTop"")-        client-height (gobj/get node ""clientHeight"")-        bottom-reached? (<= (- full-height scroll-top client-height) 100)-        top-reached? (= scroll-top 0)]-    (when (and bottom-reached? on-load)-      (on-load))-    (when (and top-reached? on-top-reached)-      (on-top-reached))))--(defn attach-listeners-  ""Attach scroll and resize listeners.""-  [state]-  (let [opts (-> state :rum/args second)-        debounced-on-scroll (util/debounce 500 #(on-scroll-                                                 (:on-load opts) ; bottom reached-                                                 (:on-top-reached opts)))]-    (mixins/listen state js/document :scroll debounced-on-scroll)))- (rum/defcs infinite-list <-  (mixins/event-mixin attach-listeners)   ""Render an infinite list.""-  [state body {:keys [on-load on-top-reached]-               :as   opts}]-  body)+  [state body {:keys [on-load has-more]}]"
https://api.github.com/repos/logseq/logseq/pulls/1663,613699894,"@@ -524,6 +525,7 @@ title: How to take dummy notes?         :content/cut ""Ausschneiden""         :content/make-todos ""{1}s erstellen""         :content/copy-block-ref ""Blockreferenz kopieren""+        :content/copy-current-block-ref ""Aktuelle Blockreferenz kopieren"""
https://api.github.com/repos/logseq/logseq/pulls/1747,628761569,"@@ -0,0 +1,196 @@+import EventEmitter from 'eventemitter3'"
https://api.github.com/repos/logseq/logseq/pulls/1900,633498082,"@@ -385,6 +385,39 @@                               [:block/name (string/lower-case tag)]) tags))     block)) +(defn- remove-indentation-spaces+  [s level]+  (let [level (inc level)+        lines (string/split-lines s)+        [f & r] lines+        body (map (fn [line]+                    (if (string/blank? (util/safe-subs line 0 level))+                      (util/safe-subs line level)+                      line))+                  r)+        content (cons f body)]+    (string/join ""\n"" content)))++(defn- get-block-content+  [utf8-content block format]+  (def aaa [utf8-content block format])+  (let [meta (:meta block)+        content (if-let [end-pos (:end-pos meta)]+                  (utf8/substring utf8-content+                                  (:start-pos meta)+                                  end-pos)+                  (utf8/substring utf8-content+                                  (:start-pos meta)))]+    (let [content (when content+                    (let [content (text/remove-level-spaces content format)]+                      (if (or (:pre-block? block)+                              (= (:format block) :org))+                        content+                        (remove-indentation-spaces content (:level block)))))]+      (if (= format :org)+        content+        (text/->new-properties content)))))"
https://api.github.com/repos/logseq/logseq/pulls/1920,635126306,"@@ -272,6 +287,15 @@                  ""NOW/LATER""                  ""TODO/DOING"")])]]]] +        (toggle ""preffered_outdenting"""
https://api.github.com/repos/logseq/logseq/pulls/1934,636589961,"@@ -984,11 +984,16 @@ (defn- compose-copied-blocks-contents-&-block-tree   [repo block-ids]   (let [blocks (db-utils/pull-many repo '[*] (mapv (fn [id] [:block/uuid id]) block-ids))-        unordered? (:block/unordered (first blocks))-        format (:block/format (first blocks))-        level-blocks-map (blocks-with-level blocks)+        blocks* (flatten+                 (mapv (fn [b] (if (:collapsed (:block/properties b))+                                 (vec (tree/sort-blocks (db/get-block-children repo (:block/uuid b)) b))+                                 [b])) blocks))+        block-ids* (mapv #(:block/uuid %) blocks*)"
https://api.github.com/repos/logseq/logseq/pulls/2058,642344202,"@@ -56,6 +56,11 @@        (emit ""checking-for-update"" nil)        (-> (p/let             [artifact (get-latest-artifact-info repo)++             artifact (when-let [remote-version (and artifact (re-find #""\d+.\d+.\d+"" (:url artifact)))]"
https://api.github.com/repos/logseq/logseq/pulls/2054,642445467,"@@ -1374,6 +1374,14 @@                    (count val))]        (.setRangeText input """" current (inc idx))))) +#?(:cljs+   (defn fix-open-external-with-shift!+     [^js/MouseEvent e]+     (when (and (.-shiftKey e) win32? (electron?)"
https://api.github.com/repos/logseq/logseq/pulls/2061,643114007,"@@ -907,6 +907,13 @@   []   #?(:cljs (tc/to-long (cljs-time.core/now)))) +; Returns the milliseconds representation of the provided time, in the local timezone.+; For example, if you run this function at 10pm EDT in the EDT timezone on May 31st,+; it will return 1622433600000, which is equivalent to Mon May 31 2021 00 :00:00.+(defn today-at-local-ms+  [hours mins secs millisecs]+  (.setHours (js/Date. (.now js/Date)) hours mins secs millisecs))"
https://api.github.com/repos/logseq/logseq/pulls/2059,643193822,"@@ -482,6 +492,26 @@                   (.setAttribute anchor ""download"" path)                   (.click anchor)))))))))) +(defn export-page-as-opml!+  [page-name]+  (when-let [repo (state/get-current-repo)]+    (when-let [file (db/get-page-file page-name)]+      (when-let [path (:file/path file)]+        (when-let [content (get-page-content page-name)]+          (let [names [page-name]+                format (f/get-format path)+                files [{:path path :content content :names names :format format}]]+            (let [files (export-files-as-opml repo files)]+              (let [data (js/Blob. [(second (first files))]+                                   (clj->js {:type ""text/plain;charset=utf-8,""}))]+                (let [anchor (gdom/getElement ""export-page-as-opml"")+                      url (js/window.URL.createObjectURL data)+                      opml-path (string/replace path #""(.+)\.(md|org)$"" ""$1.opml"")]"
https://api.github.com/repos/logseq/logseq/pulls/2075,644855408,"@@ -558,3 +568,82 @@             (.setAttribute anchor ""href"" (js/window.URL.createObjectURL zipfile))             (.setAttribute anchor ""download"" (.-name zipfile))             (.click anchor)))))))++(defn- nested-select-keys+  [keyseq vec-tree]+  (walk/postwalk+   (fn [x]+     (cond+       (and (map? x) (contains? x :block/uuid))+       (select-keys x keyseq)++       (and (map? x) (contains? x :id))+       (dissoc x :id)++       :else+       x))+   vec-tree))++(defn- blocks [conn]+  {:version 1+   :blocks+   (->> (d/q '[:find (pull ?b [*])+               :in $+               :where+               [?b :block/file]+               [?b :block/original-name]+               [?b :block/name]] conn)++        (map (fn [[{:block/keys [name] :as page}]]+               (assoc page+                      :block/children+                      (outliner-tree/blocks->vec-tree+                       (db/get-page-blocks-no-cache+                        (state/get-current-repo)+                        name+                        {:transform? false}) name))))++        (nested-select-keys+         [:block/uuid+          :block/original-name+          :block/properties+          :block/format+          :block/children+          :block/title+          :block/body+          :block/content]))})++(defn export-repo-as-edn-v2!+  [repo]+  (when-let [conn (db/get-conn repo)]+    (let [edn-str (with-out-str+                    (pprint/pprint+                     (blocks conn)))+          data-str (str ""data:text/edn;charset=utf-8,"" (js/encodeURIComponent edn-str))]+      (when-let [anchor (gdom/getElement ""download-as-edn-v2"")]+        (.setAttribute anchor ""href"" data-str)+        (.setAttribute anchor ""download"" (str (last (string/split repo #""/"")) "".edn""))"
https://api.github.com/repos/logseq/logseq/pulls/2085,645317343,"@@ -153,7 +162,14 @@ interface IEditorProxy {   insertBlock: (srcBlock: BlockIdentity, content: string, opts?: Partial<{ before: boolean, sibling: boolean, props: {} }>) => Promise<BlockEntity | null>   updateBlock: (srcBlock: BlockIdentity, content: string, opts?: Partial<{ props: {} }>) => Promise<void>   removeBlock: (srcBlock: BlockIdentity, opts?: Partial<{ includeChildren: boolean }>) => Promise<void>-  getBlock: (srcBlock: BlockIdentity | BlockID, opts?: Partial<{ includeChildren: boolean }>) => Promise<BlockEntity | null>+  getBlock<IS_PAGE extends boolean | undefined>(+    srcBlock: BlockIdentity | BlockID,+    opts?: Partial<{ includeChildren: boolean }>+  ): IS_PAGE extends undefined"
https://api.github.com/repos/logseq/logseq/pulls/2093,645603744,"@@ -2804,3 +2794,123 @@     (save-current-block! {:force? true})     (util/forward-kill-word input)     (state/set-edit-content! (state/get-edit-input-id) (.-value input))))++(defn tree-seq-with-level+  [branch? children root]+  (let [walk (fn walk [level node]+               (lazy-seq+                (cons (assoc node :block/level level)+                      (when (branch? node)+                        (mapcat (partial walk (inc level)) (children node))))))]+    (walk 1 root)))++(defn all-blocks-with-level+  ""Return all blocks associated with correct level+   if :collapse? true, return without any collapsed children+   for example:+   - a+    - b (collapsed)+     - c+     - d+    - e+   return:+    blocks+    [{:block a :level 1}+     {:block b :level 2}+     {:block e :level 2}]""+  [{:keys [collapse?] :or {collapse? false}}]+  (let [page (state/get-current-page)]+    (cond->>+     (-> page+         (db/get-page-blocks-no-cache)+         (tree/blocks->vec-tree page))++     collapse?+     (w/postwalk+      (fn [x]+        (if (and (map? x) (-> x :block/properties :collapsed))+          (assoc x :block/children [])+          x)))++     :default+     (mapcat (fn [x] (tree-seq-with-level map? :block/children x)))++     :default"
https://api.github.com/repos/logseq/logseq/pulls/2142,648497549,"@@ -0,0 +1,195 @@+(ns frontend.util.cursor+  (:require [cljs-bean.core :as bean]+            [clojure.string :as string]+            [frontend.util :as util]+            [goog.dom :as gdom]+            [goog.object :as gobj]))++(defn- closer [a b c]+  (let [a-left (or (:left a) 0)+        b-left (:left b)+        c-left (or (:left c) js/Number.MAX_SAFE_INTEGER)]+    (if (< (- b-left a-left) (- c-left b-left))+      a+      c)))++(defn mock-char-pos [e]+  {:left (.-offsetLeft e)+   :top  (.-offsetTop e)+   :pos  (-> (.-id e)+             (string/split ""_"")+             second+             int)})++(defn get-caret-pos+  [input]+  (let [pos (.-selectionStart input)+        rect (bean/->clj (.. input (getBoundingClientRect) (toJSON)))]+    (try+      (-> (gdom/getElement ""mock-text"")+          gdom/getChildren+          array-seq+          (nth pos)+          mock-char-pos+          (assoc :rect rect))+      (catch :default _e"
https://api.github.com/repos/logseq/logseq/pulls/2143,648793247,"@@ -1999,6 +2008,65 @@          (db/refresh! repo {:key :block/insert :data new-blocks})          (last metadata-replaced-blocks)))))) +(defn- tree->vec-tree+  ""tree:+  [+  {+    :content 'this is a block',+    :props {\""key\"" \""value\"" \""key2\"" \""value2\""},+    :children [+      { :content 'this is child block' }+    ]+  },+  {+    :content 'this is sibling block'+  }+  ]""+  [tree]+  (into []+        (mapcat+         (fn [e]+           (let [e* (select-keys e [:content :props])]"
https://api.github.com/repos/logseq/logseq/pulls/2232,655059782,"@@ -146,7 +146,11 @@     :editor/backward-kill-word     {:desc    ""Kill a word backwards""      :binding (if mac? false ""alt+w"")-     :fn      editor-handler/backward-kill-word}}+     :fn      editor-handler/backward-kill-word}+    :editor/replace-block-reference-at-point+    {:desc ""Replace block reference with its content at point""+     :binding ""ctrl+c ctrl+c"""
https://api.github.com/repos/logseq/logseq/pulls/2259,656247360,"@@ -326,11 +325,13 @@         new-properties (merge                         (select-keys properties property/built-in-properties)                         (:block/properties block))]-    (-> block-        (dissoc :block/top?-                :block/block-refs-count)-        (assoc :block/content content-               :block/properties new-properties))))+    (merge"
https://api.github.com/repos/logseq/logseq/pulls/2268,657036085,"@@ -728,9 +724,15 @@                       :target ""_blank""}                   (map-inline config label)) -          (and (util/electron?) (config/local-asset? s))+          (and (util/electron?)+               (config/local-asset? s)+               (string/starts-with? (string/triml full_text) ""!""))"
https://api.github.com/repos/logseq/logseq/pulls/2294,659229315,"@@ -138,12 +140,272 @@  (rum/defc outdenting-hint   []-  [:div-   [:p ""See more details at "" [:a {:target ""_blank"" :href ""https://discuss.logseq.com/t/whats-your-preferred-outdent-behavior-the-direct-one-or-the-logical-one/978""} ""here""] "".""]-   [:p ""default(left) vs logical(right)""]-   [:img {:src ""https://discuss.logseq.com/uploads/default/original/1X/e8ea82f63a5e01f6d21b5da827927f538f3277b9.gif""-          :width 500-          :height 500}]])+  [:div.ui__modal-panel+   {:style {:box-shadow ""0 4px 20px 4px rgba(0, 20, 60, .1), 0 4px 80px -8px rgba(0, 20, 60, .2)""}}+   [:div {:style {:margin ""12px"" :max-width ""500px""}}+    [:p.text-sm+     ""The left side shows outdenting with the default setting, and the right shows outdenting with logical outdenting enabled. ""+     [:a.text-sm+      {:target ""_blank"" :href ""https://discuss.logseq.com/t/whats-your-preferred-outdent-behavior-the-direct-one-or-the-logical-one/978""}+      ""→ Learn more""]]+    [:img {:src ""https://discuss.logseq.com/uploads/default/original/1X/e8ea82f63a5e01f6d21b5da827927f538f3277b9.gif""+           :width 500+           :height 500}]]])++(defn edit-config-edn []+  (rum/with-context [[t] i18n/*tongue-context*]+    [:div.text-sm+     [:a {:href     (rfe/href :file {:path (config/get-config-path)})+          :on-click #(js/setTimeout (fn [] (ui-handler/toggle-settings-modal!)))}+      (t :settings-page/edit-config-edn)]]))++(defn show-brackets-row [t show-brackets?]+  [:div.it.sm:grid.sm:grid-cols-3.sm:gap-4.sm:items-start+   [:label.block.text-sm.font-medium.leading-5.opacity-70+    {:for ""show_brackets""}+    (t :settings-page/show-brackets)]+   [:div+    [:div.rounded-md.sm:max-w-xs+     (ui/toggle show-brackets?+                config-handler/toggle-ui-show-brackets!+                true)]]+   [:div {:style {:text-align ""right""}}+    ;; TODO: Fetch this shortcut from config.cljs so there's one source of truth+    (ui/keyboard-shortcut [:meta :c :meta :b])]])++(defn language-row [t preferred-language]+  [:div.it.sm:grid.sm:grid-cols-3.sm:gap-4.sm:items-start+   [:label.block.text-sm.font-medium.leading-5.opacity-70+    {:for ""preferred_language""}+    (t :language)]+   [:div.mt-1.sm:mt-0.sm:col-span-2+    [:div.max-w-lg.rounded-md+     [:select.form-select.is-small+      {:value preferred-language+       :on-change (fn [e]+                    (let [lang-code (util/evalue e)]+                      (state/set-preferred-language! lang-code)+                      (ui-handler/re-render-root!)))}+      (for [language dicts/languages]+        (let [lang-code (name (:value language))+              lang-label (:label language)]+          [:option {:key lang-code :value lang-code} lang-label]))]]]])++(defn theme-modes-row [t switch-theme system-theme? dark?]+  [:div.it.sm:grid.sm:grid-cols-3.sm:gap-4+   [:label.block.text-sm.font-medium.leading-5.opacity-70+    {:for ""toggle_theme""}+    (t :right-side-bar/switch-theme (string/capitalize switch-theme))]+   [:div.flex.flex-row.mt-1.sm:mt-0.sm:col-span-1+    [:div.rounded-md.sm:max-w-xs++     [:ul.theme-modes-options+      [:li {:on-click (partial state/use-theme-mode! ""light"")+            :class    (classnames [{:active (and (not system-theme?) (not dark?))}])} [:i.mode-light] [:strong ""light""]]+      [:li {:on-click (partial state/use-theme-mode! ""dark"")+            :class    (classnames [{:active (and (not system-theme?) dark?)}])} [:i.mode-dark] [:strong ""dark""]]+      [:li {:on-click (partial state/use-theme-mode! ""system"")+            :class    (classnames [{:active system-theme?}])} [:i.mode-system] [:strong ""system""]]]]]++   [:div {:style {:text-align ""right""}}+    (ui/keyboard-shortcut [:t :t])]])++(defn file-format-row [t preferred-format]+  [:div.it.sm:grid.sm:grid-cols-3.sm:gap-4.sm:items-start+   [:label.block.text-sm.font-medium.leading-5.opacity-70+    {:for ""preferred_format""}+    (t :settings-page/preferred-file-format)]+   [:div.mt-1.sm:mt-0.sm:col-span-2+    [:div.max-w-lg.rounded-md+     [:select.form-select.is-small+      {:value (name preferred-format)+       :on-change (fn [e]+                    (let [format (-> (util/evalue e)+                                     (string/lower-case)+                                     keyword)]+                      (user-handler/set-preferred-format! format)))}+      (for [format (map name [:org :markdown])]+        [:option {:key format :value format} (string/capitalize format)])]]]])++(defn date-format-row [t preferred-date-format]+  [:div.it.sm:grid.sm:grid-cols-3.sm:gap-4.sm:items-:div.it.sm:grid.sm:grid-cols-3.sm:gap-4.sm:items-start+   [:label.block.text-sm.font-medium.leading-5.opacity-70+    {:for ""custom_date_format""}+    (t :settings-page/custom-date-format)]+   [:div.mt-1.sm:mt-0.sm:col-span-2+    [:div.max-w-lg.rounded-md+     [:select.form-select.is-small+      {:value preferred-date-format+       :on-change (fn [e]+                    (let [format (util/evalue e)]+                      (when-not (string/blank? format)+                        (config-handler/set-config! :date-formatter format)+                        (notification/show!+                         [:div ""You need to re-index your graph to make the change works""]+                         :success)+                        (state/close-modal!)+                        (route-handler/redirect! {:to :repos}))))}+      (for [format (sort (date/journal-title-formatters))]+        [:option {:key format} format])]]]])++(defn workflow-row [t preferred-workflow]+  [:div.it.sm:grid.sm:grid-cols-3.sm:gap-4.sm:items-start+   [:label.block.text-sm.font-medium.leading-5.opacity-70+    {:for ""preferred_workflow""}+    (t :settings-page/preferred-workflow)]+   [:div.mt-1.sm:mt-0.sm:col-span-2+    [:div.max-w-lg.rounded-md+     [:select.form-select.is-small+      {:value (name preferred-workflow)+       :on-change (fn [e]+                    (-> (util/evalue e)+                        string/lower-case+                        keyword+                        (#(if (= % :now) :now :todo))+                        user-handler/set-preferred-workflow!))}+      (for [workflow [:now :todo]]+        [:option {:key (name workflow) :value (name workflow)}+         (if (= workflow :now) ""NOW/LATER"" ""TODO/DOING"")])]]]])++(defn outdenting-row [t logical-outdenting?]+  (toggle ""preferred_outdenting""+          [(t :settings-page/preferred-outdenting)+           (ui/tippy {:html (outdenting-hint)+                      :class ""tippy-hover ml-2""+                      :interactive true+                      :disabled false}+                     (svg/info))]+          logical-outdenting?+          config-handler/toggle-logical-outdenting!))++(defn tooltip-row [t enable-tooltip?]+  (toggle ""enable_tooltip""+          (t :settings-page/enable-tooltip)+          enable-tooltip?+          (fn []+            (config-handler/toggle-ui-enable-tooltip!))))++(defn timetracking-row [t enable-timetracking?]+  (toggle ""enable_timetracking""+          (t :settings-page/enable-timetracking)+          enable-timetracking?+          (fn []+            (let [value (not enable-timetracking?)]+              (config-handler/set-config! :feature/enable-timetracking? value)))))++(defn update-home-page+  [event]+  (let [value (util/evalue event)]+    (cond+      (string/blank? value)+      (let [home (get (state/get-config) :default-home {})+            new-home (dissoc home :page)]+        (config-handler/set-config! :default-home new-home)+        (notification/show! ""Home default page updated successfully!"" :success))++      (page-handler/page-exists? (string/lower-case value))+      (let [home (get (state/get-config) :default-home {})+            new-home (assoc home :page value)]+        (config-handler/set-config! :default-home new-home)+        (notification/show! ""Home default page updated successfully!"" :success))++      :else+      (notification/show! (str ""The page \"""" value ""\"" doesn't exist yet. Please create that page first, and then try again."") :warning))))++(defn journal-row [t enable-journals?]+  [(toggle ""enable_journals""+           (t :settings-page/enable-journals)+           enable-journals?+           (fn []+             (let [value (not enable-journals?)]+               (config-handler/set-config! :feature/enable-journals? value))))++   (when (not enable-journals?)+     [:div.it.sm:grid.sm:grid-cols-3.sm:gap-4.sm:items-start+      [:label.block.text-sm.font-medium.leading-5.opacity-70+       {:for ""default page""}+       (t :settings-page/home-default-page)]+      [:div.mt-1.sm:mt-0.sm:col-span-2+       [:div.max-w-lg.rounded-md.sm:max-w-xs+        [:input#home-default-page.form-input.is-small.transition.duration-150.ease-in-out+         {:default-value (state/sub-default-home-page)+          :on-blur update-home-page+          :on-key-press (fn [e]+                          (when (= ""Enter"" (util/ekey e))+                            (update-home-page e)))}]]]])])++(defn encryption-row [t enable-encryption?]+  (toggle ""enable_encryption""+          (t :settings-page/enable-encryption)+          enable-encryption?+          (fn []+            (let [value (not enable-encryption?)]+              (config-handler/set-config! :feature/enable-encryption? value)))))++(defn keyboard-shortcuts-row [t]+  [:div.it.sm:grid.sm:grid-cols-3.sm:gap-4.sm:items-start+   [:label.block.text-sm.font-medium.leading-5.opacity-70+    {:for ""customize_shortcuts""}+    (t :settings-page/customize-shortcuts)]+   [:div.mt-1.sm:mt-0.sm:col-span-2+    [:div+     (ui/button+      (t :settings-page/shortcut-settings)+      :class ""text-sm p-1""+      :style {:margin-top ""0px""}+      :on-click+      (fn []+        (state/close-settings!)+        (route-handler/redirect! {:to :shortcut})))]]])++(defn auto-push-row [t current-repo enable-git-auto-push?]+  (when (string/starts-with? current-repo ""https://"")+    (toggle ""enable_git_auto_push""+            ""Enable Git auto push""+            enable-git-auto-push?+            (fn []+              (let [value (not enable-git-auto-push?)]+                (config-handler/set-config! :git-auto-push value))))))++(defn usage-diagnostics-row [t instrument-disabled?]+  (toggle ""usage-diagnostics""+          (t :settings-page/disable-sentry)+          (not instrument-disabled?)+          (fn [] (instrument/disable-instrument+                  (not instrument-disabled?)))+          [:span.text-sm.opacity-50 ""Logseq will never collect your local graph database or sell your data.""]))++(defn clear-cache-row [t]+  [:div.sm:grid.sm:grid-cols-3.sm:gap-4.sm:items-center.sm:pt-5+   [:label.block.text-sm.font-medium.leading-5.opacity-70+    {:for ""clear_cache""}+    (t :settings-page/clear-cache)]+   [:div.mt-1.sm:mt-0.sm:col-span-2+    [:div.max-w-lg.rounded-md.sm:max-w-xs+     (ui/button+      (t :settings-page/clear)+      :class ""text-sm p-1""+      :on-click handler/clear-cache!)]]])++(defn version-row [t version]+  [:div.it.app-updater.sm:grid.sm:grid-cols-3.sm:gap-4.sm:items-start+   [:label.block.text-sm.font-medium.leading-5.opacity-70+    (t :settings-page/current-version)]+   [:div.wrap.sm:mt-0.sm:col-span-2+    (when (util/electron?) (app-updater))+    [:span.ver version]]])++(defn developer-mode-row [t developer-mode?]+  (toggle ""developer_mode""+          (t :settings-page/developer-mode)+          developer-mode?+          (fn []+            (let [mode (not developer-mode?)]+              (state/set-developer-mode! mode)+              (and mode (util/electron?)+                   (if (js/confirm (t :developer-mode-alert))+                     (js/logseq.api.relaunch)))))+          [:div.text-sm.opacity-50 (t :settings-page/developer-mode-desc)]))"
https://api.github.com/repos/logseq/logseq/pulls/2316,660546436,"@@ -1635,43 +1635,36 @@        (not (d/has-class? (gobj/get e ""target"") ""bullet""))        (not @*dragging?))) +(rum/defc breadcrumb-fragment+  [href label]+  [:a {:href href} (apply str label)])"
https://api.github.com/repos/logseq/logseq/pulls/2330,662695581,"@@ -183,6 +183,16 @@ export interface IAppProxy {   showMsg: (content: string, status?: 'success' | 'warning' | string) => void   setZoomFactor: (factor: number) => void +  registerUIItem: (+    type: 'toolbar' | 'pagebar',+    opts: { key: string, template: string }+  ) => boolean++  registerPagebarMenuItem: ("
https://api.github.com/repos/logseq/logseq/pulls/2359,662871966,"@@ -85,6 +97,20 @@   (when-let [repo (get-local-repo)]     (state/set-modal! (ask-permission repo)))) +++(defmethod handle :after-db-restore [[_ repo]]+  (println "":after-db-restore: "" repo)+  (let [conn* (conn/get-conn repo)+        ast-version (:v (first (d/datoms conn* :aevt :ast/version)))]+    (when (or (nil? ast-version)+              (. semver lt ast-version db-schema/ast-version))+      (notification/show!+       [:p.content+        (util/format ""DB-schema updated, Please re-index repo [%s]"" repo)]+       :error"
https://api.github.com/repos/logseq/logseq/pulls/2365,663379148,"@@ -211,8 +211,14 @@                                  :block                                  block)) -                              nil)-                            (search-handler/clear-search!))"
https://api.github.com/repos/logseq/logseq/pulls/2386,664662759,"@@ -1,6 +1,7 @@ const colors = require('tailwindcss/colors')  module.exports = {+  mode: 'jit',"
https://api.github.com/repos/logseq/logseq/pulls/2391,664977859,"@@ -413,7 +412,7 @@                            (editor-handler/insert-first-page-block-if-not-exists! redirect-page-name)                            (when-let [f (state/get-page-blocks-cp)]                              (f (state/get-current-repo) page {:sidebar? sidebar? :preview? true})))])]-    (if (and manual? open?)+    (if (or (not manual?) open?)"
https://api.github.com/repos/logseq/logseq/pulls/2393,665440029,"@@ -382,12 +382,20 @@     (set-up-key-down! repo state format)     (set-up-key-up! state input input-id search-timeout))) -(defn- get-editor-heading-class-  [content heading-level]-  (if (string/includes? content ""\n"")"
https://api.github.com/repos/logseq/logseq/pulls/2399,666965639,"@@ -13,6 +14,31 @@ declare global {   } } +export const IS_DEV = process.env.NODE_ENV === 'development'++let _appPathRoot++export async function getAppPathRoot () {"
https://api.github.com/repos/logseq/logseq/pulls/2443,671791352,"@@ -29,34 +29,35 @@   (insta/transform    {:number     (comp edn/read-string #(str/replace % "","" """"))     :scientific edn/read-string+    :negterm    (fn neg [a] (- a))     :expr       identity     :add        +     :sub        -     :mul        *     :div        /-    :pow        (fn [a b]+    :pow        (fn pow [a b]                   #?(:clj (java.lang.Math/pow a b) :cljs (js/Math.pow a b)))-    :log        (fn [a]+    :log        (fn log [a]                   #?(:clj (java.lang.Math/log10 a) :cljs (js/Math.log10 a)))-    :ln         (fn [a]+    :ln         (fn ln [a]                   #?(:clj (java.lang.Math/log a) :cljs (js/Math.log a)))-    :sin        (fn [a]+    :sin        (fn sin [a]                   #?(:clj (java.lang.Math/sin a) :cljs (js/Math.sin a)))-    :cos        (fn [a]+    :cos        (fn cos [a]                   #?(:clj (java.lang.Math/cos a) :cljs (js/Math.cos a)))-    :tan        (fn [a]+    :tan        (fn tan [a]                   #?(:clj (java.lang.Math/tan a) :cljs (js/Math.tan a)))-    :atan       (fn [a]+    :atan       (fn atan [a]                   #?(:clj (java.lang.Math/atan a) :cljs (js/Math.atan a)))-    :asin       (fn [a]+    :asin       (fn asin [a]                   #?(:clj (java.lang.Math/asin a) :cljs (js/Math.asin a)))-    :acos       (fn [a]+    :acos       (fn acos [a]                   #?(:clj (java.lang.Math/acos a) :cljs (js/Math.acos a)))-    :assignment (fn [var val]+    :assignment (fn assign! [var val]                   (swap! env assoc var val)                   val)     :toassign   str/trim-    :variable   (fn [var]+    :variable   (fn resolve [var]"
https://api.github.com/repos/logseq/logseq/pulls/2450,672351267,"@@ -296,28 +296,26 @@ (defn set-global-active-keystroke [val]   (.setAttribute js/document.body ""data-active-keystroke"" val)) -(defn clear-global-active-keystroke []-  (set-global-active-keystroke """"))- (defn setup-active-keystroke! []   (let [active-keystroke (atom #{})-        handle-global-keystroke-        (fn [down? e]-          (let [handler (if down? conj disj)-                keystroke e.key]-            (swap! active-keystroke handler keystroke))-          (set-global-active-keystroke (apply str (interpose ""+"" (vec @active-keystroke)))))+        handle-global-keystroke (fn [down? e]+                                  (let [handler (if down? conj disj)+                                        keystroke e.key]+                                    (swap! active-keystroke handler keystroke))+                                  (set-global-active-keystroke (apply str (interpose ""+"" (vec @active-keystroke)))))         keydown-handler (partial handle-global-keystroke true)-        keyup-handler (partial handle-global-keystroke false)]+        keyup-handler (partial handle-global-keystroke false)+        clear-all #(do (set-global-active-keystroke """")+                        (reset! active-keystroke #{}))]"
https://api.github.com/repos/logseq/logseq/pulls/2544,684190343,"@@ -1231,6 +1231,13 @@                (rum/with-key (block-container config child)                  (:block/uuid child)))))])))) +(defn block-content-empty?+  [block]+  (and+    (property/properties-built-in? (:block/properties block))"
https://api.github.com/repos/logseq/logseq/pulls/2598,685966126,"@@ -303,7 +303,8 @@         :help/shortcut-page-title ""Keyboard shortcuts""          :pdf/copy-ref ""Copy ref""-        :pdf/copy-text ""Copy text""}+        :pdf/copy-text ""Copy text""+        :pdf/linked-ref ""Goto annotation""}"
https://api.github.com/repos/logseq/logseq/pulls/2601,686486795,"@@ -163,7 +163,7 @@           (db/transact! [(assoc page-id :block/properties {key value})])           (db/refresh! repo {:key :block/change                              :data [block]})-          ;; (ui-handler/re-render-root!)+          (ui-handler/re-render-root!)"
https://api.github.com/repos/logseq/logseq/pulls/2613,687369783,"@@ -111,6 +110,7 @@   max-width: 7ch;   color: var(--ls-icon-color, #045591);   height: 14px;+  @apply md:max-w-none;"
https://api.github.com/repos/logseq/logseq/pulls/2633,688226272,"@@ -10,6 +10,14 @@         font-size: 22px;         margin: 0;       }++      .ui__button,"
https://api.github.com/repos/logseq/logseq/pulls/2660,691347921,"@@ -91,6 +92,10 @@      (util/format ""![%s](%s)"" label link)      (util/format ""[%s](%s)"" label link)))) +(defn org-link"
https://api.github.com/repos/logseq/logseq/pulls/2689,693600219,"@@ -284,7 +284,7 @@         content (reduce (fn [content key]                           (remove-property format key content)) content built-in-properties*)]     (if (= format :org)-      (string/replace-first content "":PROPERTIES:\n:END:"" """")+      (string/replace-first content "":PROPERTIES:\n:END:\n"" """")"
https://api.github.com/repos/logseq/logseq/pulls/2686,693602733,"@@ -149,7 +149,7 @@                  (util/format ""\n#+END_%s"" (string/upper-case type)))          template (str                    left-                   (if optional (str "" "" optional) """")+                   (if optional (str optional) """")"
https://api.github.com/repos/logseq/logseq/pulls/2909,720653291,"@@ -47,7 +48,7 @@                        (vec))]     (p/let [_ (-> (file-handler/create-pages-metadata-file repo)                   (p/catch (fn [] nil)))]-      (let [new-content (pr-str all-pages)]+      (let [new-content (with-out-str (cljs.pprint/pprint all-pages))]"
https://api.github.com/repos/logseq/logseq/pulls/2970,730741877,"@@ -21,17 +22,19 @@      (string/join ""\n"" [(drawer-start typ) drawer-end]))))  (defn get-drawer-ast-  [format content typ]-  (let [ast (mldoc/->edn content (mldoc/default-config format))+  [content typ]+  (let [format (state/get-preferred-format)+        ast (mldoc/->edn content (mldoc/default-config format))         typ-drawer (ffirst (filter (fn [x]                                      (mldoc/typ-drawer? x typ)) ast))]     typ-drawer))  (defn insert-drawer-  [format content typ value]"
https://api.github.com/repos/logseq/logseq/pulls/2948,730754468,"@@ -32,6 +34,23 @@   []   (state/toggle-sidebar-open?!)) +(defn persist-right-sidebar-state!+  []+  (let [sidebar-open? (:ui/sidebar-open? @state/state)+        data (if sidebar-open? {:blocks (:sidebar/blocks @state/state)+                                :collapsed (:ui/sidebar-collapsed-blocks @state/state)+                                :open? true} {:open? false})]+    (storage/set ""ls-right-sidebar-state"" (prn-str data))))"
https://api.github.com/repos/logseq/logseq/pulls/2987,734473412,"@@ -795,7 +795,17 @@                            (reduce (fn [content [old new]]                                      (string/replace content old new))                                    content))-          content (string/replace-first content ""DOING"" ""TODO"")+          _ (println content)"
https://api.github.com/repos/logseq/logseq/pulls/3010,737461684,"@@ -2788,6 +2775,19 @@           (state/set-last-pos! (cursor/pos input))           (reset! commands/*slash-caret-pos (cursor/get-caret-pos input))) +        (let [sym "":""]+          (and+           (= key sym)+           (>= (count value) 1)+           (> pos 0)+           (= (nth value (dec pos)) "" "")+           (cursor/textarea-cursor-first-row? input)+           (= :org (state/get-preferred-format))))+        (do+          (commands/handle-step [:editor/search-page-hashtag])"
https://api.github.com/repos/logseq/logseq/pulls/3001,739736498,"@@ -2848,7 +2844,7 @@                          (not= (util/nth-safe value current-pos) ""]"")))             (state/set-editor-show-page-search-hashtag! false))) -        (when (and @*show-commands (not= key-code 191)) ; not /+        (when (and @*show-commands (not= key-code 191)) ; not /   TODO: is this the .charCodeAt or the event code?"
https://api.github.com/repos/logseq/logseq/pulls/3066,742979079,"@@ -200,26 +200,50 @@      (p/catch (fn [error]                 (println ""file rename failed: "" error)))))) +(defn- replace-page-ref!+  [content old-name new-name]+  (let [[original-old-name original-new-name] (map string/trim [old-name new-name])+        [old-ref new-ref] (map #(util/format ""[[%s]]"" %) [old-name new-name])+        [old-name new-name] (map #(when (string/includes? % ""/"")+                                    (string/replace % ""/"" "".""))+                                 [original-old-name original-new-name])+        old-org-ref (and (= :org (state/get-preferred-format))+                         (:org-mode/insert-file-link? (state/get-config))+                         (re-find+                          (re-pattern+                           (util/format+                            ""\\[\\[file:\\./.*%s\\.org\\]\\[(.*?)\\]\\]"" old-name))+                          content))]+    (-> (if old-org-ref+            (let [[old-full-ref old-label] old-org-ref+                  new-label (if (= old-label original-old-name)+                                original-new-name+                              old-label)+                  new-full-ref (-> (string/replace old-full-ref old-name new-name)+                                   (string/replace (str ""["" old-label ""]"")+                                                   (str ""["" new-label ""]"")))]+              (string/replace content old-full-ref new-full-ref))+          content)+        (string/replace old-ref new-ref))))++(defn- replace-tag-ref!+  [content old-name new-name]+  (let [old-tag (str "" #"" old-name)"
https://api.github.com/repos/logseq/logseq/pulls/3061,746217180,"@@ -2118,18 +2118,15 @@         data-refs-self (build-refs-data-value refs)         edit-input-id (str ""edit-block-"" blocks-container-id ""-"" uuid)         edit? (state/sub [:editor/editing? edit-input-id])]-    [:div.ls-block.flex.flex-col.rounded-sm+    [:div.ls-block      (cond->       {:id block-id        :data-refs data-refs        :data-refs-self data-refs-self-       :style {:position ""relative""}        :class (str uuid                    (when (and collapsed? has-child?) "" collapsed"")                    (when pre-block? "" pre-block""))-       :blockid (str uuid)-       :repo repo-       :haschild (str has-child?)}"
https://api.github.com/repos/logseq/logseq/pulls/3108,746361233,"@@ -443,24 +406,55 @@        (ui-handler/re-render-root!)))) +(defn- rename-nested-pages+  [old-ns-name new-ns-name]+  (when-let [nested-pages (db/get-nested-pages+                           (state/get-current-repo)+                           (string/lower-case old-ns-name))]+    (doseq [page nested-pages]+      (let [[_page-id old-page-name] page+            new-page-name (string/replace old-page-name+                                          (re-pattern (util/format ""(?i)\\[\\[%s\\]\\]"" old-ns-name))+                                          (util/format ""[[%s]]"" new-ns-name))]+        (rename-page-aux old-page-name new-page-name)))))++(defn- rename-namespace-pages!+  [repo old-name new-name]+  (let [pages (db/get-namespace-pages repo old-name)]+    (doseq [{:block/keys [name original-name] :as page} pages]+      (let [old-page-title (or original-name name)+            new-page-title (build-new-namespace-page-title old-page-title old-name new-name)]+        (when (and old-page-title new-page-title)+          (p/let [_ (rename-page-aux old-page-title new-page-title)]+            (println ""Renamed "" old-page-title "" to "" new-page-title)))))))+ (defn rename!   [old-name new-name]-  (let [old-name      (string/trim old-name)+  (let [repo          (state/get-current-repo)+        old-name      (string/trim old-name)         new-name      (string/trim new-name)+        namespace     (or (string/includes? old-name ""/"")+                          (db/get-namespace-pages repo old-name))         name-changed? (not= old-name new-name)]-    (when (and old-name-               new-name-               (not (string/blank? new-name))-               name-changed?)+    (if (and old-name+             new-name+             (not (string/blank? new-name))+             name-changed?)       (cond-        (= (string/lower-case old-name) (string/lower-case new-name))-        (rename-page-aux old-name new-name)-         (db/pull [:block/name (string/lower-case new-name)])         (notification/show! ""Page already exists!"" :error)          :else-        (rename-page-aux old-name new-name)))))+        (do (if namespace+              (rename-namespace-pages! repo old-name new-name)+              (rename-page-aux old-name new-name))+            (rename-nested-pages old-name new-name)))+      (cond+        (string/blank? new-name)+        (notification/show! ""Please use a valid name, empty name is not allowed!"" :error)++        (not name-changed?)+        (notification/show! ""Cannot rename to page with same same!"" :error)))))"
https://api.github.com/repos/logseq/logseq/pulls/3140,748799491,"@@ -323,17 +355,6 @@   (when-let [user-footer (and config/publishing? (get-in (state/get-config) [:publish-common-footer]))]     [:div.p-6 user-footer])) -(defn get-default-home-if-valid-  []-  (when-let [default-home (state/get-default-home)]-    (let [page (:page default-home)-          page (when (and (string? page)-                          (not (string/blank? page)))-                 (db/entity [:block/name (util/safe-lower-case page)]))]-      (if page-        default-home-        (dissoc default-home :page)))))-"
https://api.github.com/repos/logseq/logseq/pulls/3227,753972474,"@@ -633,7 +633,7 @@  (defn replace-first-ignore-case   [s old-value new-value & [escape-chars]]-  (let [escape-chars (or escape-chars ""[]{}().+*?"")+  (let [escape-chars (or escape-chars ""[]{}().+*?|"")"
https://api.github.com/repos/logseq/logseq/pulls/3254,755690854,"@@ -226,6 +226,9 @@   (let [chan (state/get-events-chan)]     (async/go-loop []       (let [payload (async/<! chan)]-        (handle payload))+        (try+          (handle payload)+          (catch js/Error e+            (js/console.error ""[System/events]"" (clj->js payload) ""\n"" e))))"
https://api.github.com/repos/logseq/logseq/pulls/3279,757241161,"@@ -214,31 +214,32 @@         :content/open-in-sidebar ""Open in sidebar""         :content/copy-as-json ""Copy as JSON""         :content/click-to-edit ""Click to edit""-        :settings-page/edit-config-edn ""Edit config.edn for current graph""+        :settings-page/edit-config-edn ""Edit config.edn""+        :settings-page/edit-custom-css ""Edit custom.css""         :settings-page/show-brackets ""Show brackets""         :settings-page/spell-checker ""Spell checker""         :settings-page/auto-updater ""Auto updater""         :settings-page/disable-sentry ""Send usage data and diagnostics to Logseq""-        :settings-page/preferred-outdenting ""Enable logical outdenting""+        :settings-page/preferred-outdenting ""Logical outdenting""         :settings-page/custom-date-format ""Preferred date format""         :settings-page/preferred-file-format ""Preferred file format""         :settings-page/preferred-workflow ""Preferred workflow""-        :settings-page/enable-timetracking ""Enable timetracking""-        :settings-page/enable-tooltip ""Enable tooltips""         :settings-page/enable-shortcut-tooltip ""Enable shortcut tooltip""-        :settings-page/enable-journals ""Enable journals""-        :settings-page/enable-all-pages-public ""Enable all pages public when publishing""-        :settings-page/enable-encryption ""Enable encryption feature""+        :settings-page/enable-timetracking ""Timetracking""+        :settings-page/enable-tooltip ""Tooltips""+        :settings-page/enable-journals ""Journals""+        :settings-page/enable-all-pages-public ""All pages public when publishing""+        :settings-page/enable-encryption ""Encryption"""
https://api.github.com/repos/logseq/logseq/pulls/3297,758028264,"@@ -173,6 +173,9 @@               [:p.pt-2.text-sm.opacity-50                (t :git/version) (str "" "" version/version)]]])))]))) +(defn shorten-repo-name [repo-name]+  (last (string/split repo-name #""/"")))"
https://api.github.com/repos/logseq/logseq/pulls/3311,758856988,"@@ -112,12 +112,15 @@ Run ClojureScript tests yarn test ``` -Run Cypress tests+Run E2E tests  ``` bash-yarn e2e-test+yarn electron-watch+# in another shell+yarn e2e-test # or npx playwright test ``` +"
https://api.github.com/repos/logseq/logseq/pulls/3328,760186936,"@@ -1787,9 +1788,77 @@                   (= move-to :nested)))           (dnd-separator move-to block-content?)))))) +(rum/defcs decrypt-block  < rum/reactive+  {:init (fn [state]+           (state/update-state! :editor/content {})+           state+           )+   :did-mount (fn [state]+                (state/set-editor-args! (:rum/args state))+                state) }+  (rum/local true ::textclear?)+  (rum/local """" ::password)+  [state block block-id content]+  (let [block (or (db/pull [:block/uuid (:block/uuid block)]) block)+        properties (:block/properties block)+        encryption (:encrypted properties)+        content (-> (property/remove-built-in-properties (:block/format block) content)+                    (drawer/remove-logbook)+                    )+        text-input-id (str ""ls-encryption-"" (:block/uuid block))+        text (state/sub [:editor/content text-input-id])+        textclear? (::textclear? state)+        password (::password state)+        ]+    (when (nil? text)+      (reset! textclear? (not encryption))+      (state/set-edit-content! text-input-id (if encryption (string/join ""\n"" (rest (string/split-lines content))) content))+      )+          +    [:div.encrypt.resize+     (ui/ls-textarea+      {:id                text-input-id+       :cacheMeasurements true+       :default-value     text+       :auto-focus        false+       :read-only         (not @textclear?)+       :on-change (fn [e] (when @textclear?+                            (state/set-edit-content! text-input-id (util/evalue e))+                            ))+       })+     [:div.mt-4+      [:input.form-input.block.w-full.sm:text-sm.sm:leading-5.my-2+       {:type ""password""+        :placeholder (if @textclear?  ""Password ..(empty to disable encryption)"" ""Password"")+        :auto-focus true+        :on-change (fn [e]+                     (reset! password (util/evalue e)) )}]+      (ui/button (if @textclear? ""Save!"" ""Decrypt!"")+                 :on-click (if @textclear?+                               (fn []+                                 (when (string/blank? @password)+                                   (editor-handler/save-block-aux! block text {})+                                   (editor-handler/remove-block-property! block-id :encrypted))+                                 (when-not (string/blank? @password)+                                 (p/let [encrypted      (e/encrypt-with-passphrase @password text)+                                         title     (first (string/split-lines text))+                                         title (if (string/blank? title) ""ENCRYPTED BLOCK"" title)+                                         ]+                                   (editor-handler/save-block-aux! block (string/join ""\n"" [title encrypted]) {})+                                   (editor-handler/set-block-property! block-id :encrypted true)+                                   )))+                               (fn []+                                 (p/let [decrypted (e/decrypt-with-passphrase @password (str text ""\n"") )]"
https://api.github.com/repos/logseq/logseq/pulls/3326,760699073,"@@ -1286,6 +1287,7 @@       (let [page-name (string/lower-case page)]         (state/clear-edit!)         (insert-first-page-block-if-not-exists! page-name)+        (recent-handler/add-page-to-recent! (state/get-current-repo) page-name)"
https://api.github.com/repos/logseq/logseq/pulls/3366,763606812,"@@ -366,6 +366,10 @@                                      :binding ""t f""                                      :fn      ui-handler/toggle-contents!} +   :command/add-to-favorites       {:desc    ""Add to/remove from favorites""+                                    :binding ""mod+shift+f""+                                    :fn      #((page-handler/toggle-favorite!))}"
https://api.github.com/repos/logseq/logseq/pulls/3375,764087861,"@@ -269,7 +268,7 @@              (let [repo-path (get-repo-name current-repo)                    short-repo-name (if (or (util/electron?)                                            (mobile-util/is-native-platform?))-                                     (shorten-repo-name repo-path)+                                     (last (string/split repo-path #""/""))"
https://api.github.com/repos/logseq/logseq/pulls/3443,767868583,"@@ -1,12 +1,16 @@ .extensions__code {   @apply relative;   z-index: 0;-+  display: flex;+  flex-direction: row-reverse;+  flex-wrap: nowrap;"
https://api.github.com/repos/logseq/logseq/pulls/3358,767945638,"@@ -92,8 +92,8 @@  (defn- get-list-item-indent&bullet [line]   (when-not (string/blank? line)-    (or (re-matches #""^([ \t\r]*)(\+|\*|-) (\[[X ]\])*.*$"" line)-        (re-matches #""^([\s]*)(\d+)\. (\[[X ]\])*.*$"" line))))+    (or (re-matches #""^([ \t\r]*)(\+|\*|-){1} (\[[X ]\])*.*$"" line)"
https://api.github.com/repos/magomimmo/modern-cljs/pulls/248,48672159,"@@ -12,6 +12,8 @@ To install `java` follow the [instructions][3] for your operating system. To install `boot` follow the very easy instructions in the corresponding section of its [README][4]. +> Note: For this tutorial to work as expected, make sure you install boot version 2.4.2+ Test the installation by issuing the `boot -h` command at the terminal. Then submit the `boot -u` command to get the latest `boot`"
https://api.github.com/repos/marick/Midje/pulls/186,3205668,"@@ -24,6 +24,10 @@   (not actual)) (defalias FALSEY falsey) +(defchecker &"
https://api.github.com/repos/marick/Midje/pulls/228,5308658,"@@ -0,0 +1,82 @@+(ns ^{:doc ""TAP output. See http://testanything.org""}+  midje.emission.plugins.tap+  (:use midje.emission.util)+  (:require [midje.data.fact :as fact]+            [midje.emission.state :as state]+            [midje.emission.plugins.util :as util]+            [midje.emission.plugins.silence :as silence]+            [midje.emission.plugins.default-failure-lines :as lines]+            [clojure.string :as str]))++(def fact-counter (atom 0))++(defn- format-failure-summary [failure-map]+  (let [[_ _ & more] (lines/summarize failure-map)]+    (map #(str ""# "" %) (conj more (apply str (:position failure-map))))))++(defn future-fact [description-list position]+  (do"
https://api.github.com/repos/marick/Midje/pulls/381,106668625,"@@ -48,4 +48,21 @@   (let [lines (friendly-exception-lines (Error. ""message"") "">>>"")]     (first lines) => #""Error.*message""     (re-find #""^>>>"" (first lines)) => falsey-    (count (map #(re-find #"">>>implementation.util.t_exceptions"" %) (rest lines))) => (count (rest lines))))+    (count (remove nil? (map #(re-find #"">>>implementation.util.fim_exceptions"" %) (rest lines)))) => (count (rest lines))))"
https://api.github.com/repos/marick/Midje/pulls/386,120657996,"@@ -7,19 +7,19 @@                  [marick/clojure-commons ""3.0.0"" :exclusions [org.clojure/clojure]]                  ;; structural-typing currently broken with specter 0.13                  ;; [marick/structural-typing ""2.0.4"" :exclusions [org.clojure/clojure org.clojure/clojurescript]]-                 [org.clojure/math.combinatorics ""0.1.3""]+                 [org.clojure/math.combinatorics ""0.1.4""]"
https://api.github.com/repos/marick/Midje/pulls/388,121210240,"@@ -72,17 +72,18 @@   clojure.lang.Seqable   (seq [this] (seq storage))  ; I'm unhappy to define this, but it's needed by count/empty. +  clojure.lang.Counted+  (count [this] (count storage))"
https://api.github.com/repos/marick/Midje/pulls/390,121550347,"@@ -4,7 +4,7 @@   (:import midje.data.metaconstant.Metaconstant))  (defn predefine-metaconstants-from-form [form]-  (let [metaconstant-symbols (filter data/metaconstant-symbol? (tree-seq coll? seq form))]+  (let [metaconstant-symbols (set (filter data/metaconstant-symbol? (tree-seq coll? seq form)))]"
https://api.github.com/repos/marick/Midje/pulls/391,121816499,"@@ -15,6 +15,8 @@   ;; Note ordering   (attractively-stringified-value {:b 2 :a 1}) => ""{:a 1, :b 2}""   (attractively-stringified-value #{9 6 2 7 1 3}) => ""#{1 2 3 6 7 9}""+  (read-string (attractively-stringified-value #{[1] [:a]})) => #{[1] [:a]}+  (read-string (attractively-stringified-value {[1] ""1"" [:a] ""a""})) => {[1] ""1"" [:a] ""a""}"
https://api.github.com/repos/marick/Midje/pulls/387,122998589,"@@ -44,7 +44,15 @@                 (symbol? (second form))                 (expect-arrows (name (second form)))))) -(defn start-of-prerequisite-arrow-sequence? [form]+(defmulti start-of-prerequisite-arrow-sequence? tree-variant)"
https://api.github.com/repos/marick/Midje/pulls/394,123277561,"@@ -263,6 +263,11 @@                   commons/union                   (set (map name symbols)))) +(defn remove-midje-fact-symbols [symbols]+  (alter-var-root #'at-least-one-string-with-this-name-must-be-present+                  commons/difference+                  (set (map name symbols))))"
https://api.github.com/repos/marick/Midje/pulls/399,131238153,"@@ -1,4 +1,4 @@-(defproject midje ""1.9.0-alpha8""+(defproject midje ""1.9.0-alpha9"""
https://api.github.com/repos/marick/Midje/pulls/400,133488347,"@@ -78,27 +80,28 @@   clojure.lang.IPersistentCollection   (cons [this o]         ;; (Metaconstant. (.underlying-symbol this) (cons storage o)))-        (throw (exceptions/user-error-                (str ""Metaconstants ("" (.underlying-symbol this) "") can't have values added onto them."")-                ""If you have a compelling need for that, please create an issue:""-                ecosystem/issues-url)))+        (throw (report-error (str ""Metaconstants ("" (.underlying-symbol this) "") can't have values added onto them.""))))   (empty [this]          (empty storage))   (equiv [this that]          (if (or (symbol? that)                  (= (type that) Metaconstant)                  (= that unbound-marker))            (.equals this that)-           (throw (exceptions/user-error-                   (str ""Metaconstants ("" (.underlying-symbol this) "") can't be compared for equality with "" (pr-str that) ""."")-                   ""If you have a compelling case for equality, please create an issue:""-                   ecosystem/issues-url))))+           (throw+             (report-error (str ""Metaconstants ("" (.underlying-symbol this) "") can't be compared for equality with ""+                                (pr-str that) ""."")))))    ;; Interface that provide meta support.   clojure.lang.IObj   (meta [this] meta-data)   (withMeta [this m] (Metaconstant. underlying-symbol storage m))) +(defn metaconstant [underlying-symbol ^clojure.lang.Associative storage meta-data]+  (when (not (map? storage))+    (throw (report-error (str ""Metaconstants ("" underlying-symbol "") can't represent non-map values "" (pr-str storage) "".""))))+  (Metaconstant. underlying-symbol storage meta-data))"
https://api.github.com/repos/marick/Midje/pulls/404,147728190,"@@ -141,15 +141,22 @@         : a nicely printed stack trace         : maps and sets sorted by key.""   [v]-  (let [raw-str (cond-                  (fn? v)                           (function-name v)-                  (exception/captured-throwable? v) (exception/friendly-stacktrace v)-                  (record? v)                       (str (sorted-if-appropriate v) ""::"" (record-name v))-                  :else                             (sorted-if-appropriate v))]-    (puget/cprint-str raw-str {:print-handlers {Metaconstant puget/pr-handler}-                               :print-fallback :pretty-                               :seq-limit      10-                               :map-delimiter  """"})))+  (if (exception/captured-throwable? v)+    (exception/friendly-stacktrace v)+    (let [raw-str (cond (fn? v)     (function-name v)+                        (record? v) (str (sorted-if-appropriate v) ""::"" (record-name v))+                        :else       (sorted-if-appropriate v))]+      (cond+        (config/choice :pretty-print)+        (puget/cprint-str raw-str {:print-handlers {Metaconstant puget/pr-handler}+                                   :print-fallback :pretty+                                   :seq-limit      10+                                   :map-delimiter  """"})+        (string? raw-str)+        raw-str++        :else+        (pr-str raw-str)))))"
https://api.github.com/repos/marick/Midje/pulls/413,148752409,"@@ -58,39 +58,48 @@ (defn- first-form-is-a-state-changer? [forms]   (#{""before"" ""after"" ""around""} (name (ffirst forms)))) -(defn- ^{:testable true } separate-individual-changers+(defn- process-preq-arrow [forms]+  (let [arrow-seq     (take-arrow-sequence forms)+        line-override `(pointer/line-number-known+                         ~(-> arrow-seq first meta :line))+        tagged-fake   (-> arrow-seq+                          prerequisite-to-fake+                          (fakes/tag-as-background-fake line-override))]"
https://api.github.com/repos/marick/Midje/pulls/414,148776440,"@@ -1,23 +0,0 @@-(ns midje.Bootstrap)--(defonce bootstrapped false)--(defn bootstrap []-  (when-not bootstrapped-    (require 'midje.config)-    (let [saved-ns (ns-name *ns*)]-      (try-        (in-ns 'midje.config)-        ((ns-resolve 'midje.config 'load-config-files))-      (finally-        (in-ns saved-ns))))--    (require 'midje.emission.api)-    ( (ns-resolve 'midje.emission.api 'load-plugin)-      ( (ns-resolve 'midje.config 'choice) :emitter))"
https://api.github.com/repos/marick/Midje/pulls/416,149931173,"@@ -0,0 +1,105 @@+(ns behaviors.t-for-all+  (:require [midje.test-util :refer :all]+            [midje.sweet :refer :all]+            [clojure.test.check.generators :as gen]))++(silent-for-all ""generative tests""+  [strictly-pos gen/s-pos-int+   any-integer  gen/int]+  {:seed 1510160943861}+  (fact ""Summing an integer to a positive integer should be positive? Really?""+    strictly-pos => integer?+    (+ strictly-pos any-integer) => pos?))+(note-that (fails 1 time))++(for-all+  [strictly-pos gen/s-pos-int+   any-integer  gen/int]+  {:seed 3510160943861}+  (let [an-int 0]+    (fact ""I. you can wrap your facts in `let`""+      (+ an-int strictly-pos any-integer) => pos?))+  (let [an-int 1]+    (fact ""II. you can wrap your facts in `let`""+      (+ an-int strictly-pos any-integer) => pos?)))++(for-all ""random map not confounded with quick-check options if in correct place""+  [strictly-pos gen/s-pos-int+   any-integer  gen/int]+  {:seed 3510160943861}+  {:some 'random :map '.}+  (fact (+ strictly-pos any-integer) => pos?))++(silent-for-all ""confounding random map with quick-check options""+  [strictly-pos gen/s-pos-int+   any-integer  gen/int]+  {:some 'random :map '.}+  (fact (+ strictly-pos any-integer) => pos?))+(note-that+  parse-error-found+  (fact-failed-with-note #""unrecognized keys in \`for-all\` options map: \(:some :map\)""))++(silent-for-all ""uneven count in binding vector""+  [strictly-pos gen/s-pos-int+   any-integer]+  (fact 1 => 1))+(note-that+  parse-error-found+  (fact-failed-with-note #""\`for-all\` must have an even number""))++(for-all ""a `for-all` with no checks inside still works""+  [strictly-pos gen/s-pos-int]+  false)++(silent-for-all ""a `for-all` with generation boundings still works""+  []+  (fact 1 => 1))+(note-that+  parse-error-found+  (fact-failed-with-note #""\`for-all\` cannot have an empty binding vector""))++(silent-for-all+  [y gen/int]+  {:num-tests -1}+  y => integer?)+(note-that+  parse-error-found+  (fact-failed-with-note #"":num-tests \`for-all\` option must be greater than 0: -1""))++(silent-for-all+  [y gen/int]+  {:num-tests 0}+  y => integer?)+(note-that+  parse-error-found+  (fact-failed-with-note #"":num-tests \`for-all\` option must be greater than 0: 0""))+++(unfinished f)+(for-all ""mixing facts and arrows and provides""+  [strictly-pos gen/s-pos-int]+  (fact ""use the generated value in provided""+    (f strictly-pos) => 2+    (provided (f strictly-pos) => 2))+  ;; The body of the `for-all` is wrapped in a fact, so it can contain `facts`+  ;; as well as checks+  (f strictly-pos) => 1+  (provided (f strictly-pos) => 1))"
https://api.github.com/repos/marick/Midje/pulls/433,159376722,"@@ -158,7 +158,10 @@  (provided    (g (h (i (j 1)))) => 3)) -(defn second-arg [a b] (+ a (f a (g b))))+(defn f [n m] 100)+(defn second-arg [a b]+  (+ a (f a (g b))))+"
https://api.github.com/repos/marick/Midje/pulls/434,159424320,"@@ -2,6 +2,9 @@ This project adheres to [Semantic Versioning](http://semver.org/). See [here](http://keepachangelog.com/) for the change log format. +## [1.9.2-alpha3] - 2018-01-03+- Disallow faking of all functions in `clojure.core`. If Midje happens to use any of them in code paths executed while they are redifined, it will change the behavior of Midje."
https://api.github.com/repos/marick/Midje/pulls/445,212944399,"@@ -33,26 +33,24 @@  (def pass-count (state/output-counters:midje-passes)) (for-all-  [strictly-pos gen/s-pos-int-   any-integer  gen/int]+  [strictly-pos gen/s-pos-int]   {:seed 3510160943861}"
https://api.github.com/repos/marick/Midje/pulls/449,229995083,"@@ -19,3 +19,10 @@   [& _]   (pointer/set-fallback-line-number-from &form)   (parse-generative/parse-for-all &form))++(defmacro gen-let+  {:arglists '([binding-form & facts]"
https://api.github.com/repos/marick/Midje/pulls/459,269207719,"@@ -49,14 +50,25 @@       (throw (user-error (str ""These are not configuration keys: "" (vec extras))))))   (dorun (map validate-key! changes))) +(defn conform-config+  ;; Should be private, but we use it in a public macro"
https://api.github.com/repos/marick/Midje/pulls/473,587568411,"@@ -64,9 +64,12 @@       (str (fact/file fact) "":"" (fact/line fact))))  (defn process-fact [fact]-  (let [elapsed (/ (time/in-millis (time/interval (-> fact :attrs :start-time)-                                                  (-> fact :attrs :stop-time)))+  (let [start-time (-> fact :attrs :start-time)+        stop-time (-> fact :attrs :stop-time)+        elapsed (if (time/before? start-time stop-time) +                  (/ (time/in-millis (time/interval start-time stop-time))                    1000.0)"
https://api.github.com/repos/marick/Midje/pulls/474,629276005,"@@ -0,0 +1,23 @@+(ns marick.midje+  (:require [clj-kondo.hooks-api :as hooks]+            [clojure.string :as string]))++(defn table-variable? [node]+  (let [sexpr (hooks/sexpr node)]+    (and (symbol? sexpr)+         (string/starts-with? (str sexpr) ""?""))))++(defn ^:private let-with-table-variables [body bindings]+  (let [new-bindings (vec (reduce (fn [acc i]+                                    (concat acc [i nil])) [] bindings))]"
https://api.github.com/repos/marick/Midje/pulls/475,630097041,"@@ -17,15 +27,50 @@  (defn ^:private do-form [forms]   (hooks/list-node-    (concat [(hooks/token-node 'do)]-            forms)))+   (concat [(hooks/token-node 'do)]+           forms))) -(defn tabular [{:keys [node]}]-  (let [[facts vec-bindings & bindings] (rest (:children node))]+(defn ^:private table-variable? [node]+  (let [sexpr (hooks/sexpr node)]+    (and (symbol? sexpr)+         (string/starts-with? (str sexpr) ""?""))))++(defn ^:private handle-fact-outside-tabular [children arrow]+  (let [pos-arrow-index (inc (index-of arrow children))+        body (do-form children)+        bindings (->> children+                      (map-indexed (fn [i el]+                                     (when (> i pos-arrow-index)+                                       el)))+                      (remove nil?))]+    (if (hooks/vector-node? (first bindings))+      {:node (->> (hooks/sexpr (first bindings))+                  (map hooks/token-node)+                  (let-form body))}+      {:node (->> bindings+                  (filter table-variable?)+                  (let-form body))})))++(defn fact-tabular [fact vec-bindings bindings]+  (let [body (do-form (cons fact bindings))]     (if (hooks/vector-node? vec-bindings)-      {:node (let-with-table-variables-               (do-form (cons facts bindings))-               (map hooks/token-node (hooks/sexpr vec-bindings)))}+      {:node (->> (hooks/sexpr vec-bindings)+                  (map hooks/token-node)+                  (let-form body))}       {:node (->> (cons vec-bindings bindings)                   (filter table-variable?)-                  (let-with-table-variables facts))})))+                  (let-form body))})))"
https://api.github.com/repos/metosin/compojure-api/pulls/32,14451873,"@@ -26,7 +26,9 @@ (defn body-coercer-middleware [handler model]   (fn [request]     (if-let [response (handler request)]-      (assoc response :body (schema/coerce! model (:body response))))))+      (-> response+          (assoc ::serializable? true)"
https://api.github.com/repos/metosin/compojure-api/pulls/35,14482542,"@@ -43,8 +45,13 @@       (POST* ""/minus"" []         :return      Total         :body-params [x :- Long y :- Long]+        :responseMessages [{:code 400+                            :responseModel ErrorEnvelope}]"
https://api.github.com/repos/metosin/compojure-api/pulls/125,32380628,"@@ -415,20 +415,33 @@ the `:components` restucturing with letk-syntax:  To see this in action, try `lein run` and navigate to Components api group. -## Models+## Schemas -Compojure-api uses the [Schema](https://github.com/Prismatic/schema)-based modeling,-backed up by [ring-swagger](https://github.com/metosin/ring-swagger) for mapping the models int Swagger/JSON Schemas.-**Note**: for Map-based schemas, Keyword keys should be used instead of Strings.+Compojure-api uses the [Schema](https://github.com/Prismatic/schema) to describe data models, backed up by+[ring-swagger](https://github.com/metosin/ring-swagger) for mapping the models int Swagger JSON Schemas.+With Map-based schemas, Keyword keys should be used instead of Strings. -Two coercers are available (and automatically selected with smart destructuring): -one for json and another for string-based formats (query-parameters & path-parameters). -See [Ring-Swagger](https://github.com/metosin/ring-swagger#schema-coersion) for more details.+### Coercion -### sample schema and coercion+Input and output schemas are coerced automatically using a schema coercion matcher selected by a coercion type.+There are three types of coercion: -Compojure-api selects the right coercer and does the coercion behalf of the user, but if one-wan't to call the coersion manually, here's a sample:+- `:body`  coercion of the request body+- `:string` coercion of query, path, header and form parameters+- `:response` coercsion of response body++Default implementation uses Ring-swagger coercion matchers, `json-schema-coercion-matcher` for `:body` and `:response`+and `query-schema-coercion-matcher` for `:string`. One can override the defaults using an api-middleware option+`:coercion` or using a restructuring key `:coerction`. Both expect a function value of type"
https://api.github.com/repos/metosin/compojure-api/pulls/160,38126149,"@@ -197,13 +194,15 @@                                     middleware manually.)""   [handler & [options]]   (let [options (deep-merge api-middleware-defaults options)-        {:keys [exceptions validation-errors format components]} options+        {:keys [exceptions format components]} options         {:keys [formats params-opts response-opts]} format]+    ; Break at compile time if there are deprecated options+    (assert (not (:error-handler (:validation-errors options))) ""Deprecated option: [:validation-errors :error-handler], use [:exceptions :error-handlers :compojure.api.middleware/request-validation] instead."")+    (assert (not (:catch-core-errors? (:validation-errors options))) ""Deprecated option: [:validation-errors :catch-core-errors?], use [:exceptions :error-handlers :compojure.api.exception/request-validation] instead."")"
https://api.github.com/repos/metosin/compojure-api/pulls/176,46078173,"@@ -0,0 +1,20 @@+(ns compojure.api.logging+  (:require [clojure.string :as str]))++;; default to console logging+(defn log! [level x & more]"
https://api.github.com/repos/metosin/compojure-api/pulls/195,49766851,"@@ -1,3 +1,13 @@+## Unreleased++- Log any exceptions and add option to define function used to+log exceptions. ([#191](https://github.com/metosin/compojure-api/issues/191))+  - Previously only default exception handler logged exceptions, but+  `request-validation`, `request-parsing`, `response-validation` or+  `schema-error` exceptions were not logged. Now they are logged.+  - To disable logging completely, provide no-op `log-fn`:+  `:exceptions {:log-fn (fn [e] nil)}`"
https://api.github.com/repos/metosin/compojure-api/pulls/243,70716840,"@@ -50,14 +52,19 @@   [& body]   (let [[options handlers] (common/extract-parameters body false)         options (rsc/deep-merge api-defaults options)-        handler (apply c/routes (concat [(swagger/swagger-routes (:swagger options))] handlers))+        raw (:raw options)+        swagger-ui (-> (swagger/swagger-routes (:swagger options))+                       (cond-> raw ;; if the api won't be wrapped, swagger-ui still needs to be"
https://api.github.com/repos/metosin/compojure-api/pulls/275,99343588,"@@ -0,0 +1,16 @@+(ns compojure.api.help-test+  (:require [compojure.api.help :as help]+            [compojure.api.meta :as api.meta]+            [midje.sweet :refer :all]))++(facts help-for-api-meta+  (fact ""all restructure-param methods have a help text""+    (let [restructure-method-names (-> (methods api.meta/restructure-param)+                                       keys+                                       (conj :bla))"
https://api.github.com/repos/metosin/compojure-api/pulls/277,100238231,"@@ -1,10 +1,12 @@ ## 1.2.0-SNAPSHOT  * Fix help-for for some restructure methods [#275](https://github.com/metosin/compojure-api/pull/275) by [Nicolás Berger](https://github.com/nberger)+* In `compojure.api.swagger`, the `swagger-ui` and `swagger-docs` now take options map with `uri` key instead of separate optional path & vararg opts."
https://api.github.com/repos/metosin/compojure-api/pulls/284,106781305,"@@ -531,14 +532,14 @@  (defmacro static-context   [path route]-  `(#'compojure.core/if-context+  `(#'compojure.api.compojure-compat/make-context      ~(#'compojure.core/context-route path)-     ~route))+     (constantly ~route)))  (defn routing [handlers]   (if-let [handlers (seq (keep identity handlers))]-    (apply some-fn handlers)-    (constantly nil)))+    (apply compojure.core/routes handlers)"
https://api.github.com/repos/metosin/compojure-api/pulls/293,115183980,"@@ -55,4 +55,11 @@                  (async/>! chan e))                (finally                  (async/close! chan)))))-         chan)))))+         chan)))+   (context ""/resource"" []+            (resource"
https://api.github.com/repos/metosin/compojure-api/pulls/294,115529235,"@@ -134,30 +134,23 @@       (handler {:request-method :get, :query-params {:x ""10""}}) => (has-body {:total 10})       (handler {:request-method :post, :query-params {:x ""1""}}) => (has-body {:total 1})))) -(let [req-error (atom nil)-      res-error (atom nil)-      result    (atom nil)-      handler   (resource-                 {:parameters {:query-params {:x Long}}-                  :responses {200 {:schema {:total (s/constrained Long pos? 'pos)}}}-                  :handler (fn [{{x :x} :query-params} respond _]-                             (future-                               (respond (ok {:total x}))))})]-  @(handler  {:query-params {:x 1}}-             #(reset! result %)-             nil)-  @(handler  {:query-params {:x -1}}-             #(identity %)-             #(reset! res-error %))-  (handler  {:query-params {:x ""x""}}-            #(identity %)-            #(reset! req-error %))--  (fact ""3-arity handler""-    @result => (has-body {:total 1})-    (throw @res-error) => response-validation-failed?-    (throw @req-error) => request-validation-failed?))-+(fact ""3-arity handler""+  (let [handler   (resource+                   {:parameters {:query-params {:x Long}}+                    :responses  {200 {:schema {:total (s/constrained Long pos? 'pos)}}}+                    :handler    (fn [{{x :x} :query-params} res _]+                                  (future+                                    (res (ok {:total x})))+                                  nil)})+        respond (promise), res-raise (promise), req-raise (promise)]++    (handler  {:query-params {:x 1}} respond nil)+    (handler  {:query-params {:x -1}} #(identity %) res-raise)"
https://api.github.com/repos/metosin/compojure-api/pulls/307,119074323,"@@ -19,32 +20,57 @@   (response/internal-server-error {:type ""unknown-exception""                                    :class (.getName (.getClass e))})) -(defn stringify-error+(defn stringify   ""Stringifies symbols and validation errors in Schema error, keeping the structure intact.""   [error]   (walk/postwalk     (fn [x]       (cond+        (class? x) (.getName ^Class x)+        (satisfies? s/Schema x) (try (s/explain x) (catch Exception _ x))         (instance? ValidationError x) (str (su/validation-error-explain x))         (instance? NamedError x) (str (su/named-error-explain x))         :else x))     error))  (defn response-validation-handler-  ""Creates error response based on Schema error.""+  ""Creates error response based on a response error. The following keys are available:++    :type            type of the exception (::response-validation)+    :validation      validation lib that was used (:schema)+    :in              location of the value ([:response :body])+    :schema          schema to be validated against+    :error           schema error+    :response        raw response""   [e data req]-  (response/internal-server-error {:errors (stringify-error (su/error-val data))}))+  (response/internal-server-error+    (-> data+        (assoc :value (-> data :response :body))+        (dissoc :response)+        (update :schema stringify)+        (update :errors stringify))))  (defn request-validation-handler-  ""Creates error response based on Schema error.""+  ""Creates error response based on Schema error.+    :type            type of the exception (::request-validation)+    :validation      validation lib that was used (:schema)+    :value           value of the"
https://api.github.com/repos/metosin/compojure-api/pulls/308,119105013,"@@ -70,8 +70,7 @@      (extract-paths app) -    => {""/swagger.json"" {:get {:x-name :compojure.api.swagger/swagger,-                               :x-no-doc true}}+    => {""/swagger.json"" {:get {:x-name :compojure.api.swagger/swagger}}"
https://api.github.com/repos/metosin/compojure-api/pulls/309,121334888,"@@ -1,3 +1,81 @@+## UNRELEASED++* **BREAKING**: Restructuring internal key changes in `compojure.api.meta`:+  * `:swagger` is removed in favor of `:info`.+  * swagger-data is pushed to [`:info :public`] instead of [`:swagger`]"
https://api.github.com/repos/metosin/compojure-api/pulls/349,146850480,"@@ -607,7 +635,8 @@                           :body body}                          options) -        static? (not (or dynamic? (route-args? route-arg) (seq lets) (seq letks)))+        static? (not (or (-> info :public :dynamic boolean)"
https://api.github.com/repos/metosin/compojure-api/pulls/364,161965032,"@@ -47,9 +47,26 @@ See [CHANGELOG](https://github.com/metosin/compojure-api/blob/master/CHANGELOG.m     (ok {:message (str ""Hello, "" name)}))) ``` +### Validating an API"
https://api.github.com/repos/metosin/compojure-api/pulls/384,195682070,"@@ -286,3 +289,27 @@          wrap-nested-params          ;; 4.5µs => 7.1µs (+50%)          wrap-params))))++(defn wrap-format+  ""Muuntaja format middleware. Can be safely mounted on"
https://api.github.com/repos/metosin/malli/pulls/5,289420362,"@@ -0,0 +1,96 @@+(ns malli.design-draft+  (:import (clojure.lang IPersistentMap)))+++;;; malli schemas++;; Core schemas are not namespace qualified keywords to make using them user+;; friendly.++;; Schemas are written using Hiccup style vectors, where order is significant.++;; Every schema definition can have additional options-map after schema name.+;; Options-map can have arbitrary amount of data, with some keys having special+;; meaning, like below, which describes a closed map.++[:map {:closed true, :description ""My closed map""}]++;; Schema definitions live in registry. Malli provides a core registry for+;; all the essential schemas. Registry can be extended on the runtime and it's+;; possible to have as many registries one needs.++;; The actual registry definitions and format is wip, but could be something+;; like below.++;; Compiles given definition to Schema+(declare compile)"
https://api.github.com/repos/metosin/malli/pulls/6,298027989,"@@ -0,0 +1,302 @@+(ns malli.malli)"
https://api.github.com/repos/metosin/malli/pulls/28,311085724,"@@ -224,7 +224,23 @@ Wrapping schemas into `m/schema` makes them first class entities. Here `User` is ; => true ``` -## Links+## Motivation++We are building dynamic multi-tenant systems, where data-models should be first-class: they should drive the runtime value transformations, forms and processes. We should be able to edit the models at runtime, persistent and load back them from database and over the wire, for both Clojure and ClojureScript. Think of [JSON Schema](https://json-schema.org/), but for Clojure/Script."
https://api.github.com/repos/metosin/malli/pulls/32,312431080,"@@ -69,9 +77,9 @@     (fn [properties [child :as childs] _]       (when-not (= 1 (count childs))         (fail! ::child-error {:name name, :properties properties, :childs childs, :min 1, :max 1}))-      [#(f % child) childs])))+      [#(try (f % child) (catch #?(:clj Exception, :cljs js/Error) _ false)) childs]))) -(defn- -composite-schema [name f]+(defn- -composite-schema [name f shirt-circuit]"
https://api.github.com/repos/metosin/malli/pulls/41,314951517,"@@ -275,6 +275,47 @@           (-properties [_] properties)           (-form [_] form)))))) +(defn- -map-of-schema []+  ^{:type ::into-schema}+  (reify IntoSchema+    (-name [_] :map-of)+    (-into-schema [_ properties childs opts]+      (when-not (and (seq childs) (= 2 (count childs)))+        (fail! ::invalid-map-of))+      (let [[key-schema value-schema :as schemas] (mapv #(schema % opts) childs)+            key-valid? (-validator key-schema)+            value-valid? (-validator value-schema)+            validate (fn [m]+                       (reduce"
https://api.github.com/repos/metosin/malli/pulls/50,318607038,"@@ -174,7 +174,8 @@                                (fn [[key {:keys [optional]} value]]                                  (let [valid? (-validator value)                                        default (boolean optional)]-                                   (fn [m] (if-let [v (key m)] (valid? v) default))))+                                   (fn [m] (let [v (key m ::missing-key)]+                                             (if (not= v ::missing-key) (valid? v) default)))))"
https://api.github.com/repos/metosin/malli/pulls/52,319202501,"@@ -141,40 +141,73 @@     [(first xs) (rest xs)]     [nil xs])) +(defn- -valid-schema? [schema?]+  (try+    (schema schema?)+    true+    (catch Exception _ false)))++(defn- -conform-childs [childs]+  (if (and (= 2 (count childs)) (every? -valid-schema? childs))+    [childs]+    childs))++(defn- -is-pred-key?+  [entry]+  (-> entry meta :pred-key?))++(defn- -only-map-of?"
https://api.github.com/repos/metosin/malli/pulls/57,321844337,"@@ -165,8 +165,9 @@   (reify IntoSchema     (-name [_] :map)     (-into-schema [_ properties childs opts]-      (let [{:keys [entries forms]} (-parse-keys childs opts)-            form (create-form :map properties forms)]+      (let [{:keys [entries forms keys]} (-parse-keys childs opts)+            form (create-form :map properties forms)+            properties' (assoc properties ::map-keys keys)]"
https://api.github.com/repos/metosin/malli/pulls/70,332116684,"@@ -733,6 +746,13 @@   ([form opts]    (schema (edamame/parse-string form {:dispatch {\# {\"" #(re-pattern %)}}}) opts))) +(defn map-key [_]+  ^{:type ::schema}+  (reify Schema+    (-name [_] :map-key)"
https://api.github.com/repos/metosin/malli/pulls/106,341537254,"@@ -48,7 +48,11 @@ #?(:clj    (defn -re-gen [schema opts]      (let [re (or (first (m/childs schema opts)) (m/form schema opts))]-       (gen2/string-from-regex (re-pattern (str/replace (str re) #""^\^?(.*?)(\$?)$"" ""$1""))))))"
https://api.github.com/repos/metosin/malli/pulls/142,357496072,"@@ -136,19 +136,21 @@                         :else acc'')))                   acc explainers))))           (-transformer [this transformer method]-            (let [build-transformer+            (let [value-transformer  (-value-transformer transformer this method)+                  child-transformers (map #(-transformer % transformer method) child-schemas)+                  build-transformer                   (fn [phase]-                    (let [st (phase (-value-transformer transformer this method))+                    (let [st  (phase value-transformer)                           ?st (or st identity)-                          tvs (into [] (keep #(phase (-transformer % transformer method)) child-schemas))]+                          tvs (into [] (keep phase) child-transformers)]                       (cond-                        (not (seq tvs)) st"
https://api.github.com/repos/metosin/malli/pulls/150,358498016,"@@ -76,11 +76,31 @@     (seq children) (into [name] children)     :else name)) +(defn- -transform-if+  [pred tf]+  (when tf+    (fn [x]+      (if (pred x)+        (tf x)+        x))))+ (defn- -chain [phase chain]   (let [f (case phase             :enter identity             :leave reverse)]-    (some->> chain (keep identity) (seq) (f) (reverse) (apply comp))))+    (some->> chain+             (keep (fn [item]+                     (if (vector? item)+                       (let [pred (first item)+                             child-chain (second item)]+                         (assert (fn? pred) ""First item in tuple must be a predicate fn"")+                         (assert (seqable? child-chain) ""Second item in tuple must be a sequence"")"
https://api.github.com/repos/metosin/malli/pulls/152,361719128,"@@ -404,31 +404,61 @@ Single sweep of defaults & string encoding: ; :c {:x ""42""}} ``` -## Merging Schemas+## Programming with Schemas -Schemas can be deep-merged with `m/merge`:+```clj+(require '[malli.util :as mu])+```++Merging Schemas (last value wins):  ```clj-(m/merge-  Address+(mu/merge   [:map+   [:name string?]    [:description string?]+   [:address+    [:map+     [:street string?]+     [:country [:enum ""finland"" ""poland""]]]]]+  [:map+   [:description {:optional true} string?]    [:address     [:map      [:country string?]]]]) ;[:map-; [:id string?]-; [:tags [:set keyword?]]-; [:address -;  [:map -;   [:street string?] -;   [:city string?] -;   [:zip int?] -;   [:lonlat [:tuple double? double?]] -;   [:country string?]]]-; [:description string?]]+; [:name string?]+; [:description {:optional true} string?]+; [:address [:map+;            [:street string?]+;            [:country string?]]]] ``` +Schema unions (merged values of both schemas are valid for union schema):++```clj+(mu/union+  [:map+   [:name string?]+   [:description string?]+   [:address+    [:map+     [:street string?]+     [:country [:enum ""finland"" ""poland""]]]]]+  [:map+   [:description {:optional true} string?]+   [:address+    [:map+     [:country string?]]]])+;[:map+; [:name string?]+; [:description string?]"
https://api.github.com/repos/metosin/malli/pulls/173,377260803,"@@ -977,20 +977,31 @@ Using a custom registry atom:   (atom m/default-registry))  (defn register! [k schema]-  (swap! my-registry assoc k (m/schema schema))+  (swap! my-registry assoc k (m/schema schema {:registry @my-registry))   k)  (register! ::id int?) ;; => :user/id  (register! ::name string?)-;; => :user/name+;; => :user/name   ++(register! ::user-tup [:tuple ::id ::name])+;; => :user/new-user"
https://api.github.com/repos/metosin/malli/pulls/187,389478890,"@@ -586,6 +586,74 @@                                         [false [:sequential int?] #{1 2 3}]                                         [false [:sequential int?] nil]] +                          ""cat"" [; same as [:cat {:into nil} ...]+                                 [true [:cat [:x int?]] '(1)]+                                 [true [:cat [:x int?]] [1]]++                                 ; aka :cat*+                                 [true [:cat {:into :any} [:x int?]] '(1)]"
https://api.github.com/repos/metosin/malli/pulls/200,419219524,"@@ -82,7 +82,9 @@   (if (string? x)     (try       #?(:clj  (Long/parseLong x)-         :cljs (let [x' (js/parseInt x 10)]+         :cljs (let [x' (if (re-find #""\D"" (subs x 1))"
https://api.github.com/repos/metosin/malli/pulls/209,447980913,"@@ -40,16 +46,23 @@         gen (-> schema m/children first (generator options))]     (gen/fmap f (gen/vector-distinct gen {:min-elements min, :max-elements max, :max-tries 100})))) +(defn -or-gen [schema options]+  (gen/one-of (keep #(some->> (-recursion-options % options) (generator %)) (m/children schema options))))++(defn -multi-gen [schema options]+  (gen/one-of (keep #(some->> (-recursion-options (last %) options) (generator (last %))) (m/map-entries schema options))))+ (defn -map-gen [schema options]   (let [entries (m/map-entries schema)-        value-gen (fn [k s] (gen/fmap (fn [v] [k v]) (generator s options)))+        options' (-recursion-options schema options)"
https://api.github.com/repos/metosin/malli/pulls/216,452340593,"@@ -935,6 +948,32 @@   ([?schema options]    (-type (schema ?schema options)))) +(defn walk+  ([?schema f]+   (walk ?schema f nil))+  ([?schema f options]+   (-walk+     (schema ?schema options)+     (reify Walker+       (-accept [_ s _ _] s)+       (-inner [this s in options] (-walk s this in options))+       (-outer [_ s c in options] (f s c in options)))+     [] options)))++(defn ^:no-doc find-first"
https://api.github.com/repos/metosin/malli/pulls/323,549125423,"@@ -172,10 +172,35 @@ Using `:string` Schema:  ```clj (m/validate :string ""kikka"")-; => true+;; => true"
https://api.github.com/repos/metosin/malli/pulls/317,554457286,"@@ -1020,6 +1033,122 @@           (-get [_ key default] (get children key default))           (-set [this key value] (-set-assoc-children this key value))))))) +(defn- regex-validator [schema] (re/validator (-regex-validator schema)))++(defn- regex-explainer [schema path] (re/explainer schema path (-regex-explainer schema path)))++(defn- regex-transformer [schema transformer method options]+  (let [this-transformer (-value-transformer transformer schema method options)+        ->children (re/transformer (-regex-transformer schema transformer method options))]+    (-intercepting this-transformer ->children)))++(defn -sequence-schema [{:keys [type child-bounds re-validator re-explainer re-transformer] :as opts}]+  ^{:type ::into-schema}+  (reify IntoSchema+    (-into-schema [_ properties children options]+      (-check-children! type properties children child-bounds)+      (let [children (mapv #(schema % options) children)+            form (-create-form type properties (mapv -form children))]+        ^{:type ::schema}+        (reify+          Schema+          (-type [_] type)+          (-type-properties [_])+          (-validator [this] (regex-validator this))+          (-explainer [this path] (regex-explainer this path))+          (-transformer [this transformer method options] (regex-transformer this transformer method options))+          (-walk [this walker path options]+            (if (-accept walker this path options)+              (-outer walker this path (-inner-indexed walker path children options) options)))+          (-properties [_] properties)+          (-options [_] options)+          (-children [_] children)+          (-parent [_] (-sequence-schema opts))+          (-form [_] form)++          LensSchema+          (-keep [_] true)+          (-get [_ key default] (get children key default))+          (-set [this key value] (-set-assoc-children this key value))++          RegexSchema+          (-regex-validator [_] (re-validator properties (map -into-regex-validator children)))+          (-regex-explainer [_ path]+            (re-explainer properties (map-indexed (fn [i s] (-into-regex-explainer s (conj path i)))+                                                  children)))+          (-regex-transformer [_ transformer method options]+            (re-transformer properties (map #(-into-regex-transformer % transformer method options) children))))))))++(defn -sequence-entry-schema [{:keys [type child-bounds re-validator re-explainer re-transformer] :as opts}]+  ^{:type ::into-schema}+  (reify IntoSchema+    (-into-schema [_ properties children options]+      (-check-children! type properties children child-bounds)+      (let [{:keys [children entries forms]} (-parse-entries children opts options)+            form (-create-form :map properties forms)]"
https://api.github.com/repos/metosin/malli/pulls/333,555783493,"@@ -132,8 +132,10 @@ (defn- -assoc-in [acc value [p & ps] error]   (cond     p (let [acc' (-ensure (or acc (empty value)) p)-            value' (if ps (-assoc-in (-get acc p) (-get value p) ps error) error)]-        (-put acc' p value'))+            error' (if (or ps (map? value))"
https://api.github.com/repos/metosin/malli/pulls/343,563585360,"@@ -532,7 +532,7 @@  ;;;; # Parser -;; Unused ATM but should soon be used to implement Spec `conform` equivalent:+;; Unused ATM but should soon be used to implement Spec `parse` equivalent:"
https://api.github.com/repos/metosin/malli/pulls/354,564722975,"@@ -105,7 +105,8 @@   (merge {:type ""integer""} (-> schema m/properties (select-keys [:min :max]) (set/rename-keys {:min :minimum, :max :maximum}))))  (defmethod accept :double [_ schema _ _]-  (merge {:type ""number""} (-> schema m/properties (select-keys [:min :max]) (set/rename-keys {:min :minimum, :max :maximum}))))+  (merge {:type ""number""}+         (-> schema m/properties (select-keys [:min :max]) (set/rename-keys {:min :minimum, :max :maximum}))))"
https://api.github.com/repos/metosin/malli/pulls/357,571377347,"@@ -830,6 +905,20 @@                                          (identical? v* v) x                                          :else (assoc x i v*))))                                    x parsers)))))+          (-unparser [_]"
https://api.github.com/repos/metosin/malli/pulls/385,588473809,"@@ -83,10 +83,10 @@  (defmethod accept ::m/val [_ _ children _] (first children)) (defmethod accept :map [_ _ children _]-  (let [required (->> children (filter (m/-comp not :optional second)) (mapv first))]-    {:type ""object""-     :properties (apply array-map (mapcat (fn [[k _ s]] [k s]) children))-     :required required}))+  (let [required (->> children (filter (m/-comp not :optional second)) (mapv first))+        object {:type ""object""+                :properties (apply array-map (mapcat (fn [[k _ s]] [k s]) children))}]+    (if (empty? required) object (assoc object :required required))))"
https://api.github.com/repos/metosin/malli/pulls/391,592116639,"@@ -1087,7 +1087,8 @@              {:keys [children entries forms]} (-parse-entries children opts' options)              form (-create-form type properties forms)              dispatch (eval (:dispatch properties) options)-             dispatch-map (->> (for [[k s] entries] [k s]) (into {}))]+             dispatch-map (->> (for [[k s] entries] [k s]) (into {}))+             finder (fn [{:keys [:m/default] :as m}] (fn [x] (m x default)))]"
https://api.github.com/repos/metosin/malli/pulls/403,601248434,"@@ -1301,6 +1301,21 @@ Schemas can be used to parse values using `m/parse` and `m/parser`: ;               :children [[:primitive [:text ""Hello, world of data""]]]}]]}] ``` +Parsing returns tagged values for `:orn`, `:catn`, `:altn` and `:multi`. For others it returns the value."
https://api.github.com/repos/metosin/malli/pulls/416,612377015,"@@ -250,5 +252,8 @@                                                         [:country ""Country""]]]]]]}}             ""Order""])))) +(deftest ifn-test"
https://api.github.com/repos/metosin/malli/pulls/430,621494398,"@@ -32,6 +32,8 @@       (miu/-fail! ::invalid-property {:key :gen/min, :value gen-min, :min min}))     (when (and max gen-max (> gen-max max))       (miu/-fail! ::invalid-property {:key :gen/max, :value gen-min, :max min}))+           :min (or gen-min min)"
https://api.github.com/repos/metosin/malli/pulls/462,644512995,"@@ -535,6 +535,26 @@ Errors can be targeted using `:error/path` property: ; {:password2 [""passwords don't match""]} ``` +By default, only direct erronous schema properties are used:"
https://api.github.com/repos/metosin/malli/pulls/466,654769441,"@@ -177,7 +177,16 @@ (defn -set-entries [schema key value]   (let [found (atom nil)         [key :as new-child] (if (vector? key) (conj key value) [key value])-        children (cond-> (mapv (fn [[k :as child]] (if (= key k) (do (reset! found true) new-child) child)) (-children schema))+        new-props (when (= (count new-child) 3) (nth new-child 1))+        children (cond-> (mapv (fn [[k props :as child]]+                                 (if (= key k)+                                   (do (reset! found true)+                                       (cond-> [key]+                                         new-props (conj new-props)+                                         (and (not new-props) props) (conj props)"
https://api.github.com/repos/metosin/malli/pulls/497,681580099,"@@ -298,14 +298,15 @@                :output output}               max (assoc :max max))))) +#?(:clj+   (defn -entry-transformer [[k t]]+     (fn [^Associative x]+       (if-let [e ^MapEntry (.entryAt x k)]"
https://api.github.com/repos/metosin/malli/pulls/503,684730528,"@@ -1140,7 +1140,9 @@ Any (serializable) function can be used for `:dispatch`:  ## Recursive Schemas -[Local Registry](#local-registry) allows an easy way to create recursive schemas. To be recursive, the schema refers to another schema of the local registry using two useful keywords `:ref` and `:schema`. First, the schema is defined in the local registry, one of the value refer to another schema with the `:ref` keyword. The top-level schema is defined in the second argument of the `:schema` definition:+To create a recursive schema, introduce a [local registry](#local-registry) with the first argument to `:schema`, and then wrap all recursive positions in the registry with `:ref`. Now use `:schema`'s second argument to define a schema in terms of the recursive schema(s) in the registry."
https://api.github.com/repos/metosin/malli/pulls/507,685714418,"@@ -34,6 +35,128 @@ ;; public api ;; ++;; pre+post walking with state map++(defn walk*+  ""Prewalk recursively over the Schema with inner and its children then postwalk with outer.+  The inner (prewalk) callback is a arity-3 function. It takes schema, path, and options.+  It returns a vector of [schema options]--the new options are passed to children prewalks.+  The outer (postwalk) callback is a arity4 function with the following+  arguments: schema, path, (walked) children, and options. By default, returns its schema+  argument.""+  ([?schema inner]+   (walk* ?schema inner nil))+  ([?schema inner options]+   (walk* ?schema inner (fn [s _p _c _options] s) options))+  ([?schema inner outer options]+   (let [[s options] (inner (m/schema ?schema options) [] options)]+     (m/-walk+       s+       (reify m/Walker+         (-accept [_ s _ _] s)+         (-inner [this s p options] (let [[s options] (inner s p options)]+                                      (m/-walk s this p options)))+         (-outer [_ s p c options] (outer (m/-set-children s c) p c options)))+       [] options))))++;; free variables++(defn schema->fvs +  ""Returns the free variables in the schema.""+  [schema]+  (let [fvs-atom (atom #{})+        rec! (fn rec! [schema ref-scope]+               (walk* schema+                      (fn [schema _path options]+                        (let [registry (-> schema m/properties :registry)+                              registry-rhs-ref-scope (reduce disj (::ref-scope options) (keys registry))+                              _ (run! (fn [[k s]]+                                        (rec! s registry-rhs-ref-scope))+                                      registry)+                              new-ref-scope (into (::ref-scope options) (keys registry))+                              is-var-reference? (satisfies? m/RefSchema schema)+                              is-not-in-scope? (not (contains? new-ref-scope (m/-ref schema)))+                              _ (when (and is-var-reference?+                                           is-not-in-scope?)+                                  (swap! fvs-atom conj (m/-ref schema)))]+                          [schema (c/assoc options ::ref-scope new-ref-scope)]))+                      {::ref-scope ref-scope})+               nil)]+    (rec! schema #{})+    @fvs-atom))++(declare subst-schema)++(comment+  (alpha-rename-schema [:schema {:registry {::foo :int}}+                        ::foo]+                       {})+  ((requiring-resolve 'clojure.repl/pst) 100)+  )++(defn alpha-rename-schema [schema options]"
https://api.github.com/repos/metosin/malli/pulls/517,693688267,"@@ -11,12 +11,22 @@ (defn simple-registry [schemas]   (reify     Registry-    (-schema [_ type] (get schemas type))+    (-schema [_ type] (schemas type))     (-schemas [_] schemas))) -(defn registry [?registry]-  (cond (satisfies? Registry ?registry) ?registry-        (map? ?registry) (simple-registry ?registry)))+(defn registry"
https://api.github.com/repos/metosin/malli/pulls/522,694753270,"@@ -350,10 +350,12 @@         (if (== ci i)           {:children (arr->vec -children)            :entries (arr->vec -entries)-           :forms (arr->vec -forms)}+           :forms (arr->vec -forms)+           :keyset (#?(:clj set, :cljs deref) -keyset)}"
https://api.github.com/repos/metosin/malli/pulls/531,695463495,"@@ -433,50 +430,43 @@ ;; Schemas ;; -(defn -simple-schema [?props]-  (let [props* (atom (if (map? ?props) ?props))]-    ^{:type ::into-schema}-    (reify IntoSchema-      (-type [_] (:type @props*))-      (-type-properties [_] (:type-properties @props*))-      (-properties-schema [_ _])-      (-children-schema [_ _])-      (-into-schema [parent properties children options]-        (if (fn? ?props)-          (-into-schema (-simple-schema (?props properties children)) properties children options)-          (let [type (if ?props (?props :type))-                pred (if ?props (?props :pred))-                property-pred (if ?props (?props :property-pred))-                min (if ?props (?props :min 0) 0)-                max (if ?props (?props :max 0) 0)]-            (reset! props* ?props)-            (-check-children! type properties children {:min min, :max max})-            (let [pvalidator (if property-pred (property-pred properties))-                  validator (if pvalidator (fn [x] (and (pred x) (pvalidator x))) pred)-                  form (-create-form type properties children)]-              ^{:type ::schema}-              (reify-                Schema-                (-validator [_] validator)-                (-explainer [this path]-                  (fn explain [x in acc]-                    (if-not (validator x) (conj acc (miu/-error path in this x)) acc)))-                (-parser [_] (fn [x] (if (validator x) x ::invalid)))-                (-unparser [this] (-parser this))-                (-transformer [this transformer method options]-                  (-intercepting (-value-transformer transformer this method options)))-                (-walk [this walker path options]-                  (if (-accept walker this path options)-                    (-outer walker this path children options)))-                (-properties [_] properties)-                (-options [_] options)-                (-children [_] children)-                (-parent [_] parent)-                (-form [_] form)-                LensSchema-                (-keep [_])-                (-get [_ _ default] default)-                (-set [this key _] (-fail! ::non-associative-schema {:schema this, :key key}))))))))))+(defn -simple-schema [{:keys [type type-properties pred property-pred min max] :or {min 0, max 0} :as ?props}]"
https://api.github.com/repos/metosin/malli/pulls/535,698021590,"@@ -8,11 +9,18 @@   (-schema [this type] ""returns the schema from a registry"")   (-schemas [this] ""returns all schemas from a registry"")) -(defn simple-registry [schemas]+(defn fast-registry [m]+  (let [fm #?(:clj (doto (HashMap.) (.putAll ^Map m)), :cljs m)]"
https://api.github.com/repos/metosin/malli/pulls/539,705910850,"@@ -202,33 +206,56 @@  (defn -get-entries [schema key default]   (or (some (if (and (vector? key) (= ::find (nth key 0)))-              (fn [[k :as e]] (when (= k (nth key 1)) e))-              (fn [[k _ s]] (when (= k key) s)))+              (fn [e] (when (= (nth e 0) (nth key 1)) e))+              (fn [e] (when (= (nth e 0) key) (nth e 2))))             (-children schema)) default)) -(defn -set-entries [schema ?key value]-  (let [found (atom nil)-        [key props override] (if (vector? ?key) [(first ?key) (second ?key) true] [?key])-        children (cond-> (mapv (fn [[k p :as entry]]-                                 (if (= key k)-                                   (do (reset! found true) [key (if override props p) value])-                                   entry))-                               (-children schema))-                         (not @found) (conj (if key [key props value] (-fail! ::key-missing)))-                         :always (->> (filter (fn [e] (-> e last some?)))))]-    (-set-children schema children)))--(defrecord Parsed [keyset children entries forms])+(defrecord Parsed [size keyset children entries forms])++(defn- -update-parsed [{:keys [size keyset children entries forms]} ?key value options]+  (let [[k p override] (if (vector? ?key) [(nth ?key 0) (second ?key) true] [?key])+        s (when value (schema value options))+        i (keyset k)]+    (if (nil? s)+      ;; remove+      (letfn [(cut [v] (into (subvec v 0 i) (subvec v (inc i))))]+        (->Parsed (dec size) (dissoc keyset k) (cut children) (cut entries) (cut forms)))+      (let [c [k p s]+            e (miu/-tagged k (-val-schema s p))+            p (if i (if override p (nth (children i) 1)) p)+            f (if (seq p) [k p (-form s)] [k (-form s)])]+        (if i+          ;; update+          (->Parsed size keyset (assoc children i c) (assoc entries i e) (assoc forms i f))+          ;; assoc+          (let [size (inc size)]+            (->Parsed size (assoc keyset k size) (conj children c) (conj entries e) (conj forms f))))))))++(defn -set-entries+  ([schema ?key value]+   (-deprecated! ""use `(m/-set-entries schema parsed ?key value) instead."")+   (let [found (atom nil)+         [key props override] (if (vector? ?key) [(nth ?key 0) (second ?key) true] [?key])+         children (cond-> (mapv (fn [[k p :as entry]]+                                  (if (= key k)+                                    (do (reset! found true) [key (if override props p) value])+                                    entry))+                                (-children schema))+                    (not @found) (conj (if key [key props value] (-fail! ::key-missing)))+                    :always (->> (filter (fn [e] (-> e last some?)))))]+     (-set-children schema children)))+  ([schema parsed ?key value]+   (-set-children schema (-update-parsed parsed ?key value (-options schema)))))  (defn- -parse-entry [e naked-keys lazy-refs options i ^objects -children ^objects -entries ^objects -forms -keyset]   (letfn [(-collect [k c e f i]-            (-keyset k)             (let [i (int i)]+              (-keyset k i)               (aset -children i c)               (aset -entries i e)               (aset -forms i f)               (unchecked-inc-int i)))-          (-schema [e] (schema (cond-> (or e (when (-reference? e) e)) lazy-refs (-lazy options)) options))"
https://api.github.com/repos/metosin/malli/pulls/550,734808753,"@@ -180,6 +194,17 @@  (defn -equals [x y] (or (identical? x y) (= x y))) +(defn -vmap [f os]+  #?(:clj (let [c (count os)]+            (if (pos? c)+              (let [oa (object-array c)+                    iter (.iterator ^Iterable os)+                    n (volatile! -1)]"
https://api.github.com/repos/metosin/malli/pulls/583,757784699,"@@ -1963,23 +1939,66 @@ See also [Recursive Schemas](#recursive-schemas).  ### Changing the default registry -Using custom registries via the `:registry` option is a simple solution, but this needs to be done for all public API calls. Also, with ClojureScript, the large (100+ schemas) default registry is not subject to any Dead Code Elimination (DCE), even if the schemas are not used in the application.+Passing in custom options to all public methods is a lot of boilerplate. For the lazy, there is an easier way - we can swap the (global) default registry:++```clj+(require '[malli.registy :as mr])++;; the default registry+(-> m/default-registry (mr/schemas) (count)) +;=> 140++;; global side-effects! free since 0.7.0!+(mr/set-default-registry!+  {:string (m/-string-schema)+   :maybe (m/-maybe-schema)+   :map (m/-map-schema)})+   +(-> m/default-registry (mr/schemas) (count))+; => 3+   +(m/validate+  [:map [:maybe [:maybe :string]]]+  {:maybe ""sheep""})+; => true++(m/validate :int 42)+; =throws=> :malli.core/invalid-schema {:schema :int}+```++**NOTE**: `mr/set-default-registry!` is an imperative api with global side-effects. Easy, but not simple. If you want to disable the api, you can define the following compiler/jvm bootstrap:+* cljs: `:closure-defines {malli.registry/mode ""strict""}`+* clj: `:jvm-opts [""-Dmalli.registry/mode=strict""]`++### DCE and Schemas++The default schema registry is defined as a Var, so all Schema implementation (100+) are dragged in. For ClojureScript, this means the schemas implementations are not removed via Dead Code Elimination (DCE), resulting a large (37KB, zipped) js-bundle. -Malli allows the default registry to be replaced, with the following compiler/jvm bootstrap:+Malli allows the default registry to initialized with empty schemas, using the following compiler/jvm bootstrap:    * cljs: `:closure-defines {malli.registry/type ""custom""}`    * clj: `:jvm-opts [""-Dmalli.registry/type=custom""]` -It changes the default registry to an empty one, which can be changed using `malli.registry/set-default-registy!`. Empty default registry enables DCE for all unused schema implementations.+```clj+;; with the flag set on+(-> m/default-registry (mr/schemas) (count))+; => 0+```++With this, you can register just what you need and rest are DCE'd. The previous example results in just a 3KB gzip bundle.++## Registry implemenations++Malli supports multiple type of registries. -Malli supports multiple types of registries.+Since 0.7.0, one can set up the default re"
https://api.github.com/repos/metosin/malli/pulls/587,762855114,"@@ -570,6 +570,82 @@   (when-let [ns-name (some-> properties :namespace name)]     (fn [x] (= (namespace x) ns-name)))) +;;+;; string schema helpers+;;++#?(:cljs (defn -numeric-char? [c] (and (< 47 c) (< c 58))))+#?(:cljs (defn -upper-alpha-char? [c] (and (< 64 c) (< c 91))))+#?(:cljs (defn -lower-alpha-char? [c] (and (< 96 c) (< c 123))))+#?(:cljs (defn -letter? [c] (or (-lower-alpha-char? c) (-upper-alpha-char? c))))+#?(:cljs (defn -alphanumeric? [c] (or (-letter? c) (-numeric-char? c))))++(defn -charset-predicate+  [o]+  (case o+    :digit #?(:clj #(Character/isDigit ^char %) :cljs -numeric-char?)+    :letter #?(:clj #(Character/isLetter ^char %) :cljs -letter?)+    :letter-or-digit #?(:clj #(Character/isLetterOrDigit ^char %) :cljs -alphanumeric?)+    :alphanumeric #?(:clj #(Character/isLetterOrDigit ^char %) :cljs -alphanumeric?)+    :alphabetic #?(:clj #(Character/isAlphabetic (int %)) :cljs -letter?)+    (cond+      (set? o) (miu/-some-pred (mapv -charset-predicate o))+      (char? o) #?(:clj #(= ^char o %) :cljs (let [i (.charCodeAt o 0)] #(= i %)))+      (fn? o) o+      (nil? o) nil+      :else (throw (ex-info ""Invalid string predicate"" {:pred o})))))"
https://api.github.com/repos/metosin/malli/pulls/606,777183504,"@@ -0,0 +1,316 @@+(ns malli.destructure-test+  (:require [clojure.test :refer [deftest testing is]]+            [malli.destructure :as md]+            [malli.core :as m]))++(def expectations+  [{:name ""empty""+    :bind '[]+    :schema :cat}+   {:name ""1 arg""+    :bind '[a]+    :schema [:cat :any]}+   {:name ""2 args""+    :bind '[a b]+    :schema [:cat :any :any]}+   {:name ""2 + varargs""+    :bind '[a b & cs]+    :schema [:cat :any :any [:* :any]]}+   {:name ""sequence destructuring""+    :bind '[a [b1 [b2] & bs :as bss] & [c1 c2 & cs :as css]]+    :schema [:cat+             :any+             [:maybe+              [:cat+               [:? :any]+               [:maybe+                [:cat+                 [:? :any]+                 [:* :any]]]+               [:* :any]]]+             [:maybe+              [:cat+               [:? :any]+               [:? :any]+               [:* :any]]]]}+   {:name ""map destructuring""+    :bind '[a {:keys [b]+               :strs [c]+               :syms [d]+               :demo/syms [e]+               :demo/keys [f]+               g :demo/g+               h 123+               :or {b 0, d 0, f 0}+               :as map}]+    :schema [:cat+             :any+             [:altn+              [:map [:map+                     [:b {:optional true} :any]+                     [""c"" {:optional true} :any]+                     ['d {:optional true} :any]+                     ['demo/e {:optional true} :any]+                     [:demo/f {:optional true}]+                     [:demo/g {:optional true}]+                     [123 {:optional true} :any]]]"
https://api.github.com/repos/metosin/malli/pulls/604,777240068,"@@ -175,15 +176,18 @@   ([] (collect nil))   ([ns]    (let [-collect (fn [k] (or (nil? ns) (= k (symbol (str ns)))))]-     (->> (for [[k vs] (m/function-schemas) :when (-collect k) [_ v] vs v (from v)] v)))))+     (for [[k vs] (m/function-schemas) :when (-collect k) [_ v] vs v (from v)] v))))  (defn linter-config [xs]   (reduce     (fn [acc {:keys [ns name arity] :as data}]       (assoc-in-        acc [:linters :type-mismatch :namespaces (symbol (str ns)) name :arities arity]+        acc [:linters :type-mismatch :namespaces ns name :arities arity]         (select-keys data [:args :ret :min-arity])))     {:linters {:unresolved-symbol {:exclude ['(malli.core/=>)]}}} xs))  #?(:clj    (defn emit! [] (-> (collect) (linter-config) (save!)) nil))++#?(:clj"
https://api.github.com/repos/metosin/malli/pulls/643,806978133,"@@ -158,6 +158,18 @@ ;; generators ;; +(defn- qualified-keyword-generator [schema]"
https://api.github.com/repos/metosin/malli/pulls/545,807496445,"@@ -0,0 +1,69 @@+(ns malli.time+  (:require+   [clojure.string :as str]+   [malli.core :as m])+  (:import+   (java.time Duration LocalDate OffsetDateTime OffsetTime)))++(defn ->safe-parser+  [f]+  (fn -parse [x]+    (if (string? x)+      (try+        (f x)+        (catch Exception _ x))"
https://api.github.com/repos/metosin/malli/pulls/665,828820372,"@@ -841,6 +841,61 @@ Going crazy: ; => {:x 24} ``` +## To and from JSON++The `m/encode` and `m/decode` functions work on clojure data. To go+from clojure data to JSON, you need a JSON library like+[jsonista](https://github.com/metosin/jsonista). Additionally, since+`m/decode` doesn't check the schema, you need to run `m/validate` (or+`m/explain`) if you want to make sure your data conforms to your+schema.++To JSON:++```clj+(def Tags+  [:map"
https://api.github.com/repos/metosin/malli/pulls/664,830652321,"@@ -1958,7 +1958,7 @@  (defn schema?   ""Checks if x is a Schema instance""-  [x] (#?(:clj instance?, :cljs implements?) malli.core.Schema x))+  [x] (satisfies? Schema x))"
https://api.github.com/repos/metosin/malli/pulls/694,852399364,"@@ -0,0 +1,28 @@+(ns malli.instrument.cljs-test.indirect-fn+  ""Bug to do with when things are instrumented+   This declared functions here to be used in cljs_test""+  (:require [malli.core :as m]+            [malli.experimental :as mx]+            [malli.instrument.cljs-test.defs+             :as defs+             :refer [defs-small-int defs-int-arg]]))++;; There's a matrix of things to test here+;; Calling either arg or return type from another namespace+;;  vs whether doing it as a refer or as a namespaced var+;; This hits all 4"
https://api.github.com/repos/metosin/malli/pulls/702,867027747,"@@ -1,60 +1,94 @@ (ns malli.experimental-  (:refer-clojure :exclude [defn])-  #?(:cljs (:require-macros malli.experimental))-  (:require [clojure.core :as c]-            [malli.core :as m]-            [malli.destructure :as md]))+  #?@(:cljs+      [(:require-macros malli.experimental)+       (:require+         [malli.core :as m]+         [malli.dev.pretty])])+  #?@(:clj+      [(:refer-clojure :exclude [defn])+       (:require+         [clojure.core :as c]+         [malli.core :as m]+         [malli.dev.pretty]+         [malli.destructure :as md])])) -(c/defn -schema [inline-schemas]-  (m/schema-   [:schema-    {:registry {""Schema"" any?-                ""Separator"" (if inline-schemas [:= :-] md/Never)-                ""Args"" [:vector :any]-                ""PrePost"" [:map-                           [:pre {:optional true} [:sequential any?]]-                           [:post {:optional true} [:sequential any?]]]-                ""Arity"" [:catn-                         [:args ""Args""]-                         [:prepost [:? ""PrePost""]]-                         [:body [:* :any]]]-                ""Params"" [:catn-                          [:name symbol?]-                          [:return [:? [:catn-                                        [:- ""Separator""]-                                        [:schema ""Schema""]]]]-                          [:doc [:? string?]]-                          [:meta [:? :map]]-                          [:arities [:altn-                                     [:single ""Arity""]-                                     [:multiple [:catn-                                                 [:arities [:+ [:schema ""Arity""]]]-                                                 [:meta [:? :map]]]]]]]}}-    ""Params""]))+#?(:clj+   (c/defn -schema [inline-schemas]+     (m/schema+       [:schema+        {:registry {""Schema""    any?+                    ""Separator"" (if inline-schemas [:= :-] md/Never)+                    ""Args""      [:vector :any]+                    ""PrePost""   [:map+                                 [:pre {:optional true} [:sequential any?]]+                                 [:post {:optional true} [:sequential any?]]]+                    ""Arity""     [:catn+                                 [:args ""Args""]+                                 [:prepost [:? ""PrePost""]]+                                 [:body [:* :any]]]+                    ""Params""    [:catn+                                 [:name symbol?]+                                 [:return [:? [:catn+                                               [:- ""Separator""]+                                               [:schema ""Schema""]]]]+                                 [:doc [:? string?]]+                                 [:meta [:? :map]]+                                 [:arities [:altn+                                            [:single ""Arity""]+                                            [:multiple [:catn+                                                        [:arities [:+ [:schema ""Arity""]]]+                                                        [:meta [:? :map]]]]]]]}}+        ""Params""]+       {:registry (m/default-schemas)}))) -(def SchematizedParams (-schema true))-(def Params (-schema false))+#?(:clj (def SchematizedParams (-schema true)))+#?(:clj (def Params (-schema false))) -(c/defn -defn [schema args]-  (let [{:keys [name return doc meta arities] :as parsed} (m/parse schema args)-        _ (when (= ::m/invalid parsed) (m/-fail! ::parse-error {:schema schema, :args args}))-        parse (fn [{:keys [args] :as parsed}] (merge (md/parse args) parsed))-        ->schema (fn [{:keys [schema]}] [:=> schema (:schema return :any)])-        single (= :single (key arities))-        parglists (if single (->> arities val parse vector) (->> arities val :arities (map parse)))-        raw-arglists (map :raw-arglist parglists)-        schema (as-> (map ->schema parglists) $ (if single (first $) (into [:function] $)))]-    `(let [defn# (c/defn-                   ~name-                   ~@(some-> doc vector)-                   ~(assoc meta :raw-arglists (list 'quote raw-arglists), :schema schema)-                   ~@(map (fn [{:keys [arglist prepost body]}] `(~arglist ~prepost ~@body)) parglists)-                   ~@(when-not single (some->> arities val :meta vector)))]-       (m/=> ~name ~schema)-       defn#)))+#?(:clj+   (c/defn -defn [schema args]+     (let [{:keys [name return doc meta arities] :as parsed} (m/parse schema args)+           _            (when (= ::m/invalid parsed) (m/-fail! ::parse-error {:schema schema, :args args}))+           parse        (fn [{:keys [args] :as parsed}] (merge (md/parse args) parsed))+           ->schema     (fn [{:keys [schema]}] [:=> schema (:schema return :any)])+           single       (= :single (key arities))+           parglists    (if single (->> arities val parse vector) (->> arities val :arities (map parse)))+           raw-arglists (map :raw-arglist parglists)+           schema       (as-> (map ->schema parglists) $ (if single (first $) (into [:function] $)))]+       `(let [defn# (c/defn+                      ~name+                      ~@(some-> doc vector)+                      ~(assoc meta :raw-arglists (list 'quote raw-arglists), :schema schema)+                      ~@(map (fn [{:keys [arglist prepost body]}] `(~arglist ~prepost ~@body)) parglists)+                      ~@(when-not single (some->> arities val :meta vector)))]+          (m/=> ~name ~schema)+          defn#)))) +#?(:clj+   (c/defn ->defn [schema report args]+     (let [{:keys [name return doc meta arities] :as parsed} (m/parse schema args)+           _            (when (= ::m/invalid parsed) (m/-fail! ::parse-error {:schema schema, :args args}))+           parse        (fn [{:keys [args] :as parsed}] (merge (md/parse args) parsed))+           ->schema     (fn [{:keys [schema]}] [:=> schema (:schema return :any)])+           single       (= :single (key arities))+           parglists    (if single (->> arities val parse vector) (->> arities val :arities (map parse)))+           raw-arglists (map :raw-arglist parglists)+           schema       (as-> (map ->schema parglists) $ (if single (first $) (into [:function] $)))]+       `(def ~name (m/-instrument {:schema ~schema :report ~report}+                     (c/fn ~name+                       ~@(map (fn [{:keys [arglist prepost body]}] `(~arglist ~prepost ~@body)) parglists)+                       ~@(when-not single (some->> arities val :meta vector))))))))"
https://api.github.com/repos/metosin/malli/pulls/707,879463487,"@@ -257,6 +257,12 @@    (let [schema (m/schema (or ?schema :map) options)]      (when schema (m/-get schema [::m/find k] nil))))) +(defn keys+  ""Like [[clojure.core/keys]], but for EntrySchemas.""+  [?schema]"
https://api.github.com/repos/metosin/malli/pulls/680,883489495,"@@ -23,7 +23,7 @@                                           (true? (:gen d)) (dissoc $ :gen)                                           :else $))]                          (alter-meta! v assoc ::original-fn original-fn)-                         (alter-var-root v (constantly (m/-instrument dgen original-fn)))+                         (alter-var-root v (constantly (m/-instrument dgen original-fn nil :original-fn-meta (meta v))))"
https://api.github.com/repos/metosin/malli/pulls/712,901540707,"@@ -374,8 +374,8 @@       ;; remove       (letfn [(cut [v] (into (subvec v 0 i) (subvec v (inc i))))]         (-simple-entry-parser (dissoc keyset k) (cut children) (cut forms)))-      (let [c [k p s]-            p (if i (if override p (nth (children i) 1)) p)+      (let [p (if i (if override p (nth (children i) 1)) p)+            c [k p s]"
https://api.github.com/repos/metosin/malli/pulls/677,904772796,"@@ -6,6 +6,7 @@             [clojure.test.check.properties :as prop]             [clojure.test.check.random :as random]             [clojure.test.check.rose-tree :as rose]+            [clojure.spec.gen.alpha :as ga]"
https://api.github.com/repos/metosin/malli/pulls/745,955674605,"@@ -17,6 +18,8 @@    (defn start!* [env options]      `(do         ;; register all function schemas and instrument them based on the options+        ;; first clear out all metadata schemas to support dev-time removal of metadata schemas on functions - they should not be instrumented+        ~(m/-deregister-metadata-function-schemas! :cljs)"
https://api.github.com/repos/metosin/malli/pulls/746,955841685,"@@ -7,5 +7,14 @@ (defn -filter-var [f] (fn [_ s _] (f s))) (defn -filter-ns [& ns] (fn [n _ _] ((set ns) n))) +(defn meta-fn"
https://api.github.com/repos/metosin/malli/pulls/756,996437213,"@@ -455,22 +460,35 @@     (when (> (unchecked-inc size) (bit-shift-right (alength values) 1)) ; potential new load factor > 0.5       ;; Rehash:       (let [capacity* (bit-shift-left (alength values) 1)-            values* (object-array capacity*)+            ^objects values* #?(:bb (object-array capacity*)+                                :clj (Array/newInstance Object capacity*)+                                :cljs (object-array capacity*))             max-index (unchecked-dec capacity*)]-        (areduce values i _ nil-                 (when-some [^CacheEntry v (aget values i)]-                   (loop [i* (bit-and (.-hash v) max-index), collisions 0]-                     (if (aget values* i*)-                       (let [collisions (unchecked-inc collisions)]-                         (recur (bit-and (unchecked-add i* collisions) max-index) ; i* = (i* + collisions) % capacity*-                                collisions))-                       (aset values* i* v)))))++        (let [len (alength values)]+          (loop [i 0]+            (if (< i len)"
https://api.github.com/repos/metosin/malli/pulls/767,997274233,"@@ -954,7 +954,8 @@      (-properties-schema [_ _])      (-children-schema [_ _])      (-into-schema [parent {:keys [closed] :as properties} children options]-       (let [entry-parser (-create-entry-parser children opts options)+       (let [pred? (:pred opts)"
https://api.github.com/repos/metosin/malli/pulls/781,1024834547,"@@ -2724,3 +2724,18 @@                                                    [:name {:optional true} string?]                                                    [:code int?]]]])]         (is (m/validate data-schema test-data))))))++(deftest coerce-test+  (let [schema [:map [:x :keyword]]]+    (testing ""without transformer, just validates""+      (testing ""success""+        (is (= {:x :kikka} (m/coerce schema {:x :kikka})))+        (is (= {:x :kikka} (m/coerce schema {:x :kikka} nil)))+        (is (= {:x :kikka} (m/coerce schema {:x :kikka} nil nil))))+      (testing ""fails""+        (is (thrown? #?(:clj Exception, :cljs js/Error) (m/coerce schema {:x ""kikka""})))+        (is (thrown? #?(:clj Exception, :cljs js/Error) (m/coerce schema {:x ""kikka""} nil)))+        (is (thrown? #?(:clj Exception, :cljs js/Error) (m/coerce schema {:x ""kikka""} nil nil)))))+    (testing ""with transformer""+      (is (= {:x :kikka} (m/coerce schema {:x ""kikka""} mt/string-transformer)))+      (is (= {:x :kikka} (m/coerce schema {:x ""kikka""} mt/string-transformer nil))))))"
https://api.github.com/repos/metosin/malli/pulls/783,1027069334,"@@ -408,14 +408,18 @@     (-children-schema [_ _])     (-into-schema [parent properties children options]       (m/-check-children! type properties children min max)-      (let [[children forms schema] (fn properties (vec children) options)+      (let [[children forms schema] (func properties (vec children) options)             form (delay (m/-create-form type properties forms options))             cache (m/-create-cache options)]         ^{:type ::m/schema}         (reify           m/Schema           (-validator [_] (m/-validator schema))           (-explainer [_ path] (m/-explainer schema path))+          (-parser [this]"
https://api.github.com/repos/metosin/malli/pulls/802,1058804949,"@@ -0,0 +1,111 @@+(ns malli.experimental.time.transform+  (:import+   (java.time Duration LocalDate LocalDateTime LocalTime Instant ZonedDateTime OffsetDateTime ZoneId OffsetTime ZoneOffset)+   (java.time.temporal TemporalAccessor TemporalQuery)+   (java.time.format DateTimeFormatter))+  (:require+   [malli.transform :as mt]+   [malli.core :as m]))++(set! *warn-on-reflection* true)++(defn ->temporal-query+  ^TemporalQuery [f]+  (reify TemporalQuery+    (queryFrom [_ t]+      (f t))))++(defn ->parser+  [formatter qf]+  (let [query (->temporal-query qf)]+    (fn [^CharSequence s]+      (if (instance? CharSequence s)+        (.parse ^DateTimeFormatter formatter s query)+        s))))++(defn ->formatter+  [x]+  (cond+    (instance? DateTimeFormatter x) x+    (instance? String x) (DateTimeFormatter/ofPattern x)+    :else (throw (ex-info ""Invalid formatter"" {:formatter x :type (type x)}))))++(defn safe-fn"
https://api.github.com/repos/metosin/malli/pulls/825,1087975760,"@@ -479,6 +479,23 @@ with instrumentation: ; =throws=> :malli.core/invalid-input {:input [:cat :int [:int {:max 6}]], :args [10 10], :schema [:=> [:cat :int [:int {:max 6}]] :int]} ``` +... or by using metadata `^:malli/always-check`:"
https://api.github.com/repos/metosin/malli/pulls/833,1092823105,"@@ -0,0 +1,31 @@+(ns malli.dev.cljs-kondo-preload+  ""Shadow-cljs preload for browser builds, used to persist clj-kondo config collected from function schemas to disk during development.""+  #?(:cljs (:require-macros [malli.dev.cljs-kondo-preload]))+  (:require [malli.clj-kondo :as clj-kondo]+            #?@(:cljs+                [[shadow.remote.runtime.shared :as runtime]+                 [shadow.cljs.devtools.client.shared :as client.shared]+                 [shadow.cljs.devtools.client.env :as env]])+            #?@(:clj+                [[shadow.cljs.devtools.api :as sh]+                 [shadow.cljs.devtools.config :as config]+                 [shadow.cljs.devtools.server :as server]+                 [shadow.cljs.devtools.server.worker.impl :as worker]])))++#?("
https://api.github.com/repos/metosin/reitit/pulls/15,132878532,"@@ -55,18 +55,25 @@       (meta-merge acc {k v}))     {} x)) -(defn resolve-routes [data {:keys [coerce] :or {coerce identity} :as opts}]-  (->> (walk data opts)-       (map-meta merge-meta)-       (mapv (partial coerce))-       (filterv identity)))+(defn resolve-routes [data {:keys [coerce] :as opts}]+  (cond-> (->> (walk data opts)+               (map-meta merge-meta))+          coerce (->> (mapv (partial coerce))"
https://api.github.com/repos/metosin/reitit/pulls/22,134412726,"@@ -0,0 +1,563 @@+(ns reitit.opensensors-routing-test+  (:require [clojure.test :refer [deftest testing is]]+            [cheshire.core :as json]+            [clojure.string :as str]+            [reitit.core :as reitit]+            [reitit.ring :as ring]++            [bidi.bidi :as bidi]++            [ataraxy.core :as ataraxy]++            [compojure.api.sweet :refer [api routes context ANY]]++            [io.pedestal.http.route.definition.table :as table]+            [io.pedestal.http.route.map-tree :as map-tree]+            [io.pedestal.http.route.router :as pedestal]+            [io.pedestal.http.route :as route]))++(defn raw-title [color s]+  (println (str color (apply str (repeat (count s) ""#"")) ""\u001B[0m""))+  (println (str color s ""\u001B[0m""))+  (println (str color (apply str (repeat (count s) ""#"")) ""\u001B[0m"")))++(def title (partial raw-title ""\u001B[35m""))+(def suite (partial raw-title ""\u001B[32m""))++;;+;; extract sample routes+;;++(defn swagger->routes [url ring?]+  (let [route-number (atom 0)+        ->route-name #(keyword ""test"" (str ""route"" (swap! route-number inc)))+        ->endpoint (fn [m]+                     (if ring?+                       (reduce-kv+                         (fn [acc k v]+                           (assoc acc k {:handler #'identity, :name (->route-name)}))+                         {} (select-keys m #{:get :head :patch :delete :options :post :put}))+                       (->route-name)))]+    (-> (slurp url)+        (json/parse-string true)+        (->> :paths+             (mapv (fn [[p v]] [(-> p name (str/replace #""\{(.*?)\}"" "":$1"") (->> (str ""/""))) (->endpoint v)]))))))++(defn valid-urls [router]+  (->>+    (for [name (reitit/route-names router)+          :let [match (reitit/match-by-name router name)+                params (if (reitit/partial-match? match)+                         (-> match :required (zipmap (range))))]]+      (:path (reitit/match-by-name router name params)))+    (into [])))++(comment+  (swagger->routes ""https://api.opensensors.io/doc"" false))++(defn bench-routes [routes f]+  (let [router (reitit/router routes)+        urls (valid-urls router)+        random-url #(rand-nth urls)+        log-time #(let [now (System/nanoTime)] (%) (- (System/nanoTime) now))+        total 10000+        dropped (int (* total 0.45))]+    (mapv+      #(let [times (->> (range total)+                        (mapv+                          (fn [_]+                            (let [now (System/nanoTime)+                                  result (f %)+                                  total (- (System/nanoTime) now)]+                              (assert result)+                              total)))+                        (sort)+                        (drop dropped)+                        (drop-last dropped))+             avg (int (/ (reduce + times) (count times)))]+         [% avg]) urls)))++(defn bench [routes no-paths?]+  (let [routes (mapv (fn [[path name]]+                       (if no-paths?+                         [(str/replace path #""\:"" """") name]+                         [path name])) routes)+        router (reitit/router routes)]+    (doseq [[path time] (bench-routes routes #(reitit/match-by-path router %))]+      (println path ""\t"" time))))++(defn bench [routes no-paths?]+  (let [routes (mapv (fn [[path name]]+                       (if no-paths?+                         [(str/replace path #""\:"" """") name]+                         [path name])) routes)+        router (reitit/router routes)]+    (doseq [[path time] (bench-routes routes #(reitit/match-by-path router %))]+      (println path ""\t"" time))))+;;+;; Perf tests+;;++(def handler (constantly {:status 200, :body ""ok""}))++(def opensensors-routes+  [[""/v2/whoami"" {:handler handler, :name :test/route1}]+   [""/v2/users/:user-id/datasets"" {:handler handler, :name :test/route2}]+   [""/v2/public/projects/:project-id/datasets"" {:handler handler, :name :test/route3}]+   [""/v1/public/topics/:topic"" {:handler handler, :name :test/route4}]+   [""/v1/users/:user-id/orgs/:org-id"" {:handler handler, :name :test/route5}]+   [""/v1/search/topics/:term"" {:handler handler, :name :test/route6}]+   [""/v1/users/:user-id/invitations"" {:handler handler, :name :test/route7}]+   #_[""/v1/orgs/:org-id/devices/:batch/:type"" {:handler handler, :name :test/route8}]"
https://api.github.com/repos/metosin/reitit/pulls/25,134416097,"@@ -60,6 +61,27 @@   (cond->> (->> (walk data opts) (map-meta merge-meta))            coerce (into [] (keep #(coerce % opts))))) +(defn conflicting-routes [routes]"
https://api.github.com/repos/metosin/reitit/pulls/40,147233515,"@@ -1,17 +1,20 @@-(defproject metosin/reitit ""0.1.0-SNAPSHOT""+(load-file "".deps-versions.clj"")+(defproject metosin/reitit reitit-version   :description ""Snappy data-driven router for Clojure(Script)""   :url ""https://github.com/metosin/reitit""   :license {:name ""Eclipse Public License""-            :url ""http://www.eclipse.org/legal/epl-v10.html""-            :distribution :repo-            :comments ""same as Clojure""}+            :url ""http://www.eclipse.org/legal/epl-v10.html""}   :test-paths [""test/clj"" ""test/cljc""]   :deploy-repositories [[""releases"" :clojars]]   :codox {:output-path ""doc""           :source-uri ""https://github.com/metosin/reitit/{version}/{filepath}#L{line}""           :metadata {:doc/format :markdown}} -  :dependencies [[meta-merge ""1.0.0""]]+  :dependencies [[metosin/reitit-core ~reitit-version]+                 [metosin/reitit-ring ~reitit-version]]++  :source-paths [""modules/reitit-core/src""+                 ""modules/reitit-ring/src""]"
https://api.github.com/repos/metosin/reitit/pulls/62,161189750,"@@ -0,0 +1,90 @@+(ns reitit.frontend+  ""Utilities to implement frontend routing using Reitit.++  Controller is way to declare as data the side-effects and optionally+  other data related to the route.""+  (:require [reitit.core :as reitit]+            [clojure.string :as str]+            goog.Uri+            [reitit.coercion :as coercion]))++;;+;; Utilities+;;++(defn query-params+  ""Parse query-params from URL into a map.""+  [^goog.Uri uri]+  (let [q (.getQueryData uri)]+    (->> q+         (.getKeys)+         (map (juxt keyword #(.get q %)))+         (into {}))))++(defn get-hash+  ""Given browser hash starting with #, remove the # and+  end slashes.""+  []+  (-> js/location.hash+      (subs 1)+      (str/replace #""/$"" """")))++;;+;; Controller implementation+;;++(defn get-params+  ""Get controller parameters given match. If controller provides :params+  function that will be called with the match. Default is nil.""+  [controller match]+  (if-let [f (:params controller)]+    (f match)))++(defn apply-controller+  ""Run side-effects (:start or :stop) for controller.+  The side-effect function is called with controller params.""+  [controller method]+  (when-let [f (get controller method)]+    (f (::params controller))))++(defn- pad-same-length [a b]+  (concat a (take (- (count b) (count a)) (repeat nil))))++(defn apply-controllers+  ""Applies changes between current controllers and+  those previously enabled. Resets controllers which"
https://api.github.com/repos/metosin/reitit/pulls/68,175280369,"@@ -44,10 +46,27 @@   (reify coercion/Coercion     (-get-name [_] :schema)     (-get-options [_] opts)-    (-get-apidocs [_ _ {:keys [parameters responses] :as info}]-      (cond-> (dissoc info :parameters :responses)-              parameters (assoc ::parameters parameters)-              responses (assoc ::responses responses)))+    (-get-apidocs [this type {:keys [parameters responses]}]"
https://api.github.com/repos/metosin/reitit/pulls/76,175997112,"@@ -155,3 +157,53 @@  (defn strip-nils [m]   (->> m (remove (comp nil? second)) (into {})))++;;+;; Path-parameters, see https://github.com/metosin/reitit/issues/75"
https://api.github.com/repos/metosin/reitit/pulls/79,183774260,"@@ -19,9 +19,15 @@ ;       :path ""/coffee/luwak""} ``` +### `reitit-ring`++* `reitit.ring/default-handler` now works correctly with async ring+* new helper `reitit.ring/router` to compose routes outside of a router.+* `reitit.ring/create-resource-handler` function to serve static routes. See [https://metosin.github.io/reitit/ring/static.html](docs)."
https://api.github.com/repos/metosin/reitit/pulls/91,191256256,"@@ -62,6 +63,21 @@   {:name ::swagger    :spec ::spec}) +(defn- path->template [path endpoint]"
https://api.github.com/repos/metosin/reitit/pulls/96,193315469,"@@ -39,14 +39,14 @@      (walk-one [pacc macc routes]        (if (vector? (first routes))          (walk-many pacc macc routes)-         (let [[path & [maybe-arg :as args]] routes-               [data childs] (if (vector? maybe-arg)-                               [{} args]-                               [maybe-arg (rest args)])-               macc (into macc (expand data opts))]-           (if (seq childs)-             (walk-many (str pacc path) macc childs)-             [[(str pacc path) macc]]))))]+         (if (string? (first routes))"
https://api.github.com/repos/metosin/reitit/pulls/120,207118542,"@@ -163,18 +163,59 @@   (->> m (remove (comp nil? second)) (into {})))  ;;-;; Path-parameters, see https://github.com/metosin/reitit/issues/75+;; Parts (c) https://github.com/lambdaisland/uri/tree/master/src/lambdaisland/uri ;; +#?(:clj+   (def hex-digit+     {0 ""0"" 1 ""1"" 2 ""2"" 3 ""3""+      4 ""4"" 5 ""5"" 6 ""6"" 7 ""7""+      8 ""8"" 9 ""9"" 10 ""A"" 11 ""B""+      12 ""C"" 13 ""D"" 14 ""E"" 15 ""F""}))++#?(:clj+   (defn byte->percent [byte]+     (let [byte (bit-and 0xFF byte)+           low-nibble (bit-and 0xF byte)+           high-nibble (bit-shift-right byte 4)]+       (str ""%"" (hex-digit high-nibble) (hex-digit low-nibble)))))"
https://api.github.com/repos/metosin/reitit/pulls/126,212011395,"@@ -32,15 +33,23 @@   ([router name]    (match-by-name router name {}))   ([router name path-params]-   (reitit/match-by-name router name path-params)))+   (r/match-by-name router name path-params)))++(defn router+  ""Create a `reitit.core.router` from raw route data and optionally an options map.+  Enables request coercion. See [[reitit.core.router]] for details on options.""+  ([raw-routes]+   (router raw-routes {}))+  ([raw-routes opts]+   (r/router raw-routes (merge {:compile rc/compile-request-coercers} opts))))  (defn match-by-name!"
https://api.github.com/repos/metosin/reitit/pulls/151,219708176,"@@ -0,0 +1,31 @@+(ns example.server-test+  (:require [clojure.test :refer :all]+            [example.server :refer [app]]))++(deftest example-server++  (testing ""GET""+    (is (= (-> {:request-method :get :uri ""/math/plus"" :query-params {:x 20 :y 3}}"
https://api.github.com/repos/metosin/reitit/pulls/148,219825370,"@@ -57,20 +65,28 @@   support for http-methods and Middleware. See [docs](https://metosin.github.io/reitit/)   for details. +  Options:++  | key                                    | description |+  | ---------------------------------------|-------------|+  | `:reitit.middleware/transform`         | Function of `[Middleware] => [Middleware]` to transform the expanded Middleware (default: identity).+  | `:reitit.middleware/registry`          | Map of `keyword => IntoMiddleware` to replace keyword references into Middleware+  | `:reitit.ring/default-options-handler` | Default handler for `:options` method in endpoints (default: default-options-handler)+   Example:        (router         [\""/api\"" {:middleware [wrap-format wrap-oauth2]}           [\""/users\"" {:get get-user                        :post update-user                        :delete {:middleware [wrap-delete]-                               :handler delete-user}}]])--  See router options from [[reitit.core/router]] and [[reitit.middleware/router]].""+                               :handler delete-user}}]])""   ([data]    (router data nil))   ([data opts]-   (let [opts (meta-merge {:coerce coerce-handler, :compile compile-result} opts)]+   (let [opts (merge {:coerce coerce-handler"
https://api.github.com/repos/metosin/reitit/pulls/159,228739199,"@@ -12,3 +12,6 @@ pom.xml.asc /node_modules /_book figwheel_server.log++/.m2+/.ash_history"
https://api.github.com/repos/metosin/reitit/pulls/163,230598485,"@@ -19,15 +19,16 @@               (java.util HashMap Map)               (java.net URLEncoder URLDecoder)))) -(defn map-kv-  ""Applies a function to every value of a map.-+(defn maybe-map-values+  ""Applies a function to every value of a map, updates the value if not nil.   Also works on vectors. Maintains key for maps, order for vectors.""   [f coll]   (reduce-kv-    (fn [m k v]-      (assoc m k (f v)))-    (empty coll)+    (fn [coll k v]+      (if-let [v' (f v)]"
https://api.github.com/repos/metosin/reitit/pulls/188,238640610,"@@ -62,7 +62,48 @@       (swap! controller-state rfc/apply-controllers              {:data {:controllers []}}) -      (is (= [:stop-1 [:stop-3 1]] @log))+      (is (= [[:stop-3 1] :stop-1] @log))       (is (= [] @controller-state))+      (reset! log []))))++(deftest controller-data-parameters+  (let [log (atom [])+        controller-state (atom [])+        static {:start (fn [params] (swap! log conj [:start-static]))+                :stop  (fn [params] (swap! log conj [:stop-static]))+                :params rfc/static}+        controller {:start (fn [params] (swap! log conj [:start params]))+                    :stop  (fn [params] (swap! log conj [:stop params]))+                    :params (rfc/parameters {:path [:foo]})}]"
https://api.github.com/repos/metosin/reitit/pulls/203,247462431,"@@ -43,14 +44,20 @@                (if (and wilds? (not (str/blank? p))) (some #(-lookup (impl/fast-get children' %) ps (assoc path-params % p)) wilds))                (if catch-all (-catch-all children' catch-all path-params p ps))))))))) +;;+;; public api+;;"
https://api.github.com/repos/metosin/reitit/pulls/206,248585735,"@@ -579,19 +581,23 @@     (b! ""reitit-ring"" reitit-ring-f)      ;;   385ns (java-segment-router, no injects)-    (b! ""reitit-ring-fast"" reitit-ring-fast-f)+    #_(b! ""reitit-ring-fast"" reitit-ring-fast-f)++    ;;  2553ns (linear-router)+    ;;   630ns (segment-router-backed)+    #_(b! ""reitit-ring-linear"" reitit-ring-linear-f)      ;;  2137ns     (b! ""calfpath-walker"" calfpath-walker-f)      ;;  4774ns-    (b! ""calfpath-unroll"" calfpath-unroll-f)+    #_(b! ""calfpath-unroll"" calfpath-unroll-f)      ;;  2821ns     (b! ""pedestal"" pedestal-f)      ;;  4803ns-    (b! ""calfpath-macros"" calfpath-macros-f)+    #_(b! ""calfpath-macros"" calfpath-macros-f)"
https://api.github.com/repos/metosin/reitit/pulls/208,249495403,"@@ -65,17 +65,17 @@   (cond->> (->> (walk raw-routes opts) (map-data merge-data))            coerce (into [] (keep #(coerce % opts))))) -;; This whole function might be more efficient and easier to understand with transducers. (defn path-conflicting-routes [routes]-  (some->>-    (loop [[r & rest] routes, acc {}]-      (if (seq rest)-        (let [conflicting (set (keep #(if (impl/conflicting-routes? r %) %) rest))]-          (recur rest (update acc r (fnil (comp set concat) #{}) conflicting)))-        acc))-    (filter (comp seq second))-    (seq)-    (into {})))+  (let [conflicting-routes+        (into {}+              (comp (map-indexed (fn [index route]+                                   [route (into #{}+                                                (filter #(impl/conflicting-routes? route %))+                                                (subvec routes (inc index)))]))+                    (filter (comp seq second)))+              routes)]+    (when (seq conflicting-routes)+      conflicting-routes)))"
https://api.github.com/repos/metosin/reitit/pulls/212,254996647,"@@ -68,6 +68,7 @@               (let [uri (.parse Uri (.-href el))]                 (when (and (or (and (not (.hasScheme uri)) (not (.hasDomain uri)))                                (= current-domain (.getDomain uri)))+                           (not (.closest el ""[contenteditable]""))"
https://api.github.com/repos/metosin/reitit/pulls/215,260210238,"@@ -114,7 +114,7 @@         (throw           (ex-info             (str ""Can't produce Spec apidocs for "" spesification)-            {:type spesification, :coercion :spec}))))+            {:spesification spesification, :coercion :spec}))))"
https://api.github.com/repos/metosin/reitit/pulls/220,261172786,"@@ -14,9 +14,51 @@   * backed by a new `:trie-router`, replacing `:segment-router`      * [over 40% faster](https://metosin.github.io/reitit/performance.html) on the JVM +* **BREAKING**: `reitit.spec/validate-spec!` has been renamed to `reitit.spec/validate`++### `reitit-dev`++* new module for friendly router creation time exception handling+  * new option `:exception` in `r/router`, of type `Exception => Exception` (default `reitit.exception/exception`)+  * new exception pretty-printer `reitit.dev.pretty/exception`, based on [fipp](https://github.com/brandonbloom/fipp) and [expund](https://github.com/bhb/expound) for human readable, newbie-friendly errors."
https://api.github.com/repos/metosin/reitit/pulls/239,266039733,"@@ -16,10 +17,20 @@  (defn match-by-path   ""Given routing tree and current path, return match with possibly-  coerced parameters. Return nil if no match found.""+  coerced parameters. Returns nil if no match found.""   [router path]-  (let [uri (.parse Uri path)]-    (if-let [match (r/match-by-path router (.getPath uri))]+  (let [uri (.parse Uri path)+        path (.getPath uri)]+    (if-let [match (or (r/match-by-path router path)"
https://api.github.com/repos/metosin/reitit/pulls/258,273820358,"@@ -59,6 +59,14 @@           el           (recur (.-parentNode el))))))) +(defn- event-target [event]+  ;; Read event's target from composed path to get shadow dom working,+  ;; fallback to target property if not available"
https://api.github.com/repos/metosin/reitit/pulls/260,278912327,"@@ -0,0 +1,143 @@+(ns frontend.core+  (:require [clojure.string :as string]+            [fipp.edn :as fedn]+            [reagent.core :as r]+            [reitit.coercion :as rc]+            [reitit.coercion.spec :as rss]+            [reitit.frontend :as rf]+            [reitit.frontend.easy :as rfe]+            [spec-tools.data-spec :as ds]))++;; Components similar to react-router `Link`, `NavLink` and `Redirect`+;; with Reitit frontend.++(defn home-page []+  [:div+   [:h2 ""Welcome to frontend""]+   [:p ""This is home page""]])++(defn about-page []+  [:div+   [:h2 ""About frontend""]+   [:p ""This is about page""]])++(defn redirect!+  ""If `push` is truthy, previous page will be left in history.""+  [{:keys [to path-params query-params push]}]+  (if push+    (rfe/push-state to path-params query-params)+    (rfe/replace-state to path-params query-params)))++(defn Redirect+  ""Component that only causes a redirect side-effect.""+  [props]+  (redirect! props)"
https://api.github.com/repos/metosin/reitit/pulls/263,280289308,"@@ -109,10 +112,15 @@                             {:status 200                              :body {:total (- x y)}})}}]]] -      {;;:reitit.interceptor/transform dev/print-context-diffs+      {;:reitit.interceptor/transform dev/print-context-diffs ;; pretty context diffs+       :validate spec/validate ;; enable spec validation for route data+       :reitit.spec/wrap spell/closed ;; strict top-level validation (alpha)"
https://api.github.com/repos/metosin/reitit/pulls/259,280319310,"@@ -18,6 +18,31 @@ request to the server. This means the URL will look normal, but the downside is that the server must respond to all routes with correct file (`index.html`). Check examples for simple Ring handler example. +### Anchor click handling++HTML5 History router will handle click events on anchors where the href+matches the route tree (and other [rules](../../modules/reitit-frontend/src/reitit/frontend/history.cljs#L84-L98)).+If you have need to control this logic, for example to handle some+anchor clicks where the href matches route tree normally (i.e. browser load)+you can provide `:ignore-anchor-click` function to add your own logic to"
https://api.github.com/repos/metosin/reitit/pulls/279,286508671,"@@ -577,3 +578,19 @@        (fn [{:keys [::r/router]} _ _]          (is router)))      {} ::respond ::raise)))++#?(:clj+   (deftest invalid-path-parameters-parsing-concurrent-requests-277-test+     (testing ""in enought concurrent system, path-parameters can bleed"""
https://api.github.com/repos/metosin/reitit/pulls/316,330211103,"@@ -0,0 +1,33 @@+(ns reitit.ring.middleware.session+  (:require+   [clojure.spec.alpha :as s]+   [ring.middleware.session :as session]+   [ring.middleware.session.memory :as memory]))++(s/def ::spec (s/keys :opt-un [::session]))++(def ^:private store+  ""The default shared in-memory session store.++  This is used when no `:session` key is provided to the middleware.""+  (atom {}))++(def session-middleware+  ""Middleware for session.++  Enter:+  Add the `:session` key into the request map based on the `:cookies`+  in the request map.++  Exit:+  When `:session` key presents in the response map, update the session+  store with its value. Then remove `:session` from the response map.++  | key          | description |+  | -------------|-------------|+  | `:session`   | `ring.middleware.session.store/SessionStore` instance. Use `ring.middleware.session.memory/MemoryStore` by default."""
https://api.github.com/repos/metosin/reitit/pulls/318,332695303,"@@ -140,3 +141,7 @@ Compojure: #### Performance  Reitit is [much faster](performance.md) than Compojure.++### How do you pronounce ""reitit""?++[Google Translate's does a decent job pronouncing it](https://translate.google.com/#view=home&op=translate&sl=fi&tl=en&text=reitit) (click the speaker icon on the left). The English expression *rate it* is a good approximation."
https://api.github.com/repos/metosin/reitit/pulls/326,339292942,"@@ -334,13 +334,36 @@ ;; Creating Routers ;; +(defn leaf-endpoint?+  [_ _ _ _ childs]+  (not (seq childs)))++(defn mk-intermediate-endpoint-predicate+  ""Create predicate that returns truthy for valid endpoints, where the path is a leaf in+  the route tree, or the route data contains one of the specified keys at top-level or+  at the first level of nested maps."
https://api.github.com/repos/metosin/reitit/pulls/329,342390769,"@@ -2,7 +2,7 @@  We should fail fast if a router contains conflicting paths or route names.  -When a `Router` is created via `reitit.core/router`, both path and route name conflicts are checked automatically. By default, in case of conflict, an `ex-info` is thrown with a descriptive message. In some (legacy api) cases, path conflicts should be allowed and one can override the path conflict resolution via `:conflicts` router option.+When a `Router` is created via `reitit.core/router`, both path and route name conflicts are checked automatically. By default, in case of conflict, an `ex-info` is thrown with a descriptive message. In some (legacy api) cases, path conflicts should be allowed and one can override the path conflict resolution via `:conflicts` router option or via `:conflicting?` route option."
https://api.github.com/repos/metosin/reitit/pulls/342,357536511,"@@ -98,6 +99,7 @@ (def default-handlers   {::default default-handler    ::ring/response http-response-handler+   ::http-response/response http-response-handler"
https://api.github.com/repos/metosin/reitit/pulls/363,376775541,"@@ -83,42 +119,66 @@                 format (extract-request-format request)                 result (coercer value format)]             (if (error? result)-              (request-coercion-failed! result coercion value in request)-              result)))))))+              (if coerce-all-on-error?+                [nil {:error result+                      :in (if (= in :body-params) :body in)+                      :coercion coercion+                      :value value}]+                (request-coercion-failed-fail-fast! result coercion value in request))+              [result])))))))  (defn extract-response-format-default [request _]   (-> request :muuntaja/response :format)) -(defn response-coercer [coercion body {:keys [extract-response-format]-                                       :or {extract-response-format extract-response-format-default}}]+(defn response-coercer [coercion body {::keys [extract-response-format coerce-all-on-error?]+                                       :or {extract-response-format extract-response-format-default+                                            coerce-all-on-error? false}}]   (if coercion     (if-let [coercer (-response-coercer coercion body)]       (fn [request response]         (let [format (extract-response-format request response)               value (:body response)               result (coercer value format)]           (if (error? result)-            (response-coercion-failed! result coercion value request response)-            result))))))+            (if coerce-all-on-error?+              [nil {:error result+                    :in :body+                    :coercion coercion+                    :value value}]+              (response-coercion-failed-fail-fast! result coercion value request response))+            [result]))))))++(defn encode-single-error [data]+  (-encode-error (:coercion data) (update data :coercion -get-name)))  (defn encode-error [data]-  (-> data-      (dissoc :request :response)-      (update :coercion -get-name)-      (->> (-encode-error (:coercion data)))))+  (if (not-any? #(contains? data %)+                [:body :form-params :query-params :headers :path-params])"
https://api.github.com/repos/metosin/reitit/pulls/354,399659471,"@@ -36,6 +36,7 @@       (let [config-json (fn [{:keys [url config]}] (j/write-value-as-string (merge config {:url url})))             conf-js (fn [opts] (str ""window.API_CONF = "" (config-json opts) "";""))             options (as-> options $+                          (update $ :path (fn [path] (if-not (str/starts-with? path ""/"") (str ""/"" path) path)))"
https://api.github.com/repos/metosin/reitit/pulls/385,423525464,"@@ -65,6 +65,10 @@       ([request respond _]        (respond (handle request)))))) +(def default-options-resource"
https://api.github.com/repos/metosin/reitit/pulls/404,427744330,"@@ -92,6 +92,7 @@                                      (apply meta-merge (keep (comp :swagger :data) interceptors))                                      (if coercion                                        (coercion/get-apidocs coercion :swagger data))+                                     (when-not (:responses data) {:responses {:default {:description """"}}})"
https://api.github.com/repos/metosin/reitit/pulls/449,515908087,"@@ -24,24 +24,33 @@   and :parameters from route data, otherwise does not mount.""   {:name ::coerce-request    :spec ::rs/parameters-   :compile (fn [{:keys [coercion parameters]} opts]+   :compile (fn [{:keys [coercion parameters] :as route-data} opts]               (cond                 ;; no coercion, skip                 (not coercion) nil                 ;; just coercion, don't mount                 (not parameters) {}                 ;; mount                 :else-                (if-let [coercers (coercion/request-coercers coercion parameters opts)]-                  (fn [handler]-                    (fn-                      ([request]-                       (let [coerced (coercion/coerce-request coercers request)]-                         (handler (impl/fast-assoc request :parameters coerced))))-                      ([request respond raise]-                       (let [coerced (coercion/coerce-request coercers request)]-                         (handler (impl/fast-assoc request :parameters coerced) respond raise)))))-                  {})))})+                (try+                  (if-let [coercers (coercion/request-coercers coercion parameters opts)]+                    (fn [handler]+                      (fn+                        ([request]+                         (let [coerced (coercion/coerce-request coercers request)]+                           (handler (impl/fast-assoc request :parameters coerced))))+                        ([request respond raise]+                         (let [coerced (coercion/coerce-request coercers request)]+                           (handler (impl/fast-assoc request :parameters coerced) respond raise)))))+                    {})+                  (catch Exception e+                    (throw (ex-info (str ""Coerce-request-middleware failed: "" (.getMessage e))"
https://api.github.com/repos/metosin/reitit/pulls/473,583420708,"@@ -239,7 +241,7 @@      | -------------------|-------------|      | :parameter         | optional name of the wildcard parameter, defaults to unnamed keyword `:`      | :root              | optional resource root, defaults to `\""public\""`-     | :path              | optional path to mount the handler to. Works only if mounted outside of a router.+     | :path              | path to mount the handler to. Required when mounted outside of a router, does not work inside a router.      | :loader            | optional class loader to resolve the resources      | :index-files       | optional vector of index-files to look in a resource directory, defaults to `[\""index.html\""]`      | :not-found-handler | optional handler function to use if the requested resource is missing (404 Not Found)"""
https://api.github.com/repos/metosin/reitit/pulls/487,618124425,"@@ -85,24 +85,28 @@ Optionally, the parts can be required separately. A Ring routing app with input & output coercion using [data-specs](https://github.com/metosin/spec-tools/blob/master/README.md#data-specs).  ```clj+(require '[muuntaja.core :as m]) (require '[reitit.ring :as ring]) (require '[reitit.coercion.spec]) (require '[reitit.ring.coercion :as rrc])+(require '[reitit.ring.middleware.muuntaja :as muuntaja])+(require '[reitit.ring.middleware.parameters :as parameters])  (def app   (ring/ring-handler     (ring/router       [""/api""        [""/math"" {:get {:parameters {:query {:x int?, :y int?}}-                       :responses {200 {:body {:total pos-int?}}}-                       :handler (fn [{{{:keys [x y]} :query} :parameters}]-                                  {:status 200-                                   :body {:total (+ x y)}})}}]]+                       :responses  {200 {:body {:total int?}}}+                       :handler    (fn [{{{:keys [x y]} :query} :parameters}]+                                     {:status 200+                                      :body   {:total (+ x y)}})}}]]       ;; router data affecting all routes-      {:data {:coercion reitit.coercion.spec/coercion-              :middleware [rrc/coerce-exceptions-middleware+      {:data {:coercion   reitit.coercion.spec/coercion+              :muuntaja   m/instance+              :middleware [parameters/parameters-middleware                            rrc/coerce-request-middleware-                           rrc/coerce-response-middleware]}})))"
https://api.github.com/repos/metosin/reitit/pulls/489,654839177,"@@ -12,6 +12,12 @@ We use [Break Versioning][breakver]. The version numbers follow a `<major>.<mino  [breakver]: https://github.com/ptaoussanis/encore/blob/master/BREAK-VERSIONING.md +## UNRELEASED++### `reitit-ring`++* Make `reitit.ring/create-resource-handler` and `reitit.ring/create-file-handler` handle properly. [#484](https://github.com/metosin/reitit/issues/484). PR [#489](https://github.com/metosin/reitit/pull/489)."
https://api.github.com/repos/metosin/reitit/pulls/474,775221870,"@@ -60,14 +63,31 @@ (defn map-data [f routes]   (mapv (fn [[p ds]] [p (f p ds)]) routes)) +(defn default-route-data-merge [acc k v]+  (mm/meta-merge acc {k v}))+ (defn merge-data [p x]-  (reduce-    (fn [acc [k v]]-      (try-        (mm/meta-merge acc {k v})-        (catch #?(:clj Exception, :cljs js/Error) e-          (ex/fail! ::merge-data {:path p, :left acc, :right {k v}, :exception e}))))-    {} x))+  (let [;; Find last the effective :coercion value+        ;; for the route, and then use the cocercion+        ;; instance for route data merge implementation.+        ;; TODO: other options/keys should also be able to control+        ;; merge?+        coercion (->> x+                      reverse+                      (some (fn [[k v]]+                              (when (= :coercion k)+                                v))))"
https://api.github.com/repos/metosin/reitit/pulls/563,972895661,"@@ -132,6 +133,76 @@    ;; malli options    :options nil}) +(defn -get-apidocs-openapi+  [coercion {:keys [parameters responses content-types] :or {content-types [""application/json""]}} options]+  (let [{:keys [body request]} parameters+        parameters (dissoc parameters :request :body)+        ->schema-object (fn [schema opts]+                          (let [current-opts (merge options opts)]+                            (json-schema/transform (coercion/-compile-model coercion schema current-opts)+                                                   current-opts)))]++    (merge+      (when (seq parameters)+        {:parameters+         (->> (for [[in schema] parameters+                    :let [{:keys [properties required] :as root} (->schema-object schema {:in in :type :parameter})+                          required? (partial contains? (set required))]+                    [k schema] properties]+                (merge {:in (name in)+                        :name k+                        :required (required? k)+                        :schema schema}+                       (select-keys root [:description])))+              (into []))})+      (when body+        ;; body uses a single schema to describe every :requestBody+        ;; the schema-object transformer should be able to transform into distinct content-types+        {:requestBody {:content (into {}+                                      (map (fn [content-type]+                                             (let [schema (->schema-object body {:in :requestBody+                                                                                 :type :schema+                                                                                 :content-type content-type})]+                                               [content-type {:schema schema}])))+                                      content-types)}})"
https://api.github.com/repos/metosin/reitit/pulls/582,1082179287,"@@ -312,7 +312,15 @@          (testing ""does not strip slashes""           (is (= nil (app {:request-method :get, :uri ""/slash-less/""})))-          (is (= nil (app {:request-method :post, :uri ""/slash-less/""}))))))+          (is (= nil (app {:request-method :post, :uri ""/slash-less/""}))))++        (testing ""retains query-string in location header""+          (are [method uri]+            (is (= ""/with-slash/?kikka=kukka"""
https://api.github.com/repos/metosin/reitit/pulls/581,1083266419,"@@ -22,8 +32,10 @@                 :path-params {}                 :query-params {}                 :path ""/""+                :fragment nil                 :parameters {:query {}-                             :path {}}})+                             :path {}+                             :fragment nil}})"
https://api.github.com/repos/metosin/reitit/pulls/590,1130547093,"@@ -405,9 +405,53 @@ All the beer-routes now match in constant time. |-----------------|---------|----------------------- | `/beers/sahti`  | 40ns    | static +### Wrapping a swappable ring handler++In order for a ring handler to be recomposed, we can wrap it into a handler that dereferences it on request.++```clj+(defn deref-handler [rf]"
https://api.github.com/repos/metosin/reitit/pulls/588,1135341276,"@@ -98,17 +111,24 @@ (defn extract-response-format-default [request _]   (-> request :muuntaja/response :format)) -(defn response-coercer [coercion body {:keys [extract-response-format serialize-failed-result]-                                       :or {extract-response-format extract-response-format-default}}]+(defn response-coercer [coercion {:keys [content body]} {:keys [extract-response-format serialize-failed-result]+                                                         :or {extract-response-format extract-response-format-default}}]   (if coercion-    (if-let [coercer (-response-coercer coercion body)]-      (fn [request response]-        (let [format (extract-response-format request response)-              value (:body response)-              result (coercer value format)]-          (if (error? result)-            (response-coercion-failed! result coercion value request response serialize-failed-result)-            result))))))+    (let [per-format-coercers (some->> (for [[format schema] content]+                                         [format (-response-coercer coercion schema)])+                                       (filter second)+                                       (seq)+                                       (into {}))+          default (when body (-response-coercer coercion body))]+      (when (or per-format-coercers default)+        (fn [request response]+          (let [format (extract-response-format request response)+                value (:body response)+                coercer (get per-format-coercers format (or default (fn [value _format] value)))"
https://api.github.com/repos/metosin/reitit/pulls/589,1141424707,"@@ -102,9 +102,17 @@                             (if-let [endpoint (some->> c (keep transform-endpoint) (seq) (into {}))]                               [(swagger-path p (r/options router)) endpoint]))            map-in-order #(->> % (apply concat) (apply array-map))-           paths (->> router (r/compiled-routes) (filter accept-route) (map transform-path) map-in-order)]+           paths (->> router (r/compiled-routes) (filter accept-route) (map transform-path) map-in-order)+           definitions (reduce-kv+                         (fn [ds _ v]+                           (let [ks (keys v)]+                             (merge ds (apply merge+                                              (for [k ks]+                                                (when-let [method-map (get v k)]+                                                  (:definitions method-map)))))))+                         {} paths)]        {:status 200-        :body (meta-merge swagger {:paths paths})}))+        :body (meta-merge swagger {:paths paths :definitions definitions})}))"
https://api.github.com/repos/metosin/reitit/pulls/607,1165062701,"@@ -18,7 +18,12 @@ We use [Break Versioning][breakver]. The version numbers follow a `<major>.<mino * Updated dependencies:  ```clojure-[metosin/malli ""0.10.4""] is available but we use ""0.10.1""+[metosin/ring-swagger-ui ""4.18.1""] is available but we use ""4.15.5""+[metosin/malli ""0.11.0""] is available but we use ""0.10.4"""
https://api.github.com/repos/metosin/reitit/pulls/626,1200020554,"@@ -9,6 +9,51 @@      (:import (java.net URLEncoder URLDecoder)               (java.util HashMap Map)))) +;;+;; path-update+;;++(defn -match [path path-map]+  (letfn [(match [x f] (if (fn? f) (f x) (= x f)))]+    (reduce+     (fn [_ [ps f]]+       (let [match (loop [[p & pr] path, [pp & ppr] ps]+                     (cond (and p pp (match p pp)) (recur pr ppr)+                           (= nil p pp) true))]"
https://api.github.com/repos/metosin/reitit/pulls/628,1208918520,"@@ -157,21 +157,21 @@ You can also specify request and response body schemas per content-type. The syn ```clj (def app   (ring/ring-handler-    (ring/router-      [""/api""-       [""/example"" {:post {:coercion reitit.coercion.schema/coercion-                           :parameters {:request {:content {""application/json"" {:y s/Int}-                                                            ""application/edn"" {:z s/Int}}-                                                  ;; default if no content-type matches:-                                                  :body {:yy s/Int}}}-                           :responses {200 {:content {""application/json"" {:w s/Int}-                                                      ""application/edn"" {:x s/Int}}-                                            ;; default if no content-type matches:-                                            :body {:ww s/Int}}-                           :handler ...}}]]-      {:data {:middleware [rrc/coerce-exceptions-middleware-                           rrc/coerce-request-middleware-                           rrc/coerce-response-middleware]}})))+   (ring/router+    [""/api""+     [""/example"" {:post {:coercion reitit.coercion.schema/coercion+                         :request {:content {""application/json"" {:y s/Int}+                                             ""application/edn"" {:z s/Int}}+                                   ;; default if no content-type matches:+                                   :body {:yy s/Int}}+                         :responses {200 {:content {""application/json"" {:w s/Int}+                                                    ""application/edn"" {:x s/Int}}+                                          ;; default if no content-type matches:+                                          :body {:ww s/Int}}+                                     :handler ...}}}]]"
https://api.github.com/repos/metosin/reitit/pulls/639,1307482285,"@@ -0,0 +1,146 @@+(ns example.server+  (:require [reitit.ring :as ring]+            [reitit.coercion.malli]+            [reitit.openapi :as openapi]+            [reitit.ring.malli]+            [reitit.swagger-ui :as swagger-ui]+            [reitit.ring.coercion :as coercion]+            [reitit.dev.pretty :as pretty]+            [reitit.ring.middleware.muuntaja :as muuntaja]+            [reitit.ring.middleware.exception :as exception]+            [reitit.ring.middleware.multipart :as multipart]+            [reitit.ring.middleware.parameters :as parameters]+            [ring.adapter.jetty :as jetty]+            [muuntaja.core :as m]))++(def app+  (ring/ring-handler+    (ring/router+      [[""/openapi.json""+        {:get {:no-doc true+               :openapi {:info {:title ""my-api""+                                :description ""openapi3 docs with [malli](https://github.com/metosin/malli) and reitit-ring""+                                :version ""0.0.1""}+                         ;; used in /secure APIs below+                         :components {:securitySchemes {""auth"" {:type :apiKey+                                                                :in :header+                                                                :name ""Example-Api-Key""}}}}+               :handler (openapi/create-openapi-handler)}}]++       [""/pizza""+        {:get {:summary ""Fetch a pizza | Multiple content-types, multiple examples""+               :content-types [""application/json"" ""application/edn""]"
https://api.github.com/repos/nathanmarz/cascalog/pulls/44,367737,"@@ -39,6 +44,22 @@     (doseq [func [ident ident-doc ident-meta ident-both]]       (test?<- [[1] [2]] [?y] (src ?x) (func ?x :> ?y))))) +(deftest varargs-capabilites-test+  (let [src [[""a"" 1] [""b"" 2] [""a"" 3]]]+    (test?<- [[""a"" 1 [31 99]] [""b"" 1 [31 99]]] [?a ?d ?varargs]+             (src ?a ?b) ((ident-varargs 1 31 99) ?a :> ?a ?d ?varargs))))++(deftest varargs-should-be-optional-test"
https://api.github.com/repos/nathanmarz/cascalog/pulls/63,603559,"@@ -5,11 +5,25 @@ import cascalog.hadoop.ClojureKryoSerialization; import com.esotericsoftware.kryo.ObjectBuffer; import org.apache.log4j.Logger;+import org.apache.hadoop.io.serializer.SerializationFactory;+import org.apache.hadoop.io.serializer.Serializer;+import org.apache.hadoop.io.serializer.Deserializer;+import org.apache.hadoop.conf.Configuration;++import java.io.ByteArrayOutputStream;+import java.io.ByteArrayInputStream;++import clojure.lang.RT;+import clojure.lang.Var;  /** User: sritchie Date: 12/16/11 Time: 8:34 PM */ public class KryoService {     public static final Logger LOG = Logger.getLogger(KryoService.class);     static ObjectBuffer kryoBuf;+    static Var require = RT.var(""clojure.core"", ""require"");"
https://api.github.com/repos/nathanmarz/cascalog/pulls/68,689801,"@@ -25,7 +25,8 @@   :jvm-opts [""-Xmx768m"" ""-server""]   :codox {:include [cascalog.vars cascalog.ops cascalog.io cascalog.api]}   :repositories {""conjars"" ""http://conjars.org/repo/""}-  :plugins [[lein-midje ""2.0.0-SNAPSHOT""]]+  :plugins [[lein-midje ""2.0.0-SNAPSHOT""]+            [lein-swank ""1.4.4""]]"
https://api.github.com/repos/nathanmarz/cascalog/pulls/106,3038578,"@@ -0,0 +1,10 @@+(defproject cascalog-more-taps ""1.10.1-SNAPSHOT""+  :description ""More taps for Cascalog""+  :min-lein-version ""2.0.0""+  :license {:name ""MIT License""+            :url ""http://www.opensource.org/licenses/MIT""}+  :profiles {:dev {:dependencies [[org.clojure/clojure ""1.4.0""]+                                  [cascalog ""1.10.1-SNAPSHOT""]"
https://api.github.com/repos/nathanmarz/cascalog/pulls/122,3198160,"@@ -1,22 +1,36 @@ (ns cascalog.elephantdb.conf   (:require [cascalog.workflow :as w])-  (:import [elephantdb.cascading ElephantDBTap$Args]+  (:import [elephantdb DomainSpec]+           [elephantdb.cascading ElephantDBTap$Args]            [java.util ArrayList])) +(defn convert-java-domain-spec [^DomainSpec spec]"
https://api.github.com/repos/nathanmarz/cascalog/pulls/127,3327644,"@@ -4,18 +4,25 @@             [cascalog.vars :as v]             [cascalog.workflow :as w])   (:import [cascading.scheme.hadoop TextDelimited WritableSequenceFile]+           cascading.scheme.hadoop.TextLine$Compress            [cascading.tuple Fields]))  (defn- delimited-  [field-seq delim & {:keys [classes skip-header? quote]}]-  (let [skip-header? (boolean skip-header?)+  [field-seq delim & {:keys [classes skip-header? quote write-header? strict? safe?]+                      :or {skip-header? false"
https://api.github.com/repos/nathanmarz/cascalog/pulls/151,4488532,"@@ -137,7 +137,8 @@ (defn merge*   ""Merges the supplied flows.""   [& flows]-  (reduce plus flows))+  (with-merged-pipes flows"
https://api.github.com/repos/nathanmarz/cascalog/pulls/161,5055102,"@@ -3,10 +3,14 @@   :license {:name ""Eclipse Public License""             :url ""http://www.eclipse.org/legal/epl-v10.html""}   :repositories {""conjars.org"" ""http://conjars.org/repo""}-  :profiles {:1.3 {:dependencies [[org.clojure/clojure ""1.3.0""]]}-             :1.4 {:dependencies [[org.clojure/clojure ""1.4.0""]]}+  :profiles {:1.3 {:dependencies [[org.clojure/clojure ""1.3.0""]+                                  [org.clojure.contrib/accumulators ""4.0.0""]]}"
https://api.github.com/repos/nathanmarz/cascalog/pulls/160,5055111,"@@ -26,7 +26,9 @@                  (project-settings)                  *JOB-CONF*                  {""io.serializations""-                  ""cascalog.hadoop.ClojureKryoSerialization""}))+                  ""cascalog.hadoop.ClojureKryoSerialization"",+                  ""cascading.compatibility.retain.collector"""
https://api.github.com/repos/nathanmarz/cascalog/pulls/164,5296286,"@@ -125,7 +125,6 @@                [5 2] [5 9]]         query (<- [?x ?sum]                   (src ?x ?y)-                  (:sort ?x)"
https://api.github.com/repos/nathanmarz/cascalog/pulls/167,5410992,"@@ -168,3 +171,18 @@        (sort-by (fn [v] (if (-> v meta :dynamic) 1 0)))        first)) ++(defn get-version [dep]+  ;; read the project version from the pom.properties file in the jar+  (let [path (str ""META-INF/maven/"" (name dep) ""/pom.properties"")+        props (io/resource path)]+    (when props+      (with-open [stream (io/input-stream props)]+        (let [props (doto (Properties.) (.load stream))]+          (.getProperty props ""version""))))))++(System/setProperty AppProps/APP_FRAMEWORKS +  ;; being a good citizen in the cascading ecosystem and set the framework +  ;; property+       (s/join """", [""cascalog"", "":"" "
https://api.github.com/repos/nathanmarz/cascalog/pulls/174,5644355,"@@ -47,17 +51,31 @@ public static ByteArrayOutputStream getByteStream() {     return byteStream.get();   } +  private static Configuration clojureConf() {+    return (Configuration)+        Util.bootSimpleFn(""hadoop-util.core"", ""job-conf"").invoke(+            Util.bootSimpleFn(""cascalog.cascading.conf"", ""project-conf"").invoke());+  }+   private static Kryo freshKryo() {-    Kryo k = new ClojureKryoSerialization().populatedKryo();+    return freshKryo(clojureConf());+  }++  private static Kryo freshKryo(Configuration conf) {+    Kryo k = new ClojureKryoSerialization(conf).populatedKryo();     k.setRegistrationRequired(false);     return k;   }    public static byte[] serialize(Object obj) {+    return serialize(clojureConf(), obj);"
https://api.github.com/repos/nathanmarz/cascalog/pulls/175,5650225,"@@ -0,0 +1,56 @@+/*+Copyright 2012 Twitter, Inc."
https://api.github.com/repos/nathanmarz/cascalog/pulls/176,5666665,"@@ -400,9 +400,58 @@            flows            group-fields            decl-fields-           (or aggs [])+           aggs            (concat opts [:join (CascalogJoiner. join-types)])))) ++(defn hash-join*+  ""Performs a map-side join of flows on join-fields. By default+   does an inner join, but callers can specify a join type using+   :join keyword argument, which can be :inner, :outer, or a+   Cascading Joiner implementation.++   Note: full or right outer joins have odd behavior in hash joins.+         See Cascading documentation for details.""+  [flows join-fields decl-fields & {:keys [join] :or {join :inner}}]+  (safe-assert (= (count flows) (count join-fields))+               ""Expected same number of flows and join fields"")+  (-> flows+      ensure-unique-pipes+      lift-pipes+      sum+      (add-op (fn [pipes]+                (build-join-group HashJoin. pipes join-fields decl-fields join)))))++(defn hash-join-with-tiny+  [larger-flow fields1 tiny-flow fields2]+  (co-group* [larger-flow tiny-flow]+             [fields1 fields2]+             nil))"
https://api.github.com/repos/nathanmarz/cascalog/pulls/186,6337974,"@@ -154,29 +156,43 @@ identity.  identity.""  (defn hfs-textline   ""Creates a tap on HDFS using textline format. Different filesystems-   can be selected by using different prefixes for `path`.+   can be selected by using different prefixes for `path`. Supported+   keyword options are: -  Supports keyword option for `:outfields`. See-  `cascalog.cascading.tap/hfs-tap` for more keyword arguments.+   `:outfields` - used to select the fields written to the tap++   `:compression` - one of `:enable`, `:disable` or `:default`++   See `cascalog.cascading.tap/hfs-tap` for more keyword arguments.     See http://www.cascading.org/javadoc/cascading/tap/Hfs.html and    http://www.cascading.org/javadoc/cascading/scheme/TextLine.html""   [path & opts]-  (let [scheme (->> (:outfields (apply array-map opts) Fields/ALL)-                    (text-line [""line""]))]+  (let [scheme (text-line [""line""]"
https://api.github.com/repos/nathanmarz/cascalog/pulls/198,6924952,"@@ -228,9 +229,9 @@   (to-generator [{:keys [sources join-fields type-seq]}]     (-> (ops/cascalog-join (map (fn [source [available type]]                                   (condp = type-                                    :inner (ops/->Inner source available)-                                    :outer (ops/->Outer source available)-                                    (ops/->Existence source available type)))+                                    :inner (Inner. source available)"
https://api.github.com/repos/nathanmarz/cascalog/pulls/213,7827447,"@@ -4,10 +4,17 @@   :description ""More taps for Cascalog""   :license {:name ""Eclipse Public License""             :url ""http://www.eclipse.org/legal/epl-v10.html""}+  :javac-options [""-target"" ""1.6"" ""-source"" ""1.6""]+  :source-paths [""src/clj""]"
https://api.github.com/repos/nathanmarz/cascalog/pulls/241,10916112,"@@ -22,8 +22,8 @@                  [cascading/cascading-hadoop ~cc-version                   :exclusions [org.codehaus.janino/janino                                org.apache.hadoop/hadoop-core]]-                 [cascading.kryo ""0.4.6""]-                 [com.twitter/carbonite ""1.3.2""]+                 [com.twitter/chill-hadoop ""0.3.5""]+                 [com.twitter/carbonite ""1.3.3""]"
https://api.github.com/repos/nathanmarz/cascalog/pulls/247,11930875,"@@ -642,6 +642,32 @@ This won't work in distributed mode because of the ->Record functions.""         (assoc :available-fields fields)         (assoc :ground? (v/fully-ground? fields))))) +(defn prune-operations+  ""Remove any operations whose output is not used; ie, output does not intersect with the set+  of fields that is the query's out-fields, generators (joins), inputs of other operations,+  and :sort option. Additionally, don't try to prune operations if a no input operator exists""+  [fields grouped options]+  (let [check-input-operations (concat (grouped Operation)+                                       (grouped FilterOperation)+                                       (grouped Aggregator))]+  (if (some #(empty? (:input %)) check-input-operations)+    (concat (grouped Operation)+            (grouped FilterOperation))+    (let [generators (concat (grouped Generator)+                             (grouped GeneratorSet))+          nessecary-fields (->> check-input-operations"
https://api.github.com/repos/nathanmarz/cascalog/pulls/256,14861127,"@@ -1,42 +1,54 @@ (ns cascalog.logic.platform-  ""The execution platform class, plus a basic Cascading implementation.""-  (:require [jackknife.core :as u]-            [cascalog.cascading.operations :as ops]-            [cascalog.cascading.types :as types]))+  ""The execution platform class.""+  (:require [cascalog.logic.zip :as zip]))++;; source-map is a map of identifier to tap, or source. Pipe is the+;; current pipe that the user needs to operate on.++(defrecord ClojureFlow [source-map sink-map trap-map tails pipe name])"
https://api.github.com/repos/nathanmarz/cascalog/pulls/268,23659091,"@@ -40,6 +40,24 @@             ((hfs-delimited tmp :delimiter "","" :compress? true) ?a ?b ?c)) =>         (produces [[""Proin"" ""false"" ""3""]]))))) +(deftest delimited-compression-test"
https://api.github.com/repos/nathanmarz/cascalog/pulls/270,25110347,"@@ -0,0 +1,151 @@+(ns cascalog.cascading.stats+  ""Namespace implementing stats processing for the Cascading planner.""+  (:require [clojure.string :refer [join]]+            [schema.core :as s])+  (:import [cascading.stats CascadingStats]))++;; ## Schemas++(def CounterGroup s/Str)++(def CounterName s/Str)++(s/defschema CounterMap+  ""Clojure representation of Cascading's counters.""+  {CounterGroup {CounterName s/Int}})++(s/defschema StatsMap+  ""Clojure representation of the cascading.stats.CascadingStats data+  structure.""+  {:name (s/maybe s/Str)+   :counters CounterMap+   :duration s/Int+   :finished-time s/Int+   :id s/Str+   :run-time s/Int+   :start-time s/Int+   :submit-time s/Int+   :failed? s/Bool+   :skipped? s/Bool+   :stopped? s/Bool+   :successful? s/Bool})++;; ## Dynamic Variables+;;+;; These variables are bound within the context of a Cascalog job. You+;; can access them from your operations without worry about prepfn+;; craziness.++(def ^:dynamic *flow-process* nil)+(def ^:dynamic *op-call* nil)++(def default-group+  ""This is the default group name for any stats recorded in the course+  of a Cascalog job.""+  ""CascalogStats"")++;; ## Stats Entry++(s/defn inc-by!+  ""Increments the supplied counter in the supplied group by, you+  guessed it, the supplied amount. Only takes effect in the context of+  a Cascading flow.""+  ([counter :- CounterName value :- s/Int]+     (inc-by! default-group counter value))+  ([group :- CounterGroup counter :- CounterName value :- s/Int]+     (when-let [fp *flow-process*]+       (.increment fp group counter value))))++(s/defn inc!+  ""Increments the supplied counter in the supplied group by 1. Only+  takes effect in the context of a Cascading flow.""+  ([counter :- CounterName]+     (inc-by! default-group counter 1))+  ([group :- CounterGroup counter :- CounterName]+     (inc-by! group counter 1)))++;; ## Stats Utilities++(defn map->json+  ""My own little JSON fn to prevent pulling in a JSON library.""+  [m]+  (->> (for [[k v] m :let [v (cond (nil? v) ""null""+                                   (string? v) (format "" \""%s\"""" v)+                                   (map? v) (map->json v)+                                   :else v)]]+         (format ""\""%s\"": %s"" k v))+       (join "", "" )+       (format ""{%s}"")))++(defn map-by+  ""Takes a value-generating function and a sequence and returns a map+  with the original seq elements as keys, and (f key) as each+  value.""+  [f xs]+  (into {} (for [x xs] [x (f x)])))++;; ## Cascading Stats Processing+;;+;; These functions turn the basic Cascading objects into Clojure data+;; structures.++(s/defn counter-map :- CounterMap+  ""Digests the supplied stats object and returns a map of ""+  [stats :- CascadingStats]+  (letfn [(counter-v [group counter]+            (.getCounterValue stats group counter))+          (build-group [g]+            (let [counters (.getCountersFor stats g)]+              (map-by (partial counter-v g) counters)))]+    (map-by build-group (.getCounterGroups stats))))++(s/defn stats-map :- StatsMap+  ""Returns a Clojure map of relevant stats from the Cascading stats+  object.""+  [stats :- CascadingStats]+  {:counters (counter-map stats)+   :duration (.getDuration stats)+   :finished-time (.getFinishedTime stats)+   :id (.getID stats)+   :name (.getName stats)+   :run-time (.getRunTime stats)+   :start-time (.getStartTime stats)+   :submit-time (.getSubmitTime stats)+   :failed? (.isFailed stats)+   :skipped? (.isSkipped stats)+   :stopped? (.isStopped stats)+   :successful? (.isSuccessful stats)})++;; ## :stats-fn Implementations+;;+;; Drop these in to your Cascalog job as `(:stats-fn <f>)`, or wrap+;; your job call in `(with-stats <f> ....)` to use them with the bare+;; Cascading DSL.++(s/defn stdout+  ([] (stdout default-group))+  ([group :- CounterGroup]+     (s/fn [stats :- StatsMap]+       (println (format ""Custom counters for group %s:"" group))+       (doseq [[counter value] (get (:counters stats) group)]+         (println (format ""%s\t%s"" counter value))))))++(s/defn to-file+  ""path is passed to clojure.java.io/writer, so the argument can be a+   Writer, BufferedWriter, OutputStream, File, URI, URL, Socket, and+   String.""+  [path json? :- s/Bool]+  (s/fn [stats :- StatsMap]+    (spit path (if json? (map->json stats) (pr-str stats)))))++(def clojure-file+  ""Returns a stats handler that prints the final stats map to the+  supplied file (or output stream, etc, see clojure.java.io/writer) as+  a Clojure data structure.""+  #(to-file % false))++(def json-file+  ""Returns a stats handler that prints the final stats map to the+  supplied file (or output stream, etc, see clojure.java.io/writer) as+  a JSON data structure.""+  #(to-file % true))"
https://api.github.com/repos/nathanmarz/cascalog/pulls/296,49393149,"@@ -6,6 +6,10 @@ language: clojure lein: lein2 script: JVM_OPTS=""-Djava.library.path=$PWD/hadoop-lzo-native/lib"" lein2 sub with-profile dev,provided test before_install:+    - cat /etc/hosts # optionally check the content *before*"
https://api.github.com/repos/nathanmarz/cascalog/pulls/293,51260694,"@@ -19,7 +19,7 @@ (defn produces   ([gen] (produces gen :fatal))   ([gen log-level]-     (chatty-checker"
https://api.github.com/repos/nextjournal/clerk/pulls/21,759510161,"@@ -140,14 +142,58 @@                 (and markdown? (n/comment? node))                 (-> state                     (assoc :nodes (drop-while n/comment? nodes))-                    (update :doc conj {:type :markdown :text (apply str (map (comp remove-leading-semicolons n/string)-                                                                             (take-while n/comment? nodes)))}))+                    (update :doc conj {:type :markdown+                                       :doc (markdown/parse (apply str (map (comp remove-leading-semicolons n/string)+                                                                            (take-while n/comment? nodes))))}))                 :else                 (update state :nodes rest)))        (select-keys state [:doc :visibility]))))) +(defn code-cell? [{:as node :keys [type]}]+  ;; TODO: assign different types to fenced vs indented code blocks+  (and (= :code type) (contains? node :info)))++(defn parse-markdown-file [{:keys [markdown?]} file]+  (loop [{:as state :keys [nodes] ::keys [md-slice]} {:doc [] ::md-slice [] :nodes (:content (markdown/parse (slurp file)))}]+    (if-some [node (first nodes)]+      (recur+       (if (code-cell? node)+         (let [apply-clj-nodes (fn [state clj-nodes]"
https://api.github.com/repos/nextjournal/clerk/pulls/26,765967677,"@@ -22,13 +22,15 @@ (defn var-name   ""Takes a `form` and returns the name of the var, if it exists.""   [form]-  (when (and (sequential? form)+  (when (and (list? form)"
https://api.github.com/repos/nextjournal/clerk/pulls/36,770793889,"@@ -18,7 +18,12 @@         hiccup/hiccup {:mvn/version ""2.0.0-alpha2""}         lambdaisland/uri {:mvn/version ""1.11.86""} -        rewrite-clj/rewrite-clj {:mvn/version ""1.0.699-alpha""}}+        rewrite-clj/rewrite-clj {:mvn/version ""1.0.699-alpha""}++        ;; needed for CSS jit pass+        babashka/process {:mvn/version ""0.0.2""}+        io.github.nextjournal/cas {:git/url ""git@github.com:nextjournal/cas"""
https://api.github.com/repos/nextjournal/clerk/pulls/39,771481305,"@@ -1 +0,0 @@-.shadow-cljs/nrepl.port"
https://api.github.com/repos/nextjournal/clerk/pulls/45,777560859,"@@ -185,21 +185,22 @@   (map-indexed (fn [idx x]                  (inspect (update opts :path conj idx) x)))) -(defn coll-viewer [{:keys [open close]} xs {:as opts :keys [path viewer !expanded-at]}]-  (html (let [expanded? (@!expanded-at path)]+(defn coll-viewer [xs {:as opts :keys [path viewer !expanded-at]}]+  (html (let [expanded? (@!expanded-at path)+              {:keys [opening-paren closing-paren]} viewer]           [:span.inspected-value.whitespace-nowrap            {:class (when expanded? ""inline-flex"")}            [:span             [:span.bg-opacity-70.whitespace-nowrap              (when (< 1 (count xs))                {:on-click (partial toggle-expanded !expanded-at path)                 :class ""cursor-pointer bg-indigo-50 hover:bg-indigo-100 hover:rounded-sm border-b border-gray-400 hover:border-gray-500""})-             open]+             opening-paren]             (into [:<>]                   (comp (inspect-children opts)-                        (interpose (if expanded? [:<> [:br] nbsp (when (= 2 (count open)) nbsp)] "" "")))+                        (interpose (if expanded? [:<> [:br] nbsp (when (= 2 (count opening-paren)) nbsp)] "" "")))                   xs)-            (into [:<>] (:closing-parens viewer close))]])))+            (cond->> closing-paren (list? closing-paren) (into [:<>]))]])))"
https://api.github.com/repos/nextjournal/clerk/pulls/46,777676985,"@@ -0,0 +1,6 @@+^:nextjournal.clerk/no-cache"
https://api.github.com/repos/nextjournal/clerk/pulls/47,779629937,"@@ -58,53 +58,75 @@      {:result ret#       :time-ms (/ (double (- (. System (nanoTime)) start#)) 1000000.0)})) +(defn- wrapped-var [var]+  {::wrapped-var var})++(defn- lookup-cached-result [results-last-run introduced-var hash cas-hash visibility]+  (try+    (let [value (or (get results-last-run hash)+                    (thaw-from-cas cas-hash))]+      (when introduced-var+        (intern *ns* (-> introduced-var symbol name symbol) value))+      (wrapped-with-metadata (if introduced-var (wrapped-var introduced-var) value) visibility hash))+    (catch Exception _e+      ;; TODO better report this error, anything that can't be read shouldn't be cached in the first place+      #_(prn :thaw-error e)+      nil)))++(defn- cachable-value? [value]+  (not (or (fn? value)+           (instance? clojure.lang.IDeref value)+           (instance? clojure.lang.MultiFn value)+           (instance? clojure.lang.Namespace value))))++(defn- cache! [digest-file var-value]+  (try+    (spit digest-file (hash+store-in-cas! var-value))+    (catch Exception _e+      #_(prn :freeze-error e)+      nil)))++(defn- eval+cache! [form hash digest-file introduced-var no-cache? visibility]+  (let [{:keys [result]} (time-ms (binding [config/*in-clerk* true] (eval form)))+        var-value (cond-> result (var? result) deref)+        no-cache? (or no-cache?+                      (config/cache-disabled?)+                      (view/exceeds-bounded-count-limit? var-value))]+    (when (and (not no-cache?) (cachable-value? var-value))+      (cache! digest-file var-value))+    (let [blob-id (cond no-cache? (view/->hash-str var-value)+                        (fn? var-value) nil"
https://api.github.com/repos/nextjournal/clerk/pulls/49,781118275,"@@ -1,5 +1,5 @@ {:paths [""src"" ""resources""]- :deps {org.clojure/clojure {:mvn/version ""1.10.3""}+ :deps {org.clojure/clojure {:mvn/version ""1.11.0-alpha3""}"
https://api.github.com/repos/nextjournal/clerk/pulls/50,782017632,"@@ -17,9 +17,13 @@   (#?(:clj invoke :cljs -invoke) [this x y]     ((:fn this) x y))) - (defn fn+form? [x]-  (instance? Fn+Form x))+  (= (str Fn+Form)+     (str (type x))))++(defn form? [x]+  (= (str Form)+     (str (type x))))"
https://api.github.com/repos/nextjournal/clerk/pulls/53,784145490,"@@ -5,44 +5,36 @@             #?@(:clj [[clojure.repl :refer [demunge]]                       [nextjournal.clerk.config :as config]]                 :cljs [[reagent.ratom :as ratom]]))-  #?(:clj (:import [clojure.lang IFn]-                   [java.lang Throwable])))+  #?(:clj (:import [java.lang Throwable]))) -(defrecord Form [form])-(defrecord SCIEval [form])-(defrecord Fn+Form [form fn]-  IFn-  (#?(:clj invoke :cljs -invoke) [this x]-    ((:fn this) x))-  (#?(:clj invoke :cljs -invoke) [this x y]-    ((:fn this) x y)))+(defrecord ViewerEval [form])+(defrecord ViewerFn [form #?(:cljs f)]+  #?@(:cljs [IFn+             (-invoke [this x] ((:f this) x))+             (-invoke [this x y] ((:f this) x y))]))"
https://api.github.com/repos/nextjournal/clerk/pulls/57,786876837,"@@ -237,9 +238,18 @@               deps)       state-with-var-hash))) +(defn analyze-doc+  ([doc]+   (analyze-doc {:graph (dep/graph)} doc))+  ([state doc]+   (let [state-with-document (assoc state :doc doc)+         code-cells (into [] (filter (comp #{:code} :type)) (:doc doc))]"
https://api.github.com/repos/nextjournal/clerk/pulls/60,791594525,"@@ -101,6 +101,14 @@ In IntelliJ/Cursive, you can [set up REPL commands](https://cursive-ide.com/user * make sure the command is executed in the `nextjournal.clerk` namespace; * lastly assign a shortcut of your choice via `Settings→Keymap` +#### Neovim + Conjure++Using the `expand(%)` vim expression to get the current filepath, [neovim](https://neovim.io/) + [conjure](https://github.com/Olical/conjure/) users can map `:execute "":ConjureEval (clerk/show! \"""" . expand(""%"") . ""\"")""` to a keybinding:++```+nmap <silent> <localleader>cs :execute "":ConjureEval (clerk/show! \"""" . expand(""%"") . ""\"")""<CR>"
https://api.github.com/repos/nextjournal/clerk/pulls/97,816554126,"@@ -102,3 +107,8 @@ jobs:           state: 'success'           sha: ${{github.event.pull_request.head.sha || github.sha}}           target_url: https://snapshots.nextjournal.com/clerk/build/${{ github.sha }}++      - name: Run Playwright tests against static assets+        run: |+          bb test:static-app ${{ github.sha }}"
https://api.github.com/repos/nextjournal/clerk/pulls/107,820934798,"@@ -0,0 +1,69 @@+(ns hashing"
https://api.github.com/repos/nextjournal/clerk/pulls/113,827852134,"@@ -339,7 +339,7 @@   (when (seq watch-paths)     (println ""Starting new watcher for paths"" (pr-str watch-paths))     (reset! !watcher {:paths watch-paths-                      :watcher (apply beholder/watch #(file-event %) watch-paths)}))+                      :watcher (apply beholder/watch file-event watch-paths)}))"
https://api.github.com/repos/nextjournal/clerk/pulls/122,838711694,"@@ -25,7 +25,9 @@                               org.babashka/sci {:mvn/version ""0.3.2""}                               reagent/reagent {:mvn/version ""1.1.0""}                               io.github.babashka/sci-configs {:git/sha ""fd6a3332f358e56b96b5a791f75f97573e018580""}-                              io.github.nextjournal/viewers {:git/sha ""d88a9abd1f2bfd28ff2d3983407a9319c6f04501""}+                              io.github.nextjournal/viewers {:git/sha ""d88a9abd1f2bfd28ff2d3983407a9319c6f04501""+                                                             :exclusions [io.github.nextjournal/markdown+                                                                          io.github.nextjournal/clerk]}"
https://api.github.com/repos/nextjournal/clerk/pulls/124,841034148,"@@ -481,9 +481,8 @@                                       :title (if (or (string? k) (keyword? k)) (name k) (str k))}                                      [:div.inline-flex                                       ;; Truncate to available col width without growing the table-                                      [:div.table.table-fixed.w-full.flex-auto-                                       {:style {:margin-left -12}}"
https://api.github.com/repos/nextjournal/clerk/pulls/131,848119887,"@@ -180,7 +186,160 @@       (with-viewer :html         (into (mkup-fn node) (cond text [text] content (map with-md-viewer content))))))) -(declare !viewers)+;; block/result formatting fns+#?(:clj+   (do"
https://api.github.com/repos/nextjournal/clerk/pulls/129,858926283,"@@ -352,42 +350,38 @@     (set? xs) (sort resilient-compare xs)     :else xs)) -(declare with-viewer)- (defn find-named-viewer [viewers viewer-name]   (first (filter (comp #{viewer-name} :name) viewers))) -(declare wrapped-with-viewer)--(defn apply-viewer [viewers {:as viewer :keys [render-fn transform-fn]} v opts]-  (let [v' (if transform-fn-             (-> v value transform-fn)-             v)]-    (if (and transform-fn (not render-fn))-      (wrapped-with-viewer v' viewers)-      (cond-> (wrap-value v' viewer)-        (seq opts) (merge opts)))))--(defn extract-view-opts [x]-  (when (wrapped-value? x)-    (select-keys x [:nextjournal/width])))+(defn- lookup-viewer-for [x viewers]+  (let [v (value x)]+    (if-let [selected-viewer (viewer x)]+      (if (keyword? selected-viewer)+        (or (find-named-viewer viewers selected-viewer)+            (throw (ex-info (str ""cannot find viewer named "" selected-viewer)+                            {:selected-viewer selected-viewer :x v :viewers viewers})))+        selected-viewer)+      (loop [vs viewers]+        (if-let [{:as matching-viewer :keys [pred]} (first vs)]+          (if (and (ifn? pred) (pred v))+            matching-viewer+            (recur (rest vs)))+          (throw (ex-info (str ""cannot find matchting viewer for `"" (pr-str v) ""`"")+                          {:viewers viewers :x x :v v})))))))  (defn wrapped-with-viewer   ([x] (wrapped-with-viewer x default-viewers))   ([x viewers]-   (if-let [selected-viewer (viewer x)]-     (if (keyword? selected-viewer)-       (if-let [named-viewer (find-named-viewer viewers selected-viewer)]-         (apply-viewer viewers named-viewer (value x) (extract-view-opts x))-         (throw (ex-info (str ""cannot find viewer named "" selected-viewer) {:selected-viewer selected-viewer :x (value x) :viewers viewers})))-       (apply-viewer viewers selected-viewer (value x) (extract-view-opts x)))-     (let [v (value x)]-       (loop [vs viewers]-         (if-let [{:as matching-viewer :keys [pred]} (first vs)]-           (if (and (ifn? pred) (pred v))-             (apply-viewer viewers matching-viewer v (extract-view-opts x))-             (recur (rest vs)))-           (throw (ex-info (str ""cannot find matchting viewer for `"" (pr-str v) ""`"") {:viewers viewers :x x :v v}))))))))+   (let [{:as viewer :keys [render-fn transform-fn]} (lookup-viewer-for x viewers)+         opts (when (wrapped-value? x)+                (select-keys x [:nextjournal/width]))+         v (if transform-fn+             (-> (value x) value transform-fn)"
https://api.github.com/repos/nextjournal/clerk/pulls/137,858927544,"@@ -352,42 +363,52 @@     (set? xs) (sort resilient-compare xs)     :else xs)) -(declare with-viewer) -(defn find-named-viewer [viewers viewer-name]-  (first (filter (comp #{viewer-name} :name) viewers)))+(defn find-viewer [viewers pred]+  (first (filter pred viewers))) -(declare wrapped-with-viewer)+#_(find-viewer default-viewers (comp #{string?} :pred))+#_(find-viewer default-viewers (comp #{:elision} :name)) -(defn apply-viewer [viewers {:as viewer :keys [render-fn transform-fn]} v opts]-  (let [v' (if transform-fn-             (-> v value transform-fn)-             v)]-    (if (and transform-fn (not render-fn))-      (wrapped-with-viewer v' viewers)-      (cond-> (wrap-value v' viewer)-        (seq opts) (merge opts)))))+(defn find-named-viewer [viewers viewer-name]+  (find-viewer viewers (comp #{viewer-name} :name)))++#_(find-named-viewer default-viewers :elision)++(defn viewer-for [viewers x]+  (or (when-let [selected-viewer (viewer x)]+        (if (keyword? selected-viewer)+          (or (find-named-viewer viewers selected-viewer)+              (throw (ex-info (str ""cannot find viewer named "" selected-viewer)+                              {:viewer-name selected-viewer :x (value x) :viewers viewers})))+          selected-viewer))+      (let [v (value x)]+        (first (filter (fn [{:as viewer :keys [pred]}]+                         (when (and (ifn? pred) (pred v))+                           viewer))+                       viewers)))+      (throw (ex-info (str ""cannot find matching viewer for value"")+                      {:x x :value (value x) :viewers viewers}))))++#_(viewer-for default-viewers [1 2 3])+#_(viewer-for default-viewers 42)+#_(viewer-for default-viewers (with-viewer :html [:h1 ""Hello Hiccup""]))+#_(viewer-for default-viewers (with-viewer {:transform-fn identity} [:h1 ""Hello Hiccup""])) -(defn extract-view-opts [x]-  (when (wrapped-value? x)-    (select-keys x [:nextjournal/width])))  (defn wrapped-with-viewer   ([x] (wrapped-with-viewer x default-viewers))   ([x viewers]-   (if-let [selected-viewer (viewer x)]-     (if (keyword? selected-viewer)-       (if-let [named-viewer (find-named-viewer viewers selected-viewer)]-         (apply-viewer viewers named-viewer (value x) (extract-view-opts x))-         (throw (ex-info (str ""cannot find viewer named "" selected-viewer) {:selected-viewer selected-viewer :x (value x) :viewers viewers})))-       (apply-viewer viewers selected-viewer (value x) (extract-view-opts x)))-     (let [v (value x)]-       (loop [vs viewers]-         (if-let [{:as matching-viewer :keys [pred]} (first vs)]-           (if (and (ifn? pred) (pred v))-             (apply-viewer viewers matching-viewer v (extract-view-opts x))-             (recur (rest vs)))-           (throw (ex-info (str ""cannot find matchting viewer for `"" (pr-str v) ""`"") {:viewers viewers :x x :v v}))))))))+   (let [{:as viewer :keys [render-fn transform-fn update-viewers-fn]} (viewer-for viewers x)+         opts (when (wrapped-value? x)+                (select-keys x [:nextjournal/width]))+         v (if transform-fn+             (-> (value x) value transform-fn)"
https://api.github.com/repos/nextjournal/clerk/pulls/173,895753587,@@ -1 +1 @@-MZAFz7cCjz5iXe9gpb2mNybfmhh\ No newline at end of file+2QomkaERveEgZwKtSGc6f95nabbt
https://api.github.com/repos/nextjournal/clerk/pulls/175,896938757,"@@ -0,0 +1,14 @@+(require '[nextjournal.clerk :as clerk])++#_(clerk/clear-cache!)"
https://api.github.com/repos/nextjournal/clerk/pulls/181,901675997,"@@ -51,8 +51,10 @@ (defn lookup-url [lookup-hash]   (str gs-bucket ""/lookup/"" lookup-hash)) -(defn cas-link [hash]-  (str base-url ""/data/"" hash))+(defn asset-name [hash suffix]+  (str ""/data/"" hash"
https://api.github.com/repos/nextjournal/clerk/pulls/182,901918884,"@@ -514,7 +514,7 @@              trace)]]]]))  (defn tagged-value-  ([tag value] ({:space? true} tagged-value tag value))+  ([tag value] (tagged-value {:space? true} tag value))"
https://api.github.com/repos/nextjournal/clerk/pulls/183,902308744,"@@ -27,7 +27,8 @@                 :basis basis                 :scm {:url ""http://github.com/nextjournal/clerk""                       :connection ""scm:git:git://github.com/nextjournal/clerk.git""-                      :developerConnection ""scm:git:ssh://git@github.com/nextjournal/clerk.git""}+                      :developerConnection ""scm:git:ssh://git@github.com/nextjournal/clerk.git""+                      :tag (str ""v"" version)}"
https://api.github.com/repos/nextjournal/clerk/pulls/186,913739423,"@@ -1032,17 +1035,86 @@                        xs)))         process-wrapped-value))) +(defn assign-content-lengths [wrapped-value]+  (w/postwalk+    (fn [x]+      (if-let [value (and (wrapped-value? x) (:nextjournal/value x))]+        (let [{:nextjournal/keys [viewer]} x+              {:keys [name opening-paren closing-paren]} viewer+              elision-content-length 6]+          (assoc x :content-length+                   (cond+                     (or (nil? value) (char? value) (string? value) (keyword? value) (symbol? value) (number? value))+                     (count (pr-str value))+                     (contains? #{:elision} name)+                     elision-content-length+                     (contains? #{:map-entry} name)+                     (reduce + 1 (map #(:content-length % 0) value))+                     (vector? value)+                     (->> value+                       (map #(:content-length % 0))+                       (reduce + (+ (count opening-paren) (count closing-paren)))+                       (+ (dec (count value))))+                     :else 0)+                   :type name))+        x))+   wrapped-value))++(defn compute-expanded-at [{:as state :keys [indents expanded-at prev-type]}+                           {:nextjournal/keys [value]+                            :keys [content-length path type]+                            :or {content-length 0}}]+  (let [max-length (- 80 (reduce + 0 indents))+        expanded? (< max-length content-length)+        state' (assoc state :expanded-at (assoc expanded-at path expanded?)+                            #_(if expanded?+                              (assoc expanded-at path true)+                              expanded-at)+                            :prev-type type+                            :indents (conj+                                       (->> indents (take (count path)) vec)+                                       (cond+                                         (contains? #{:map-entry} prev-type) (or content-length 0)+                                         (vector? value) 2+                                         :else 1)))]+    (if (vector? value)+      (reduce compute-expanded-at state' value)+      state')))++(defn assign-expanded-at [wrapped-value]+  (cond-> wrapped-value+    (:content-length wrapped-value) (assoc :nextjournal/expanded-at+                                           (:expanded-at (compute-expanded-at {:indents [] :expanded-at {}} wrapped-value)))))++(comment+  (-> (compute-expanded-at+        {:indents [] :expanded-at {}}+        (present {:a-vector [1 2 3] :a-list '(123 234 345) :a-set #{1 2 3 4}}))+    :expanded-at+    keys+    sort)+  (= (count ""[1 2 [1 [2] 3] 4 5]"")+     (:content-length (assign-content-lengths (present [1 2 [1 [2] 3] 4 5]))))+  (= (count ""{:a-vector [1 2 3] :a-list (123 234 345) :a-set #{1 2 3 4}}"")+     (:content-length (assign-content-lengths (present {:a-vector [1 2 3] :a-list '(123 234 345) :a-set #{1 2 3 4}}))))+  ;; Check for elisions as well+  (assign-content-lengths (present {:foo (vec (repeat 2 {:baz (range 30) :fooze (range 40)})) :bar (range 20)})))+ (defn present   ""Returns a subset of a given `value`.""   ([x] (present x {}))-  ([x opts]+  ([x {:as opts :keys [auto-expand-results?]}]    (-> (ensure-wrapped-with-viewers x)        (merge {:!budget (atom (:budget opts 200))                :path (:path opts [])                :current-path (:current-path opts [])}               opts)        present*-       assign-closing-parens)))+       assign-closing-parens+       (cond->"
https://api.github.com/repos/nextjournal/clerk/pulls/195,936908039,"@@ -1139,7 +1136,20 @@ black"")}]))}     'doc-url doc-url    'url-for url-for-   'read-string read-string})+   'read-string read-string++   ;; clerk viewer API+   'code code+   'col col+   'html html-render"
https://api.github.com/repos/nextjournal/clerk/pulls/203,952849711,"@@ -1165,7 +715,3 @@ black"")}]))}   (sci/eval-form @!sci-ctx f))  (set! *eval* eval-form)--(swap! viewer/!viewers (fn [viewers]-                         (-> (into {} (map (juxt key (comp #(into [] (map viewer/process-render-fn) %)  val))) viewers)-                             (update :root concat js-viewers))))"
https://api.github.com/repos/nextjournal/clerk/pulls/205,956564042,"@@ -0,0 +1,347 @@+;; # 📓 Clerk Documentation+(ns docs+  {:nextjournal.clerk/toc true}+  (:require [clojure.string :as str]+            [next.jdbc :as jdbc]+            [nextjournal.clerk :as clerk]+            [nextjournal.clerk.parser :as parser]+            [nextjournal.clerk.eval :as eval]+            [nextjournal.clerk.analyzer :as ana]+            [nextjournal.clerk.viewer :as v]+            [weavejester.dependency :as dep]))++;; ## ⚖️ Rationale++;; ## 🚀 Getting Started++;; ### ⏱ File Watcher++;; ### 🔪 Editor Integration++;; For even better flow states, we recommend you bind clerk/show! to a shortcut in your favorite editor:"
https://api.github.com/repos/nextjournal/clerk/pulls/216,977912757,"@@ -139,18 +139,26 @@         _ (report-fn {:stage :init :state state})         {state :result duration :time-ms} (eval/time-ms (mapv (comp (partial parser/parse-file {:doc? true}) :file) state))         _ (report-fn {:stage :parsed :state state :duration duration})-        {state :result duration :time-ms} (eval/time-ms (mapv (comp analyzer/hash-                                                                    analyzer/build-graph) state))+        {state :result duration :time-ms} (eval/time-ms+                                           (try+                                             (mapv (fn [{:as doc :keys [file]}]+                                                     (try+                                                       (analyzer/hash (analyzer/build-graph doc))+                                                       (catch Exception e+                                                         (throw (ex-info (str ""cannot analyze notebook: "" file) {:file file} e))))) state)))         _ (report-fn {:stage :analyzed :state state :duration duration})         _ (when download-cache-fn             (report-fn {:stage :downloading-cache})             (let [{duration :time-ms} (eval/time-ms (download-cache-fn state))]               (report-fn {:stage :done :duration duration})))-        state (mapv (fn [doc]+        state (mapv (fn [{:as doc :keys [file]}]                       (report-fn {:stage :building :doc doc})                       (let [{doc+viewer :result duration :time-ms} (eval/time-ms-                                                                    (let [doc (eval/eval-analyzed-doc doc)]-                                                                      (assoc doc :viewer (view/doc->viewer (assoc opts :inline-results? true) doc))))]+                                                                    (try+                                                                      (let [doc (eval/eval-analyzed-doc doc)]+                                                                        (assoc doc :viewer (view/doc->viewer (assoc opts :inline-results? true) doc)))+                                                                      (catch Exception e+                                                                        (throw (ex-info (str ""cannot build notebook: "" file) {:file file} e)))))]"
https://api.github.com/repos/nextjournal/clerk/pulls/221,983651312,"@@ -243,14 +248,14 @@                                          (and doc? (not (contains? state :ns))) (merge (parser/->doc-settings form) {:ns *ns*}))]                              (when-let [missing-dep (and (:ns? state)                                                          (first (set/difference (into #{}-                                                                                      (filter #(and (symbol? %)-                                                                                                    (#{(-> state :ns ns-name name)} (namespace %))))+                                                                                      (comp (filter #(and (symbol? %)+                                                                                                     (#{(-> state :ns ns-name name)} (namespace %))))+                                                                                            (remove clojure-internal?))"
https://api.github.com/repos/nextjournal/clerk/pulls/232,998523263,"@@ -1275,7 +1285,7 @@   ([viewers] (reset-viewers! *ns* viewers))   ([scope viewers]    (assert (or (#{:default} scope)-               #?(:clj (instance? clojure.lang.Namespace scope))))"
https://api.github.com/repos/nextjournal/clerk/pulls/246,1007043230,"@@ -25,8 +25,10 @@                                             org.babashka/cli {:mvn/version ""0.5.40""}}                                :extra-paths [""notebooks""]                                :exec-fn nextjournal.clerk/build!-                               :exec-args {:paths-fn nextjournal.clerk.builder/clerk-docs}+                               :exec-args {:paths-fn nextjournal.clerk.builder/clerk-docs+                                           :compile-css? true}"
https://api.github.com/repos/nextjournal/clerk/pulls/259,1012106982,"@@ -318,18 +320,24 @@                                                        (.encodeToString (Base64/getEncoder) data))))))  #?(:clj-   (defn maybe-store-result-as-file [{:as _doc+blob-opts :keys [blob-id file out-path]} {:as result :nextjournal/keys [content-type value]}]+   ;; TODO: move away from viewer ns+   (defn store-in-cas! [{:keys [out-path ext]} content]+     (assert out-path) (assert ext)+     (let [cas-path (fs/path out-path ""_data"" (str (multihash/base58 (digest/sha2-512 content)) ""."" ext))]+       (fs/create-dirs (fs/parent cas-path))+       (when-not (fs/exists? cas-path)+         (Files/write cas-path content (into-array [StandardOpenOption/CREATE])))+       (str cas-path))))"
https://api.github.com/repos/nextjournal/clerk/pulls/261,1014628489,"@@ -0,0 +1,11 @@+{:paths [""src""]"
https://api.github.com/repos/nextjournal/clerk/pulls/270,1018231428,"@@ -199,13 +201,17 @@ ;; html (v/html [:h1 \""🧨\""]) ""-        (nextjournal.clerk.parser/parse-clojure-string {:doc? true})-        (v/with-viewer :clerk/notebook)-        (v/with-viewers (v/add-viewers [{:name :clerk/result-block-                                         :transform-fn (v/update-val (comp v/read-string :text))-                                         :render-fn '(fn [form]-                                                       (let [data (eval form)]-                                                         (try-                                                           (if (nextjournal.clerk.render/valid-react-element? data) data (v/html [v/inspect data]))-                                                           (catch js/Error e-                                                             (v/html [:div.red (.-message e)])))))}])))]))+     doc+     (nextjournal.clerk.parser/parse-clojure-string {:doc? true} doc)+     (update doc :blocks (partial map (fn [{:as b :keys [type text]}]+                                        (cond-> b+                                          (= :code type)+                                          (assoc :result+                                                 {:nextjournal/value+                                                  (let [val (eval (read-string text))]+                                                    ;; FIXME: this won't be necessary once we unify v/html in SCI env to be the same as in nextjournal.clerk.viewer+                                                    ;; v/html is currently html-render for supporting legacy render-fns"
https://api.github.com/repos/nextjournal/clerk/pulls/257,1018921260,"@@ -765,7 +768,13 @@         default-loading-view))))  (def render-mathjax mathjax/viewer)-(def render-code code/viewer)++(defn render-code [value]+  (let [ref (use-ref nil)]"
https://api.github.com/repos/nextjournal/clerk/pulls/291,1028214535,"@@ -1,6 +1,6 @@ {   ""dependencies"": {-    ""nbb"": ""^1.0.138"",+    ""nbb"": ""^1.1.147"","
https://api.github.com/repos/nextjournal/clerk/pulls/285,1030866602,"@@ -115,7 +117,9 @@  (def ^:export mount render/mount) -(sci.ctx-store/reset-ctx! (sci/init initial-sci-opts))+(sci.ctx-store/reset-ctx! (doto (sci/init initial-sci-opts)+                            (sci/add-class! 'codemirror.view codemirror-view)))"
https://api.github.com/repos/nextjournal/clerk/pulls/299,1034387068,"@@ -387,11 +387,15 @@      (str/join (repeat (get (frequencies (str path)) \/ 0) ""../""))))  #?(:clj-   (defn maybe-store-result-as-file [{:as doc+blob-opts :keys [out-path file]} {:as result :nextjournal/keys [content-type value]}]+   (defn map-index [{:as _opts :keys [index]} path]+     (get {index ""index.clj""} path path)))++#?(:clj+   (defn maybe-store-result-as-file [{:as doc+blob-opts :keys [index out-path file]} {:as result :nextjournal/keys [content-type value]}]      ;; TODO: support customization via viewer api      (if-let [image-type (second (re-matches #""image/(\w+)"" content-type))]        (assoc result :nextjournal/value-              (str (relative-root-prefix-from file)+              (str (relative-root-prefix-from (map-index doc+blob-opts file))"
https://api.github.com/repos/nextjournal/clerk/pulls/300,1034957577,"@@ -131,18 +131,15 @@   (->> (cond paths (if (sequential? paths)                      paths                      (throw (ex-info ""`:paths` must be sequential"" {:paths paths})))-             paths-fn (if (qualified-symbol? paths-fn)-                        (try-                          (if-let [resolved-var  (requiring-resolve paths-fn)]-                            (let [resolved-paths (cond-> @resolved-var+             paths-fn (if paths-fn+                        (do (when-not (qualified-symbol? paths-fn)+                              (throw (ex-info ""`:path-fn` must be a qualified symbol pointing at an existing var."" {:paths-fn paths-fn})))+                            (let [resolved-var (resolve-var paths-fn)"
https://api.github.com/repos/nextjournal/clerk/pulls/302,1035893692,"@@ -132,16 +132,20 @@   (->> (cond paths (if (sequential? paths)                      paths                      (throw (ex-info ""`:paths` must be sequential"" {:paths paths})))-             paths-fn (if (qualified-symbol? paths-fn)-                        (try-                          (if-let [resolved-var  (requiring-resolve paths-fn)]-                            (let [resolved-paths (cond-> @resolved-var-                                                   (fn? @resolved-var) (apply []))]-                              (when-not (sequential? resolved-paths)-                                (throw (ex-info (str ""#'"" paths-fn "" must be sequential."") {:paths-fn paths-fn :resolved-paths resolved-paths})))-                              resolved-paths)-                            (throw (ex-info (str ""#'"" paths-fn "" cannot be resolved."") {:paths-fn paths-fn}))))-                        (throw (ex-info ""`:path-fn` must be a qualified symbol pointing at an existing var."" {:paths-fn paths-fn}))))+             paths-fn (let [ex-msg ""`:path-fn` must be a qualified symbol pointing at an existing var.""]+                        (when-not (qualified-symbol? paths-fn)+                          (throw (ex-info ex-msg {:paths-fn paths-fn})))+                        (let [resolved-var  (try (requiring-resolve paths-fn)"
https://api.github.com/repos/nextjournal/clerk/pulls/324,1049472810,"@@ -227,7 +227,6 @@ (str my-uuid) my-uuid""                    analyze-string-                   ana/analyze-doc"
https://api.github.com/repos/nextjournal/clerk/pulls/357,1052520367,"@@ -0,0 +1,8 @@+(ns nextjournal.clerk.sci-env)++(defmacro sci-copy-nss [& nss]+  (into {} (for [[_ ns] nss]+             [(list 'quote ns) `(sci.core/copy-ns ~ns (sci.core/create-ns '~ns))])))"
https://api.github.com/repos/nextjournal/clerk/pulls/379,1060021575,"@@ -74,10 +71,8 @@     (into      [:div]      (map-indexed-      (fn [i {:keys [path title expanded? loading? items toc]}]-        (let [label (or title (str/capitalize (last (str/split path #""/""))))-              emoji (when (zero? (.search label emoji-re))-                      (first (.match label emoji-re)))]+      (fn [i {:keys [emoji path title expanded? loading? items toc]}]+        (let [label (or title (str/capitalize (last (str/split path #""/""))))]"
https://api.github.com/repos/nextjournal/clerk/pulls/381,1071049702,"@@ -419,15 +461,54 @@   Recursively decends into dependency vars as well as given they can be found in the classpath.   ""   [doc]-  (let [{:as graph :keys [->analysis-info]} (analyze-doc doc)]-    (reduce (fn [g [source symbols]]-              (if (or (nil? source)-                      (str/ends-with? source "".jar""))-                (update g :->analysis-info merge (into {} (map (juxt identity (constantly (if source (hash-jar source) {})))) symbols))-                (analyze-file g source)))-            graph-            (group-by find-location (unhashed-deps ->analysis-info)))))-+  (loop [{:as state :keys [->analysis-info analyzed-file-set counter]}++         (-> (cond-> doc+               (not (:graph doc)) analyze-doc)+             (assoc :analyzed-file-set (cond-> #{} (:file doc) (conj (:file doc))))+             (assoc :counter 0))]+    (let [unhashed (unhashed-deps ->analysis-info)+          loc->syms (apply dissoc+                           (group-by find-location unhashed)+                           analyzed-file-set)]+      (prn :build-graph counter :analyzed-file-set analyzed-file-set)"
https://api.github.com/repos/nextjournal/clerk/pulls/394,1086681944,"@@ -148,7 +148,10 @@           (assoc :nextjournal/interned @!interned-vars))))     (catch Throwable t       (let [triaged (main/ex-triage (Throwable->map t))]-        (throw (ex-info (main/ex-str triaged) triaged))))))+        (throw (ex-info (main/ex-str triaged)+                        (assoc triaged+                               :clerk/form form+                               :clerk/file file)))))))"
https://api.github.com/repos/nextjournal/clerk/pulls/398,1093157538,"@@ -1386,9 +1386,9 @@       (reduce compute-expanded-at state' value)       state'))) -(defn collect-expandable-paths [state {:nextjournal/keys [value] :keys [path]}]+(defn collect-expandable-paths [state {:nextjournal/keys [value presented?] :keys [path]}]   (let [state' (assoc-in state [:expanded-at path] false)]-    (if (vector? value)+    (if (and (vector? value) (not presented?))"
https://api.github.com/repos/nextjournal/clerk/pulls/399,1094669296,"@@ -968,13 +968,27 @@                (map (juxt #(list 'quote (symbol %)) #(->> % deref deref (list 'quote))))                (extract-sync-atom-vars doc))))) +(defn ^:private safely+  [func error-message args->error-data & args]+  (try (apply func args)+    (catch #?(:clj Exception :cljs js/Error) e+      (throw #?(:clj (ex-info error-message+                              (apply args->error-data args)+                              e)+                :cljs e)))))"
https://api.github.com/repos/nextjournal/clerk/pulls/407,1097048679,"@@ -346,7 +346,7 @@   Does nothing outside of Clerk, like `clojure.core/comment`.""   [& body]   (when nextjournal.clerk.config/*in-clerk*-    `(clerk/with-viewer v/examples-viewer+    `(nextjournal.clerk/with-viewer v/examples-viewer"
https://api.github.com/repos/nextjournal/clerk/pulls/416,1104614591,"@@ -192,14 +192,7 @@     ""@lezer/highlight"" ""^1.1.3""     ""@lezer/lr"" ""^1.3.0"" -""@lezer/lr@^1.0.0"":-  version ""1.2.0""-  resolved ""https://registry.yarnpkg.com/@lezer/lr/-/lr-1.2.0.tgz#59aecafdbc15be63f918cf777f470dd17562f051""-  integrity sha512-TgEpfm9br2SX8JwtwKT8HsQZKuFkLRg6g+IRxObk9nVKQLKnkP3oMh+QGcTBL9GQsfQ2ADtKPbj2iGSMf3ytiA==-  dependencies:-    ""@lezer/common"" ""^1.0.0""--""@lezer/lr@^1.3.0"":+""@lezer/lr@^1.0.0"", ""@lezer/lr@^1.3.0"":"
https://api.github.com/repos/nextjournal/clerk/pulls/419,1106106904,"@@ -516,7 +517,9 @@  (defn with-block-viewer [doc {:as cell :keys [type]}]   (case type-    :markdown [(with-viewer `markdown-viewer (process-sidenotes doc (:doc cell)))]+    :markdown [(with-viewer `markdown-viewer+                 {:nextjournal.clerk/opts (select-keys doc [:index :file :bundle? :out-path])}"
https://api.github.com/repos/nextjournal/clerk/pulls/431,1131178107,"@@ -575,8 +575,8 @@                                      {:nextjournal/opts {:id (processed-block-id (str id ""-"" i ""-result""))}}                                      (-> cell (assoc ::doc doc) (assoc :result x)))))                     (or (when-some [fgm (-> cell :result :nextjournal/value (get-safe :nextjournal.clerk/fragment))]-                          (map #(hash-map :nextjournal/value %-                                          :nextjournal/blob-id (-> cell :result :nextjournal/blob-id)) fgm))+                          (map-indexed #(hash-map :nextjournal/value %2+                                                  :nextjournal/blob-id (str (-> cell :result :nextjournal/blob-id) %1)) fgm))"
https://api.github.com/repos/nextjournal/clerk/pulls/446,1162538187,"@@ -1601,22 +1612,36 @@   ([viewer-opts x] (print-hide-result-deprecation-warning) (with-viewer hide-result-viewer viewer-opts x)))  -(defn eval-cljs [& forms]+(defn eval-cljs [opts & forms]   ;; because ViewerEval's are evaluated at read time we can no longer   ;; check after read if there was any in the doc. Thus we set the   ;; `:nextjournal.clerk/remount` attribute to a hash of the code (so   ;; it changes when the code changes and shows up in the doc patch.   ;; TODO: simplify, maybe by applying Clerk's analysis to the cljs   ;; part as well-  (with-viewer (assoc viewer-eval-viewer :nextjournal.clerk/remount (hash-sha1 forms))-    (->viewer-eval-     `(binding [*ns* *ns*]-        ~@forms))))--(defn eval-cljs-str [code-string]-  ;; NOTE: this relies on implementation details on how SCI code is evaluated-  ;; and will change in a future version of Clerk-  (eval-cljs (list 'load-string code-string)))+  (let [[opts forms] (if (map? opts)+                       [opts forms]+                       [nil (cons opts forms)])]+    (with-viewer (assoc viewer-eval-viewer :nextjournal.clerk/remount (hash-sha1 forms))+      (if (= :cherry (:evaluator opts))+        (assoc (->viewer-eval+                `(do ~@forms))+               :evaluator (:evaluator opts))"
https://api.github.com/repos/nextjournal/clerk/pulls/437,1165916449,"@@ -148,6 +151,19 @@     (apply swap! nextjournal.clerk.atom/my-state (eval '[update :counter inc]))     (eval '(nextjournal.clerk/recompute!))) +(declare present+reset! set-status!)++(defn eval-file [file]+  (main/with-bindings+    (-> (parser/parse-file {:doc? true} file)+        (assoc :set-status-fn set-status!)+        eval/eval-doc)))"
https://api.github.com/repos/nextjournal/clerk/pulls/470,1184077725,"@@ -48,7 +48,13 @@ (defn visibility-marker? [form]   (and (map? form) (contains? form :nextjournal.clerk/visibility))) +(def doc-settings+  ""Settings allowed in the namespace's metadata map.""+  #{:nextjournal.clerk/doc-css-class})+ (def block-settings+  ""Settings allowed in form metadata or in viewer opttions. When specified in the namespace's meta map,"
https://api.github.com/repos/nextjournal/clerk/pulls/484,1194143091,"@@ -85,7 +85,9 @@ #_(rewrite-defcached '(nextjournal.clerk/defcached foo :bar))  (defn deflike? [form]-  (and (seq? form) (symbol? (first form)) (str/starts-with? (name (first form)) ""def"")))+  (and (seq? form)+       (symbol? (first form))+       (contains? #{'def 'defonce 'defn} (first form))))"
https://api.github.com/repos/nextjournal/clerk/pulls/486,1195348919,"@@ -64,15 +64,21 @@                                          (not (str/ends-with?                                                (.-url (.location msg)) ""favicon.ico"")))                                 (swap! console-errors conj {:msg msg :notebook (.url page)}))))+                     _ (.on page ""pageerror"""
https://api.github.com/repos/nextjournal/clerk/pulls/494,1200292696,"@@ -2,11 +2,14 @@   (:require [clj-kondo.hooks-api :as api]             [clojure.string :as str])) -(defn ->viewer-fn [{:keys [node]}]-  (let [[name-node quoted-node] (:children node)+(defn ->viewer-fn [{:keys [node lang] :as opts}]+  (let [[_name-node quoted-node] (:children node)         quoted-tag (api/tag quoted-node)]     (when (= :quote quoted-tag)-      (let [quoted-node {:tag :syntax-quote-                         :children (:children quoted-node)}-            fn-node (first (:children quoted-node))]-        {:node fn-node}))))+      (let [quoted-node+            (with-meta+              {:tag :syntax-quote+               :children (:children quoted-node)}+              (assoc (meta node)+                     :clj-kondo/ignore [:unresolved-var]))]"
https://api.github.com/repos/nextjournal/clerk/pulls/491,1202731303,"@@ -544,12 +549,21 @@ #_(dep/immediate-dependencies (:graph (build-graph ""src/nextjournal/clerk/analyzer.clj""))  #'nextjournal.clerk.analyzer/long-thing) #_(dep/transitive-dependencies (:graph (build-graph ""src/nextjournal/clerk/analyzer.clj""))  #'nextjournal.clerk.analyzer/long-thing) +(defn strip-form-meta [form]+  (clojure.walk/postwalk+   (fn [v]+     (if (or (instance? clojure.lang.IObj v)+             (instance? clojure.lang.IMeta v))"
https://api.github.com/repos/nextjournal/clerk/pulls/502,1212384302,"@@ -868,6 +868,17 @@ (def mathjax-viewer   {:name `mathjax-viewer :render-fn 'nextjournal.clerk.render/render-mathjax :transform-fn mark-presented}) +(def meta-viewer"
https://api.github.com/repos/nextjournal/clerk/pulls/510,1223378784,"@@ -749,6 +749,44 @@ v/table-viewer     Moving --> Crash     Crash --> [*]"") +;; #### 🧙 Evaluator++;; By default, [SCI](https://github.com/babashka/sci) is used for evaluating `:render-fn` functions in the browser.++;; What follows is an inefficient but fun way to compute the nth fibacci number"
https://api.github.com/repos/nextjournal/clerk/pulls/530,1272276411,"@@ -314,14 +314,16 @@               (str path))             (pr-str viewer)))     (let [{:as ret :keys [out err exit]}-          (sh ""tailwindcss""-              ""--input""  tw-input-              ""--config"" tw-config-              ;; FIXME: pass inline-              ;;""--content"" (str tw-viewer)-              ;;""--content"" (str tw-folder ""/**/*.edn"")-              ""--output"" tw-output-              ""--minify"")]+          (try (sh ""tailwindcss""+                   ""--input""  tw-input+                   ""--config"" tw-config+                   ;; FIXME: pass inline+                   ;;""--content"" (str tw-viewer)+                   ;;""--content"" (str tw-folder ""/**/*.edn"")+                   ""--output"" tw-output+                   ""--minify"")+               (catch java.io.IOException _+                 (throw (Exception. ""Clerk could not find the `tailwindcss` executable. Please install it using `npm install -D tailwindcss` and try again.""))))]"
https://api.github.com/repos/nextjournal/clerk/pulls/561,1356931822,"@@ -223,13 +240,25 @@ (defn show! [opts file-or-ns]   ((resolve 'nextjournal.clerk/show!) opts file-or-ns)) +(defn route-index+  ""A routing function""+  [{:as opts :keys [index expanded-paths]} nav-path]+  (if (str/blank? nav-path)+    (or index+        (get (set expanded-paths) (maybe-add-extension ""index""))+        ""'nextjournal.clerk.index"")+    nav-path))+ (defn navigate! [{:as opts :keys [nav-path]}]+  ;; TODO: perform `route-index` when needed, needs `:expanded-paths` for `v/route-index?`   (show! opts (->file-or-ns (maybe-add-extension nav-path))))  (defn prefetch-request? [req] (= ""prefetch"" (-> req :headers (get ""purpose""))))  (defn serve-notebook [{:as req :keys [uri]}]-  (let [nav-path (subs uri 1)]+  (let [opts (process-paths @!server)"
https://api.github.com/repos/nextjournal/clerk/pulls/578,1406035212,"@@ -147,9 +147,14 @@   (update doc :blocks (partial map (fn [{:as cell :keys [type text var form]}]                                      (cond-> cell                                        (= :code type)-                                       (assoc :result                                                -                                              {:nextjournal/value (cond->> (eval form)-                                                                    var (hash-map :nextjournal.clerk/var-from-def))}))))))+                                       (assoc :result {:nextjournal/value (cond->>+                                                                              (sci/eval-string* (sci.ctx-store/get-ctx) text)"
https://api.github.com/repos/nextjournal/clerk/pulls/575,1425646727,"@@ -0,0 +1,78 @@+;; # 🪬 Viewer Context++(ns viewers.context+  ""Or how viewer API functions learn to take advantage of the document context""+  {:nextjournal.clerk/visibility {:code :hide}}+  (:require [nextjournal.clerk :as clerk]+            [nextjournal.clerk.viewer :as viewer]))++{::clerk/visibility {:code :show}}+;; A viewer's `:pred` function can perform viewer selection based on a value.++;; It would sometimes be useful to have more context available. Examples of this are:+;;+;; * Selecting a viewer based on the originating form+;; * Selecting a different viewer based on additional context like `:path`+;; * Bring Clerk's handling of out-of-band metadata like `::clerk/visibility` and `::clerk/width` into userspace++;; To make this a backwards-compatible change, we can opt into these+;; richer predicate functions using a map with a key:++(def cljc-viewer+  {:pred {:wrapped (fn [{:keys [form]}]+                     (contains? (meta form) :cljc))}+   :transform-fn (fn [{:keys [form]}]+                   (clerk/eval-cljs form))})++;; We should probably use a namespaced keyword to disambiguate it.++;; Also considered letting the pred function opt in using+;; metadata. Rejected this because it's invisible and doesn't work for+;; e.g. keywords.++;; Now what can we use this for? We can now, for example, create a+;; viewer in userspace that evalautes a given form in Clojure and sci,+;; allowing us to use it on both sides.++^:cljc+(defn my-greet-fn [x]+  (str ""Greetings from "" x))++(my-greet-fn ""Clojure"")++(clerk/eval-cljs '(my-greet-fn ""ClojureScript""))++;; Or build a viewer which will display the namespace's name and docs:++(def ns-viewer+  {:pred {:wrapped :ns?}+   :transform-fn (fn [{:as wv :keys [form]}]+                   (let [doc-ns (find-ns (second form))]+                     (clerk/html [:blockquote.bg-sky-50.rounded.py-1+                                  (clerk/md (str ""## "" (ns-name doc-ns) ""\n"" (:doc (meta doc-ns))))])))})++;; In addition, by customizing the cell viewer we might override visibility defaults+(def cell-viewer+  (update viewer/cell-viewer+          :transform-fn comp+          (clerk/update-val (fn [cell]+                              (update-in cell [:settings ::clerk/visibility :result]+                                         #(if (or (:ns? cell)+                                                  (-> cell :result :nextjournal/value (as-> n (when (number? n) (even? n)))))+                                            :show+                                            %))))))+"
https://api.github.com/repos/nextjournal/clerk/pulls/592,1430613367,"@@ -745,25 +744,48 @@ (defn handle-initial-load [^js _e]   (history-push-state {:path (subs js/location.pathname 1) :replace? true})) -(defn click->xhr-request [e]-  (when-some [url (some-> e .-target closest-anchor-parent .-href ->URL)]+(defn fetch+set-state [edn-path]+  (js/console.log ""fetch"" edn-path)+  (.. ^js (js/fetch edn-path)+      (then (fn [r]+               (if (.-ok r)+                 (.text r)+                 (throw (ex-info ""Not Found"" {:response r})))))+      (then (fn [edn] (set-state! {:doc (read-string edn)}) {:ok true}))+      (catch (fn [e] (js/console.error ""Fetch failed"" e) {:ok false :error e}))))++(defn click->fetch [e]+  (when-some [url (some-> ^js e .-target closest-anchor-parent .-href ->URL)]     (when-not (ignore-anchor-click? e url)       (.preventDefault e)       (let [path (.-pathname url)             edn-path (str path (when (str/ends-with? path ""/"") ""index"") "".edn"")]-        (js/console.log ""fetch EDN"" edn-path )-        (-> (js/fetch edn-path)-            (.then (fn [r]-                     (if (.-ok r)-                       (.text r)-                       (throw (ex-info ""Not Found"" {:response r})))))-            (.then (fn [edn]-                     (set-state! {:doc (read-string edn)})-                     (.pushState js/history #js {} """"-                                 (cond-> path-                                   (not (str/ends-with? path ""/""))-                                   (str ""/""))))) ;; trailing slash is needed to make relative paths work-            (.catch (fn [e] (js/console.error ""Fetch failed"" e ))))))))+        (.. (fetch+set-state edn-path)+            (then (fn [{:keys [ok]}]"
https://api.github.com/repos/nextjournal/clerk/pulls/598,1440263077,"@@ -629,19 +620,28 @@     {:nextjournal/render-opts (-> cell (select-keys [:loc]) (assoc :id (processed-block-id (str id ""-code""))))}     (dissoc cell ::doc :result))) +(defn fragment-tree-seq [{:as cell :keys [result]}]+  (if-some [fgmt (-> result (get-safe :nextjournal/value) (get-safe :nextjournal.clerk/fragment))]+    (mapcat (fn [r]+              (fragment-tree-seq+               (-> cell+                   (assoc ::fragment-item? true)"
https://api.github.com/repos/nextjournal/clerk/pulls/602,1442914611,"@@ -21,10 +21,10 @@             [shadow.esm]))  (defn eval-string-  ([source] (sci/eval-string* (sci.ctx-store/get-ctx) source))+  ([source] (eval-string (sci.ctx-store/get-ctx) source))   ([ctx source]    (when-some [code (not-empty (str/trim source))]-     (try {:result (sci/eval-string* ctx code)}+     (try (sci/eval-string* ctx code)"
https://api.github.com/repos/nextjournal/clerk/pulls/608,1446449802,"@@ -246,7 +246,7 @@   (if var var id))  (defn ->ana-keys [{:as analyzed :keys [form vars id]}]-  (if (seq vars) vars [(->key analyzed)]))+  (conj (set vars) (->key analyzed))) "
https://api.github.com/repos/nextjournal/clerk/pulls/620,1459125532,"@@ -293,11 +293,7 @@                                                                             paths/*build-opts* opts                                                                             viewer/doc-url (partial doc-url opts file)]                                                                     (let [doc (eval/eval-analyzed-doc doc)]-                                                                      (assoc doc :viewer (view/doc->viewer (assoc opts-                                                                                                                  :nav-path (if (instance? java.net.URL file)-                                                                                                                              (str ""'"" (:ns doc))-                                                                                                                              (str file)))-                                                                                                           doc))))+                                                                      (assoc doc :viewer (view/doc->viewer (assoc opts :file-path (str file)) doc))))"
https://api.github.com/repos/noprompt/frak/pulls/15,119182660,"@@ -91,7 +96,9 @@        (str         (re-group-start *capture*)         (string/join strs)-        (re-group-end optional?)))))+        (re-group-end optional?)+        (if *whole-words*"
https://api.github.com/repos/noprompt/garden/pulls/65,19196804,"@@ -406,27 +418,46 @@                 (render-value val))]       (util/as-str prop colon val semicolon)))) +(defn- add-blocks+  ""For each block in `declaration`, add sequence of blocks+   returned from calling `f` on the block.""+  [f declaration]+  (mapcat #(cons % (f %)) declaration))++(defn- prefixed-blocks+  ""Sequence of blocks with their properties prefixed by+   each vendor in `vendors`.""+  [vendors [p v]]+  (for [vendor vendors]+    [(util/vendor-prefix vendor (name p)) v]))++(defn- prefix-all-properties+  ""Add prefixes to all blocks in `declaration` using+   vendor prefixes in `vendors`.""+  [vendors declaration]+  (add-blocks (partial prefixed-blocks vendors) declaration))++(defn- prefix-auto-properties+  ""Add prefixes to all blocks in `declaration` when property+   is in the `:auto-prefix` set.""+  [vendors declaration]+  (add-blocks+   (fn [block]+     (let [[p _] block]+       (when (auto-prefix? (name p))+         (prefixed-blocks vendors block))))+   declaration))+ (defn- prefix-declaration-  ""If `(:vendors *flags*)` is bound and `declaration` has the meta -  `{:prefix true}` automatically create vendor prefixed properties.""+  ""Prefix properties within a `declaration` if `{:prefix true}` is+   set in its meta, or if a property is in the `:auto-prefix` set.""   [declaration]-  (if-not (:prefix (meta declaration))-    declaration-    (let [ps (keys declaration)-          vs (vals declaration)-          vendors (or (:vendors (meta declaration))-                      (vendors))]-     (mapcat -      (fn [p v]-        (cons [p v]-              (map-               (fn [vendor p1 v1]-                 (vector (util/vendor-prefix vendor (name p1)) v1))-               vendors-               (repeat p)-               (repeat v))))-      ps-      vs))))+  (let [vendors (or (:vendors (meta declaration)) (vendors))+        prefix-all? (:prefix (meta declaration))]+    ((if prefix-all?"
https://api.github.com/repos/noprompt/garden/pulls/69,21166763,"@@ -182,3 +182,26 @@                     (lazy-seq (step (increment v-seqs)))))))]     (when (every? seq seqs)       (lazy-seq (step v-original-seqs)))))++(defn font-family*+  ""Helper function for `font-family`. Returns the name string of given+  font. Wraps inside quotes if `font` is already a string.""+  [font]+  (cond+   (string? font)+   (wrap-quotes font)++   (or (keyword? font) (symbol? font))+   (name font)))"
https://api.github.com/repos/noprompt/garden/pulls/74,30008997,"@@ -406,15 +407,23 @@     (util/to-str (get-in x [:value :identifier]))     (render-css x))) +(defn- prefixed-values+  ""Sequence of values prefixed by each vendor in `vendors`.""+  [val]+  (if-not (:prefix (meta val))+    val+    (let [vendors (or (:vendors (meta val)) (vendors))]+      (reduce (fn [val v] (set/union val (map #(util/vendor-prefix % v) vendors))) val val))))"
https://api.github.com/repos/noprompt/garden/pulls/81,36572879,"@@ -83,11 +86,11 @@ ;; --------------------------------------------------------------------- ;; Predicates -#+cljs-(defn record?-  ""True if x is an instance of or satisfies clojure.lang.IRecord.""-  [x]-  (satisfies? IRecord x))+#?(:cljs+   (defn record?"
https://api.github.com/repos/noprompt/garden/pulls/98,46069879,"@@ -148,11 +151,11 @@               r (* 60 (/ (- g b) d))               g (+ (* 60 (/ (- b r) d)) 120)               b (+ (* 60 (/ (- r g) d)) 240))-          l (/ (+ mx mn) 2)-          s (cond+          l (trim-one (/ (+ mx mn) 2))+          s (trim-one (cond"
https://api.github.com/repos/noprompt/garden/pulls/101,49265749,"@@ -1,5 +1,10 @@ # Garden +WARNING: Use of undeclared Var cljs.core/time at line 802 out/garden/selectors.cljc"
https://api.github.com/repos/noprompt/garden/pulls/149,149170986,"@@ -556,18 +556,21 @@     (throw (ex-info-color-name n))))  (defn- scale-color-value-  [value amount]-  (+ value (if (pos? amount)-             (* (- 100 value) (/ amount 100))-             (/ (* value amount) 100))))+  ([value amt]"
https://api.github.com/repos/noprompt/garden/pulls/150,149208810,"@@ -205,6 +211,9 @@ (def percent-clip   (partial util/clip 0 100)) +(def zero-to-one-clip"
https://api.github.com/repos/noprompt/garden/pulls/162,175246961,"@@ -225,27 +225,29 @@ (defn make-unit-multiplier   ""Create a multiplication function for multiplying Units.""   [unit]-  (let [u (make-unit-fn unit)]+  (let [u  (make-unit-fn unit)+      op (get {:% (fn [x y] (* 100 (* (/ x 100) (/ y 100))))} unit *)]"
https://api.github.com/repos/noprompt/garden/pulls/166,214108881,"@@ -60,6 +60,10 @@   (at-rule :media {:media-queries media-queries                    :rules rules})) +(defn at-supports [feature-queries & rules]"
https://api.github.com/repos/noprompt/garden/pulls/203,1162975482,"@@ -140,6 +146,15 @@                 (string/replace "" "" ""0"")))]     (apply str ""#"" (map hex-part [r g b])))) +(defn rgba->hex+  ""Convert an RGB color map to a hexadecimal color.""+  [{r :red g :green b :blue a :alpha}]+  (letfn [(hex-part [v]+            (-> (util/format ""%2s"" (util/int->string v 16))+                (string/replace "" "" ""0"")))]+    (str (apply str ""#"" (map hex-part [r g b]) )+         (hex-part (int (* 256 a))))))"
https://api.github.com/repos/nubank/matcher-combinators/pulls/4,158863926,"@@ -264,3 +264,22 @@     => [:mismatch (model/->Mismatch matchers [5])]     (#'core/match-any-order matchers [5] true)     => [:mismatch (model/->Mismatch matchers [5])]))++(future-fact ""reproducing select? bug"""
https://api.github.com/repos/nubank/matcher-combinators/pulls/5,159001976,"@@ -16,7 +16,7 @@         true         (checking/as-data-laden-falsehood {:notes [(printer/as-string result)]}))))) -(defmacro match [matcher-form]+(defmacro ^{:midje/checker true} match [matcher-form]   `(checkers.defining/as-checker"
https://api.github.com/repos/nubank/matcher-combinators/pulls/14,166261738,"@@ -119,6 +117,10 @@       (match (equals-seq [(equals-value 1) (equals-value 2)]) [1 2 3])       => [:mismatch [1 2 (model/->Unexpected 3)]]) +    (fact ""Mismatch plays well with nil""+      (match (equals-seq [(equals-value 1) (equals-value 2) (equals-value 3)]) [1 2 nil])+      => [:mismatch [1 2 (model/->Mismatch 3 nil)]])"
https://api.github.com/repos/nubank/matcher-combinators/pulls/10,166976649,"@@ -0,0 +1,70 @@+false(ns matcher-combinators.matchers-test+  (:require [midje.sweet :as midje :refer [fact facts => falsey contains just anything future-fact has]]+            [matcher-combinators.midje :refer [match]]+            [matcher-combinators.helpers :as helpers]+            [matcher-combinators.matchers :as m]+            [matcher-combinators.model :as model]+            [matcher-combinators.core :as c])+  (:import [matcher_combinators.model Mismatch Missing]))++(def now (java.time.LocalDateTime/now))+(def an-id-string ""67b22046-7e9f-46b2-a3b9-e68618242864"")+(def an-id (java.util.UUID/fromString an-id-string))+(def another-id (java.util.UUID/fromString ""8f488446-374e-4975-9670-35ca0a633da1""))+(def response-time (java.time.LocalDateTime/now))++(def nested-map+ {:id {:type :user-id+       :value an-id-string}+ :input {:id {:type :user-id+              :value an-id-string}+         :timestamp now+         :trigger ""blabla""}+ :model ""sampa_v3""+ :output {:sampa-score 123.4M+          :user-id another-id+          :w-alpha -0.123}+ :response-time response-time+ :version ""1.33.7""})++(def a-nested-map nested-map)+(def b-nested-map (assoc-in nested-map [:model] ""curitiba""))++(defn mismatch? [actual]+  (instance? Mismatch actual))+(defn missing? [actual]+  (instance? Missing actual))++(fact ""in-any-order finds minimal diff""+  (c/match (m/in-any-order [a-nested-map b-nested-map])+           [a-nested-map a-nested-map])+  => (just [:mismatch (just [a-nested-map (contains {:id map? :model mismatch?})]+                            :in-any-order)]))++(defn one-mismatch? [mismatch-list]+  (= 1 (count (filter #(or (mismatch? %) (missing? %)) mismatch-list))))++(fact ""Ensure that in-any-order always prints the match with the fewest+       mismatching submatchers""+  (map #(->> %+             (c/match (m/in-any-order [1 2 3 4]))+             second)+       (helpers/permutations [1 2 3 500]))+  => (has every? one-mismatch?))++(facts ""show how input ordering affects diff size (when it ideally shouldn't)""+  (fact ""Given a particular input ordering, in-any-order shows the smallest diff""+    (->> [{:a 2} {:b 2}]+         (c/match (m/in-any-order [{:a 1} {:a 1 :b 2}]))+         second+         (map vals))+    => (has every? one-mismatch?))++  (future-fact ""in-any-order minimization doesn't find the match ordering that"
https://api.github.com/repos/nubank/matcher-combinators/pulls/20,168959387,"@@ -1,31 +1,39 @@ (ns matcher-combinators.matchers   (:require [matcher-combinators.core :as core])) -(defn equals-value+(defn equals   ""Matcher that will match when the given value is exactly the same as the   `expected`.""   [expected]-  (core/->Value expected))+  (cond+    (sequential? expected) (core/->EqualsSeq expected)+    (set? expected)        (core/->EqualsSet expected false)+    (map? expected)        (core/->EqualsMap expected)+    :else                  (core/->Value expected)))++(defn equals-set+  ""Matches a set in the way `(equals some-set)` would, but accepts sequences as+  the expected matcher argument, allowing one to use matchers with the same+  submatcher appearing more than once.""+  [expected]+  (core/->EqualsSet expected true)) -(defn contains-map+(defn embeds"
https://api.github.com/repos/nubank/matcher-combinators/pulls/29,181017488,"@@ -25,6 +25,29 @@       (checking/as-data-laden-falsehood         {:notes [(str ""Input wasn't a matcher: "" matcher)]})))) +(defn var->qualified-ref [datatype]+  (symbol (str+            (-> parser/type-map datatype meta :ns ns-name)+            ""/""+            (-> parser/type-map datatype meta :name))))++(defmacro match-with [type->matcher expected-matcher]+  (let [dispatch-vars+matcher-targets (mapcat+                                        (fn [[k v]] [(var->qualified-ref k) v])+                                        type->matcher)]+    `(checkers.defining/checker [actual#]+       (with-redefs [~@dispatch-vars+matcher-targets]+          (if (core/matcher? ~expected-matcher)+            (check-match ~expected-matcher actual#)+            (checking/as-data-laden-falsehood+              {:notes [(str ""Input wasn't a matcher: "" ~expected-matcher)]}))))))++(checkers.defining/defchecker match-equals [matcher]+  (match-with {:map (fn [exp] (core/->EqualsMap exp))} matcher))++(checkers.defining/defchecker match-roughly [delta matcher]+  (match-with {:number (fn [exp] (core/->Roughly delta exp))} matcher))"
https://api.github.com/repos/nubank/matcher-combinators/pulls/44,214385827,"@@ -49,6 +49,22 @@      :else      nil))) +(defn- regex? [value] (instance? java.util.regex.Pattern value))+(defrecord Regex [expected]+  Matcher+  (match [_this actual]+   (if-let [issue (validate-input expected actual regex? (constantly true) 'regex ""java.util.regex.Pattern"")]+     issue+     (try+       (if (re-find expected actual)"
https://api.github.com/repos/nubank/matcher-combinators/pulls/48,217673159,"@@ -307,6 +306,12 @@ (def pred-set #{(pred-matcher odd?) (pred-matcher pos?)}) (def pred-seq [(pred-matcher odd?) (pred-matcher pos?)]) +(def short-equals-seq (map equals [1 3]))++(fact ""embeds for sequences""+  (core/match (embeds short-equals-seq) [3 4 1]) => (just [:match (just [3 4 1])])+  (core/match (embeds short-equals-seq) [3 4 1 5]) => (just [:match (just [3 4 1 5])]))"
https://api.github.com/repos/nubank/matcher-combinators/pulls/50,218839308,"@@ -0,0 +1,3 @@+#!/bin/bash++lein kaocha ""$@"""
https://api.github.com/repos/nubank/matcher-combinators/pulls/52,221309865,"@@ -11,7 +11,7 @@ ;; annotated (s/def ::value any?) -(s/def ::result (s/keys :req [::weight ::type ::annotated-result]))"
https://api.github.com/repos/nubank/matcher-combinators/pulls/57,245585179,"@@ -330,3 +330,19 @@     {::result/type  :mismatch      ::result/value (model/->FailedPredicate (str func) actual)      ::result/weight 1}))++(defrecord ByteArray [expected]+  Matcher+  (match [_this actual]+    (cond+      (= actual ::missing) {::result/type  :mismatch+                            ::result/value (model/->Missing expected)+                            ::result/weight 1}++      (= (set expected) (set actual)) {::result/type   :match"
https://api.github.com/repos/nubank/matcher-combinators/pulls/64,264052107,"@@ -0,0 +1,132 @@+(ns matcher-combinators.parser+  (:require [matcher-combinators.core :as core]+            [matcher-combinators.matchers :as matchers])+  #?(:clj+     (:import [clojure.lang Keyword Symbol Ratio BigInt IPersistentMap+               IPersistentVector IPersistentList IPersistentSet+               LazySeq Repeat Cons Var]+              [java.util UUID Date]+              [java.util.regex Pattern]+              [java.time LocalDate LocalDateTime LocalTime YearMonth])))++#?(:cljs+(extend-protocol"
https://api.github.com/repos/nubank/matcher-combinators/pulls/66,268746514,"@@ -54,3 +54,7 @@   ""Matcher that will match when given value matches the `expected` regular expression.""   [expected]   (core/->Regex expected))++(def absent"
https://api.github.com/repos/nubank/matcher-combinators/pulls/67,269323835,"@@ -143,6 +143,16 @@       issue       (compare-maps expected actual model/->Unexpected false)))) +(defrecord EqualsRecord [expected]+  Matcher+  (match [_this actual]+    (if-let [issue (validate-input expected actual map? 'equals ""record"")]+      issue+      (cond+        (and (record? expected)+             (record? actual)) (match (->Value expected) actual)"
https://api.github.com/repos/nubank/matcher-combinators/pulls/69,269604583,"@@ -1,6 +1,11 @@ (ns matcher-combinators.matchers   (:require [matcher-combinators.core :as core])) +(defn value"
https://api.github.com/repos/nubank/matcher-combinators/pulls/81,311588048,"@@ -86,3 +134,22 @@          ::result/value  mismatch-val          ::result/weight 1})))) +(def match-equals+  ""match but using strict `equals` matching behavior for maps, even nested ones.""+  (match-with {clojure.lang.IPersistentMap matchers/equals}))++(def match-roughly"
https://api.github.com/repos/nubank/matcher-combinators/pulls/97,366909863,"@@ -207,3 +208,33 @@                       {clojure.lang.IPersistentMap matchers/equals}                       msg                       form))++(defmethod clojure.test/assert-expr 'match-roughly? [msg form]+  (let [directive (first form)+        delta     (second form)+        the-rest  (rest (rest form))+        y         ""sadf""+        roughly-delta? (fn [expected]+                         ;; uncomment this line and everything goes to shit+                         (println y)"
https://api.github.com/repos/nubank/matcher-combinators/pulls/102,390839179,"@@ -3,14 +3,37 @@             [matcher-combinators.core :as core]             [matcher-combinators.parser])) +(defn match+  ""Returns a map indicating whether the `actual` value matches the `matcher`.++  `matcher` can be a matcher-combinators matcher, a predicate function of+  actual, an expression that returns a value, or a literal value.++  `actual` can be an expression that returns the actual value, or a literal.++  Return map includes the following keys:++  - :matcher-combinators.result/type+    - either :match or :mismatch+  - :matcher-combinators.result/value+    - when :matcher-combinators.result/type is :match, binds to the actual value,+      else a map indicating the expected and actual values """
https://api.github.com/repos/nubank/matcher-combinators/pulls/103,391152242,"@@ -3,6 +3,10 @@ All notable changes to this project will be documented in this file. This change log follows the conventions of [keepachangelog.com](http://keepachangelog.com/). +## [1.4.0]"
https://api.github.com/repos/nubank/matcher-combinators/pulls/111,397132841,"@@ -17,12 +17,22 @@  (def match-data {:foo 1 :bar 2}) +(defmacro shhh!+  ""Evals and returns the value of body without reporting failures.""+  [& body]+  `(with-redefs [clojure.test/do-report (constantly nil)]+     ~@body))+ (deftest basic-matching   (is (match? example-matcher example-actual)       ""In 'match?', the matcher argument comes first"")   (is (match? (m/equals example-matcher)               (dissoc example-actual :device))       ""wrapping the matcher in 'equals' means the top level of 'actual' must have the exact same key/values"")+  (is (true? (is (match? 1 1)))+      ""match? should return true for a :match"")+  (is (false? (shhh! (is (match? 1 2))))"
https://api.github.com/repos/nubank/matcher-combinators/pulls/115,409698868,"@@ -11,25 +11,91 @@ _docs:_  ## Motivation -Clojure's built-in data structures get you a long way when trying to codify and solve difficult problems. A solid selection of core functions allow you to easily create and access core data structures. Unfortunately, this flexibility does not extend to testing: a comprehensive yet extensible way to assert that the data fits a particular structure seems to be lacking.+Clojure's built-in data structures get you a long way when trying to codify and solve difficult problems. A solid selection of core functions allow you to easily create and access core data structures. Unfortunately, this flexibility does not extend to testing: we seem to be missinng a comprehensive yet extensible way to assert that the data fits a particular structure. -This library addresses this issue by providing composable matcher combinators that can be used as building blocks to effectively test functions that evaluate to nested data-structures.+This library addresses this issue by providing composable matcher combinators that can be used as building blocks to test functions that evaluate to nested data-structures more effectively.  ## Features +- Matchers for scalar and structural values+  - Good readability supported by default interpretations of Clojure types as matchers - Pretty-printed diffs when the actual result doesn't match the expected matcher-- Integrates with `clojure.test` and `midje`-- Good readability by providing default interpretations of core Clojure data-structures as matcher combinators+- Integration with `clojure.test` and `midje` -| Midje checkers | Matcher combinators |-| ------- | ----- |-| ![midje checkers](doc/images/midje_check.png) | ![matcher combinators check](doc/images/matcher_check.png) |+## Usage -| Midje checkers failure output | Matcher combinators failure output |-| ------- | ----- |-| ![midje checker failure output](doc/images/midje_failure.png) | ![matcher combinators failure output](doc/images/matcher_output.png) |+### `clojure.test` -## Usage+Require the `matcher-combinators.test` namespace, which will extend `clojure.test`'s `is` macro to accept the `match?` and `thrown-match?` directives.++ - `match?`: The first argument should be the matcher-combinator represented the expected value, and the second argument should be the expression being checked.+ - `thrown-match?`: The first argument should be a throwable subclass, the second a matcher-combinators, and the third the expression being checked.++For example:++```clojure+(require '[clojure.test :refer [deftest is]]+         '[matcher-combinators.test] ;; adds support for `match?` and `thrown-match?` in `is` expressions+         '[matcher-combinators.matchers :as m])++(deftest test-matching-with-explict-matchers"
https://api.github.com/repos/nubank/matcher-combinators/pulls/123,430936359,"@@ -1,4 +1,6 @@ (ns matcher-combinators.dispatch+  ""core/Matchers$match gets bound to dispatch functions defined in this namespace+  so that we can override them at runtime."""
https://api.github.com/repos/nubank/matcher-combinators/pulls/125,432564838,"@@ -359,7 +359,7 @@                                      ""set or sequential"")                      (validate-input expected                                      actual-                                     set?+                                     (fn [s] (or (set? s) (instance? java.util.Set s)))"
https://api.github.com/repos/nubank/matcher-combinators/pulls/126,432659901,"@@ -6,15 +6,19 @@ change log follows the conventions of ## [2.0.0]  - add `matchers/matcher-for` [#123](https://github.com/nubank/matcher-combinators/pull/123)+- align `standalone/match?` and `core/match?` fns [#126](https://github.com/nubank/matcher-combinators/pull/126) -### BREAKING CHANGE+### BREAKING CHANGES -matcher-combinators-2.0.0 includes a breaking change for custom implementations of the-`matcher-combinators.core/Matcher` protocol:+matcher-combinators-2.0.0 includes the following breaking changes: -- change the implementation of `match` to `-match` (required)-- add an implementation of `-matcher-for` (optional, but recommended)-  - should just return `this` e.g. `(-matcher-for [this] this)+* for custom implementations of the `matcher-combinators.core/Matcher` protocol:+    * change the implementation of `match` to `-match` (required)+    * add an implementation of `-matcher-for` (optional, but recommended)+        * should just return `this` e.g. `(-matcher-for [this] this)"
https://api.github.com/repos/nubank/matcher-combinators/pulls/128,434822656,"@@ -96,6 +83,8 @@                     ::result/value (model/->Mismatch expected actual)}                    res)))) +(spec.test/instrument)"
https://api.github.com/repos/nubank/matcher-combinators/pulls/134,446965723,"@@ -71,9 +71,79 @@   [pred]   (core/->PredMatcher pred (str ""predicate: "" pred))) +#?(:cljs (defn- cljs-uri [expected]+           (core/->CljsUriEquals expected)))+ (defn matcher-for-  ""Returns the type-specific matcher object for an expected value. This is-  useful for discovery when you want to know which Matcher type is associated-  to a value.""-  [expected]-  (core/-matcher-for expected))+  ""Returns the type-specific matcher object for an expected+  value. This is used internally to support the match-with matcher,+  and is also useful for discovery when you want to know which Matcher+  type is associated to a value.++  Adds :matcher-object? metadata to the returned matcher so that+  other functions can differentiate between matcher objects and+  objects that happen to implement the Matcher protocol (which should+  be all other objects).""+  ([expected]+   (core/-matcher-for expected))+  ([expected overrides]+   (core/-matcher-for expected overrides)))++(declare match-with)++(defn- match-with-values [m overrides]+  (reduce-kv (fn [m* k v]+               (assoc m* k (match-with overrides v)))+             {}+             m))++(defn- match-with-elements [coll overrides]+  (reduce (fn [c v]+            (conj c (match-with overrides v)))+          (empty coll)+          coll))++(defn match-with [overrides value]+  (vary-meta+   (cond (:match-with? (meta value))+         value++         (fn? value)+         value++         ;; TODO: all of the built in matchers are records, but users+         ;; define matchers by reifying the Matcher protocol, so this+         ;; would break down. Also, what if a user's domain includes a+         ;; record with an `:expected` key? Ideally, we should have+         ;; some other marker to identify a matcher object, and document+         ;; it in terms of ""your custom Matcher implementations must do+         ;; x in order to particpate in match-with""+         (and (record? value) (map? (:expected value)))"
https://api.github.com/repos/nubank/matcher-combinators/pulls/135,447833007,"@@ -1,9 +1,17 @@-(ns matcher-combinators.utils)+(ns matcher-combinators.utils+  ""Internal use only. Subject (and likely) to change."") -(defn roughly? [expected actual delta]-  (and (number? actual)-       (>= expected (- actual delta))-       (<= expected (+ actual delta))))+(defn processable-number? [v]"
https://api.github.com/repos/nubank/matcher-combinators/pulls/139,448481291,"@@ -11,9 +11,12 @@                 (not (infinite? v)))))  (defn within-delta? [delta expected actual]-  (and (processable-number? actual)-       (>= expected (- actual (Math/abs delta)))-       (<= expected (+ actual (Math/abs delta)))))+  (let [delta-fn (if (decimal? delta)+                   #(.abs %)+                   #(Math/abs %))]+    (and (processable-number? actual)+         (>= expected (- actual (delta-fn delta)))+         (<= expected (+ actual (delta-fn delta))))))"
https://api.github.com/repos/nubank/matcher-combinators/pulls/152,492690739,"@@ -279,7 +279,15 @@                               (m/match-with [map? m/embeds]                                             {:b :c})})}            {:o {:a {:b :c :d :e}}-            :p :q}))))+            :p :q})))+    (testing ""using `absent` matcher"""
https://api.github.com/repos/nubank/matcher-combinators/pulls/158,642976316,"@@ -74,6 +74,12 @@   [pred]   (core/->PredMatcher pred (str ""predicate: "" pred))) +(defn not-matcher+  [expected]+  (let [not-match? (fn [actual] (not (core/indicates-match? (core/match expected actual))))]"
https://api.github.com/repos/nubank/matcher-combinators/pulls/160,646554177,"@@ -66,13 +66,14 @@   (core/->Regex expected))  (def absent-  ""Value-position matcher for maps that matches when containing map doesn't have the key pointing to this matcher.""+  ""Value-position matcher for maps that matches when containing map doesn't+  have the key pointing to this matcher.""   (core/->Absent))  (defn pred   ""Matcher that will match when `pred` of the actual value returns true.""   [pred]-  (core/->PredMatcher pred (str ""predicate: "" pred)))+  (core/->PredMatcher pred `(~'pred ~pred)))"
https://api.github.com/repos/nubank/matcher-combinators/pulls/168,826245544,"@@ -11,7 +11,11 @@  (defn equals   ""Matcher that will match when the given value is exactly the same as the-  `expected`.""+  `expected`.++  Note: For maps, only the top level keys and values are checked for equality.+  Nested maps continue being matched with `embeds`. If you want to do a deep+  match, consider using `match-with` instead."""
https://api.github.com/repos/nubank/matcher-combinators/pulls/169,836506217,"@@ -14,10 +14,13 @@                      provided [[:inner 0]]                      tabular  [[:inner 0]]}} -  :dependencies [[org.clojure/clojure ""1.10.3""]-                 [org.clojure/spec.alpha ""0.2.187""]+  :dependencies [[org.clojure/clojure ""1.11.0""]+                 [org.clojure/spec.alpha ""0.3.218""]                  [org.clojure/math.combinatorics ""0.1.6""]-                 [midje ""1.10.4"" :exclusions [org.clojure/clojure]]]+                 [midje ""1.10.5"" :exclusions [org.clojure/clojure]]+                 ;; override midje's dependency on an old version+                 ;; of pretty+                 [io.aviso/pretty ""1.1.1""]]"
https://api.github.com/repos/nubank/matcher-combinators/pulls/178,1018063916,"@@ -395,3 +395,29 @@     (is (match? (m/in-any-order                  [odd? pos? (m/mismatch odd?)])                 [1 2 3]))))++(deftest via-matcher+  (testing ""normal usage""+    (is (match? {:payloads [(m/via read-string {:foo :bar})]}+                {:payloads [""{:foo :bar}""]})))++  (testing ""via + match-with allows pre-processing `actual` before applying matching""+    (is (match? (m/match-with+                 [vector? (fn [expected] (m/via reverse expected))]+                 {:payloads [1 2 3]})+                {:payloads [3 2 1]})))"
https://api.github.com/repos/nubank/matcher-combinators/pulls/174,1019690991,"@@ -89,7 +96,9 @@       (throw (ArityException. arg-count ""throws-match"")))))  (checkers.defining/defchecker throws-match"
https://api.github.com/repos/nubank/matcher-combinators/pulls/187,1034627442,"@@ -268,41 +268,91 @@           (match expected transformed))))     (-base-name [_] (-base-name expected))) +(defn insert-all-combinations+  ""List of all ways of inserting elements from `insert-list` into `base-list`+  while preserving the ordering that `base-list` elements have with respect to+  each other""+  [base-list insert-list]+  (let [insert (fn [v i e] (vec (concat (take i v) [e] (drop i v))))+        insert-count (count insert-list)+        insert-indice-sets (reverse (combo/combinations (range (+ (count base-list) insert-count))+                                                        insert-count))]+    (map #(first (reduce (fn [[result-list remaining-insert-elems] index]+                           [(insert result-list index (first remaining-insert-elems))+                            (rest remaining-insert-elems)])+                           [base-list insert-list]+                           %))+         insert-indice-sets)))++#_(insert-all-combinations [1 2 3] [0 0])+ (defn- normalize-inputs-length   ""Modify the matchers and actuals sequences to match in length.-  When `matchers` is longer, add `missing` elements to `actuals`.-  When `actuals` is longer, add unexpected entry matchers to `matchers`.""++   - When `matchers` is longer, return pairs of `matchers` and all combinations+     of `missing` inserted into `actuals`.+   - When `actuals` is longer, return pairs of `actuals` and all combinations+     of `unexpected` inserted into `matchers`.++    The all-combinations results help compute minimized mismatches for sequences""   [matchers actuals]   (let [matchers-count (count matchers)         actuals-count  (count actuals)]-    (if (< actuals-count matchers-count)-      [matchers-       (take matchers-count (concat actuals (repeat ::missing)))]-      [(take actuals-count (concat matchers (repeat unexpected-matcher)))-       actuals])))+    (cond (= actuals-count matchers-count)+          [[matchers actuals]]++          (< actuals-count matchers-count)+          (map vector+               (repeat matchers)+               (insert-all-combinations actuals+                                        (repeat (- matchers-count (count actuals))+                                                ::missing)))"
https://api.github.com/repos/nubank/matcher-combinators/pulls/189,1047415262,"@@ -9,6 +9,18 @@             [matcher-combinators.result :as result]             [cljs.test :as t :refer-macros [deftest is]])) +(defrecord CljsMismatch [summary match-result])++(defn tagged-for-pretty-printing [actual-summary result]+  (->CljsMismatch actual-summary result))++#?(:cljs+   (extend-protocol IPrintWithWriter+     CljsMismatch+     (-pr-writer [cljs-mismatch writer _]+       (-write writer (printer/as-string (-> cljs-mismatch :match-result ::result/value))))))"
https://api.github.com/repos/nubank/matcher-combinators/pulls/191,1048485780,"@@ -114,6 +120,11 @@   [transform-actual-fn expected]   (core/->ViaMatcher transform-actual-fn expected)) +(defn either+  ""A matcher that successfully matches if one of the two provided matchers matches.""+  [left-expected right-expected]+  (core/->Either left-expected right-expected))"
https://api.github.com/repos/nubank/matcher-combinators/pulls/194,1100175879,"@@ -2,15 +2,18 @@              ""clojars""  {:url ""https://clojars.org/repo/""}}  :paths [""src/clj"" ""src/cljc"" ""src/cljs""]  :deps {org.clojure/clojure {:mvn/version ""1.11.1""}"
https://api.github.com/repos/nubank/matcher-combinators/pulls/201,1103152444,"@@ -12,6 +12,16 @@ _docs:_  _Clojure version compatibility:_ 1.8 and up +## Stewards++matcher-combinators is maintained by:+* Devflow team at Nubank+* [Phillip Mates](https://github.com/philomates)++For questions and more info:+* Nubankers, please reach us on [#devflow](https://nubank.slack.com/archives/CS9MK8MGX)+* Clojure community, please use the Clojurians channel [#matcher-combinators](https://clojurians.slack.com/archives/C04ABMF89D3)"
https://api.github.com/repos/nubank/matcher-combinators/pulls/214,1311672866,"@@ -7,19 +7,20 @@   *use-color*"
https://api.github.com/repos/nubank/matcher-combinators/pulls/218,1465042576,"@@ -31,6 +31,19 @@         :else         (core/->Value expected))) +(declare match-with)++(defn deep-equals+  ""Return a matcher for the expected value which matches nested maps with `equals`.+  This solves a common need of matching nested maps with strict equality.+  See also: `match-with`."
https://api.github.com/repos/nubank/state-flow/pulls/3,209727509,"@@ -14,3 +15,11 @@             accept                        (get request-headers ""Accept"" request-content-type)             response-type                 (wire/header->content-type (get headers ""Content-Type"" accept))]         (merge response-map {:body (th/output-stream->data body response-type)})))))++(defn request"
https://api.github.com/repos/nubank/state-flow/pulls/5,223054096,"@@ -81,6 +83,23 @@          (state/wrap-fn #(do (add-desc-and-meta ~fact-sexp full-desc# ~the-meta)                              ~left-value)))))) +(defn match-expr+  [desc value checker]+  (let [test-name (symbol (clojure.string/replace desc "" "" ""-""))]+    (list `deftest test-name (list `is (list 'match? checker value)))))"
https://api.github.com/repos/nubank/state-flow/pulls/8,239839909,"@@ -16,6 +16,8 @@ (def sleep-time 10) (def times-to-try 100) +(def ftap (partial m/fmap nu/tap))"
https://api.github.com/repos/nubank/state-flow/pulls/12,246137725,"@@ -1,9 +1,17 @@ (ns state-flow.helpers.http-  (:require [common-http-client.components.mock-http :as mock-http]-            [nu.monads.state :as state]+  (:require [cats.core :as m]+            [common-http-client.components.mock-http :as mock-http]+            [common-http-client.postman.helpers :as postman.helpers]             [state-flow.core :as core]             [state-flow.helpers.core :as helpers])) +(defn ^:private delta-requests+  [before after]+  (reduce (fn [deltas url]+            (assoc deltas url (drop (count (get before url)) (get after url))))"
https://api.github.com/repos/nubank/state-flow/pulls/22,253445950,"@@ -124,3 +125,16 @@   ""Transform a flow step into a state transition function""   [flow]   (fn [s] (state/exec flow s)))++(defmacro assert+  ""Defines a step that, if it doesn't return a `truthy` value, throws an+  exception.""+  {:style/indent 1}+  [desc & body]+  `(flow ~desc+     [full-desc# (get-description)]+     (let [ret# ~@body]+       (or (and ret# (m/return ret#))+           (throw (ex-info (str ""Flow failed at assertion "" full-desc#)+                           {:reason ::assertion-failed+                            :form '~body}))))))"
https://api.github.com/repos/nubank/state-flow/pulls/20,253463337,"@@ -124,3 +126,32 @@   ""Transform a flow step into a state transition function""   [flow]   (fn [s] (state/exec flow s)))++(defmacro deftest+  ""Define a test to be run.++  Receives a function `initialize-state`, a function with no+  arguments that returns the initial state.""+  [sym descr initialize-state cleanup & flows]+  `(def ~(vary-meta sym merge {::test       true+                               ::initialize initialize-state+                               ::cleanup    cleanup})+     (flow ~descr ~@flows)))++(defn ns->tests+  ""Returns all flows defined with `defflow`""+  [ns]+  (->> ns ns-interns vals (filter (comp ::test meta))))++(defn run-test*+  [v]+  (let [{::keys [cleanup initialize]} (meta v)+        initial-state (initialize)+        [_ final-state :as result] (run @v initial-state)]"
https://api.github.com/repos/nubank/state-flow/pulls/23,268865260,"@@ -0,0 +1,111 @@+(ns state-flow.cljtest-test+  (:require [cats.core :as m]+            [cats.data :as d]+            [cats.monad.state :as state]+            [matcher-combinators.matchers :as matchers]+            [matcher-combinators.midje :refer [match]]+            [midje.sweet :refer :all]+            [state-flow.cljtest :as cljtest :refer [deftest]]+            [state-flow.core :as state-flow :refer [flow]]+            [state-flow.state :as sf.state]))++(def increment-two+  (m/mlet [world (sf.state/get)]+    (m/return (+ 2 (-> world :value)))))++(facts ""on match?""++  (fact ""add two to state 1, result is 3, doesn't change world""+    (state-flow/run (cljtest/match? ""test-1"" increment-two 3) {:value 1}) => (d/pair 3 {:value 1 :meta {:description []}}))++  (fact ""works with non-state values""+    (state-flow/run (cljtest/match? ""test-2"" 3 3) {}) => (d/pair 3 {:meta {:description []}}))++  (fact ""works with matcher combinators (embeds by default)""+    (let [val {:value {:a 2 :b 5}}]+      (state-flow/run (cljtest/match? ""contains with monadic left value"" (state/gets :value) {:a 2}) val)+      => (d/pair {:a 2 :b 5}+                 {:value {:a 2 :b 5}+                  :meta {:description []}})))++  (fact ""works with matcher combinators equals""+    (let [val {:value {:a 2 :b 5}}]+      (state-flow/run (cljtest/match? ""contains with monadic left value"" (state/gets :value) (matchers/equals {:a 2 :b 5})) val)+      => (d/pair {:a 2 :b 5}+                 {:value {:a 2 :b 5}+                  :meta {:description []}})))++  (fact ""works with matcher combinators in any order""+    (let [val {:value [1 2 3]}]+      (state-flow/run (cljtest/match? ""contains with monadic left value"" (state/gets :value) (matchers/in-any-order [1 3 2])) val)+      => (d/pair [1 2 3]+                 {:value [1 2 3]+                  :meta {:description []}}))))"
https://api.github.com/repos/nubank/state-flow/pulls/26,278580222,"@@ -1,5 +1,8 @@ # Changelog +## [1.12.0]"
https://api.github.com/repos/nubank/state-flow/pulls/31,312167058,"@@ -90,6 +90,9 @@ (def empty-flow   (state-flow/flow ""empty"")) +(def flow-with-description-missing"
https://api.github.com/repos/nubank/state-flow/pulls/33,313836952,"@@ -131,6 +131,14 @@     (cleanup final-state)     result)) +(defmacro wrap-with+  [wrapper-fn flow]+  `(m/do-let+    [world# (state/get)+     pair#  (m/return (~wrapper-fn (run! ~flow world#)))]+    (state/put (second pair#))+    (m/return (first pair#))))"
https://api.github.com/repos/nubank/state-flow/pulls/35,319540066,"@@ -47,7 +62,7 @@                    '[(state/swap identity)])]     `(m/do-let        (push-meta ~description)-       [ret# (m/do-let ~@flows')]+       [ret# (m/do-let ~@(with-lines flows'))]"
https://api.github.com/repos/nubank/state-flow/pulls/34,320237952,"@@ -35,11 +35,17 @@   (m/mlet [desc-list (state/gets #(-> % :meta :description))]     (m/return (description->string desc-list)))) +(defn string-expr? [x]+  (or (string? x)+      (and (sequential? x)+           (or (= (first x) 'str)+               (= (first x) 'clojure.core/str)))))+ (defmacro flow   ""Defines a flow""   {:style/indent :defn}   [description & flows]-  (when-not (string? description)+  (when-not (string-expr? description)"
https://api.github.com/repos/nubank/state-flow/pulls/41,356691146,"@@ -68,8 +68,8 @@   (state/put s error-context))  (defn swap-  [f]-  (state/swap f error-context))+  [f & args]+  (state/swap (fn [s] (apply f s args)) error-context))"
https://api.github.com/repos/nubank/state-flow/pulls/42,358990735,"@@ -27,73 +27,81 @@ a system using [Stuart Sierra's Component](https://github.com/stuartsierra/compo  ### Primitives -The primitives are the fundamental building blocks of a flow and are enough to build-any kinds of flow.-Below we list the main primitives and the kind of function they represent:+Primitives are the fundamental building blocks of flows and are+enough to build any kind of flow. Each one returns a function of the+state. These functions are wrapped in Records in order to support+background processing, but you can just think of them as functions."
https://api.github.com/repos/nubank/state-flow/pulls/44,359002635,"@@ -41,13 +41,17 @@            (or (= (first x) 'str)                (= (first x) 'clojure.core/str))))) +(defn wrap-with-assert-flow! [f]+  `(do (assert (state/state? ~f) (str ""Expected a flow but found a "" (type ~f)))"
https://api.github.com/repos/nubank/state-flow/pulls/46,360540193,"@@ -0,0 +1,22 @@+(ns state-flow.probe-test+  (:require [cats.data :as d]+            [midje.sweet :refer :all]+            [state-flow.core :as state-flow]+            [state-flow.probe :as probe]+            [state-flow.test-helpers :as test-helpers]))++(facts probe/probe+  (fact ""add two to state 1, result is 3, doesn't change world""+    (first (state-flow/run (probe/probe test-helpers/increment-two #(= % 3)) {:value 1})) => [true 3])++  (fact ""add two with small delay""+    (let [world {:value (atom 0)}]+      (state-flow/run (test-helpers/delayed-increment-two 100) world) => (d/pair nil world)+      (state-flow/run (probe/probe test-helpers/get-value-state #(= 2 %)) world) => (d/pair [true 2] world)))++  (fact ""add two with too much delay""+    (let [world {:value (atom 0)}]+      (state-flow/run (test-helpers/delayed-increment-two 4000) world) => (d/pair nil world)+      (state-flow/run (probe/probe test-helpers/get-value-state #(= 2 %)) world) => (d/pair [false 0] world))))++"
https://api.github.com/repos/nubank/state-flow/pulls/49,361539949,"@@ -1,38 +1,45 @@ (ns state-flow.state-test-  (:require [cats.context :as ctx]+  (:require [clojure.test :as t :refer [deftest testing is]]             [cats.core :as m]             [cats.data :as d]             [cats.monad.exception :as e]             [cats.monad.state :as state]-            [cats.protocols :as p]-            [midje.sweet :refer :all]+            [midje.sweet :as midje]             [state-flow.state :as sf.state])) -(def postincrement-  (m/mlet [x (sf.state/get)-           _ (sf.state/put (+ x 1))]-    (m/return x)))+(deftest test-state+  (let [increment-state       (m/mlet [x (sf.state/get)+                                       _ (sf.state/put (inc x))]+                                      (m/return x))+        double-state          (sf.state/modify #(* 2 %))+        state-with-fact-check (m/mlet [x increment-state+                                       y increment-state+                                       z (sf.state/get)]+                                      (m/return (midje/fact ""z is equal to initial state incremented by two""+                                                            z => (+ x 2))))+        state-with-assertion  (m/mlet [x increment-state+                                       y increment-state+                                       z (sf.state/get)]+                                      (m/return (is (= z (+ x 2)))))]+    (testing ""modify state with get and put""+      (is (= (d/pair 2 3)+             (state/run increment-state 2))))+    (testing ""modify state with modify"""
https://api.github.com/repos/nubank/state-flow/pulls/53,364669277,"@@ -79,6 +79,12 @@ Bindings take advantage of the return values of flows to compose other flows and `[(<symbol> <flow/primitive>)+]`  They work pretty much like `let` bindings but the left symbol binds to the _return value_ of the flow on the right.+It's also possible to do non-flow bindings inside the same vector using the `:let` keyword:++```clojure+[(<symbol> <flow/primitive>)+ :let [<symbol> <non-monadic value>]]"
https://api.github.com/repos/nubank/state-flow/pulls/52,364690879,"@@ -1,45 +1,70 @@ (ns state-flow.core   (:refer-clojure :exclude [run!])-  (:require [cats.context :as ctx]+  (:require [clojure.string :as str]             [cats.core :as m]             [cats.monad.exception :as e]             [state-flow.state :as state]             [taoensso.timbre :as log])) -(defn push-description-  [description-log new-description]-  (if (nil? description-log)-    [[new-description]]-    (conj description-log (conj (last description-log) new-description))))+;; From time to time we see the following error when trying to pretty-print+;; Failure records:+;;+;;   Unhandled java.lang.IllegalArgumentException+;;   Multiple methods in multimethod 'simple-dispatch' match dispatch+;;   value: class cats.monad.exception.Failure -> interface+;;   clojure.lang.IDeref and interface clojure.lang.IPersistentMap, and+;;   neither is preferred+;;+;; This prevents that from happening:+(defmethod clojure.pprint/simple-dispatch cats.monad.exception.Failure [f]+  (pr f)) -(defn pop-description-  [description-log]-  (conj description-log (pop (last description-log))))--(defn update-meta [s k & args]-  (with-meta s (apply update (meta s) k args)))+(defn ^:private alter-meta!*"
https://api.github.com/repos/nubank/state-flow/pulls/54,365298498,"@@ -90,7 +91,12 @@   [flow initial-state]   (assert (state/state? flow) ""First argument must be a flow"")   (assert (map? initial-state) ""Initial state must be a map"")-  (state/run flow initial-state))+  (let [pair (state/run flow initial-state)]+    (if-let [m (some->> pair first :failure .getMessage (re-find #""cats.protocols\/Extract.*for (.*)$""))]+      (d/pair (#'cats.monad.exception/->Failure+               (ex-info (format ""Expected flow, got %s"" (last m))+                        {})) (second pair))+      pair)))"
https://api.github.com/repos/nubank/state-flow/pulls/60,366378580,"@@ -7,37 +7,32 @@             [state-flow.probe :as probe]             [state-flow.state :as state])) -(defn ^:private match-expr-  [desc value checker]-  (let [test-name (symbol (clojure.string/replace desc "" "" ""-""))]"
https://api.github.com/repos/nubank/state-flow/pulls/61,366799210,"@@ -2,70 +2,82 @@  [![Clojars Project](https://img.shields.io/clojars/v/nubank/state-flow.svg)](https://clojars.org/nubank/state-flow) -An integration testing framework for building and composing test flows with support for clojure.test and midje+StateFlow is a testing framework designed to support the composition and reuse of individual test steps. -StateFlow provides a compositional approach to implementing integration tests. The goal is to reduce coupling between test steps in order to support reuse and composition of flows.+## Flows -## The flow macro+A flow is a sequence of steps to be executed with some state as a+reference. Each step can be any of a primitive (described below), a+vector of bindings (described below), or a nested flow. Flows can be"
https://api.github.com/repos/nubank/state-flow/pulls/62,367650144,"@@ -110,12 +110,18 @@   ([flow]    (run! flow {}))   ([flow initial-state]+   (run! flow initial-state identity))+  ([flow initial-state cleanup]"
https://api.github.com/repos/nubank/state-flow/pulls/65,368570098,"@@ -0,0 +1,262 @@+(require '[state-flow.core :refer [flow run]]"
https://api.github.com/repos/nubank/state-flow/pulls/70,370191755,"@@ -8,31 +8,42 @@             [state-flow.state :as state]))  (defmacro match-expr-  [desc value checker meta]+  [desc value matcher meta]   (with-meta-    (list `ctest/testing desc (list `is (list 'match? checker value)))+    (list `ctest/testing desc (list `is (list 'match? matcher value)))     meta))  (defn match-probe+  ""Returns a map of :value (bound to the right value of the result of+  probe/probe), with :match-results added to the metadata.""   ([state matcher]    (match-probe state matcher {}))   ([state matcher params]-   (m/fmap second-           (probe/probe state-                        #(matcher-combinators/match? (matcher-combinators/match matcher %))-                        params))))+   (let [match-results (atom [])]+     (m/fmap (fn [pair]+               (with-meta {:value (second pair)}+                 {:match-results @match-results}))+             (probe/probe state+                          (fn [v]+                            (let [res (matcher-combinators/match matcher v)]+                              (swap! match-results conj res)+                              (matcher-combinators/match? res)))+                          params)))))  (defmacro match?   ""Builds a clojure.test assertion using matcher combinators""-  [match-desc actual checker & [params]]+  [match-desc actual matcher & [params]]   (let [form-meta (meta &form)]     `(core/flow ~match-desc-       [flow-desc# (core/current-description)-        actual#    (if (state/state? ~actual)-                     (match-probe ~actual ~checker ~params)-                     (state/return ~actual))]-       (state/wrap-fn #(do (match-expr flow-desc# actual# ~checker ~form-meta)-                           actual#)))))+       [flow-desc#    (core/current-description)+        probe-result# (if (state/state? ~actual)"
https://api.github.com/repos/nubank/state-flow/pulls/71,371290718,"@@ -30,22 +30,42 @@                               (matcher-combinators/match? res)))                           params))))) +(defn expect*+  ""Internal use - do not call directly. Use expect instead.""+  [{:keys [form-meta] :as opts} expected actual & [params]]+  (core/flow* opts+              `(m/do-let+                [flow-desc#    (core/current-description)+                 probe-result# (if (state/state? ~actual)+                                 (match-probe ~actual ~expected ~params)+                                 (match-probe (state/return ~actual)+                                              ~expected+                                              {:sleep-time 0 :times-to-try 1}))]+                (core/modify-meta update :match-results (fnil conj []) (:match-results (meta probe-result#)))+                (state/wrap-fn #(do (match-expr flow-desc# (:value probe-result#) ~expected ~form-meta)+                                    (:value probe-result#))))))++(defmacro expect+  ""Builds a clojure.test assertion using matcher combinators.++  - expected can be a matcher-combinators matcher or a literal value+    - literals will be used to infer default matchers+  - actual can be a state monad or a literal value""+  [expected actual & [params]]+  (expect* {:description ""expect"""
https://api.github.com/repos/nubank/state-flow/pulls/73,371848830,"@@ -95,6 +95,16 @@                  (d/pair (my-fn) s))                error-context)) +(defn bind+  ""Equivalent to `(flow \""\"" [a mv] (return (f a)))`""+  [mv f]+  (m/bind mv f))++(defn fmap+  ""Equivalent to `(flow \""\"" [a mv] (f a))`""+  [f mv]+  (m/fmap f mv))"
https://api.github.com/repos/nubank/state-flow/pulls/76,374279445,"@@ -71,20 +75,25 @@   [s]   (-> s meta :top-level-description)) -(defmacro flow-  ""Defines a flow""-  {:style/indent :defn}-  [description & flows]+(defn flow* [{:keys [description caller-meta]} & flows]   (when-not (string-expr? description)-     (throw (IllegalArgumentException. ""The first argument to flow must be a description string"")))-  (let [flow-meta (meta &form)+    (throw (IllegalArgumentException. ""The first argument to flow must be a description string"")))+  (let [flow-meta caller-meta"
https://api.github.com/repos/nubank/state-flow/pulls/77,374751240,"@@ -75,14 +75,46 @@   [s]   (-> s meta :top-level-description)) +(def ^:private abbr-size 15)+(defn ellipsify [expr-str]+  (let [short-expr (subs expr-str 0 (- abbr-size 3))]+    (case (first expr-str)+      \( (str short-expr ""...)"")+      \[ (str short-expr ""...]"")+      (str short-expr ""...""))))++(defn abbr-sexpr [expr]+  (let [expr-str   (str expr)+        short-expr (if (< abbr-size (count expr-str))+                     (ellipsify expr-str)+                     expr-str)]+    (str ""`"" short-expr ""`"")))++(defn push-abbr-meta [flow]+  `(push-meta ~(abbr-sexpr flow)+              ~(meta flow)))++(defn annote-with-line-meta [flows]+  (when-let [subflow-lines (->> flows+                                (map push-abbr-meta)+                                seq)]+    (interleave subflow-lines+                flows+                (repeat `pop-meta))))+ (defn flow* [{:keys [description caller-meta]} & flows]   (when-not (string-expr? description)     (throw (IllegalArgumentException. ""The first argument to flow must be a description string"")))   (let [flow-meta caller-meta-        flows'    (or flows `[(m/return nil)])]+        but-last-flows (butlast flows)+        last-flow      (or (last flows)+                           `(m/return nil))]     `(m/do-let       (push-meta ~description ~flow-meta)-      [ret# (m/do-let ~@flows')]+      ~@but-last-flows+      ~(push-abbr-meta last-flow)"
https://api.github.com/repos/nubank/state-flow/pulls/78,375486710,"@@ -9,23 +9,51 @@ (def default-sleep-time 200) (def default-times-to-try 5) -(defn ^:private retry-  ""Tries at most n times, returns a vector with true and first element that succeeded-  or false and result of the first try""-  [times-to-try check-fn tries]-  (let [remaining (drop-while (complement check-fn) (take times-to-try tries))]-    (if (empty? remaining)-      [false (first tries)]-      [true  (first remaining)])))+(defn ^:private check+  ""Applies check-fn to return value of a flow, returns the check result and the original value in a map""+  [flow check-fn]+  (m/mlet [value flow]+    (state/return {:check-result (check-fn value)+                   :value        value})))++(defn ^:private with-delay+  ""Adds a delay when the flow is run""+  [flow delay]+  (m/>> (state/wrap-fn #(Thread/sleep delay)) flow))++(defn ^:private sequence-while*+  ""Like cats.core/sequence but with short circuiting when pred is satisfied by the return value of a flow""+  [pred acc flows]+  (if (empty? flows)+    acc+    (m/mlet [result (first flows)+             results acc]+      (if (pred result)+        (state/return (conj results result))+        (sequence-while* pred (state/return (conj results result)) (rest flows))))))++(defn ^:private sequence-while+  [pred flows]+  (sequence-while* pred (state/return []) flows))++(defn ^:private probe*+  ""evaluates state repeatedly with check-fn until check-fn succeeds or we try too many times""+  ([flow check-fn]+   (probe* flow check-fn {:sleep-time default-sleep-time :times-to-try default-times-to-try}))+  ([flow check-fn {:keys [sleep-time times-to-try]+                   :or   {sleep-time   default-sleep-time+                          times-to-try default-times-to-try}}]+   (sequence-while :check-result (repeat times-to-try (with-delay (check flow check-fn) sleep-time)))))++(defn ^:private probe-return+  [{:keys [check-result value]}]+  [(boolean check-result) value])  (defn probe   ""evaluates state repeatedly with check-fn until check-fn succeeds or we try too many times""   ([state check-fn]    (probe state check-fn {}))-  ([state check-fn {:keys [sleep-time times-to-try]-                    :or   {sleep-time   default-sleep-time-                           times-to-try default-times-to-try}}]-   (m/mlet [world (state/get)-            :let [tries  (repeatedly #(do (Thread/sleep sleep-time) (state/eval state world)))-                  result (retry times-to-try check-fn tries)]]-     (state/return result))))+  ([flow check-fn {:keys [sleep-time times-to-try]"
https://api.github.com/repos/nubank/state-flow/pulls/79,375956154,"@@ -7,14 +7,14 @@ StateFlow is a testing framework designed to support the composition and reuse o ## Flows  A flow is a sequence of steps to be executed with some state as a-reference. Each step can be any of a primitive ([described below](#primitives)), a-vector of bindings ([described below](#bindings)), or a nested flow. Flows can be+reference. Each step can be a primitive step ([described below](#primitive-steps)), a+vector of bindings ([described below](#bindings)), or even a nested flow. Flows can be"
https://api.github.com/repos/nubank/state-flow/pulls/80,377210164,"@@ -0,0 +1,64 @@+(ns state-flow.assertions.matcher-combinators+  (:require [cats.core :as m]+            [matcher-combinators.core :as matcher-combinators]+            [state-flow.core :as core]+            [state-flow.probe :as probe]+            [state-flow.state :as state]))++(defn ^:private ensure-wrapped+  ""Internal use only.++  Given a state-flow step, returns value as/is, else wraps value in a state-flow step.""+  [value]+  (if (state/state? value)+    value+    (state/return value)))++(defn ^:private match-probe+  ""Internal use only.++  Returns the right value returned by probe/probe.""+  [state matcher params]+  (m/fmap second+          (probe/probe state+                       #(matcher-combinators/match? (matcher-combinators/match matcher %))+                       params)))++(defmacro match?+  ""Builds a state-flow assertion using matcher-combinators.++  - expected can be a literal value or a matcher-combinators matcher+  - actual can be a literal value, a primitive step, or a flow+  - params is an optional map supporting:+    - :times-to-try optional, default 1+    - :sleep-time   optional, default 200++  Given (> :times-to-try 1), match? will use `state-flow-probe/probe` to+  retry :times-to-try times with :sleep-time++  See `state-flow.probe/probe` for more info""+  ([expected actual]+   `(match? ~expected ~actual {:times-to-try 1}))+  ([expected actual {:keys [times-to-try]+                     :or {times-to-try 1}+                     :as params}]+   ;; description is here to support the+   ;; deprecated cljtest/match? fn.  Undecided+   ;; whether we want to make it part of the API.+   ;; caller-meta is definitely not part of the API.+   (let [params* (merge {:description ""match?""+                         :caller-meta (meta &form)}+                       params)]+     (core/flow*+      {:description (:description params*)+       :caller-meta (:caller-meta params*)}+      ;; Nesting m/do-let inside a call the function core/flow* is+      ;; a bit ugly, but it supports getting the correct line number+      ;; information from core/current-description.+      `(m/do-let+        [flow-desc# (core/current-description)+         actual#    (if (> (:times-to-try ~params*) 1)+                      (#'match-probe (#'ensure-wrapped ~actual) ~expected ~params*)+                      (#'ensure-wrapped ~actual))]+        (state/wrap-fn #(t/testing flow-desc# (t/is (~'match? ~expected actual#))))"
https://api.github.com/repos/nubank/state-flow/pulls/86,380063752,"@@ -0,0 +1,58 @@+(ns state-flow.assertions.matcher-combinators+  (:require [cats.core :as m]+            [matcher-combinators.core :as matcher-combinators]+            [matcher-combinators.test] ;; to register clojure.test assert-expr for `match?`"
https://api.github.com/repos/nubank/state-flow/pulls/90,381285382,"@@ -54,32 +54,40 @@               :sym-after          'after/match?}              (zip '(before/match? ""description"" actual expected {:sleep-time 250})))))))) -(deftest refactor-all+(deftest refactor-match-exprs   (testing ""at root""     (is (= ""(after/match? expected actual)""-           (refactor-match/refactor-all+           (refactor-match/refactor-match-exprs             {:str ""(before/match? \""description\"" actual expected)""              :sym-before 'before/match?              :sym-after 'after/match?}))))    (testing ""in deftest""     (is (= ""(deftest thing (after/match? expected actual))""-           (refactor-match/refactor-all+           (refactor-match/refactor-match-exprs             {:str ""(deftest thing (before/match? \""description\"" actual expected))""              :sym-before 'before/match?              :sym-after 'after/match?}))))    (testing ""multiple matches""     (is (= ""(deftest thing (after/match? expected actual)\n  (after/match? expected2 actual2))""-           (refactor-match/refactor-all+           (refactor-match/refactor-match-exprs             {:str ""(deftest thing (before/match? \""description\"" actual expected)\n  (before/match? \""description\"" actual2 expected2))""              :sym-before 'before/match?              :sym-after 'after/match?}))))    (testing ""with wrap-in-flow option""-    (is (= ""(deftest thing (flow \""description\"" (after/match? expected actual)))""-           (refactor-match/refactor-all+    (is (= ""(deftest thing (flow \""description\"" \n(after/match? expected actual)))""+           (refactor-match/refactor-match-exprs             {:str ""(deftest thing (before/match? \""description\"" actual expected))""              :sym-before 'before/match?              :sym-after 'after/match?              :wrap-in-flow true})))))++(deftest refactor-require"
https://api.github.com/repos/nubank/state-flow/pulls/91,382616766,"@@ -21,8 +20,17 @@     p/Functor     (-fmap [_ f fv]       (state/state (fn [s]-                     (let [[v ns]  ((p/-extract fv) s)]-                       [(f v) ns]))+                     (let [mp ((e/wrap (p/-extract fv)) s)]+                       (cond+                         (e/failure? mp)"
https://api.github.com/repos/nubank/state-flow/pulls/100,386537816,"@@ -284,3 +284,62 @@ and we also have a step that fetches this data from db (`fetch-data`). We want t       saved-data       expected-data))) ```++## Writing Helpers++Test helpers specific to your domain can make state-flow tests more readable+and intention-revealing. When writing them, we recommend that you start with+state-flow functions in the `state-flow.core` and `state-flow.state` namespaces.+For example, if you're testing a webapp, you might want a helper like this:++``` clojure+(defflow users+  (flow ""fetch registered users""+    (http-helpers/request {:method :post+                           :uri ""/users""+                           :body {:user/first-name ""David""}})+    [users (http-helpers/request {:method :get+                          :uri ""/users""})]+    (match? [""David""]+            (map :user/first-name users)))+```++The `http/request` helper could be implemented as simply as this:++``` clojure+(ns http-helpers+  (:require [my-app.http :as http))+(defn request [req]+  (state-flow.state/wrap-fn #(http/request req))"
https://api.github.com/repos/nubank/state-flow/pulls/103,387719612,"@@ -19,7 +19,7 @@ reference. Use the `flow` macro to define a flow: (flow <description> <step/bindings>*) ``` -Once defined, you can run it with `(state-flow.core/run! (flow ...) <initial-state>)`.+Once defined, you can run it with `(state-flow.core/run* (flow ...) <initial-state>)`."
https://api.github.com/repos/nubank/state-flow/pulls/104,387728150,"@@ -19,7 +19,7 @@ reference. Use the `flow` macro to define a flow: (flow <description> <step/bindings>*) ``` -Once defined, you can run it with `(state-flow.core/run* (flow ...) <initial-state>)`.+Once defined, you can run it with `(state-flow.core/run* <initial-state> (flow ...))`."
https://api.github.com/repos/nubank/state-flow/pulls/110,404301068,"@@ -53,9 +63,13 @@        [flow-desc# (core/current-description)         actual#    (if (> (:times-to-try ~params*) 1)                      (#'match-probe (state/ensure-step ~actual) ~expected ~params*)-                     (state/ensure-step ~actual))]+                     (state/ensure-step ~actual))+        report#    (state/return (matcher-combinators/match ~expected actual#))]+       (state/modify update :match/results (fnil conj []) (assoc report# :match/desc flow-desc#))"
https://api.github.com/repos/nubank/state-flow/pulls/116,416037926,"@@ -48,32 +49,38 @@    ;; deprecated cljtest/match? fn.  Undecided    ;; whether we want to make it part of the API.    ;; caller-meta is definitely not part of the API.-  (let [params* (merge {:description  ""match?""-                        :caller-meta  (meta &form)-                        :times-to-try 1-                        :sleep-time   probe/default-sleep-time}-                       params)]+  (let [caller-meta      (meta &form)+        params*          (merge {:description  ""match?""+                                 :caller-meta  caller-meta+                                 :times-to-try 1+                                 :sleep-time   probe/default-sleep-time}+                                params)]     (core/flow*      {:description (:description params*)       :caller-meta (:caller-meta params*)}       ;; Nesting m/do-let inside a call the function core/flow* is       ;; a bit ugly, but it supports getting the correct line number       ;; information from core/current-description.-     `(m/do-let-       [flow-desc# (core/current-description)-        probe-res# (#'match-probe (state/ensure-step ~actual) ~expected ~params*)-        :let [actual# (-> probe-res# last :value)-              report# (assoc (matcher-combinators/match ~expected actual#)-                             :match/expected     ~expected-                             :match/actual       actual#-                             :probe/results      probe-res#-                             :probe/sleep-time   ~(:sleep-time params*)-                             :probe/times-to-try ~(:times-to-try params*))]]-       ;; TODO: (dchelimsky, 2020-02-11) we plan to decouple-       ;; assertions from reporting in a future release. Remove this-       ;; next line when that happens.-       (state/wrap-fn #(~'clojure.test/testing flow-desc# (~'clojure.test/is (~'match? ~expected actual#))))-       (state/return report#)))))+     `(do+        (when (and (> (:times-to-try ~params*) 1)+                   (not (state/state? ~actual)))+          (log/warn (select-keys ~caller-meta [:line])+                    "":times-to-try > 1 has no meaningful effect when 'actual' is a value.""))"
https://api.github.com/repos/nubank/state-flow/pulls/117,422175796,"@@ -6,6 +6,15 @@             [state-flow.probe :as probe]             [state-flow.state :as state])) +(defn ^:private ensure-step"
https://api.github.com/repos/nubank/state-flow/pulls/118,425104843,"@@ -1,7 +1,10 @@ # Changelog -## [DEV]+## [4.0.0] +* Add `state-flow.api` namespace [#118](https://github.com/nubank/state-flow/pull/118)+  * New namespace which has everything you need™"
https://api.github.com/repos/nubank/state-flow/pulls/119,425173098,"@@ -2,6 +2,7 @@   (:require [cats.core :as m]             [cats.monad.exception :as e]             [clojure.test :as t :refer [deftest is testing]]+            [state-flow.core :as state-flowo]"
https://api.github.com/repos/nubank/workspaces/pulls/23,247103077,"@@ -0,0 +1,51 @@+(ns nubank.workspaces.shadow-cljs.target+  (:refer-clojure :exclude (compile flush resolve))+  (:require+    [shadow.build :as build]+    [shadow.build.modules :as modules]+    [shadow.build.targets.browser :as browser]+    [shadow.build.test-util :as tu]))++;; Mostly taken from shadow-cljs :browser-test target type.+(defn modify-config [{::build/keys [config] :as state}]+  (-> state+    (assoc-in [::build/config :modules :main] {:entries '[nubank.workspaces.shadow-cljs.mount]})+    (assoc-in [::build/config :compiler-options :source-map] true) ;; always+    (assoc-in [::build/config :compiler-options :static-fns] false) ;; for mocking+    (update :build-options merge {:greedy          true+                                  :dynamic-resolve true})+    (update-in [::build/config :devtools] merge+      {:before-load 'nubank.workspaces.core/before-load+       :after-load  'nubank.workspaces.core/after-load})))++(defn resolve-cards-and-tests+  [{::build/keys [mode config] :as state}]+  (let [{:keys [ns-regexp] :or {ns-regexp ""-(ws|test)$""}}+        config++        dynamically-resolved-namespaces+        (tu/find-namespaces-by-regexp state ns-regexp)]++    (-> state+      ;; Add the mounter and all of the resolved cards/tests+      (update-in [::modules/config :main :entries] into dynamically-resolved-namespaces)"
https://api.github.com/repos/nubank/workspaces/pulls/25,299636937,"@@ -0,0 +1,220 @@+(ns nubank.workspaces.card-types.fulcro3+  (:require+    [cljs.spec.alpha :as s]+    [com.fulcrologic.fulcro-css.css-injection :as cssi]+    [com.fulcrologic.fulcro.algorithms.merge :as f.merge]+    [com.fulcrologic.fulcro.algorithms.normalize :refer [tree->db]]+    [com.fulcrologic.fulcro.application :as fapp]+    [com.fulcrologic.fulcro.components :as fc]+    [com.fulcrologic.fulcro.dom :as dom]+    [com.fulcrologic.fulcro.inspect.inspect-client :as fi.client]+    [ghostwheel.core :refer [>defn >fdef => | <- ?]]+    [goog.functions :as gfun]+    [goog.object :as gobj]+    [nubank.workspaces.card-types.util :as ct.util]+    [nubank.workspaces.data :as data]+    [nubank.workspaces.model :as wsm]+    [nubank.workspaces.ui :as ui]+    [nubank.workspaces.ui.core :as uc]))++; region portal++(s/def ::root any?)+(s/def ::wrap-root? boolean?)+(s/def ::app map?)+(s/def ::persistence-key any?)+(s/def ::initial-state (s/or :fn? fn? :factory-param any?))+(s/def ::root-state map?)+(s/def ::computed map?)+(s/def ::root-node-props map?)++(defonce css-components* (atom #{}))+(defonce persistent-apps* (atom {}))++(defn gen-css-component []+  (let [generated-name (gensym)+        component-key  (keyword ""nubank.workspaces.card-types.fulcro3"" (name generated-name))]+    (fc/configure-component! (fn *dyn-root* [])+      component-key+      {:query (fn [_] (into+                        []+                        (keep-indexed (fn [i v] {(keyword (str ""item"" i))+                                                 (or (fc/get-query v) (with-meta [] {:component v}))}))+                        @css-components*))})))++(defn safe-initial-state [comp params]+  (if (fc/has-initial-app-state? comp)+    (fc/get-initial-state comp params)+    params))++(defn make-root [Root]+  (let [factory        (fc/factory Root)+        generated-name (gensym)+        component-key  (keyword ""nubank.workspaces.card-types.fulcro3"" (name generated-name))]+    (fc/configure-component! (fn *dyn-root* [])+      component-key+      {:initial-state (fn [_ params]+                        {:ui/root (or (safe-initial-state Root params) {})})+       :query         (fn [_] [:fulcro.inspect.core/app-id {:ui/root (fc/get-query Root)}])+       :render        (fn [this]+                        (let [{:ui/keys [root]} (fc/props this)+                              computed (fc/shared this ::computed)]"
https://api.github.com/repos/omcljs/om/pulls/757,77413886,"@@ -290,6 +290,6 @@                              @mut-ret (assoc-in [key :result] @mut-ret)                              @error (assoc key {:om.next/error @error}))))))))]          (cond-> (reduce step (if (nil? target) {} []) query)-           (not (or (not (nil? target)) elide-paths?)) (path-meta path query)))))))+           (and (nil? target) (not elide-paths?)) (path-meta path query)))))))"
https://api.github.com/repos/omcljs/om/pulls/761,77453231,"@@ -12,14 +12,15 @@    A query expression is composed of EDN values. The grammar for query    expressions follows: -   QueryRoot    := EdnVector(QueryExpr*)-   QueryExpr    := (EdnKeyword | IdentExpr | ParamExpr | JoinExpr)-   IdentExpr    := EdnVector2(Keyword, EdnValue)-   ParamExpr    := EdnList2(QueryExpr | EdnSymbol, ParamMapExpr)-   ParamMapExpr := EdnMap(Keyword, EdnValue)-   JoinExpr     := EdnMap((Keyword | IdentExpr), (QueryRoot | UnionExpr | RecurExpr))-   UnionExpr    := EdnMap(Keyword, QueryRoot)-   RecurExpr    := ('... | Integer)+   QueryRoot      := EdnVector(QueryExpr*)+   PlainQueryExpr := (EdnKeyword | IdentExpr | JoinExpr)"
https://api.github.com/repos/omcljs/om/pulls/767,78840835,"@@ -1827,12 +1827,13 @@                              (not= c root)                              props-change?)                     (let [update-path (path c)]-                      (loop [p (parent c)]-                        (when (some? p)-                          (let [update-path' (subvec update-path (count (path p)))]-                            (update-props! p (assoc-in (props p) update-path' next-raw-props))-                            (merge-pending-props! p)-                            (recur (parent p)))))))))))))))+                      (when-not (nil? update-path)"
https://api.github.com/repos/omcljs/om/pulls/775,79411433,"@@ -1894,16 +1894,10 @@         #{k}         (if-let [cs ((:ref->components extfs) indexes k)]           cs-          (let [cs (get-in indexes [:ref->components k] ::not-found)]-            (if-not #?(:clj  (identical? ::not-found cs)-                       :cljs (keyword-identical? ::not-found cs))-              cs-              (if (keyword? k)-                ;; TODO: more robust validation, might be bogus key-                (let [cs (get-in indexes [:prop->classes k])]-                  (transduce (map #(get-in indexes [:class->components %]))-                    (completing into) #{} cs))-                #{}))))))))+          (transduce (map #(get-in indexes [:class->components %]))+            (completing into)+            (get-in indexes [:ref->components k] #{})+            (get-in indexes [:prop->classes k])))))))"
https://api.github.com/repos/omcljs/om/pulls/859,116352287,"@@ -1023,7 +1026,9 @@ (defn build-all   ""Build a sequence of components. f is the component constructor    function, xs a sequence of values, and m a map of options the-   same as provided to om.core/build.""+   same as provided to om.core/build.+   To avoid warnings from React, please provide either :key or :key-fn"
https://api.github.com/repos/omcljs/om/pulls/873,121181982,"@@ -1,202 +1,66 @@ # Om -A [ClojureScript](http://github.com/clojure/clojurescript) interface-to [Facebook's React](http://facebook.github.io/react/).--Om allows users to represent their UIs simply as-[EDN](http://github.com/edn-format/edn). Because ClojureScript data is-immutable data, Om can always rapidly re-render the UI from the-root. Thus Om UIs are out of the box snapshotable and undoable and-these operations have no implementation complexity and little-overhead.--[See](http://swannodette.github.io/todomvc/labs/architecture-examples/om-undo/index.html)-for [yourself](http://swannodette.github.io/2013/12/31/time-travel).--## Unique Features--Om supports features not currently present in React:--* Global state management facilities built in-* Components may have arbitrary data dependencies, not limited to props & state-* Component construction can be intercepted via-  `:instrument`. Simplifies debugging components and generic editors.-* Provides stream of all application state change deltas via-  `:tx-listen`. Simplifies synchronization online and offline.-* Customizable semantics. Fine grained control over how components store-  state, even for components outside of your control. Simplifies using-  Om components outside the Om framework, debugging, and adding event-  hooks not anticipated by original component designer.+A [ClojureScript](http://github.com/clojure/clojurescript) UI framework and+client/server architecture over [Facebook's+React](http://facebook.github.io/react/). -## Tutorials--There is an in-depth tutorial that will introduce you to the core-concepts of Om-[here](http://github.com/swannodette/om/wiki/Basic-Tutorial) and a-real-world integration example-[here](http://github.com/swannodette/om/wiki/Intermediate-Tutorial). The-community maintained [om-cookbook](https://github.com/omcljs/om-cookbook)-covers many common idioms and patterns.+Om UIs are out of the box snapshotable and undoable and these operations have +no implementation complexity and little overhead. -## Examples+Om borrows ideas liberally from [Facebook's+Relay](https://facebook.github.io/relay/) and [Netflix's+Falcor](http://netflix.github.io/falcor/) with a dash of inspiration from+[Datomic pull syntax](http://docs.datomic.com/pull.html) to avoid the typical +incidental complexity that arises from client/server state management. -```clojure-(ns example-  (:require [om.core :as om]-            [om.dom :as dom]))+## Dependency Information -(defn widget [data owner]-  (reify-    om/IRender-    (render [this]-      (dom/h1 nil (:text data)))))--(om/root widget {:text ""Hello world!""}-  {:target (. js/document (getElementById ""my-app""))})-```+Latest release: 1.0.0-beta1 -The repo includes several simple examples you can build yourself. If-you view the `project.clj` you will see their build-identifiers. Assuming you have [Leiningen](http://leiningen.org/)-installed, to build an example run:+[Leiningen](http://github.com/technomancy/leiningen/) and [Boot](http://boot-clj.com) +dependency information:  ```-lein cljsbuild once <build-id>+[org.omcljs/om ""1.0.0-beta1""] ``` -Then open the corresponding `index.html` in your favorite browser.+[Maven](http://maven.apache.org) dependency information: -For a more fleshed-out example, please see the Om implementation of-[TodoMVC](http://todomvc.com)-[exists here](http://github.com/swannodette/todomvc/blob/gh-pages/labs/architecture-examples/om/src/todomvc/app.cljs).--## Documentation--There is documentation [here](http://github.com/swannodette/om/wiki/Documentation).--There is also a-[conceptual overview](http://github.com/swannodette/om/wiki/Conceptual-overview)-that we recommend reading as there are some design choices in Om that-make it quite different from other client side solutions and even-React itself.--## Reusable Components--Om emphasizes building modular and adaptable components. Some-examples:--* [om-bootstrap](https://github.com/racehub/om-bootstrap), Bootstrap 3 Om Components-* [ankha](http://github.com/noprompt/ankha), an EDN inspector view-* [om-draggable](https://github.com/sgrove/om-draggable), generic-  draggable-* [om-autocomplete](https://github.com/arosequist/om-autocomplete),-  customizable autocompleter-* [ff-om-draggable](https://github.com/neo/ff-om-draggable)-* [om-widgets](https://bitbucket.org/athieme/om-widgets)-* [om-dev-component](https://github.com/ioRekz/om-dev-component), add dev features (e.g. state history navigation) to your component-* [om-sync](http://github.com/swannodette/om-sync), keep client and-  server in sync (experimental)--## Applications built with Om--* [Project FiFo](https://blog.project-fifo.net/the-stack-we-choose-erlang-smartos-clojure/), a SmartOS cloud orchestration platform-* [Recurse Center Community](https://github.com/hackerschool/community)-* [Framed](http://www.framed.io/)-* [Netrunner](https://github.com/mtgred/netrunner)-* [CircleCI](http://www.circleci.com/), source [here](https://github.com/circleci/frontend)-* [Precursor](https://precursorapp.com)-* [Assistant](https://github.com/29decibel/assistant)-* [Fitsme](http://fitsmeapp.com)-* [Goya](http://jackschaedler.github.io/goya/), pixel editor with-  undo/redo and visual history-* [AppShare](https://github.com/zubairq/AppShare), a Clojure web framework-* [wordsmith](http://wordsmith.variadic.me), a markdown editor-* [omchaya](http://github.com/sgrove/omchaya)-* [BVCA Private Equity Map](http://bvca.clustermap.trampolinesystems.com/)-* [session](http://github.com/kovasb/session)-* [pOModoro](http://pomodoro.trevorlandau.net)-* [Dakait](http://github.com/verma/dakait), a web-based tool to manage-  downloads-* [Mega Super Mario World](http://github.com/city41/mario-review), a detailed review of the classic video game and a SNES video editor-* [Time for Coffee!](http://www.timeforcoffee.ch), a handy website to display the next departures at public transport stops in Switzerland-* [Omingard](https://omingard.5apps.com), a Solitaire-like card game. Making-of: [My Way into Clojure](http://www.railslove.com/stories/my-way-into-clojure-building-a-card-game-with-om-part-1).-* [Horizon Alpha](https://github.com/BertrandDechoux/horizon-alpha), a quick Hack and slash game using the Noob universe-* [Solari Architects](http://solariarchitects.com/), portfolio for architecture firm.  --## Using it--The current version depends on React 0.13.3.--Make sure you have [Leiningen](http://leiningen.org/) installed.--Your `project.clj` should include something like the following:--```clojure-(defproject foo ""0.1.0""-  ...-  :dependencies [[org.clojure/clojure ""1.6.0""]-                 [org.clojure/clojurescript ""0.0-2760""]-                 [org.omcljs/om ""0.9.0""]]-  ...)+```+<dependency>+  <groupId>org.omcljs</groupId>+  <artifactId>om</artifactId>+  <version>1.0.0-beta1</version>+</dependency> ``` -### React with Add-Ons--If you would rather use React with Add-Ons you can configure this-with Maven's exclusions feature:+## Example  ```clojure-(defproject foo ""0.1.0""-  ...-  :dependencies [[org.clojure/clojure ""1.6.0""]-                 [org.clojure/clojurescript ""0.0-2760""]-                 [org.omcljs/om ""0.9.0"" :exclusions [cljsjs/react]]-                 [cljsjs/react-with-addons ""0.13.3-0""]]-  ...)-```+(ns example+  (:require [om.dom :as dom]+            [om.next :as om])) -### Build configuration+(defui Widget+  om/IRender"
https://api.github.com/repos/onyx-platform/onyx/pulls/126,27234892,"@@ -17,6 +17,38 @@              [java.util.function Consumer]              [java.util.concurrent TimeUnit])) +(def max-port 50000)++(defrecord AeronPeerGroup [opts]+  component/Lifecycle+  (start [component]+    (taoensso.timbre/info ""Starting Aeron"")+    (let [media-driver (MediaDriver/launch)]+      (assoc component :media-driver media-driver)))++  (stop [{:keys [media-driver] :as component}]+    (.close media-driver)+    (assoc component :media-driver nil)))++(defn aeron-peer-group [opts]+  (map->AeronPeerGroup {:opts opts}))++(defmethod extensions/assign-site-resources :aeron"
https://api.github.com/repos/onyx-platform/onyx/pulls/227,33423076,"@@ -40,7 +40,8 @@ ARTIFACT_DIR=$CIRCLE_BUILD_NUM/$CIRCLE_NODE_INDEX/$BR""_""$1  mkdir -p log_artifact/$ARTIFACT_DIR/ -lein with-profile dev,circle-ci jammin 360 midje $files |& tee log_artifact/$ARTIFACT_DIR/stderrout.log+#lein with-profile dev,circle-ci jammin 360 midje $files |& tee log_artifact/$ARTIFACT_DIR/stderrout.log"
https://api.github.com/repos/onyx-platform/onyx/pulls/233,34042789,"@@ -94,7 +94,9 @@ (defn group-message [segment catalog task]   (let [t (find-task-fast catalog task)]     (if-let [k (:onyx/group-by-key t)]-      (hash (get segment k))+      (if (vector? k)"
https://api.github.com/repos/onyx-platform/onyx/pulls/239,34305409,"@@ -48,13 +48,11 @@  (defmethod extensions/reactions :leave-cluster   [{:keys [args]} old new diff state]-  (let [allocation (common/peer->allocated-job (:allocations old) (:id state))-        scheduler (get-in new [:task-schedulers (:job allocation)])]"
https://api.github.com/repos/onyx-platform/onyx/pulls/252,34950482,"@@ -43,11 +43,13 @@ This section specifies what a valid catalog, workflow, and flow conditions look  ##### All maps may optionally have these keys -| key name             | type       | choices              | default    |    Meaning                                                            |-|----------------------|------------|----------------------|------------|-----------------------------------------------------------------------|-|`:onyx/batch-timeout` | `integer`  | `>= 0`               | `1000`     |                                                                       |-|`:onyx/max-peers`     | `integer`  | `> 0`                |            |                                                                       |-|`:onyx/language`      | `keyword`  | `:clojure`, `:java`  | `:clojure` | Affects `:onyx/fn` and `:onyx/plugin` function and plugin resolution  |+| key name              | type       | choices              | default    |    Meaning                                                            |+|-----------------------|------------|----------------------|------------|-----------------------------------------------------------------------|+|`:onyx/batch-timeout`  | `integer`  | `>= 0`               | `1000`     |                                                                       |+|`:onyx/max-peers`      | `integer`  | `> 0`                |            |                                                                       |+|`:onyx/language`       | `keyword`  | `:clojure`, `:java`  | `:clojure` | Affects `:onyx/fn` and `:onyx/plugin` function and plugin resolution  |+|`:onyx/restart-pred-fn`| `keyword`  | `any`                |            | Keyword pointing to function taking an exception which returns        |+|                       |            |                      |            | a boolean for whether a peer is restartable following that exception  |"
https://api.github.com/repos/onyx-platform/onyx/pulls/255,35058355,"@@ -14,7 +14,7 @@  ;; Peer replica view interface -(defmulti peer-replica-view (fn [entry old new diff old-view peer-id] :default))+(defmulti peer-replica-view (fn [entry old new diff old-view peer-id opts] :default))"
https://api.github.com/repos/onyx-platform/onyx/pulls/275,37429147,"@@ -218,22 +218,28 @@   ""Blocks until job-id has had all of its tasks completed or the job is killed.    Returns true if the job completed successfully, false if the job was killed.""   ([peer-config job-id]-     (await-job-completion peer-config job-id {:monitoring :no-op}))+   (await-job-completion peer-config job-id {:monitoring :no-op}))   ([peer-config job-id monitoring-config]-     (let [job-id (validator/coerce-uuid job-id)-           client (component/start (system/onyx-client peer-config monitoring-config))-           ch (chan 100)]-       (loop [replica (extensions/subscribe-to-log (:log client) ch)]-         (let [entry (<!! ch)-               new-replica (extensions/apply-log-entry entry replica)]-           (cond (some #{job-id} (:completed-jobs new-replica))-                 (do (component/stop client)-                     true)-                 (some #{job-id} (:killed-jobs new-replica))-                 (do (component/stop client)-                     false)-                 :else -                 (recur new-replica)))))))+   (await-job-completion peer-config job-id {:monitoring :no-op} nil))+  ([peer-config job-id monitoring-config timeout-ms]+   (-> (future+         (let [job-id (validator/coerce-uuid job-id)+               client (component/start (system/onyx-client peer-config monitoring-config))+               ch (chan 100)]+           (loop [replica (extensions/subscribe-to-log (:log client) ch)]+             (let [entry (<!! ch)"
https://api.github.com/repos/onyx-platform/onyx/pulls/299,39589916,"@@ -21,6 +21,7 @@           (update-in [:allocations] dissoc job-id)           (update-in [:task-metadata] dissoc job-id)           (update-in [:ackers] dissoc job-id)+          (update-in [:task-slot-ids] dissoc job-id)"
https://api.github.com/repos/onyx-platform/onyx/pulls/304,39929916,"@@ -0,0 +1,187 @@+## Windowing and Aggregation++This section discusses a feature called windowing. Windows allow you to group and accrue data into possibly overlapping buckets.  Windows are intimately related to the Triggers feature. When you're finished reading this section, head over to the Triggers chapter next.++<!-- START doctoc generated TOC please keep comment here to allow auto update -->+<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->+**Table of Contents**  *generated with [DocToc](http://doctoc.herokuapp.com/)*++- [Summary](#summary)+- [Window Types](#window-types)+  - [Fixed Windows](#fixed-windows)+  - [Sliding Windows](#sliding-windows)+- [Units](#units)+- [Aggregation](#aggregation)+  - [`:conj`](#conj)+  - [`:count`](#count)+  - [`:sum`](#sum)+  - [`:min`](#min)+  - [`:max`](#max)+  - [`:average`](#average)+- [Window Specification](#window-specification)++<!-- END doctoc generated TOC please keep comment here to allow auto update -->++### Summary++Windowing splits up a possibly unbounded data set into finite, possibly overlapping portions. Windows allow us create aggregations over distinct portions of a stream, rather than stalling and waiting for the entire data data set to arrive. In Onyx, Windows strictly describe how data is accrued. When you want to *do* something with the windowed data, you use a Trigger. See the chapter on Triggers for more information. Onyx's windowing mechanisms are strong enough to handle stream disorder. If your data arrives in an order that isn't ""logical"" (for example, `:event-time` keys moving backwards in time), Onyx can sort out the appropriate buckets to put the data in.++### Window Types++The topic of windows has been widely explored in the literature. There are different *types* of windows. Currently, Onyx supports Fixed and Sliding windows. In the future, we will support landmark, global, and session windows. We will now explain the supported window types.++#### Fixed Windows++Fixed windows, sometimes called Tumbling windows, span a particular range and do not slide. That is, fixed windows never overlap one another. Consequently, a data point will fall into exactly one instance of a window (often called an *extent* in the literature). As it turns out, fixed windows are a special case of sliding windows where the range and slide values are equal. You can see a visual below of how this works, where the `|--|` drawings represent extents. Each window is of range `5`. Time runs horizontally, while the right-hand side features the extent bound running vertically. The first extent captures all values between 0 and 4.99999...++```text+1, 5, 10, 15, 20, 25, 30, 35, 40+|--|                                [0  - 4]+   |--|                             [5  - 9]+      |---|                         [10 - 14]+          |---|                     [15 - 19]+              |---|                 [20 - 24]+                  |---|             [25 - 29]+                      |---|         [30 - 34]+                          |---|     [35 - 39]+```++#### Sliding Windows++In contrast to fixed windows, sliding windows allow extents to overlap. When a sliding window is specified, we have to give it a range for which the window spans, and a *slide* value for how long to wait between spawning a new window extent. Every data point will fall into exactly `range / slide` number of window extents. We draw out what this looks like for a sliding window with range `15` and slide `5`:++```text+1, 5, 10, 15, 20, 25, 30, 35, 40+|---------|                         [0  - 14]+   |----------|                     [5  - 19]+      |-----------|                 [10 - 24]+          |-----------|             [15 - 29]+              |-----------|         [20 - 34]+                  |-----------|     [25 - 39]+```++### Units++Onyx allows you to specify range and slide values in different magnitudes of units, so long as the units can be coverted to the same unit in the end. For example, you can specify the range in minutes, and the slide in seconds. Any value that requires units takes a vector of two elemenets. The first element represents the value, and the second the unit. For example, window specifications denoting range and slide might look like:++```clojure+{:window/range [1 :minute]+ :window/slide [30 :seconds]}+```++See the information model for all supported units. You can use a singular form (e.g. `:minute`) instead of the plural (e.g. `:minutes`) where it makes sense for readability.++Onyx is also capable of sliding by `:elements`. This is often referred to as ""slide-by-tuple"" in research. Onyx doesn't require a time-based range and slide value. Any totally ordered value will work equivalently.++### Aggregation++Windows allow you accrete data over time. Sometimes, you want to store all the data. Othertimes you want to incrementally compact the data. Window specifications must provide a `:window/aggregation` key. We'll go over an example of every type of aggregation that Onyx supports.++#### `:conj`++The `:conj` aggregation is the simplest. It collects segments for this window and retains them in a vector, unchanged.++```clojure+{:window/id :collect-segments+ :window/task :identity+ :window/type :sliding+ :window/aggregation :conj+ :window/window-key :event-time+ :window/range [30 :minutes]+ :window/slide [5 :minutes]+ :window/doc ""Collects segments on a 30 minute window sliding every 5 minutes""}+```++#### `:count`++The `:count` operation counts the number of segments in the window.++```clojure+{:window/id :count-segments+ :window/task :identity+ :window/type :fixed+ :window/aggregation :count+ :window/window-key :event-time+ :window/range [1 :hour]+ :window/doc ""Counts segments in one hour fixed windows""}+```++#### `:sum`++The `:sum` operation adds the values of `:window/sum-key` for all segments in the window.++```clojure+{:window/id :sum-ages+ :window/task :identity+ :window/type :fixed+ :window/aggregation :sum+ :window/sum-key :age+ :window/window-key :event-time+ :window/range [1 :hour]+ :window/doc ""Adds the :age key in all segments in 1 hour fixed windows""}+```++#### `:min`++The `:min` operation retains the minimum value found for `:window/min-key`. An initial value must be supplied via `:window/init`.++```clojure+{:window/id :min-age+ :window/task :identity+ :window/type :fixed+ :window/aggregation :sum+ :window/init 100+ :window/min-key :age+ :window/window-key :event-time+ :window/range [30 :minutes]+ :window/doc ""Finds the minimum :age in 30 minute fixed windows, default is 100""}+```++#### `:max`++The `:max` operation retains the maximum value found for `:window/max-key`. An initial value must be supplied via `:window/init`.++```clojure+{:window/id :max-age+ :window/task :identity+ :window/type :fixed+ :window/aggregation :sum+ :window/init 0+ :window/max-key :age+ :window/window-key :event-time+ :window/range [30 :minutes]+ :window/doc ""Finds the maximum :age in 30 minute fixed windows, default is 0""}+```++#### `:average`++The `:average` operation maintains an average over `:window/average-key`. An initial value must be supplied via `:window/init`. The state is maintained as a map with two keys - `:n`, the number of elements, and `:average`, the running average.++```clojure+{:window/id :max-age+ :window/task :identity+ :window/type :fixed+ :window/aggregation :sum+ :window/init 0+ :window/max-key :age+ :window/window-key :event-time+ :window/range [30 :minutes]+ :window/doc ""Finds the maximum :age in 30 minute fixed windows, default is 0""}+```++### Window Specification++See the Information Model chapter for an exact specification of what values the Window maps need to supply. Here we will describe what each of the keys mean.++| key name             |description+|----------------------|-----------+|`:window/id`          | A unique identifier per window+|`:window/task`        | The workflow task over which the window operates+|`:window/type`        | Which type of window this is (fixed, sliding, etc)+|`:window/aggregation` | The aggregation function to apply, as described above+|`:window/window-key`  | The key over which range "
https://api.github.com/repos/onyx-platform/onyx/pulls/330,41585447,"@@ -185,12 +195,21 @@    (s/optional-key :onyx.peer/retry-start-interval) s/Int    (s/optional-key :onyx.peer/join-failure-back-off) s/Int    (s/optional-key :onyx.peer/drained-back-off) s/Int-   (s/optional-key :onyx.peer/peer-not-ready-back-off) s/Int    (s/optional-key :onyx.peer/job-not-ready-back-off) s/Int+   (s/optional-key :onyx.peer/peer-not-ready-back-off) s/Int    (s/optional-key :onyx.peer/fn-params) s/Any    (s/optional-key :onyx.peer/backpressure-check-interval) s/Int    (s/optional-key :onyx.peer/backpressure-low-water-pct) s/Int    (s/optional-key :onyx.peer/backpressure-high-water-pct) s/Int+   (s/optional-key :onyx.peer/state-log-impl) StateLogImpl+   (s/optional-key :onyx.peer/state-filter-impl) StateFilterImpl+   (s/optional-key :onyx.bookkeeper/starting-port) s/Int"
https://api.github.com/repos/onyx-platform/onyx/pulls/350,43135079,"@@ -59,5 +59,8 @@   (loop [jobs* jobs n* n]     (if (zero? n*)       jobs*-      (recur (update-in jobs* [(select-job-requiring-peer replica jobs*)] inc)-             (dec n*)))))+      (let [job (select-job-requiring-peer replica jobs*)]+        (if job"
https://api.github.com/repos/onyx-platform/onyx/pulls/373,44284306,"@@ -394,14 +394,21 @@                                             window-id-state (get window-state window-id)                                             [window-id-state' window-entries] (window-state-updates segment window-id-state window event grouping-fn)                                             window-state' (assoc window-state window-id window-id-state')]-                                        (list window-state' -                                              (conj log-entries window-entries))))+                                        (list window-state' (conj log-entries window-entries))))                                     (list (:state @window-state) [unique-id])                                     windows)]                         (state-extensions/store-log-entry state-log event ack-fn full-log-entry)                         (swap! window-state assoc :state new-window-state))-                      (doseq [t triggers]-                        (triggers/fire-trigger! event window-state t {:segment segment :context :new-segment})))+                      (let [trigger-entries+                            (reduce+                             (fn [entries t]+                               (concat"
https://api.github.com/repos/onyx-platform/onyx/pulls/388,44853667,"@@ -169,7 +179,6 @@  (defn get-publication [messenger {:keys [channel] :as conn-info}]   ;; FIXME, race condition may cause two publications to be created"
https://api.github.com/repos/onyx-platform/onyx/pulls/436,47317864,"@@ -520,7 +520,7 @@           (:onyx.core/triggers event)))  (defn handle-exception [log restart-pred-fn e restart-ch outbox-ch job-id]-  (warn e)+  (warn e ""task-lifecycle: handle-exception"")"
https://api.github.com/repos/onyx-platform/onyx/pulls/477,49329783,"@@ -38,6 +38,12 @@    :flow/from (gen/return from-task)    :flow/exclude-keys (gen-sized-vector))) +;(defn flow-short-circuit-condition-gen [from-task]"
https://api.github.com/repos/onyx-platform/onyx/pulls/526,52611929,"@@ -93,10 +93,25 @@             :args {:observer (:subject diff)}}])))  (s/defmethod extensions/fire-side-effects! :prepare-join-cluster :- State-  [{:keys [args message-id]} :- LogEntry old new diff {:keys [monitoring] :as state}]+  [{:keys [args message-id]} :- LogEntry old new diff {:keys [log monitoring] :as state}]   (common/start-new-lifecycle    old new diff-   (cond (= (:id state) (:observer diff))+   (cond ;; Handles the cases where all peers are actually dead.+         ;; This can happen if a single node cluster comes down+         ;; and is rebooted. We pick a predictably-random peer+         ;; and knock it down if it's not up. This garuntees"
https://api.github.com/repos/onyx-platform/onyx/pulls/533,53571166,"@@ -380,18 +380,45 @@                                :type :function                                :optional? true                                :added ""0.8.0""}-            :aggregation/fn {:doc ""Fn (state, window, segment) to generate a serializable state machine update.""-                             :type :function-                             :optional? false-                             :added ""0.8.0""}-            :aggregation/apply-state-update {:doc ""Fn (state, entry) to apply state machine update entry to a state.""+            :aggregation/create-state-update {:doc ""Fn (window, state, segment) to generate a serializable state machine update.""+                                              :type :function+                                              :optional? false+                                              :added ""0.8.0""}"
https://api.github.com/repos/onyx-platform/onyx/pulls/555,56770062,"@@ -620,3 +607,102 @@  (def State   {s/Any s/Any})++(declare lookup-schema)++(defn type->schema [t]+  (if (sequential? t)+    (mapv lookup-schema t)+    (lookup-schema t)))++(defn information-model->schema [information]+  (let [model-type (:type information)+        model (:model information)] +    (if model +      (reduce (fn [m [k km]]+                (let [optional? (:optional? km)+                      schema-value (if-let [choices (:choices km)] +                                     (apply s/enum choices)+                                     (type->schema (:type km)))]+                  (case model-type+                    :record (assoc m +                                   k+                                   (if optional? (s/maybe schema-value) schema-value))++                    :map (assoc m +                                (if optional? (s/optional-key k) k)+                                schema-value))))+              {}+              model))))++(s/defn lookup-schema [k]+  (let [base-phase {:integer s/Num+                    :boolean s/Bool+                    :keyword s/Keyword+                    :any s/Any+                    :segment s/Any+                    :peer-config PeerConfig+                    :catalog-entry TaskMap+                    :window-entry Window+                    :trigger-entry Trigger+                    :lifecycle-entry Lifecycle+                    :workflow Workflow+                    :uuid s/Uuid+                    :flow-conditions-entry FlowCondition+                    :job-metadata {s/Any s/Any}+                    :function Function+                    :string s/Str+                    ;; To further restrict in the future+                    :results s/Any+                    :replica-atom s/Any+                    :peer-replica-view-atom s/Any+                    :windows-state-atom s/Any+                    :map {s/Any s/Any}+                    :serialized-task s/Any+                    :channel s/Any+                    :record s/Any+                    :peer-state-atom s/Any}]+    (or (base-phase k)+        (information-model->schema (i/model k))+        (throw (Exception. (format ""Unable to lookup schema for type %s."" k))))))++(def StateEvent +  (-> (information-model->schema (i/model :state-event))+      (assoc s/Any s/Any)))++(def WindowState+  (s/constrained+   {:window-extension WindowExtension+    :trigger-states [TriggerState]+    :window Window+    :state {s/Any s/Any}+    :state-event (s/maybe StateEvent)+    :event-results [StateEvent]+    :init-fn Function+    :create-state-update Function+    :apply-state-update Function+    :super-agg-fn (s/maybe Function)+    (s/optional-key :new-window-state-fn) Function+    (s/optional-key :grouping-fn) (s/cond-pre s/Keyword Function)}+   record? 'record?))++(def Event+  (-> (information-model->schema (i/model :event-map))+      (assoc (restricted-ns :onyx.core) s/Any)))++(def WindowState"
https://api.github.com/repos/onyx-platform/onyx/pulls/582,61667794,"@@ -145,40 +145,52 @@         args (add-percentages-to-log-entry config job args tasks (:catalog job) id)]     (create-log-entry :submit-job args))) +(defn validate-submission [job peer-client-config]+  (try+    (validator/validate-peer-client-config peer-client-config)+    (validator/validate-job job)+    (validator/validate-flow-conditions job)"
https://api.github.com/repos/onyx-platform/onyx/pulls/575,61968820,"@@ -9,17 +9,33 @@    :windows [os/Window]    :flow-conditions [os/FlowCondition]}) +(defn vector-map-merge [schema base-schema]+  [(merge (first schema) (or (:schema (first base-schema))+                             (first base-schema)))])++(defn compose-schemas [{:keys [task schema]} base-schema]+  (let [{:keys [task-map lifecycles+                triggers windows+                flow-conditions]} schema]+    (-> schema+        (update :task-map os/UniqueTaskMap)+        (update :lifecycles vector-map-merge      (:lifecycles base-schema))+        (update :triggers vector-map-merge        (:triggers base-schema))+        (update :windows vector-map-merge         (:windows base-schema))+        (update :flow-conditions vector-map-merge (:flow-conditions base-schema))+        (select-keys (keys task)))))+ (s/defn ^:always-validate add-task :- os/Job   ""Adds a task's task-definition to a job""   ([job task-definition & behaviors]    (add-task job (reduce (fn [acc f] (f acc))task-definition behaviors)))   ([{:keys [lifecycles triggers windows flow-conditions] :as job}     {:keys [task schema] :as task-definition}]-   (merge-with s/validate schema task)-   (merge-with s/validate base-schemas task)-   (cond-> job-     true (update :catalog conj (:task-map task))-     lifecycles (update :lifecycles into (:lifecycles task))-     triggers (update :triggers into (:triggers task))-     windows (update :windows into (:windows task))-     flow-conditions (update :flow-conditions into (:flow-conditions task)))))+   (let [composed-schema (compose-schemas task-definition base-schemas)]+     (s/validate composed-schema task)+     (cond-> job+       true (update :catalog conj (:task-map task))"
https://api.github.com/repos/onyx-platform/onyx/pulls/598,68175874,"@@ -167,34 +165,61 @@               :else (throw t))         (throw t))))) +(defn ^{:no-doc true} hash-job [job]+  ;; Sort the keys of the job to get a consistent hash+  ;; in case the keys are in a different order.+  (let [sorted-job (into (sorted-map) job)+        md (MessageDigest/getInstance ""SHA-256"")]+    (.update md (.getBytes (pr-str sorted-job) ""UTF-8""))+    (let [digest (.digest md)]+      (apply str (map #(format ""%x"" %) digest)))))++(defn ^{:no-doc true} serialize-job-to-zookeeper [client id job tasks entry]+  (extensions/write-chunk (:log client) :catalog (:catalog job) id)+  (extensions/write-chunk (:log client) :workflow (:workflow job) id)+  (extensions/write-chunk (:log client) :flow-conditions (:flow-conditions job) id)+  (extensions/write-chunk (:log client) :lifecycles (:lifecycles job) id)+  (extensions/write-chunk (:log client) :windows (:windows job) id)+  (extensions/write-chunk (:log client) :triggers (:triggers job) id)+  (extensions/write-chunk (:log client) :job-metadata (:metadata job) id)++  (doseq [task tasks]+    (extensions/write-chunk (:log client) :task task id))+  (extensions/write-log-entry (:log client) entry)+  (component/stop client)+  {:success? true+   :job-id id})+ (defn ^{:added ""0.6.0""} submit-job   ""Takes a peer configuration, job map, and optional monitoring config,-   sending the job to the cluster for eventual execution.""+   sending the job to the cluster for eventual execution. Returns a map+   with :success? indicating if the job was submitted to ZooKeeper. The job map+   may contain a :metadata key, among other keys described in the user+   guide. The :metadata key may optionally supply a :job-id value. Repeated+   submissions of a job with the same :job-id will be treated as an idempotent+   action. If a job has been submitted more than once, the original task IDs+   associated with the catalog will be returned, and the job will not run again,+   even if it has been killed or completed. It is undefined behavior to submit+   two jobs with the same :job-id metadata whose :workflow, :catalog,+   :flow-conditions,etc are not equal.""   ([peer-client-config job]    (submit-job peer-client-config job {:monitoring :no-op}))   ([peer-client-config job monitoring-config]    (let [result (validate-submission job peer-client-config)]      (if (:success? result)-       (let [id (java.util.UUID/randomUUID)+       (let [job (update-in job [:metadata :job-id] #(or % (UUID/randomUUID)))+             job-hash (hash-job job)+             id (get-in job [:metadata :job-id])              tasks (planning/discover-tasks (:catalog job) (:workflow job))              entry (create-submit-job-entry id peer-client-config job tasks)-             client (component/start (system/onyx-client peer-client-config monitoring-config))]-         (extensions/write-chunk (:log client) :catalog (:catalog job) id)-         (extensions/write-chunk (:log client) :workflow (:workflow job) id)-         (extensions/write-chunk (:log client) :flow-conditions (:flow-conditions job) id)-         (extensions/write-chunk (:log client) :lifecycles (:lifecycles job) id)-         (extensions/write-chunk (:log client) :windows (:windows job) id)-         (extensions/write-chunk (:log client) :triggers (:triggers job) id)-         (extensions/write-chunk (:log client) :job-metadata (:metadata job) id)--         (doseq [task tasks]-           (extensions/write-chunk (:log client) :task task id))--         (extensions/write-log-entry (:log client) entry)-         (component/stop client)-         {:success? true-          :job-id id-          :task-ids (zipmap (map :name tasks) tasks)})+             client (component/start (system/onyx-client peer-client-config monitoring-config))+             status (extensions/write-chunk (:log client) :job-hash job-hash id)]+         (if status+           (serialize-job-to-zookeeper client id job tasks entry)+           (let [written-hash (extensions/read-chunk (:log client) :job-hash id)]+             (if (= written-hash job-hash)+               (serialize-job-to-zookeeper client id job tasks entry)+               {:success? false}))))"
https://api.github.com/repos/onyx-platform/onyx/pulls/613,69676853,"@@ -4,71 +4,80 @@             [onyx.log.zookeeper :as ozk]             [onyx.static.default-vals :refer [arg-or-default]]             [taoensso.timbre :refer [error info warn]])-  (:import java.io.File-           org.apache.bookkeeper.bookie.Bookie-           org.apache.bookkeeper.conf.ServerConfiguration-           org.apache.bookkeeper.proto.BookieServer-           org.apache.commons.io.FileUtils+  (:import [java.io File]+           [org.apache.bookkeeper.bookie Bookie BookieException$InvalidCookieException]+           [org.apache.bookkeeper.conf ServerConfiguration]+           [org.apache.bookkeeper.proto BookieServer]+           [org.apache.commons.io FileUtils]            [org.apache.zookeeper KeeperException$NodeExistsException]))  (defn cleanup-dir [dir]   (FileUtils/deleteDirectory (File. ^String dir))) +(defn format-bk-server+  ""Delete journal/ledger directories and removes corresponding cookie in Zookeeper""+  [server-conf zk-conn]+  (let [journal-dir (str (.getJournalDirName server-conf))+        ledger-dir (str (first (.getLedgerDirNames server-conf)))+        cookie-path (format ""%s/cookies/%s""+                            (.getZkLedgersRootPath server-conf)+                            (Bookie/getBookieAddress server-conf))]+    (info ""Deleting Bookie cookie"" cookie-path)+    (zk/delete zk-conn cookie-path)+    (info ""Deleting Bookie dirs"" journal-dir "";"" ledger-dir)+    (cleanup-dir journal-dir)+    (cleanup-dir ledger-dir)))+ (defrecord BookieComponent [env-config port log]   component/Lifecycle   (start [component]-    (let [onyx-id (:onyx/tenancy-id env-config)-          ledgers-root-path (ozk/ledgers-path onyx-id)-          ledgers-available-path (ozk/ledgers-available-path onyx-id)-          _ (zk/create (:conn log) ledgers-root-path :persistent? true)-          _ (zk/create (:conn log) ledgers-available-path :persistent? true)-          base-journal-dir (arg-or-default :onyx.bookkeeper/base-journal-dir env-config)-          base-ledger-dir (arg-or-default :onyx.bookkeeper/base-ledger-dir env-config)-          ;; allow loopback? only if running a local quorum-          allow-loopback? (boolean (arg-or-default :onyx.bookkeeper/local-quorum? env-config))-          disk-usage-threshold (arg-or-default :onyx.bookkeeper/disk-usage-threshold env-config)-          disk-usage-warn-threshold (arg-or-default :onyx.bookkeeper/disk-usage-warn-threshold env-config)-          server-id (str onyx-id ""_"" port)-          journal-dir (str base-journal-dir ""/"" server-id)-          ledger-dir (str base-ledger-dir ""/"" server-id)-          server-conf (doto (ServerConfiguration.)-                        (.setZkServers (:zookeeper/address env-config))-                        (.setZkLedgersRootPath ledgers-root-path)-                        (.setBookiePort port)-                        (.setJournalDirName journal-dir)-                        (.setLedgerDirNames (into-array String [ledger-dir]))-                        (.setAllowLoopback allow-loopback?)-                        (.setDiskUsageThreshold disk-usage-threshold)-                        (.setDiskUsageWarnThreshold disk-usage-warn-threshold))-          server (try (BookieServer. server-conf)-                      (catch Exception e-                        (if (instance? KeeperException$NodeExistsException (.getCause e))-                          (let [cookie-path (format ""%s/cookies/%s""-                                                    ledgers-root-path-                                                    (Bookie/getBookieAddress server-conf))]-                            (info ""Deleting existing Bookie cookie"" cookie-path)-                            (zk/delete (:conn log) cookie-path)-                            (BookieServer. server-conf))-                          (throw e))))]-      (info ""Starting BookKeeper server on port"" port)-      (.start ^BookieServer server)-      (when (:onyx.bookkeeper/delete-server-data? env-config)-        (.addShutdownHook (Runtime/getRuntime)-                          (Thread. (fn []-                                     (cleanup-dir base-ledger-dir)-                                     (cleanup-dir base-journal-dir)))))-      (assoc component-             :server server-             :port port-             :journal-dir journal-dir-             :ledger-dir ledger-dir)))+    (try+      (let [onyx-id (:onyx/tenancy-id env-config)+            ledgers-root-path (ozk/ledgers-path onyx-id)+            ledgers-available-path (ozk/ledgers-available-path onyx-id)+            _ (zk/create (:conn log) ledgers-root-path :persistent? true)+            _ (zk/create (:conn log) ledgers-available-path :persistent? true)+            base-journal-dir (arg-or-default :onyx.bookkeeper/base-journal-dir env-config)+            base-ledger-dir (arg-or-default :onyx.bookkeeper/base-ledger-dir env-config)+            ;; allow loopback? only if running a local quorum+            allow-loopback? (boolean (arg-or-default :onyx.bookkeeper/local-quorum? env-config))+            disk-usage-threshold (arg-or-default :onyx.bookkeeper/disk-usage-threshold env-config)+            disk-usage-warn-threshold (arg-or-default :onyx.bookkeeper/disk-usage-warn-threshold env-config)+            server-id (str onyx-id ""_"" port)+            journal-dir (str base-journal-dir ""/"" server-id)+            ledger-dir (str base-ledger-dir ""/"" server-id)+            server-conf (doto (ServerConfiguration.)+                          (.setZkServers (:zookeeper/address env-config))+                          (.setZkLedgersRootPath ledgers-root-path)+                          (.setBookiePort port)+                          (.setJournalDirName journal-dir)+                          (.setLedgerDirNames (into-array String [ledger-dir]))+                          (.setAllowLoopback allow-loopback?)+                          (.setDiskUsageThreshold disk-usage-threshold)+                          (.setDiskUsageWarnThreshold disk-usage-warn-threshold))+            server (BookieServer. server-conf)]+        (info ""Starting BookKeeper server on port"" port)+        (info ""Creating Bookie dirs"" journal-dir "";"" ledger-dir)+        (.start ^BookieServer server)+        (assoc component+               :server server+               :server-conf server-conf+               :port port))+      (catch Exception e+        (if (or (instance? BookieException$InvalidCookieException (.getCause e))+                (instance? KeeperException$NodeExistsException (.getCause e)))+          (throw (ex-info ""The Bookie server failed to start because a cookie or+                           ledger already exists for this host. Set+                           :onyx.bookkeeper/delete-server-data? true to format+                           the Bookie environment on startup.""))"
https://api.github.com/repos/onyx-platform/onyx/pulls/747,108271579,"@@ -75,6 +82,7 @@     (let [error-handler (reify ErrorHandler                           (onError [this x]                              (reset! error x)+                            (info ""error"" x)"
https://api.github.com/repos/onyx-platform/onyx/pulls/783,117068319,"@@ -56,19 +56,18 @@    (->Route #{} #{} nil nil nil)    compiled-flow-conditions)) -(defn route-data [{:keys [egress-tasks compiled-ex-fcs compiled-norm-fcs onyx.core/task-id"
https://api.github.com/repos/onyx-platform/onyx/pulls/800,137117685,"@@ -203,7 +203,7 @@           metadata-bs (checkpoint-compress {:state-indexes (ws/state-indices event)})           _ (cpenc/set-schema-version checkpoint-encoder 0)           _ (cpenc/set-metadata checkpoint-encoder metadata-bs)-          exported-state (db/export (get-state-store state) checkpoint-encoder) +          _ (db/export (get-state-store state) checkpoint-encoder) "
https://api.github.com/repos/onyx-platform/onyx/pulls/805,144727324,"@@ -304,14 +304,21 @@                    :added ""0.8.0""}                    :onyx/fn-                  {:doc ""A fully qualified, namespaced keyword that points to a function on the classpath. This function takes at least one argument - an incoming segment, and returns either a segment or a vector of segments. This function may not return `nil`. This function can be parameterized further through a variety of techniques.""+                  {:doc ""A function to transform a segment into another segment. A fully qualified, namespaced keyword that points to a function on the classpath. This function takes at least one argument - an incoming segment, and returns either a segment or a vector of segments. This function may not return `nil`. This function can be parameterized further through a variety of techniques.""                    :type :keyword                    :tags [:function]                    :required-when [""`:onyx/type` is set to `:function`""]                    :optionally-allowed-when [""`:onyx/type` is set to `:input`""                                              ""`:onyx/type` is set to `:output`""]                    :added ""0.8.0""} +                  :onyx/assign-watermark-fn+                  {:doc ""A function to assign a watermark to a datasource by inspecting a segment read from that datasource. Should return the numbers of milliseconds since epoch. Missing watermarks will be ignored. A fully qualified, namespaced keyword that points to a function on the classpath. ""+                   :type :keyword+                   :tags [:function]"
https://api.github.com/repos/onyx-platform/onyx/pulls/857,184855798,"@@ -122,7 +122,6 @@   (map->AbsCoreAsyncReader {:event event                             :chan (:core.async/chan event)                              :completed? (atom false)-                            :watermark (atom nil)"
https://api.github.com/repos/onyx-platform/onyx/pulls/858,184860121,"@@ -118,7 +118,7 @@ Feeling impatient? Hit the ground running ASAP with the [onyx-starter repo](http  ### API Docs 0.12.8-SNAPSHOT -Code level API documentation [can be found here](http://www.onyxplatform.org/docs/api/0.12.8-SNAPSHOT)."
https://api.github.com/repos/originrose/cortex/pulls/49,91752346,"@@ -5,7 +5,33 @@             :url ""http://www.eclipse.org/legal/epl-v10.html""}   :dependencies [[org.clojure/clojure ""1.8.0""]                  [thinktopic/cortex.suite ""0.3.1-SNAPSHOT""]-                 ;;If you have cuda-8.0 installed then add this:-                 [thinktopic/gpu-compute ""0.3.1-SNAPSHOT""]]+                 ;;Default way of displaying anything is a web page.+                 ;;Because if you want to train on aws (which you should)+                 ;;you need to get simple servers up and running easily.+                 [thinktopic/think.gate ""0.1.1-SNAPSHOT""]"
https://api.github.com/repos/originrose/cortex/pulls/77,97318935,"@@ -1,9 +1,20 @@ (ns suite-classification.main+  (:require  [clojure.tools.cli :refer  [parse-opts]])   (:gen-class)) +(def cli-options"
https://api.github.com/repos/originrose/cortex/pulls/136,111574378,"@@ -45,15 +45,11 @@ Furthermore infer should be both wrapped in a resource context and completely re (defn- execute-loss-term   ""Execute a loss term.  This uses the context to find node and loss parameters.""   [graph loss-term inference-maps dataset-maps]-  (when-not (= (count inference-maps)"
https://api.github.com/repos/originrose/cortex/pulls/143,112768196,"@@ -0,0 +1,10 @@+(defproject docker ""0.1.0-SNAPSHOT""+  :description ""A simple example of how to run a cortex application in a docker container.""+  :dependencies [[org.clojure/clojure ""1.8.0""]+                 [thinktopic/cortex ""0.9.0-SNAPSHOT""]"
https://api.github.com/repos/originrose/cortex/pulls/141,112780498,"@@ -0,0 +1,20 @@+(defproject mnist-classification ""0.9.4-SNAPSHOT""+  :description ""An example of using experiment/classification on mnist.""+  :dependencies [[org.clojure/clojure ""1.8.0""]+                 [thinktopic/experiment ""0.9.4-SNAPSHOT""]"
https://api.github.com/repos/originrose/cortex/pulls/162,114358078,"@@ -24,27 +24,28 @@  (defn- image->observation-data   ""Create an observation from input.""-  [image datatype image-aug-fn]+  [image datatype colorspace image-aug-fn]   (patch/image->patch (if image-aug-fn                         (image-aug-fn image)                         image)                       :datatype datatype-                      :colorspace :gray))+                      :colorspace colorspace))   (defn- file->observation   ""Given a file, returns an observation map (an element of a dataset).""-  [image-aug-fn datatype num-classes ^File file]+  [image-aug-fn datatype colorspace num-classes ^File file]"
https://api.github.com/repos/originrose/cortex/pulls/169,119209486,"@@ -188,18 +192,26 @@                                     (count test-ds)))         best-network? (or (nil? old-classification-accuracy)                           (> (double classification-accuracy)-                             (double old-classification-accuracy)))]+                             (double old-classification-accuracy)))+        updated-network (if best-network?+                          (let [best-network+                            (assoc new-network +                              :classification-accuracy classification-accuracy)]+                            (reset-confusion-matrix confusion-matrix-atom+                                                    observation->img-fn+                                                    class-mapping+                                                    {:labels labels+                                                    :test-ds test-ds})+                            (experiment-train/save-network best-network network-filename))+                            ;;seems dicey. if not the best-network, "
https://api.github.com/repos/originrose/cortex/pulls/172,119212988,"@@ -45,5 +45,5 @@         input-data [{:data [5000.0 10.0]} {:data [5.0 100000.0]}]         [[should-def] [shouldnt-def]] (->> (execute/run trained-network input-data)                                            (map :labels))]-    (is (> should-def 0.97))+    (is (> should-def 0.96))"
https://api.github.com/repos/originrose/cortex/pulls/188,126240797,"@@ -6,6 +6,39 @@   (:import [java.io File]))  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+;; Data encoding utils++(defn label->one-hot+  ""Given a vector of class-names and a label, return a one-hot vector based on+  the position in class-names.+  E.g.  (label->vec [:a :b :c :d] :b) => [0 1 0 0]""+  [class-names label]+  (let [num-classes (count class-names)"
https://api.github.com/repos/originrose/cortex/pulls/190,127612148,"@@ -10,7 +10,7 @@                  [thinktopic/think.gate ""0.1.3""]                  ;;This had better precisely match the version of figwheel that think.gate uses                  ;;Tried with 1.9.XXX and had odd unexplainable failures."
https://api.github.com/repos/originrose/cortex/pulls/193,129085127,"@@ -0,0 +1,6 @@+(defproject learn-cortex ""0.0.1-SNAPSHOT"""
https://api.github.com/repos/originrose/cortex/pulls/241,146433705,"@@ -259,7 +259,42 @@     (* 4 batch-size vals-per-batch)))  -(defn -main+(defn train-again+  ""incrementally improve upon the trained model""   [& [batch-size]]-  (train (when batch-size-           (Integer/parseInt batch-size))))+  (let [batch-size (or batch-size 32)+        epoch-size 4096+        network (util/read-nippy-file ""trained-network.nippy"")]+    (println ""training using batch size of"" batch-size)+    (train/train-n network"
https://api.github.com/repos/originrose/cortex/pulls/244,147588114,"@@ -3,18 +3,18 @@ cortex protocols around nn layers and provide some implementation of their respective types in order to ease the implementation burden across backends and ensure as much of a unified implementation as possible.""-  (:require [cortex.compute.nn.backend :as nn-backend]"
https://api.github.com/repos/overtone/overtone/pulls/69,1352919,"@@ -69,6 +69,15 @@   (let [pivot (or pivot (first notes))]     (for [n notes] (- pivot (- n pivot))))) +(defn find-name+  ""Returnd the name of the first matching thing found in things+  or nil if not found""+  ([thing things]+     (if (= (val (first things)) thing)+       (key (first things))+       (if (< 1 (count things))+         (find-name thing (rest things))))))"
https://api.github.com/repos/overtone/overtone/pulls/301,18125598,"@@ -11,7 +11,7 @@ ;; a low tone. (defsynth kick [amp 0.5 decay 0.6 freq 65]   (let [env (env-gen (perc 0 decay) 1 1 0 1 FREE)-        snd (sin-osc freq (* Math/PI 0.5) amp)]+        snd (sin-osc freq (* Math/PI 0.5))]     (out 0 (pan2 (* snd env) 0))))"
https://api.github.com/repos/overtone/overtone/pulls/407,181165280,"@@ -85,9 +86,18 @@                       ; sound).                       :finished {}})         sustain* (atom 0)+        pitch-bend* (atom 0)         on-id (keyword (gensym ""on-handler""))         off-id (keyword (gensym ""off-handler""))-        cc-id (keyword (gensym ""cc-handler""))]+        cc-id (keyword (gensym ""cc-handler""))+        pitch-bend-id (keyword (gensym ""pitch-bend-handler""))+        bytes-to-short (fn [b1 b2]+                         (let [bb (. ByteBuffer allocate 2)"
https://api.github.com/repos/overtone/overtone/pulls/493,982245942,"@@ -10,9 +10,14 @@   (when-not (valid-synth-node-pos pos)     (throw (IllegalArgumentException. (str ""Invalid synth node target. Was expecting one of "" valid-synth-node-pos "", found: "" pos))))) +(def ^:dynamic *target-pos* nil)"
https://api.github.com/repos/pedestal/pedestal/pulls/57,4173584,"@@ -1 +1,55 @@-Thanks for your interest! [See here](http://pedestal.io/#contribute) for more information.+# Contributing to Pedestal++Wow, thanks for your interest in helping out with Pedestal. Let this document serve as your guide.++## Collaborative Hammock Time++Pedestal is the thinking persons framework, so every contribution starts with+some *deeeep* thought. Finished?++Alright, your next step is to start a discussion.++Create an [issue](https://github.com/pedestal/pedestal/issues/new) or email+[pedestal-dev@googlegroups.com](mailto:pedestal-dev@googlegroups.com) to start+a conversation. Tell us what you're trying to accomplish and how you think you+might do it. If all is well, we'll probably give you the :thumbsup: to+start developing.++### Bugs++Of course, if you run into any straight-up bugs or weirdness feel free to skip+the thinking (or at least too much of it) and immediately submit an+[issue](https://github.com/pedestal/pedestal/issues/new).++At minimum include details about the platform you are running and steps to+reproduce--you know we're going to ask. Even better, include a link to a gist"
https://api.github.com/repos/pedestal/pedestal/pulls/92,5951782,"@@ -0,0 +1 @@+{:a {}}"
https://api.github.com/repos/pedestal/pedestal/pulls/203,6350091,"@@ -12,7 +12,8 @@ (ns io.pedestal.app-tools.build   (:use [io.pedestal.app-tools.compile.config :only [cljs-compilation-options]]         [io.pedestal.app-tools.host-page :only [application-host]]-        [io.pedestal.app.templates :only [load-html html-dependencies]])+        [io.pedestal.app.templates :only [load-html html-dependencies html-parse render]]+        [net.cgrand.enlive-html])"
https://api.github.com/repos/pedestal/pedestal/pulls/208,6357085,"@@ -1,16 +1,9 @@-# Pedestal Application template+# Pedestal Application Template  Generate a new Pedestal Application. - ## Usage"
https://api.github.com/repos/pedestal/pedestal/pulls/216,6637594,"@@ -143,6 +162,14 @@          (servlet/servlet :service service-fn)))  (defn create-servlet+  ""Creates a servlet given an options map with keyword keys prefixed by namespace e.g.+  :io.pedestal.service.http/interceptors or bootstrap/interceptors if the namespace is aliased to bootstrap."
https://api.github.com/repos/pedestal/pedestal/pulls/219,6870071,"@@ -15,15 +14,8 @@   :min-lein-version ""2.0.0""   :resource-paths [""config"", ""resources""]   :aliases {""run-dev"" [""trampoline"" ""run"" ""-m"" ""{{namespace}}.server/run-dev""]}-  :repl-options  {:init-ns user-                  :init (try-                          (use 'io.pedestal.service-tools.dev)-                          (require '{{namespace}}.service)-                          ;; Nasty trick to get around being unable to reference non-clojure.core symbols in :init-                          (eval '(init {{namespace}}.service/service #'{{namespace}}.service/routes))-                          (catch Throwable t-                            (println ""ERROR: There was a problem loading io.pedestal.service-tools.dev"")-                            (clojure.stacktrace/print-stack-trace t)-                            (println)))-                  :welcome (println ""Welcome to pedestal-service! Run (tools-help) to see a list of useful functions."")}+  :profiles {:dev {:resource-paths [""dev""]+                   :dependencies [[io.pedestal/pedestal.service-tools ""0.2.2-SNAPSHOT""]]"
https://api.github.com/repos/pedestal/pedestal/pulls/228,7051588,"@@ -90,6 +92,8 @@       response)))  (interceptor/defon-response json-body+  ""Sets the content-type headers and converts the body to JSON if there's no content type and the+  body is true for coll? i.e. is a map, vector or list. It uses Cheshire to generate the JSON body."""
https://api.github.com/repos/pedestal/pedestal/pulls/239,8408066,"@@ -32,7 +32,7 @@         ""builds change index map out of one normal and two overlapping (same data-field) single fields"")))  (def dtfn-test-nodes-  (enlive/html-snippet ""<li template='todo'>+  (enlive/html-snippet ""<li template='todo' field='id:line-item-id,accesskey:access-key'>"
https://api.github.com/repos/pedestal/pedestal/pulls/267,15147151,"@@ -65,12 +65,15 @@   java.io.File   (default-content-type [_] ""application/octet-stream"")   (write-body-to-stream [file output-stream]-    (io/copy file output-stream))+    (let [^File f file]"
https://api.github.com/repos/pedestal/pedestal/pulls/288,20145507,"@@ -49,58 +46,44 @@  ;; We default in 'Stranger' so users visiting the service can see the ;; behavior of the service when no session data is present.-(defhandler hello+(defn hello   ""Look up the name for this http session, if present greet the user-  by their name. If not, greet the user as stranger.""+   by their name. If not, greet the user as stranger.""   [req]-  (let [name (or (-> req-                     :session-                     :name)+  (let [name (or (get-in req [:session :name])                   ""Stranger"")]-    (html-response (str ""<html><body><h1>Hello, "" name ""!</h1></body></html>""))))+    (html-response (str ""<html><body><h1>Hello, "" name ""!</h1></body></html>\n""))))+  ;; Two notes: -;; 1: You can create a session interceptor without specifying a store,-;; in which case the interceptor will store the session data nowhere-;; and it will be about as useful as not having it in the first-;; place. Storing session data requires specifying the session store.+;; 1. Storing session data requires specifying the session store+;; in the map. (e.g. `{:store (cookie/cookie-store)}` If :store+;; is not specified, the session data will not be stored.  ;; 2: In this example code we do not specify the secret with which the ;; session data is encrypted prior to being sent back to the-;; browser. This has two consequences, the first being that we need to-;; use the same interceptor instance throughout the service so that the-;; session data is readable and writable to all paths. The second-;; consequence is that session data will become unrecoverable when the-;; server process is ended. Even though the browser retains the-;; cookie, it is not unrecoverable ciphertext and the session-;; interceptor will treat it as non-existant.+;; browser. As a result, the same interceptor instance must be used+;; through the service for the data to be readable and writable. Also,+;; the session data will become unrecoverable when the server process+;; ends. While the browser retains the cookie, the interceptor will  +;; treat the unrecoverable ciphertext as non-existant. (definterceptor session-interceptor   (middlewares/session {:store (cookie/cookie-store)}))  ;; Set up routes to get all the above handlers accessible. (defroutes routes   [[[""/"" {:get intro-form}]-    [""/introduce"" ^:interceptors [middlewares/params"
https://api.github.com/repos/pedestal/pedestal/pulls/294,20331215,"@@ -0,0 +1,36 @@+; Copyright 2013 Relevance, Inc.+; Copyright 2014 Cognitect, Inc.++; The use and distribution terms for this software are covered by the+; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0)+; which can be found in the file epl-v10.html at the root of this distribution.+;+; By using this software in any fashion, you are agreeing to be bound by+; the terms of this license.+;+; You must not remove this notice, or any other, from this software.++(defproject gzip ""0.0.1-SNAPSHOT""+  :description ""a sample demonstrating container-specific configuration""+  :url ""http://example.com/FIXME""+  :license {:name ""Eclipse Public License""+            :url ""http://www.eclipse.org/legal/epl-v10.html""}+  :dependencies [[org.clojure/clojure ""1.6.0""]+                 [io.pedestal/pedestal.service ""0.3.1""]++                 ;; This samples is specific to jetty, so+                 ;; other options don't appear here.+                 [io.pedestal/pedestal.jetty ""0.3.1""]+                 [org.eclipse.jetty/jetty-server ""9.2.0.v20140526""]"
https://api.github.com/repos/pedestal/pedestal/pulls/343,35708066,"@@ -149,6 +149,39 @@ functions of further interceptors in the path are invoked as if no pause had occurred. A single context may pause and resume an arbitrary number of times. +### Examples++Here's how you define a ""before"" interceptor:++```clojure+(ns interceptor.example+  (:require [io.pedestal.interceptor :refer [interceptor]]))++(def my-before-interceptor+  (interceptor+   {:name ::hello-world+    :enter+    (fn [context]+      (assoc context :response +                     {:status 200 :body ""Hello world!"" +                      :headers {""Content-Type"" ""text/plain""}}))}))"
https://api.github.com/repos/pedestal/pedestal/pulls/394,52044740,"@@ -31,10 +47,20 @@ (defmethod expand-constraint clojure.lang.APersistentMap [query-constraint-spec]   (expand-query-constraint query-constraint-spec)) +(defmethod expand-constraint clojure.lang.PersistentVector [spec]+  (assert false (unexpected-vector-in-route spec)))++(defmethod expand-constraint :default [unmatched]+  (assert false (unmatched-type-in-constraint unmatched)))+ (defprotocol ExpandableVerbAction   (expand-verb-action [expandable-verb-action]     ""Expand `expandable-verb-action` into a verbose-form verb-map."")) +(def valid-handler?      (some-fn seq? symbol? interceptor/interceptor?))+(def interceptor-vector? (every-pred vector? (comp :interceptors meta)))+(def constraint-map?     (every-pred map?    (comp :contraints   meta)))"
https://api.github.com/repos/pedestal/pedestal/pulls/503,106877810,"@@ -0,0 +1,86 @@+(ns buddy-auth.service+  ""A simple service demonstrating integration with the buddy-auth+  authentication/authorization library.""+  (:require [io.pedestal.http :as http]+            [io.pedestal.http.route :as route]+            [io.pedestal.http.body-params :as body-params]+            [io.pedestal.interceptor.chain :as interceptor.chain]+            [io.pedestal.interceptor.error :refer [error-dispatch]]+            [io.pedestal.interceptor.helpers :refer [on-request]]+            [ring.util.response :as ring-resp]+            [buddy.auth :as auth]+            [buddy.auth.backends :as auth.backends]+            [buddy.auth.middleware :as auth.middleware]))++(def users+  ""A sample user store.""+  {:aaron {:display-name ""Aaron Aardvark""+           :password     ""secret""+           :role         :user}+   :gmw   {:display-name ""Gerald M. Weinberg""+           :password     ""rutabaga""+           :role         :admin}})++(def basic-auth-backend+  ""A buddy-auth Basic Authentication backend.  See+  https://funcool.github.io/buddy-auth/latest/#http-basic""+  (auth.backends/basic {:realm  ""MyApi""+                        :authfn (fn [_ authdata]"
https://api.github.com/repos/pedestal/pedestal/pulls/526,125282198,"@@ -30,7 +30,8 @@   (get interceptor :name (pr-str interceptor)))  (defn- throwable->ex-info [^Throwable t execution-id interceptor stage]-  (ex-info (str ""Interceptor Exception: "" (.getMessage t))+  (ex-info (str ""Interceptor Exception: "" (or (.getMessage t)"
https://api.github.com/repos/pedestal/pedestal/pulls/553,181725849,"@@ -0,0 +1,53 @@+; Copyright 2014-2016 Cognitect, Inc.++; The use and distribution terms for this software are covered by the+; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0)+; which can be found in the file epl-v10.html at the root of this distribution.+;+; By using this software in any fashion, you are agreeing to be bound by+; the terms of this license.+;+; You must not remove this notice, or any other, from this software.++(ns io.pedestal.http.request.servlet-support+  (:require [io.pedestal.http.request :as request])+  (:import (javax.servlet.http HttpServletRequest HttpServletResponse)))++(defn servlet-request-headers [^HttpServletRequest servlet-req]+  (loop [out   (transient {})+         names (enumeration-seq (.getHeaderNames servlet-req))]+    (if (seq names)+      (let [^String key (first names)+            hdrstr      (java.lang.String/join "","" ^clojure.lang.EnumerationSeq (enumeration-seq (.getHeaders servlet-req key)))]+        (recur (assoc! out (.toLowerCase key) hdrstr)+               (rest names)))+      (persistent! out))))++(defn servlet-path-info [^HttpServletRequest request]+  (let [path-info (.substring (.getRequestURI request)+                              (.length (.getContextPath request)))]+    (if (.isEmpty path-info)+      ""/""+      path-info)))++(extend-protocol request/ContainerRequest+  HttpServletRequest+  (server-port [req] (.getServerPort req))+  (server-name [req] (.getServerName req))+  (remote-addr [req] (.getRemoteAddr req))+  (uri [req] (.getRequestURI req))+  (query-string [req] (.getQueryString req))+  (scheme [req] (keyword (.getScheme req)))+  (request-method [req] (keyword (.toLowerCase (.getMethod req))))+  (protocol [req] (.getProtocol req))+  (headers [req] (servlet-request-headers req))+  (header [req header-string] (.getHeader req header-string))+  (ssl-client-cert [req] (.getAttribute req ""javax.servlet.request.X509Certificate""))+  (body [req] (.getInputStream req))+  (path-info [req] (servlet-path-info req))+  (async-supported? [req] (.isAsyncSupported req))+  (async-started? [req] (.isAsyncStarted req)))++(extend-protocol request/ResponseBuffer+  HttpServletResponse+  (response-buffer-size [req]))"
https://api.github.com/repos/pedestal/pedestal/pulls/544,186554072,"@@ -196,6 +196,12 @@                                  (catcher :h)])                        :leave)))) +(deftest t-enque-precondition"
https://api.github.com/repos/pedestal/pedestal/pulls/559,187121196,"@@ -121,12 +121,21 @@                     key                     (.append b c))))))))) +(defn parse-param-map [m] (reduce"
https://api.github.com/repos/pedestal/pedestal/pulls/551,187734895,"@@ -109,6 +109,11 @@     ([t body] nil)     ([t body throwable] nil))) +(def ^:dynamic ^{:added ""0.5.4""} *mdc*"
https://api.github.com/repos/pedestal/pedestal/pulls/563,190369929,"@@ -0,0 +1,28 @@+(ns io.pedestal.http.aws.lambda)"
https://api.github.com/repos/pedestal/pedestal/pulls/566,190969471,"@@ -333,21 +333,36 @@ ;; -------------------------  (def ^:dynamic *mdc-context*-  ""This map is copied into the SLF4J MDC.-  You should interact with this via the `with-context` macro.+  ""This map is copied into the SLF4J MDC when the `with-context` or+  `with-context-kv` macros are used.  You are free to take control of+  it for MDC-related purposes as it doesn't directly affect Pedestal's+  logging implementation. -  This map also includes all options that were passed into `with-context`""+  This map also includes all options that were passed into `with-context`.""   {})  (def mdc-context-key ""io.pedestal"")  (defmacro with-context   ""Given a map of keys/values/options and a body,-  Set the map into the SLF4J MDC via the *mdc-context* binding.+  Set the map into the MDC via the *mdc-context* binding.+  The MDC used defaults to SLF4J MDC unless the `io.pedestal.log/mdc`"
https://api.github.com/repos/pedestal/pedestal/pulls/579,196718100,"@@ -202,6 +202,7 @@              ;                                                 :servlet-request servlet-request              ;                                                 :servlet-response servlet-response})              :async? servlet-async?)+      (assoc-in [:request :context-path] (some-> servlet-request (.getContextPath)))"
https://api.github.com/repos/pedestal/pedestal/pulls/607,251147684,"@@ -2,9 +2,83 @@   (:require [io.pedestal.http :as http]             [io.pedestal.http.route :as route]             [io.pedestal.http.body-params :as body-params]-            [ring.util.response :as ring-resp]))+            [io.pedestal.http.impl.servlet-interceptor :as servlet-utils]+            [io.pedestal.interceptor :as interceptor]+            [cheshire.core :as json]+            [ring.util.response :as ring-resp])+  (:import (java.io ByteArrayOutputStream))) -;; Our service returns EDN that is sent as JSON bodies+;; PATCHING+;; ------------------------------------------+;;+;; `reduce-kv` doesn't drop back to generic `java.util.Map` support+;; like `reduce` and other sequence-oriented functions in clojure.core.+;; This is a known issue in Clojure: https://dev.clojure.org/jira/browse/CLJ-1762+;;+;; This is needed because Pedestal uses `reduce-kv` when processing Map-like+;; requests and APIGW uses java.util.Maps.+;;+;; THIS SHOULD BE REMOVED ONCE CLOJURE IS PATCHED!+;; ----+(extend-protocol clojure.core.protocols/IKVReduce"
https://api.github.com/repos/pedestal/pedestal/pulls/609,257840043,"@@ -61,6 +61,11 @@               ::http/container-options {:context-configurator (fn [c]                                                                 (let [gzip-handler (GzipHandler.)]                                                                   (.setGzipHandler c gzip-handler)+                                                                  ;; by default, ""GzipHandler"" only operates on ""GET"" 's.+                                                                  ;; It is possible to add other methods via:+                                                                  ;; (.addIncludedMethods gzip-handler (into-array [""GET"" ""POST""]))"
https://api.github.com/repos/pedestal/pedestal/pulls/614,290412775,"@@ -253,9 +253,12 @@                          context-path-parts (concat context-path-parts path-parts)                          :else path-parts))         _ (when (and (true? strict-path-params?)-                     (not= (keys path-params) ;; Do the params passed in...-                           (seq (:path-params route)) ;; match the params from the route?  `seq` is used to handle cases where no `path-params` are required-                           ))+                     (or+                      (not= (set (keys path-params)) ;; Do the params passed in...+                            (set (seq (:path-params route))) ;; match the params from the route?  `seq` is used to handle cases where no `path-params` are required+                            )+                      ;; nils are not allowed.+                      (reduce-kv #(if (nil? %3) (reduced true)  false) nil path-params)))             (throw (ex-info ""Attempted to create a URL with `url-for`, but missing required :path-params - :strict-path-params was set to true."
https://api.github.com/repos/pedestal/pedestal/pulls/620,291681329,"@@ -363,11 +378,17 @@       create-provider ;; Creates/connects a backend to the interceptor chain       server))) -(defn start [service-map]+(defn start+  ""Given service-map, an initialized service map returned by `create-server`,+  invokes the zero-arg function assoc'd to the service map via `:io.pedestal.http/start-fn.`"""
https://api.github.com/repos/pedestal/pedestal/pulls/656,429608775,"@@ -42,14 +43,84 @@   ([on-connect-fn send-buffer-or-n]    (fn [^Session ws-session]      (let [send-ch (async/chan send-buffer-or-n)-           remote ^RemoteEndpoint (.getRemote ws-session)]+           remote  ^RemoteEndpoint (.getRemote ws-session)]        ;; Let's process sends...        (go-loop []-                (if-let [out-msg (and (.isOpen ws-session)-                                      (async/<! send-ch))]-                  (do (ws-send out-msg remote)-                      (recur))-                  (.close ws-session)))+         (if-let [out-msg (and (.isOpen ws-session)+                               (async/<! send-ch))]+           (do (try (ws-send out-msg remote)+                    (catch Exception ex+                      (log/error :msg ""Failed on ws-send""+                                 :exception ex)))+               (recur))+           (.close ws-session)))+       (on-connect-fn ws-session send-ch)))))++;; Support non-blocking transmission with optional flow control+(defprotocol WebSocketSendAsync+  (ws-send-async [msg remote-endpoint]+    ""Sends `msg` to `remote-endpoint`. Returns a+     promise channel from which the result can be taken.""))++(extend-protocol WebSocketSendAsync+  String+  (ws-send-async [msg ^RemoteEndpoint remote-endpoint]+    (let [p-chan (async/promise-chan)]+      (.sendString remote-endpoint msg (reify WriteCallback+                                         (writeFailed [_ ex]+                                           (async/put! p-chan ex))+                                         (writeSuccess [_]+                                           (async/put! p-chan :success))))+      p-chan))++  ByteBuffer+  (ws-send-async [msg ^RemoteEndpoint remote-endpoint]+    (let [p-chan (async/promise-chan)]+      (.sendBytes remote-endpoint msg (reify WriteCallback+                                        (writeFailed [_ ex]+                                          (async/put! p-chan ex))+                                        (writeSuccess [_]+                                          (async/put! p-chan :success))))"
https://api.github.com/repos/pedestal/pedestal/pulls/682,628778866,"@@ -11,7 +11,7 @@ ; You must not remove this notice, or any other, from this software.  (ns ^{:doc ""Pedestal testing utilities to simplify working with pedestal apps.""}-  io.pedestal.test+ io.pedestal.test"
https://api.github.com/repos/pedestal/pedestal/pulls/706,794614622,"@@ -48,47 +64,22 @@        (go-loop []          (if-let [out-msg (and (.isOpen ws-session)                                (async/<! send-ch))]-           (do (try (ws-send out-msg remote)-                    (catch Exception ex-                      (log/error :msg ""Failed on ws-send""-                                 :exception ex)))-               (recur))+           (let [ws-send-ch (ws-send-async out-msg remote)+                 result (async/<! ws-send-ch)]+             (when-not (= :success result)+               (log/error :msg ""Failed on ws-send-async""+                          :exception ex))"
https://api.github.com/repos/pedestal/pedestal/pulls/707,800916519,"@@ -8,7 +8,7 @@                  [io.pedestal/pedestal.jetty ""0.5.5""]                  [io.pedestal/pedestal.aws ""0.5.5"" :exclusions [joda-time]] -                 [ch.qos.logback/logback-classic ""1.2.3"" :exclusions [org.slf4j/slf4j-api]]+                 [ch.qos.logback/logback-classic ""1.2.10"" :exclusions [org.slf4j/slf4j-api]]                  [org.slf4j/jul-to-slf4j ""1.7.25""]"
https://api.github.com/repos/pedestal/pedestal/pulls/708,800918031,"@@ -17,9 +17,8 @@   :license {:name ""Eclipse Public License""             :url ""http://www.eclipse.org/legal/epl-v10.html""}   :dependencies [[org.clojure/clojure ""1.9.0""]-                 [org.apache.tomcat.embed/tomcat-embed-logging-juli ""8.0.52""]"
https://api.github.com/repos/pedestal/pedestal/pulls/710,800919170,"@@ -27,4 +39,4 @@   :aliases {""docs"" [""with-profile"" ""docs"" ""codox""]}    :profiles {:docs {:pedantic? :ranges-                    :plugins [[lein-codox ""0.9.5""]]}})+                     :plugins [[lein-codox ""0.9.5""]]}})"
https://api.github.com/repos/pedestal/pedestal/pulls/713,867949644,"@@ -374,14 +374,14 @@   Note:   If you mix `with-context` with the more basic `with-context-kv`, you may see undesired keys/values in the log""   [ctx-map & body]-  (let [formatter (::formatter ctx-map pr-str)]-    (if (empty? ctx-map) ;; Optimize for the code-gen/dynamic case where the map may be empty-      `(do-         ~@body)-      `(let [old-ctx# *mdc-context*-             mdc# (or ~(::mdc ctx-map) (MDC/getMDCAdapter))]-         (binding [*mdc-context* (merge *mdc-context* ~ctx-map)]-           (-put-mdc mdc# mdc-context-key (~formatter (dissoc *mdc-context*+  `(let [ctx-map-val# ~ctx-map]+     (if (empty? ctx-map-val#) ;; Optimize for the code-gen/dynamic case where the map may be empty"
https://api.github.com/repos/pedestal/pedestal/pulls/723,991684915,"@@ -0,0 +1,38 @@+; Copyright 2022 Cognitect, Inc.++; The use and distribution terms for this software are covered by the+; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0)+; which can be found in the file epl-v10.html at the root of this distribution.+;+; By using this software in any fashion, you are agreeing to be bound by+; the terms of this license.+;+; You must not remove this notice, or any other, from this software.++{:paths [""src""]+ :deps {org.clojure/clojure {:mvn/version ""1.10.1""}+        io.pedestal/pedestal.log {:mvn/version ""0.5.11-SNAPSHOT""}+        io.pedestal/pedestal.interceptor {:mvn/version ""0.5.11-SNAPSHOT""}+"
https://api.github.com/repos/pedestal/pedestal/pulls/737,1142988543,"@@ -5,14 +5,17 @@ ## 0.5.11 - UNRELEASED"
https://api.github.com/repos/pedestal/pedestal/pulls/746,1190415860,"@@ -249,7 +249,7 @@                                   :context-path-parts context-path-parts)                        ;;(concat context-path-parts path-parts)"
https://api.github.com/repos/pedestal/pedestal/pulls/721,1200792132,"@@ -16,31 +16,34 @@   :scm ""https://github.com/pedestal/pedestal""   :license {:name ""Eclipse Public License""             :url ""http://www.eclipse.org/legal/epl-v10.html""}-  :dependencies [[org.clojure/clojure ""1.10.1""]+  :dependencies [[org.clojure/clojure ""1.11.1""]                   [io.pedestal/pedestal.log ""0.5.11-SNAPSHOT""]                  [io.pedestal/pedestal.interceptor ""0.5.11-SNAPSHOT""]                  [io.pedestal/pedestal.route ""0.5.11-SNAPSHOT""] +                 [org.ow2.asm/asm ""9.3""]"
https://api.github.com/repos/pedestal/pedestal/pulls/753,1256450037,"@@ -23,12 +23,10 @@         org.eclipse.jetty.websocket/websocket-server {:mvn/version ""9.4.51.v20230217""}         javax.servlet/javax.servlet-api {:mvn/version ""3.1.0""}}  :aliases- {:clj11-  {:override-deps {org.clojure/clojure {:mvn/version ""1.11.1""}}}-+ {   ;; clj -J-Dclojure.main.report=stderr -J-Dorg.slf4j.simpleLogger.log.org.apache.commons=error -X:nvd :classpath \""""$(clojure -Alocal -Spath)\""""   :nvd-  {:deps {nvd-clojure/nvd-clojure {:mvn/version ""3.2.0""}}+  {:deps {nvd-clojure/nvd-clojure {:mvn/version ""3.3.0""}}"
https://api.github.com/repos/pedestal/pedestal/pulls/762,1350576796,"@@ -177,23 +148,24 @@             (throw (IllegalArgumentException. ""HTTP was turned off with a `nil` port value, but no SSL config was supplied.  Please set an HTTP port or configure SSL"")))         _ (when (and (nil? port) (true? h2c?))             (throw (IllegalArgumentException. ""HTTP was turned off with a `nil` port value, but you attempted to turn on HTTP2-Cleartext.  Please set an HTTP port or set `h2c?` to false in your service config"")))-        http-conf (http-configuration (:container-options options))+        http-conf (http-configuration container-options)         http (HttpConnectionFactory. http-conf)         http2c (when h2c? (HTTP2CServerConnectionFactory. http-conf))         http2 (when h2? (HTTP2ServerConnectionFactory. http-conf))         alpn (when h2?-               ;(set! (. ALPN debug) true)                ;(NegotiatingServerConnectionFactory/checkProtocolNegotiationAvailable) ;; This only looks at Java8 bootclasspath stuff, and is no longer valid in newer Jetty versions                (doto (ALPNServerConnectionFactory. ""h2,h2-17,h2-14,http/1.1"")                  (.setDefaultProtocol ""http/1.1"")))         ssl (when (or ssl? ssl-port h2?)               (ssl-conn-factory (assoc options :alpn alpn)))         http-connector (when port                          (doto (ServerConnector. server (into-array ConnectionFactory+                                                                     (remove nil? [http http2c])))                            (.setReuseAddress reuse-addr?)                            (.setPort port)                            (.setHost host)))+        ;; TODO: This is looking to be _very_ different in Jetty 11!"
https://api.github.com/repos/pedestal/pedestal/pulls/769,1375281515,"@@ -80,205 +85,215 @@                  (do (log/debug :throw t :suppressed (:exception-type ex) :execution-id execution-id)                      (-> context                          (assoc ::error (throwable->ex-info t execution-id interceptor :error))-                         (update-in [::suppressed] conj ex)))))))+                         ;; This doesn't seem to be used, maybe left around to debug some issues?+                         (update ::suppressed conj ex)))))))       (do (log/trace :interceptor (name interceptor)                      :skipped? true                      :stage :error                      :execution-id execution-id)           context))))  (defn- check-terminators-  ""Invokes each predicate in ::terminators on context. If any predicate-  returns true, removes ::queue from context.""+  ""Invokes each predicate in ::terminators with the context. If any predicate+  returns truthy, removes ::queue and ::terminators from context.""   [context]-  (if (some #(% context) (::terminators context))-    (let [execution-id (::execution-id context)]-      (log/debug :in 'check-terminators-                 :terminate? true-                 :execution-id execution-id)-      (dissoc context ::queue))-    context))+  (let [terminators (::terminators context)]+    (if (some #(% context) terminators)+      (do+        (log/debug :in 'check-terminators+                   :terminate? true+                   :execution-id (::execution-id context))+        (dissoc context ::queue ::terminators))+      context)))  (defn- prepare-for-async-  ""Call all of the :enter-async functions in a context. The purpose of these+  ""Calls all ::enter-async functions in a context. The purpose of these   functions is to ready backing servlets or any other machinery for preparing   an asynchronous response.""-  [{:keys [enter-async] :as context}]-  (doseq [enter-async-fn enter-async]-    (enter-async-fn context)))--(defn- go-async-  ""When presented with a channel as the return value of an enter function,-  wait for the channel to return a new-context (via a go block). When a new-  context is received, restart execution of the interceptor chain with that-  context.--  This function is non-blocking, returning nil immediately (a signal to halt-  further execution on this thread).""-  ([old-context context-channel]-   (prepare-for-async old-context)-   (go-     (if-let [new-context (<! context-channel)]-       (execute new-context)-       (execute (assoc (dissoc old-context ::queue ::async-info)-                       ::stack (get-in old-context [::async-info :stack])-                       ::error (ex-info ""Async Interceptor closed Context Channel before delivering a Context""-                                        {:execution-id (::execution-id old-context)-                                         :stage (get-in old-context [::async-info :stage])-                                         :interceptor (name (get-in old-context [::async-info :interceptor]))-                                         :exception-type :PedestalChainAsyncPrematureClose})))))-   nil)-  ([old-context context-channel interceptor-key]-   (prepare-for-async old-context)-   (go-     (if-let [new-context (<! context-channel)]-       (execute-only new-context interceptor-key)-       (execute-only (assoc (dissoc old-context ::queue ::async-info)-                       ::stack (get-in old-context [::async-info :stack])-                       ::error (ex-info ""Async Interceptor closed Context Channel before delivering a Context""-                                        {:execution-id (::execution-id old-context)-                                         :stage (get-in old-context [::async-info :stage])-                                         :interceptor (name (get-in old-context [::async-info :interceptor]))-                                         :exception-type :PedestalChainAsyncPrematureClose}))-                     interceptor-key)))-   nil))--(defn- process-all-with-binding-  ""Invokes `interceptor-key` functions of all Interceptors on the execution-  ::queue of context, saves them on the ::stack of context.-  Returns updated context.-  By default, `interceptor-key` is :enter""-  ([context]-   (process-all-with-binding context :enter))-  ([context interceptor-key]-  (log/debug :in 'process-all :handling interceptor-key :execution-id (::execution-id context))-   (loop [context (check-terminators context)]-    (let [queue (::queue context)-          stack (::stack context)-          execution-id (::execution-id context)]-      (log/trace :context context)-      (if (empty? queue)-        context-        (let [interceptor (peek queue)-              pre-bindings (:bindings context)-              old-context context-              new-queue (pop queue)-              ;; conj on nil returns a list, acts like a stack:-              new-stack (conj stack interceptor)-              context (-> context-                          (assoc ::queue new-queue-                                 ::stack new-stack)-                          (try-f interceptor interceptor-key))]-          (cond-            (channel? context) (go-async (assoc old-context-                                                ::async-info {:interceptor interceptor-                                                              :stage interceptor-key-                                                              :stack new-stack})-                                         context)-            (::error context) (dissoc context ::queue)-            (not= (:bindings context) pre-bindings) (assoc context ::rebind true)-            true (recur (check-terminators context)))))))))--(defn- process-all-  [context interceptor-key]-  ;; If we're processing leave handlers, reverse the queue-  (let [context (if (= interceptor-key :leave) (update context ::queue reverse) context)-        context (with-bindings (or (:bindings context)-                                   {})-                  (process-all-with-binding context interceptor-key))]-    (if (::rebind context)-      (recur (dissoc context ::rebind) interceptor-key)-      context)))--(defn- process-any-errors-with-binding-  ""Unwinds the context by invoking :error functions of Interceptors on-  the ::stack of context, but **only** if there is an ::error present in the context.""   [context]-  (log/debug :in 'process-any-errors :execution-id (::execution-id context))-  (loop [context context]-    (let [stack (::stack context)-          execution-id (::execution-id context)]-      (log/trace :context context)-      (if (empty? stack)-        context-        (let [interceptor (peek stack)-              pre-bindings (:bindings context)-              old-context context-              context (assoc context ::stack (pop stack))-              context (if (::error context)-                        (try-error context interceptor)-                        context)]-          (cond-           (channel? context) (go-async old-context context)-           (not= (:bindings context) pre-bindings) (assoc context ::rebind true)-           true (recur context)))))))--(defn- process-any-errors-  ""Establish the bindings present in `context` as thread local-  bindings, and then invoke process-any-errors-with-binding.-  Conditionally re-establish bindings if a change in bindings is made by an-  interceptor.""+  (doseq [enter-async-fn (::enter-async context)]+    (enter-async-fn context))+  ;; Only call it once per execution:+  (dissoc context ::enter-async))++(declare ^:private invoke-interceptors-binder)++(defn- handle-async+  ""Invoked when an interceptor returns a channel, rather than a context map.++  context-ch: will convey context+  execution-context: context passed to the active interceptor+  active-interceptor: interceptor invoked+  continuation: the continuation map+  ""+  [context-ch execution-context active-interceptor continuation]+  (log/debug :in 'handle-async+             :execution-id (::execution-id execution-context)+             :interceptor (name active-interceptor))+  (let [context' (prepare-for-async execution-context)]+    (async/take! context-ch+                 (fn [new-context]"
https://api.github.com/repos/pedestal/pedestal/pulls/785,1432245542,"@@ -19,3 +20,33 @@ (defn into-vec   [v coll]   (into (or v []) coll))++(defn println-err [& s]+  (binding [*out* *err*]+    (apply println s)))++(defn resolve-var-from+  [property-name env-var]+  (let [resolver (fn [from-source from-name s]+                   (when s+                     (try+                       (let [slashx     (str/index-of s ""/"")+                             ns-str     (when slashx+                                          (subs s 0 slashx))+                             symbol-str (if slashx+                                          (subs s (inc slashx))+                                          s)+                             sym        (symbol ns-str symbol-str)+                             v          (requiring-resolve sym)]+                         (if v+                           @v+                           (println-err (format ""WARNING: Symbol %s (from %s %s) does not exist""+                                                s+                                                from-source from-name))))+                       (catch Exception e+                         (println-err (format ""ERROR: Could not resolve symbol %s (from %s %s): %s""+                                              s+                                              from-source from-name+                                              (ex-message e)))))))]+    (or (resolver ""JVM property"" property-name (System/getProperty property-name))+        (resolver ""environment variable"" env-var (System/getenv property-name)))))"
https://api.github.com/repos/pedestal/pedestal/pulls/781,1433950032,"@@ -0,0 +1,18 @@+; Copyright 2022 Cognitect, Inc."
https://api.github.com/repos/pedestal/pedestal/pulls/796,1443282423,"@@ -45,23 +45,64 @@         alt-routes #{[""/bye"" :get #'bye-handler :route-name ::bye]}]     (is (fn? f)) -    (is (= (simplify (route/expand-routes sample-routes))-           (simplify (f))))+    (let [out-str (with-out-str"
https://api.github.com/repos/penpot/penpot/pulls/2,53212310,"@@ -57,6 +58,23 @@        (sort-by :created)        (into []))) +(defn sort-projects-by+  [ordering projs]+  (case ordering+    :name (sort-by :name projs)+    :created (reverse (sort-by :created projs))+    projs))++(defn contains-term?+  [phrase term]+  (str/contains? (str/lower phrase) (str/lower term)))++(defn filter-projects-by+  [term projs]+  (if (= term """")"
https://api.github.com/repos/penpot/penpot/pulls/7,59136150,"@@ -249,7 +249,7 @@ (defrecord IncreaseZoom []   rs/UpdateEvent   (-apply-update [_ state]-    (let [increase #(* % 1.05)]+    (let [increase #(min (/ (Math/round (* % 105)) 100) 3)]"
https://api.github.com/repos/penpot/penpot/pulls/10,59247244,"@@ -10,7 +10,7 @@   (let [sid (random-uuid)         shape (merge shape {:id sid :page page})]     (as-> state $-      (update-in $ [:pages-by-id page :shapes] conj sid)+      (update-in $ [:pages-by-id page :shapes] #(cons sid %))"
https://api.github.com/repos/penpot/penpot/pulls/14,59899234,"@@ -305,7 +304,8 @@             xf (comp                 (filter #(= (:page %) pageid))                 (remove :hidden)-                (remove :blocked)+                (remove #(and (not (:blocked %)) (= (:type %) :builtin/group)))+                (remove #(and (not= % (sh/resolve-parent %)) (:blocked (sh/resolve-parent %))))"
https://api.github.com/repos/penpot/penpot/pulls/21,60114301,"@@ -33,6 +33,22 @@    :ctrl+c #(rs/emit! (dw/copy-to-clipboard))    :ctrl+v #(rs/emit! (dw/paste-from-clipboard))    :ctrl+z #(rs/emit! (udh/backwards-to-previous-version))+   :ctrl+b #(rs/emit! (dw/select-for-drawing+     {:type :builtin/rect+      :name ""Rect""+      :stroke ""#000000""}))+   :ctrl+e #(rs/emit! (dw/select-for-drawing+     {:type :builtin/circle+      :name ""Circle""}))"
https://api.github.com/repos/penpot/penpot/pulls/26,62741888,"@@ -25,17 +28,97 @@  ;; --- Selection Handlers (Component) +(defn- multiple-selection-handlers-render+  [shapes]+  (let [{:keys [width height x y]} (geom/outer-rect-coll shapes)]+    (html+     [:g.controls+      [:rect {:x x :y y :width width :height height+              :stroke-dasharray ""5,5""+              :style {:stroke ""#333"" :fill ""transparent""+                      :stroke-opacity ""1""}}]])))++(defn- single-selection-handlers-render+  [shape]+  (letfn [+          (on-mouse-down [vid event]+            (dom/stop-propagation event)+            (uuc/acquire-action! ""ui.shape.resize""+                                 {:vid vid :shape (:id shape)}))++          (on-mouse-up [vid event]+            (dom/stop-propagation event)+            (uuc/release-action! ""ui.shape.resize""))]+    (let [{:keys [x y width height]} (geom/outer-rect-coll [shape])]"
https://api.github.com/repos/penpot/penpot/pulls/24,63145133,"@@ -0,0 +1,159 @@+;; This Source Code Form is subject to the terms of the Mozilla Public+;; License, v. 2.0. If a copy of the MPL was not distributed with this+;; file, You can obtain one at http://mozilla.org/MPL/2.0/.+;;+;; Copyright (c) 2015-2016 Andrey Antukh <niwi@niwi.nz>+;; Copyright (c) 2015-2016 Juan de la Cruz <delacruzgarciajuan@gmail.com>++(ns uxbox.data.colors+  (:require [clojure.set :as set]+            [beicon.core :as rx]+            [uuid.core :as uuid]+            [uxbox.rstore :as rs]+            [uxbox.state.colors :as stc]+            [uxbox.repo :as rp]))++;; --- Collections Fetched++(defrecord CollectionFetched [items]+  rs/UpdateEvent+  (-apply-update [_ state]+    (reduce stc/assoc-collection state items)))++(defn collections-fetched+  [items]+  (CollectionFetched. items))++;; --- Fetch Collections++(defrecord FetchCollections []+  rs/WatchEvent+  (-apply-watch [_ state s]+    (->> (rp/req :fetch/color-collections)+         (rx/map :payload)+         (rx/map collections-fetched))))++(defn fetch-collections+  []+  (FetchCollections.))++;; --- Collection Created++(defrecord CollectionCreated [item]+  rs/UpdateEvent+  (-apply-update [_ state]+    (-> state+        (stc/assoc-collection item)+        (assoc-in [:dashboard :collection-id] (:id item))+        (assoc-in [:dashboard :collection-type] :own))))++(defn collection-created+  [item]+  (println ""collection-created"" item)"
https://api.github.com/repos/penpot/penpot/pulls/98,296785115,"@@ -46,14 +49,74 @@ function run-devenv {          $CONTAINER } +function test-devenv {+    echo ""Testing frontend...""+    test-devenv-frontend || exit 1;+    echo ""Testing backend...""+    test-devenv-backend || exit 1;+}++function test-devenv-frontend {+    # TODO Add frontend unit tests call+    echo ""Not yet implemented!""++#    if ! $(docker images | grep $IMGNAME | grep -q $REV); then+#        build-devenv+#    fi+#+#    CONTAINER=$IMGNAME:latest+#+#    echo ""Running development image $CONTAINER to test backend...""+#    docker run -ti --rm \+#           -w /home/uxbox/uxbox/backend \+#           -v `pwd`:/home/uxbox/uxbox  \+#           -v $HOME/.m2:/home/uxbox/.m2 \+#           -e UXBOX_API_URL=""/api"" \+#           -e UXBOX_VIEW_URL=""/view"" \+#           $CONTAINER ./scripts/build-tests.sh+}++function test-devenv-backend {+    # TODO Add backend unit tests call+    echo ""Not yet implemented!""++#    if ! $(docker images | grep $IMGNAME | grep -q $REV); then+#        build-devenv+#    fi+#+#    CONTAINER=$IMGNAME:latest+#+#    echo ""Running development image $CONTAINER to test frontend...""+#    docker run -ti --rm \+#           -w /home/uxbox/uxbox/frontend \+#           -v `pwd`:/home/uxbox/uxbox  \+#           -v $HOME/.m2:/home/uxbox/.m2 \+#           -e UXBOX_API_URL=""/api"" \+#           -e UXBOX_VIEW_URL=""/view"" \+#           $CONTAINER ./scripts/build-tests.sh+}+ function build-release-frontend-local {+    if ! $(docker images | grep $IMGNAME | grep -q $REV); then+        build-devenv+    fi++    mkdir -p $HOME/.m2+    rm -rf ./frontend/node_modules+    # FIXME Ugly... should be a better way+    chmod 777 ./frontend"
https://api.github.com/repos/penpot/penpot/pulls/136,391601807,"@@ -0,0 +1,58 @@+;; This Source Code Form is subject to the terms of the Mozilla Public+;; License, v. 2.0. If a copy of the MPL was not distributed with this+;; file, You can obtain one at http://mozilla.org/MPL/2.0/.+;;+;; This Source Code Form is ""Incompatible With Secondary Licenses"", as+;; defined by the Mozilla Public License, v. 2.0.+;;+;; Copyright (c) 2019-2020 Andrey Antukh <niwi@niwi.nz>++(ns uxbox.services.queries.recent-files+  (:require+   [clojure.spec.alpha :as s]+   [promesa.core :as p]+   [uxbox.db :as db]+   [uxbox.common.spec :as us]+   [uxbox.services.queries :as sq]+   [uxbox.services.queries.projects :refer [ projects-by-team ]]+   [uxbox.services.queries.files :refer [ decode-row ]]))++(def ^:private sql:project_files_recent"
https://api.github.com/repos/penpot/penpot/pulls/137,392186640,"@@ -30,9 +31,12 @@  (defn- parse-params   [route profile]-  (let [team-id (get-in route [:params :path :team-id])+  (let [search-term (get-in route [:params :query :search-term])+        team-id (get-in route [:params :path :team-id])         project-id (get-in route [:params :path :project-id])]-    (cond-> {}+    (cond->+      {:search-term search-term}"
https://api.github.com/repos/penpot/penpot/pulls/144,395511329,"@@ -0,0 +1,207 @@+(ns uxbox.main.data.library+  (:require+   [cljs.spec.alpha :as s]+   [beicon.core :as rx]+   [cuerdas.core :as str]+   [potok.core :as ptk]+   [uxbox.common.spec :as us]+   [uxbox.common.data :as d]+   [uxbox.main.repo :as rp]+   [uxbox.main.store :as st]+   [uxbox.util.dom :as dom]+   [uxbox.util.webapi :as wapi]+   [uxbox.util.i18n :as i18n :refer [t tr]]+   [uxbox.util.router :as r]+   [uxbox.util.uuid :as uuid]))+++;; Retrieve libraries++(declare retrieve-libraries-result)++(defn retrieve-libraries+  [type team-id]+  (s/assert ::us/uuid team-id)+  (let [method (case type+                :icons :icon-libraries+                :images :image-libraries+                :palettes :color-libraries)]+   (ptk/reify ::retrieve-libraries+     ptk/WatchEvent+     (watch [_ state stream]+       (->> (rp/query! method {:team-id team-id})+            (rx/map (partial retrieve-libraries-result type)))))))++(defn retrieve-libraries-result [type result]+  (ptk/reify ::retrieve-libraries-result+    ptk/UpdateEvent+    (update [_ state]+      (-> state+          (assoc-in [:library type] result)))))++;; Retrieve library data++(declare retrieve-library-data-result)++(defn retrieve-library-data+  [type library-id]+  (ptk/reify ::retrieve-library-data+    ptk/WatchEvent+    (watch [_ state stream]+      (let [method (case type+                     :icons :icons+                     :images :images+                     :palettes :colors)]+        (->> (rp/query! method {:library-id library-id})+             (rx/map (partial retrieve-library-data-result library-id)))))))++(defn retrieve-library-data-result+  [library-id data]+  (ptk/reify ::retrieve-library-data-result+    ptk/UpdateEvent+    (update [_ state]+      (-> state+          (assoc-in [:library :selected-items library-id] data)))))+++;; Create library++(declare create-library-result)++(defn create-library+  [type team-id name]+  (ptk/reify ::create-library+    ptk/WatchEvent+    (watch [_ state stream]+      (let [method (case type+                    :icons :create-icon-library+                    :images :create-image-library+                    :palettes :create-color-library)]+        (->> (rp/mutation! method {:team-id team-id+                                                 :name name})+             (rx/map (partial create-library-result type)))))))++(defn create-library-result+  [type result]+  (ptk/reify ::create-library-result+    ptk/UpdateEvent+    (update [_ state]+      (-> state+          (update-in [:library type] #(into [result] %))))))++;; Rename library++(declare rename-library-result)++(defn rename-library+  [type library-id name]+  (ptk/reify ::rename-library+    ptk/WatchEvent+    (watch [_ state stream]+      (let [method (case type+                     :icons :rename-icon-library+                     :images :rename-image-library+                     :palettes :rename-color-library)]+        (->> (rp/mutation! method {:id library-id+                                   :name name})+             (rx/map #(rename-library-result type library-id name)))))))++(defn rename-library-result+  [type library-id name]+  (ptk/reify ::rename-library-result+    ptk/UpdateEvent+    (update [_ state]+      (letfn [(change-name+                [library] (if (= library-id (:id library))+                            (assoc library :name name)+                            library))+              (update-fn [libraries] (map change-name libraries))]++        (-> state+            (update-in [:library type] update-fn))))))++;; Delete library++(declare delete-library-result)++(defn delete-library+  [type library-id]+  (ptk/reify ::delete-library+    ptk/UpdateEvent+    (update [_ state]+      (-> state+          (assoc-in [:library :last-deleted-library] library-id)))+   +    ptk/WatchEvent+    (watch [_ state stream]+      (let [method (case type+                     :icons :delete-icon-library+                     :images :delete-image-library+                     :palettes :delete-color-library)]+        (->> (rp/mutation! method {:id library-id})+             (rx/map #(delete-library-result type library-id)))))))++(defn delete-library-result+  [type library-id]+  (ptk/reify ::create-library-result+    ptk/UpdateEvent+    (update [_ state]+      (let [update-fn (fn [libraries]+                        (filter #(not= library-id (:id %)) libraries))]"
https://api.github.com/repos/penpot/penpot/pulls/152,399128025,"@@ -106,6 +107,13 @@            :on-context-menu on-context-menu            :on-double-click on-double-click            :on-mouse-down on-mouse-down}+       [:& ""text"" {:x x"
https://api.github.com/repos/penpot/penpot/pulls/154,399938192,"@@ -11,13 +11,18 @@ popd  tmux -2 new-session -d -s uxbox -tmux new-window -t uxbox:1 -n 'figwheel'+tmux new-window -t uxbox:1 -n 'shadow server' tmux select-window -t uxbox:1 tmux send-keys -t uxbox 'cd uxbox/frontend' enter C-l-tmux send-keys -t uxbox 'clojure -Adev tools.clj figwheel' enter+# tmux send-keys -t uxbox 'shadow-cljs server' enter"
https://api.github.com/repos/penpot/penpot/pulls/156,401236705,"@@ -930,26 +930,34 @@ ;; --- Add shape to Workspace  (defn impl-retrieve-used-names-  ""Returns a set of already used names by shapes-  in the current workspace page.""-  [state]-  (let [page-id (::page-id state)-        objects (get-in state [:workspace-data page-id :objects])]-    (into #{} (map :name) (vals objects))))+  [objects]+  (into #{} (map :name) (vals objects)))++(defn extract-numeric-suffix+  [basename]+  (let [result (re-find #""(.*)-([0-9]+)$"" basename)]+    (if result+      [(get result 1) (+ 1 (js/parseInt (get result 2)))]"
https://api.github.com/repos/penpot/penpot/pulls/159,402135458,"@@ -5,6 +5,10 @@   (fn [e]     (= (.-keyCode e) keycode))) +(defn ^boolean alt?+  [event]+  (.-altKey event))+"
https://api.github.com/repos/penpot/penpot/pulls/163,403979472,"@@ -56,6 +56,13 @@                  (get-in % [:workspace-data page-id :objects])))       (l/derive st/state))) +(defn objects-by-id [ids]+  (let [set-ids (set ids)]+   (-> (l/lens #(let [page-id (get-in % [:workspace-page :id])+                      objects (get-in % [:workspace-data page-id :objects])]+                  (filter (fn [it] (set-ids (:id it))) (vals objects))))"
https://api.github.com/repos/penpot/penpot/pulls/155,404053639,"@@ -0,0 +1,5 @@+getBrowserEvent+viewBox+baseVal+width+height"
https://api.github.com/repos/penpot/penpot/pulls/167,406003772,"@@ -564,6 +564,52 @@   [shape {:keys [x y] :as frame}]   (move shape (gpt/point (+ x) (+ y)))) ++;; --- Alignment++(s/def ::axis #{:hleft :hcenter :hright :vtop :vcenter :vbottom})++(declare calc-align-pos)++(defn align-to-rect+  ""Move the shape so that it is aligned with the given rectangle+  in the given axis. Take account the form of the shape and the+  possible rotation. What is aligned is the rectangle that wraps+  the shape with the given rectangle.""+  [shape rect axis]+  (let [wrapper-rect (first (into [] xf-resolve-shape [shape])) ; TODO hacer esto bien"
https://api.github.com/repos/penpot/penpot/pulls/169,406322045,"@@ -18,6 +18,7 @@ (let [config (gobj/get goog.global ""uxboxConfig"")       public-url (gobj/get config ""publicURL"" ""http://localhost:6060"")] -  (def default-language ""en"")+  (def default-lang ""en"")"
https://api.github.com/repos/penpot/penpot/pulls/172,406717537,"@@ -2178,28 +2178,52 @@                   frame-id (if frame-id                              frame-id                              (calculate-frame-overlap objects moved-obj))-                  reframed-obj (assoc moved-obj :frame-id frame-id)]-              {:type :add-obj-               :id id-               :frame-id frame-id-               :obj reframed-obj}))++                  prepare-child+                  (fn [child-id]+                    (prepare-shape-change objects (get objects child-id) delta frame-id))++                  children-changes (mapcat prepare-child (:shapes obj))+                  is-children? (set (:shapes obj))"
https://api.github.com/repos/penpot/penpot/pulls/177,408162506,"@@ -23,6 +24,17 @@   (let [options (or options #{:size :position :rotation :radius})         locale (i18n/use-locale) +        data (deref refs/workspace-data)+        parent (get-in data [:objects (:frame-id shape)])"
https://api.github.com/repos/penpot/penpot/pulls/183,411236135,"@@ -0,0 +1,123 @@+;; This Source Code Form is subject to the terms of the Mozilla Public+;; License, v. 2.0. If a copy of the MPL was not distributed with this+;; file, You can obtain one at http://mozilla.org/MPL/2.0/.+;;+;; This Source Code Form is ""Incompatible With Secondary Licenses"", as+;; defined by the Mozilla Public License, v. 2.0.+;;+;; Copyright (c) 2020 UXBOX Labs SL++(ns uxbox.worker.selection+  (:require+   [cljs.spec.alpha :as s]+   [okulary.core :as l]+   [promesa.core :as p]+   [beicon.core :as rx]+   [cuerdas.core :as str]+   [uxbox.common.exceptions :as ex]+   [uxbox.common.spec :as us]+   [uxbox.common.uuid :as uuid]+   [uxbox.main.geom :as geom]+   [uxbox.worker.impl :as impl]+   [uxbox.util.quadtree :as qdt]))++(defonce state (l/atom {}))++(declare resolve-object)+(declare index-object)+(declare retrieve-toplevel-shapes)+(declare calculate-bounds)+(declare create-index)++(defmethod impl/handler :selection/create-index+  [{:keys [file-id pages] :as message}]+  (js/console.log :selection/create-index file-id)"
https://api.github.com/repos/penpot/penpot/pulls/184,413697235,"@@ -34,16 +34,16 @@ (defn send!   ""Schedule the email for sending.""   ([email context] (send! db/pool email context))"
https://api.github.com/repos/penpot/penpot/pulls/186,414381214,"@@ -0,0 +1,92 @@+;; This Source Code Form is subject to the terms of the Mozilla Public+;; License, v. 2.0. If a copy of the MPL was not distributed with this+;; file, You can obtain one at http://mozilla.org/MPL/2.0/.+;;+;; Copyright (c) 2016-2019 Andrey Antukh <niwi@niwi.nz>++(ns uxbox.main.ui.shapes.custom_stroke"
https://api.github.com/repos/penpot/penpot/pulls/187,414540503,"@@ -9,13 +9,17 @@  (ns uxbox.util.geom.point   (:refer-clojure :exclude [divide])-  (:require [uxbox.util.math :as mth]-            [cognitect.transit :as t]))+  (:require+   [cuerdas.core :as str]+   [uxbox.util.math :as mth]+   [cognitect.transit :as t]))  ;; --- Point Impl  (defrecord Point [x y]) +(defn s [{:keys [x y]}] (str ""("" x "","" y "")""))"
https://api.github.com/repos/penpot/penpot/pulls/190,417185106,"@@ -57,6 +57,14 @@          (get-in % [:workspace-data page-id]))       (l/derived st/state))) +(defn object-by-id+  [id]+  (letfn [(selector [state]+            (let [page-id (get-in state [:workspace-page :id])+                  objects (get-in state [:workspace-data page-id :objects])]+              (->> (get objects id))))]"
https://api.github.com/repos/penpot/penpot/pulls/191,417899318,"@@ -9,24 +9,27 @@  (defn- persist   [alias value]-  (let [key (name alias)-        value (t/encode value)]-    (.setItem js/localStorage key value)))+  (when-not (or (= *target* ""nodejs"")"
https://api.github.com/repos/penpot/penpot/pulls/192,417968787,"@@ -598,6 +603,30 @@       (let [pid (:current-page-id state)]         (update-in state [:workspace-data pid :objects id] merge attrs))))) +(defn update-shape-recursive+  [id attrs]+  (us/verify ::us/uuid id)+  (us/verify ::shape-attrs attrs)+  (ptk/reify ::update-shape+    dwc/IBatchedChange+    dwc/IUpdateGroup+    (get-ids [_] [id])++    ptk/UpdateEvent+    (update [_ state]+      (let [page-id (:current-page-id state)+            grouped #{:frame :group}]+        (update-in state [:workspace-data page-id :objects]+                   (fn [objects]+                     (let [childs (d/concat [id] (helpers/get-children id objects))]"
https://api.github.com/repos/penpot/penpot/pulls/193,419341539,"@@ -87,20 +87,26 @@  ;; --- Navigate (Event) -(deftype Navigate [id params qparams]+(deftype Navigate [id params qparams replace]   ptk/EffectEvent   (effect [_ state stream]+    (prn ""Navigate"" id params qparams replace)"
https://api.github.com/repos/penpot/penpot/pulls/195,420016837,"@@ -45,29 +47,43 @@      :image [:& image/options {:shape shape}]      nil)]) -(mf/defc shape-options-wrapper-  [{:keys [shape-id page-id] :as props}]-  (let [shape-iref (-> (mf/deps shape-id page-id)+(mf/defc options-toolbox+  {:wrap [mf/memo]}+  [{:keys [page selected] :as props}]+  (let [close #(st/emit! (udw/toggle-layout-flag :element-options))+        on-change-tab #(st/emit! (udw/set-options-mode %))++        options-mode (mf/deref refs/options-mode)++        selected (mf/deref refs/selected-shapes)+        shape-id (first selected)+        page-id (:id page)+        shape-iref (-> (mf/deps shape-id page-id)                        (mf/use-memo                         #(-> (l/in [:objects shape-id])                              (l/derived refs/workspace-data))))         shape (mf/deref shape-iref)]-    [:& shape-options {:shape shape}])) -(mf/defc options-toolbox-  {:wrap [mf/memo]}-  [{:keys [page selected] :as props}]-  (let [close #(st/emit! (udw/toggle-layout-flag :element-options))-        selected (mf/deref refs/selected-shapes)]-    [:div.element-options.tool-window-     ;; [:div.tool-window-bar-     ;;  [:div.tool-window-icon i/options]-     ;;  [:span (tr ""ds.settings.element-options"")]-     ;;  [:div.tool-window-close {:on-click close} i/close]]-     [:& align-options]-     [:div.tool-window-content-      [:div.element-options-       (if (= (count selected) 1)-         [:& shape-options-wrapper {:shape-id (first selected)-                                    :page-id (:id page)}]-         [:& page/options {:page page}])]]]))+    [:div.tool-window+      ;; [:div.tool-window-bar+      ;;  [:div.tool-window-icon i/options]+      ;;  [:span (tr ""ds.settings.element-options"")]+      ;;  [:div.tool-window-close {:on-click close} i/close]]+      [:div.tool-window-content+        [:& tab-container {:on-change-tab on-change-tab :selected options-mode}++         [:& tab-element+          {:id :design :title (tr ""workspace.options.design"")}+          [:div.element-options+           [:& align-options]+           [:divelement-options"
https://api.github.com/repos/penpot/penpot/pulls/197,420644811,"@@ -0,0 +1,28 @@+;; This Source Code Form is subject to the terms of the Mozilla Public+;; License, v. 2.0. If a copy of the MPL was not distributed with this+;; file, You can obtain one at http://mozilla.org/MPL/2.0/.+;;+;; This Source Code Form is ""Incompatible With Secondary Licenses"", as+;; defined by the Mozilla Public License, v. 2.0.+;;+;; Copyright (c) 2020 UXBOX Labs SL++(ns uxbox.worker.thumbnails+  (:require+   [rumext.alpha :as mf]+   [promesa.core :as p]+   [cljs.spec.alpha :as s]+   [uxbox.common.exceptions :as ex]+   [uxbox.common.spec :as us]"
https://api.github.com/repos/penpot/penpot/pulls/199,421428100,"@@ -237,7 +243,8 @@ goog.scope(function() {             recRangeQuery(branch.left, fromValue, toValue, result);         }         if (fromValue <= branch.value && toValue >= branch.value) {-            Array.prototype.push.apply(result, branch.data);+            // Array.prototype.push.apply(result, branch.data);"
https://api.github.com/repos/penpot/penpot/pulls/200,422164801,"@@ -2,156 +2,129 @@ ;; License, v. 2.0. If a copy of the MPL was not distributed with this ;; file, You can obtain one at http://mozilla.org/MPL/2.0/. ;;-;; Copyright (c) 2015-2017 Andrey Antukh <niwi@niwi.nz>-;; Copyright (c) 2015-2017 Juan de la Cruz <delacruzgarciajuan@gmail.com>+;; This Source Code Form is ""Incompatible With Secondary Licenses"", as+;; defined by the Mozilla Public License, v. 2.0.+;;+;; Copyright (c) 2020 UXBOX Labs SL  (ns uxbox.main.ui.workspace.rules   (:require-   [beicon.core :as rx]-   [cuerdas.core :as str]    [rumext.alpha :as mf]-   [uxbox.main.constants :as c]-   [uxbox.main.refs :as refs]-   [uxbox.main.store :as s]-   [uxbox.main.streams :as ms]-   [uxbox.main.ui.hooks :refer [use-rxsub]]-   [uxbox.util.dom :as dom]))--;; --- Constants & Helpers--(def rule-padding 20)-(def step-padding 20)-(def step-size 10)-(def scroll-padding 50)--(def +ticks+ (range 0 c/viewport-width step-size))--(defn big-ticks-mod [zoom] (/ 100 zoom))-(defn mid-ticks-mod [zoom] (/ 50 zoom))----(defn- make-vertical-tick-  [zoom acc value]-  (let [big-ticks-mod (big-ticks-mod zoom)-        mid-ticks-mod (mid-ticks-mod zoom)-        pos (+ (* value zoom)-               rule-padding-               scroll-padding)]-    (cond-      (< (mod value big-ticks-mod) step-size)-      (conj acc (str/format ""M %s %s L %s %s"" pos 5 pos step-padding))--      (< (mod value mid-ticks-mod) step-size)-      (conj acc (str/format ""M %s %s L %s %s"" pos 10 pos step-padding))--      :else-      (conj acc (str/format ""M %s %s L %s %s"" pos 15 pos step-padding)))))--(defn- make-horizontal-tick-  [zoom acc value]-  (let [big-ticks-mod (big-ticks-mod zoom)-        mid-ticks-mod (mid-ticks-mod zoom)-        pos (+ (* value zoom)-               scroll-padding)]-    (cond-      (< (mod value big-ticks-mod) step-size)-      (conj acc (str/format ""M %s %s L %s %s"" 5 pos step-padding pos))--      (< (mod value mid-ticks-mod) step-size)-      (conj acc (str/format ""M %s %s L %s %s"" 10 pos step-padding pos))--      :else-      (conj acc (str/format ""M %s %s L %s %s"" 15 pos step-padding pos)))))--;; --- Horizontal Text Label--(mf/defc horizontal-text-label-  [{:keys [zoom value] :as props}]-  (let [big-ticks-mod (big-ticks-mod zoom)-        pos (+ (* value zoom)-               rule-padding-               scroll-padding)]-    (when (< (mod value big-ticks-mod) step-size)-      [:text {:x (+ pos 2)-              :y 13-              :key (str pos)-              :fill ""#9da2a6""-              :style {:font-size ""12px""}}-       value])))--;; --- Horizontal Text Label--(mf/defc vertical-text-label-  [{:keys [zoom value] :as props}]-  (let [big-ticks-mod (big-ticks-mod zoom)-        pos (+ (* value zoom)-               scroll-padding)]-    (when (< (mod value big-ticks-mod) step-size)-      [:text {:y (- pos 3)-              :x 5-              :key (str pos)-              :fill ""#9da2a6""-              :transform (str/format ""rotate(90 0 %s)"" pos)-              :style {:font-size ""12px""}}-       value])))--;; --- Horizontal Rule Ticks (Component)--(mf/defc horizontal-rule-ticks-  {:wrap [mf/memo]}-  [{:keys [zoom]}]-  (let [path (reduce (partial make-vertical-tick zoom) [] +ticks+)]-    [:g-     [:path {:d (str/join "" "" path)}]-     (for [tick +ticks+]-       [:& horizontal-text-label {:zoom zoom :value tick :key tick}])]))--;; --- Vertical Rule Ticks (Component)--(mf/defc vertical-rule-ticks-  {:wrap [mf/memo]}-  [{:keys [zoom]}]-  (let [path (reduce (partial make-horizontal-tick zoom) [] +ticks+)]-    [:g-     [:path {:d (str/join "" "" path)}]-     (for [tick +ticks+]-       [:& vertical-text-label {:zoom zoom :value tick :key tick}])]))--;; --- Horizontal Rule (Component)+   [uxbox.util.object :as obj]))++(def STEP-PADDING 20)  (mf/defc horizontal-rule-  {:wrap [mf/memo]}-  [props]-  (let [scroll (use-rxsub  ms/viewport-scroll)-        zoom (mf/deref refs/selected-zoom)-        translate-x (- (- scroll-padding) (:x scroll))]-    [:svg.horizontal-rule-     {:width c/viewport-width-      :height 20}-     [:rect {:height 20-             :width c/viewport-width}]-     [:g {:transform (str ""translate("" translate-x "", 0)"")}-      [:& horizontal-rule-ticks {:zoom zoom}]]]))+  [{:keys [zoom size]}]"
https://api.github.com/repos/penpot/penpot/pulls/202,422805960,"@@ -39,13 +40,10 @@   ""Initialize the snap information with the current workspace information""   [objects]   (let [shapes (vals objects)-        frame-shapes (->> shapes-                          (filter (comp not nil? :frame-id))+        frame-shapes (->> (vals objects)"
https://api.github.com/repos/penpot/penpot/pulls/203,422850026,"@@ -94,38 +69,94 @@                  :stroke-width 1                  :fill-opacity 0.2}])]))) -(def rect-wrapper (generic-wrapper-factory rect/rect-shape))-(def icon-wrapper (generic-wrapper-factory icon/icon-shape))-(def image-wrapper (generic-wrapper-factory image/image-shape))-(def path-wrapper (generic-wrapper-factory path/path-shape))-(def text-wrapper (generic-wrapper-factory text/text-shape))-(def circle-wrapper (generic-wrapper-factory circle/circle-shape))+(defn frame-wrapper+  [shape-container show-interactions?]+  (generic-wrapper-factory (frame/frame-shape shape-container) show-interactions?))++(defn group-wrapper+  [shape-container show-interactions?]+  (generic-wrapper-factory (group/group-shape shape-container) show-interactions?))++(defn rect-wrapper+  [show-interactions?]+  (generic-wrapper-factory rect/rect-shape show-interactions?))++(defn icon-wrapper+  [show-interactions?]+  (generic-wrapper-factory icon/icon-shape show-interactions?))++(defn image-wrapper+  [show-interactions?]+  (generic-wrapper-factory image/image-shape show-interactions?))++(defn path-wrapper+  [show-interactions?]+  (generic-wrapper-factory path/path-shape show-interactions?)) -(defn shape-wrapper-factory-  [objects]-  (mf/fnc shape-wrapper+(defn text-wrapper+  [show-interactions?]+  (generic-wrapper-factory text/text-shape show-interactions?))++(defn circle-wrapper+  [show-interactions?]+  (generic-wrapper-factory circle/circle-shape show-interactions?))+++(declare shape-container-factory)++(defn frame-container-factory+  [objects show-interactions?]+  (let [shape-container (shape-container-factory objects show-interactions?)+        frame-wrapper (frame-wrapper shape-container show-interactions?)]+    (mf/fnc frame-container+      {::mf/wrap-props false}+      [props]+      (let [shape (unchecked-get props ""shape"")+            childs (mapv #(get objects %) (:shapes shape))+            shape  (geom/transform-shape shape)+            props  (obj/merge! #js {} props+                               #js {:childs childs+                                    :show-interactions? show-interactions?})]+        [:> frame-wrapper props]))))++(defn group-container-factory+  [objects show-interactions?]+  (let [shape-container (shape-container-factory objects show-interactions?)+        group-wrapper (group-wrapper shape-container show-interactions?)]+    (mf/fnc group-container+      {::mf/wrap-props false}+      [props]+      (let [shape  (unchecked-get props ""shape"")+            childs (mapv #(get objects %) (:shapes shape))+            props  (obj/merge! #js {} props+                               #js {:childs childs+                                    :show-interactions? show-interactions?})]+        [:> group-wrapper props]))))++(defn shape-container-factory+  [objects show-interactions?]+  (mf/fnc shape-container     {::mf/wrap-props false}     [props]-    (let [group-wrapper (mf/use-memo (mf/deps objects) #(group-wrapper-factory objects))+    (let [group-container (mf/use-memo+                            (mf/deps objects)+                            #(group-container-factory objects show-interactions?))           shape (unchecked-get props ""shape"")-          frame (unchecked-get props ""frame"")-          show-interactions? (unchecked-get props ""show-interactions?"")]+          frame (unchecked-get props ""frame"")]       (when (and shape (not (:hidden shape)))         (let [shape (geom/transform-shape frame shape)-              opts #js {:shape shape-                        :show-interactions? show-interactions?}]+              opts #js {:shape shape}]           (case (:type shape)-            :curve  [:> path-wrapper opts]-            :text   [:> text-wrapper opts]-            :icon   [:> icon-wrapper opts]-            :rect   [:> rect-wrapper opts]-            :path   [:> path-wrapper opts]-            :image  [:> image-wrapper opts]-            :circle [:> circle-wrapper opts]-            :group  [:> group-wrapper-                     {:shape shape-                      :frame frame-                      :show-interactions? show-interactions?}]))))))+            :curve  [:> (path-wrapper show-interactions?) opts]"
https://api.github.com/repos/penpot/penpot/pulls/205,423611568,"@@ -149,9 +144,12 @@ (mf/defc interactions   [{:keys [selected] :as props}]   (let [data (mf/deref refs/workspace-data)+        local (mf/deref refs/workspace-local)"
https://api.github.com/repos/penpot/penpot/pulls/206,423664475,"@@ -113,13 +113,14 @@      [:g.controls      (when (not (#{:move :rotate :resize} current-transform))-         [:rect.main {:transform transform-                  :x (- x 1) :y (- y 1)-                  :width (+ width 2)-                  :height (+ height 2)-                  :style {:stroke ""#1FDEA7""-                          :stroke-width (/ 1 zoom)-                          :fill ""transparent""}}])+       [:rect.main+        {:transform transform+         :x (- x 0) :y (- y 0)"
https://api.github.com/repos/penpot/penpot/pulls/219,427277276,"@@ -263,6 +263,11 @@     padding: $x-small $big $x-small $x-small;     position: relative; +    & hr {+        margin: 0;+        border-color: $color-gray-20;+    }+"
https://api.github.com/repos/penpot/penpot/pulls/220,427937526,"@@ -31,7 +31,9 @@  (defn hex->rgb   [v]-  (into [] (gcolor/hexToRgb v)))+  (try+    (into [] (gcolor/hexToRgb v))+    (catch js/Object e [0 0 0])))"
https://api.github.com/repos/penpot/penpot/pulls/222,428019464,"@@ -217,5 +217,19 @@     }    }+}++.chrome-picker {+  font-family: inherit !important; +  input {+    margin-bottom: auto;+  }++  & > div:nth-child(2) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) {"
https://api.github.com/repos/penpot/penpot/pulls/226,429793682,"@@ -38,7 +39,8 @@   [{:keys [profile-id file-id] :as params}]   (db/with-atomic [conn db/pool]     (files/check-edition-permissions! conn profile-id file-id)-    (retrieve-pages conn params)))+    (->> (retrieve-pages conn params)+         (map ,mg/migrate-page))))"
https://api.github.com/repos/penpot/penpot/pulls/225,430221209,"@@ -62,3 +62,11 @@ (def password-recovery   ""A password recovery notification email.""   (emails/build ::password-recovery default-context))++(s/def ::pending-email ::us/string)"
https://api.github.com/repos/penpot/penpot/pulls/230,433141812,"@@ -191,6 +191,17 @@             (assoc :height value)             (assoc :width (* value proportion))))))) +(defn resize+  [shape width height]+  (us/assert map? shape)+  (us/assert number? width)+  (us/assert number? height)+  (assoc shape+         :width width+         :height height+         :x2 (+ (:x1 shape) width)+         :y2 (+ (:y1 shape) height)))"
https://api.github.com/repos/penpot/penpot/pulls/235,433903638,"@@ -206,33 +208,53 @@              (rx/map #(gpt/length %))              (rx/filter #(> % 1))              (rx/take 1)-             (rx/map #(start-move initial selected)))))))--(defn start-move-  [from-position ids]-  (ptk/reify ::start-move-    ptk/UpdateEvent-    (update [_ state]-      (-> state-          (assoc-in [:workspace-local :transform] :move)))-+             (rx/with-latest vector ms/mouse-position-alt)+             (rx/flat-map+              (fn [[_ alt?]]+                (prn ""ALT"" alt?)"
https://api.github.com/repos/penpot/penpot/pulls/240,434592086,"@@ -1329,6 +1329,24 @@             (rx/of (update-shape shape-id                                  {:interactions []})))))))) +;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+;; CANVAS OPTIONS+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;++(defn change-canvas-color+  [color]+  (ptk/reify ::change-canvas-color+    ptk/WatchEvent+    (watch [_ state stream]+      (rx/of (dwc/commit-changes+              [{:type :set-option+                :option :background+                :value color}]+              [{:type :set-option+                :option :background+                :value nil}]"
https://api.github.com/repos/penpot/penpot/pulls/254,437951795,"@@ -247,30 +242,16 @@ (declare group->rect-shape) (declare rect->rect-shape) +;; TODO: completly remove+"
https://api.github.com/repos/penpot/penpot/pulls/265,442788630,"@@ -87,11 +87,52 @@         (dissoc state :timer))       state))) +(def sortable-ctx (mf/create-context nil))++(mf/defc sortable-container+  [{:keys [children] :as props}]+  (let [global-drag-end (rx/subject)]"
https://api.github.com/repos/penpot/penpot/pulls/272,447625871,"@@ -119,6 +119,14 @@ (def selected-shapes   (l/derived :selected workspace-local)) +(def selected-objects+  (letfn [(selector [state]+           (let [selected (get-in state [:workspace-local :selected])+                 page-id (get-in state [:workspace-page :id])+                 objects (get-in state [:workspace-data page-id :objects])]+             (->> selected (map #(get objects %)))))]"
https://api.github.com/repos/penpot/penpot/pulls/279,457263318,"@@ -58,7 +58,8 @@      [:& input       {:type ""text""        :name :fullname-       :label (t locale ""settings.fullname-label"")}]+       :label (t locale ""settings.fullname-label"")+       :trim ""true""}]"
https://api.github.com/repos/penpot/penpot/pulls/282,458081198,"@@ -124,12 +124,29 @@  (mf/defc context-menu   [props]-  (let [mdata (mf/deref menu-ref)]+  (let [mdata (mf/deref menu-ref)+        top (- (get-in mdata [:position :y]) 20)+        left (get-in mdata [:position :x])+        dropdown-ref (mf/use-ref)]++    (mf/use-effect+      (mf/deps mdata)+      #(let [dropdown (mf/ref-val dropdown-ref)]+         (when dropdown+           (let [bounding-rect (dom/get-bounding-rect dropdown)+                 window-size (dom/get-window-size)+                 delta-x (max (- (:right bounding-rect) (:width window-size)) 0)+                 delta-y (max (- (:bottom bounding-rect) (:height window-size)) 0)+                 new-style (str ""top: "" (- top delta-y) ""px; ""+                                ""left: "" (- left delta-x) ""px;"")]+             (when (or (> delta-x 0) (> delta-y 0))+               (.setAttribute dropdown ""style"" new-style))))))"
https://api.github.com/repos/penpot/penpot/pulls/283,458675859,"@@ -464,10 +465,11 @@             uchange  {:type :del-obj                       :id id}] -        (rx/of (dwc/commit-changes [rchange] [uchange] {:commit-local? true})-               (dws/select-shapes (d/ordered-set id))-               (when (= :text (:type attrs))-                 (start-edition-mode id)))))))+        (rx/concat+         (rx/of (dwc/commit-changes [rchange] [uchange] {:commit-local? true})+                (dws/select-shapes (d/ordered-set id)))+         (->> (rx/of (start-edition-mode id))"
https://api.github.com/repos/penpot/penpot/pulls/285,460453045,"@@ -53,6 +53,8 @@   com.draines/postal {:mvn/version ""2.0.3""                       :exclusions [commons-codec/commons-codec]} +  org.clojars.pntblnk/clj-ldap {:mvn/version""0.0.16""}"
https://api.github.com/repos/penpot/penpot/pulls/286,464363909,"@@ -0,0 +1,272 @@+(ns app.http.export-svg+  (:require+   [cuerdas.core :as str]+   [clojure.walk :as walk]+   [app.browser :as bwr]+   [app.config :as cfg]+   [lambdaisland.glogi :as log]+   [cljs.spec.alpha :as s]+   [promesa.core :as p]+   [uxbox.common.exceptions :as exc :include-macros true]+   [uxbox.common.data :as d]+   [uxbox.common.pages :as cp]+   [uxbox.common.spec :as us]+   [""xml-js"" :as xml]+   [""child_process"" :as chp]+   [""os"" :as os]+   [""path"" :as path]+   [""fs"" :as fs])+  (:import+   goog.Uri))++(def default-svgo-plugins+  #js [#js {:convertStyleToAttrs false}])++(defn- create-tmpdir!+  [prefix]+  (p/create+   (fn [resolve reject]+     (js/console.log ""kaka"" fs/mkdtemp)"
https://api.github.com/repos/penpot/penpot/pulls/293,468364464,"@@ -23,24 +23,12 @@    [uxbox.tasks.delete-profile]    [uxbox.tasks.delete-object]    [uxbox.tasks.impl :as impl]-   [uxbox.util.time :as dt])-  (:import-   java.util.concurrent.ScheduledExecutorService-   java.util.concurrent.Executors))+   [uxbox.util.time :as dt]))  ;; --- Scheduler Executor Initialization"
https://api.github.com/repos/penpot/penpot/pulls/303,475519879,"@@ -0,0 +1,153 @@+;; This Source Code Form is subject to the terms of the Mozilla Public+;; License, v. 2.0. If a copy of the MPL was not distributed with this+;; file, You can obtain one at http://mozilla.org/MPL/2.0/.+;;+;; This Source Code Form is ""Incompatible With Secondary Licenses"", as+;; defined by the Mozilla Public License, v. 2.0.+;;+;; Copyright (c) 2020 UXBOX Labs SL++(ns app.http.auth.gitlab+  (:require+   [clojure.data.json :as json]+   [clojure.tools.logging :as log]+   [lambdaisland.uri :as uri]+   [app.common.exceptions :as ex]+   [app.config :as cfg]+   [app.db :as db]+   [app.services.tokens :as tokens]+   [app.services.mutations :as sm]+   [app.http.session :as session]+   [app.util.http :as http]))+++(def default-base-gitlab-uri ""https://gitlab.com"")+++(def scope ""read_user"")+++(defn- build-redirect-url+  []+  (let [public (uri/uri (:public-uri cfg/config))]+    (str (assoc public :path ""/api/oauth/gitlab/callback""))))+++(defn- build-oauth-uri+  []+  (let [base-uri (uri/uri (:gitlab-base-uri cfg/config default-base-gitlab-uri))]+    (assoc base-uri :path ""/oauth/authorize"")))+++(defn- build-token-url+  []+  (let [base-uri (uri/uri (:gitlab-base-uri cfg/config default-base-gitlab-uri))]+    (str (assoc base-uri :path ""/oauth/token""))))+++(defn- build-user-info-url+  []+  (let [base-uri (uri/uri (:gitlab-base-uri cfg/config default-base-gitlab-uri))]+    (str (assoc base-uri :path ""/api/v4/user""))))+++(defn- get-access-token+  [code]+  (let [params {:client_id (:gitlab-client-id cfg/config)+                :client_secret (:gitlab-client-secret cfg/config)+                :code code+                :grant_type ""authorization_code""+                :redirect_uri (build-redirect-url)}+        req    {:method :post+                :headers {""content-type"" ""application/x-www-form-urlencoded""}+                :uri (build-token-url)+                :body (uri/map->query-string params)}+        res    (http/send! req)]++    (when (not= 200 (:status res))+      (ex/raise :type :internal+                :code :invalid-response-from-gitlab+                :context {:status (:status res)+                          :body (:body res)}))++    (try+      (let [data (json/read-str (:body res))]+        (get data ""access_token""))+      (catch Throwable e+        (log/error ""unexpected error on parsing response body from gitlab access tooken request"" e)"
https://api.github.com/repos/penpot/penpot/pulls/304,481044199,"@@ -113,3 +113,17 @@                      (lazy-seq (loopfn (rest ids))))))]     (loopfn (:shapes root)))) +(defn lookup-page-objects+  ([state]+   (lookup-page-objects state (:current-page-id state)))+  ([state page-id]+   (get-in state [:workspace-data :pages-index page-id :objects])))++(defn lookup-page-options+  ([state]+   (lookup-page-options state (:current-page-id state)))+  ([state page-id]+   (get-in state [:workspace-data :pages-index page-id :options])))+++"
https://api.github.com/repos/penpot/penpot/pulls/308,484329132,"@@ -99,6 +99,12 @@                  (get-in file [:data :colors])))              st/state)) +(def workspace-recent-colors+  (l/derived (fn [state]+               (when-let [file (:workspace-file state)]"
https://api.github.com/repos/penpot/penpot/pulls/312,486454380,"@@ -1,61 +1,126 @@+;; This Source Code Form is subject to the terms of the Mozilla Public+;; License, v. 2.0. If a copy of the MPL was not distributed with this+;; file, You can obtain one at http://mozilla.org/MPL/2.0/.+;;+;; This Source Code Form is ""Incompatible With Secondary Licenses"", as+;; defined by the Mozilla Public License, v. 2.0.+;;+;; Copyright (c) 2020 UXBOX Labs SL+ (ns app.main.ui.modal   (:require-   [cuerdas.core :as str]+   [okulary.core :as l]    [goog.events :as events]    [rumext.alpha :as mf]    [app.main.store :as st]    [app.main.ui.keyboard :as k]-   [app.util.data :refer [classnames]]-   [app.util.dom :as dom])+   [app.util.dom :as dom]+   [app.main.refs :as refs]+   [potok.core :as ptk])   (:import goog.events.EventType)) -(defonce state (atom nil))+(defonce components (atom {}))++(defn show-modal [id type props]+  (ptk/reify ::show-modal+    ptk/UpdateEvent+    (update [_ state]+      (-> state+          (assoc-in [:workspace-local :modal] {:id id"
https://api.github.com/repos/penpot/penpot/pulls/311,489221494,"@@ -182,6 +182,20 @@       (assoc m key (apply f found args))       m))) +(defn assoc-in-when"
https://api.github.com/repos/penpot/penpot/pulls/330,492782813,"@@ -1236,22 +1237,80 @@                 (with-meta params                   {:on-success image-uploaded}))))))) +(declare paste-text)+ (def paste   (ptk/reify ::paste     ptk/WatchEvent     (watch [_ state stream]-      (->> (wapi/read-from-clipboard)-           (rx/map t/decode)-           (rx/filter #(= :copied-shapes (:type %)))-           (rx/map #(select-keys % [:selected :objects]))-           (rx/map paste-impl)-           (rx/catch (partial instance? js/SyntaxError)-             (fn [_]-               (->> (wapi/read-image-from-clipboard)-                    (rx/map paste-image-impl))))-           (rx/catch (fn [err]-                       (js/console.error ""Clipboard error:"" err)-                       (rx/empty)))))))+      (try+        (let [clipboard-str (wapi/read-from-clipboard)++              paste-transit-str+              (->> clipboard-str+                   (rx/filter t/transit?)+                   (rx/map t/decode)+                   (rx/filter #(= :copied-shapes (:type %)))+                   (rx/map #(select-keys % [:selected :objects]))+                   (rx/map paste-impl))++              paste-plain-text-str+              (->> clipboard-str+                   (rx/filter (comp not empty?))+                   (rx/map paste-text))++              paste-image-str+              (->> (wapi/read-image-from-clipboard)+                   (rx/map paste-image-impl))]++          (->> (rx/concat paste-transit-str+                          paste-plain-text-str+                          paste-image-str)+               (rx/first)+               (rx/catch+                   (fn [err]+                     (js/console.error ""Clipboard error:"" err)+                     (rx/empty)))))+        (catch :default e+          (.error js/console ""ERROR"" e))))))++(defn as-content [text]+  (let [paragraphs (->> (str/split text ""\n"")"
https://api.github.com/repos/penpot/penpot/pulls/337,494787110,"@@ -48,16 +48,16 @@  ;; --- Components (mf/defc palette-item-  [{:keys [color size]}]-  (let [select-color+  [{:keys [color size local?]}]+  (let [id (:id color)+        file-id (:file-id color)+        select-color         (fn [event]-          (if (kbd/shift? event)-            (st/emit! (udw/update-color-on-selected-shapes {:stroke-color (:value color)-                                                            :stroke-color-ref-file (:file-id color)-                                                            :stroke-color-ref-id (:id color)}))-            (st/emit! (udw/update-color-on-selected-shapes {:fill-color (:value color)-                                                            :fill-color-ref-file (:file-id color)-                                                            :fill-color-ref-id (:id color)}))))]+          (println ""item"" id file-id)"
https://api.github.com/repos/penpot/penpot/pulls/333,495765802,"@@ -795,11 +827,29 @@  (defmethod process-operation :set   [shape op]-  (let [attr (:attr op)-        val  (:val op)]-    (if (nil? val)-      (dissoc shape attr)-      (assoc shape attr val))))+  (let [attr   (:attr op)+        val    (:val op)+        ignore (:ignore-touched op)"
https://api.github.com/repos/penpot/penpot/pulls/336,495773305,"@@ -698,3 +707,82 @@         new-pos            (gpt/add root-pos delta)]     new-pos)) +(defn- generate-sync-colors-file+  [state file-id]+  (let [colors+        (if (nil? file-id)+          (get-in state [:workspace-data :colors])+          (get-in state [:workspace-libraries file-id :data :colors]))]+    (when (some? colors)+      (loop [pages (seq (vals (get-in state [:workspace-data :pages-index])))+             rchanges []+             uchanges []]+        (let [page (first pages)]+          (if (nil? page)+            [rchanges uchanges]+            (let [[page-rchanges page-uchanges]+                  (generate-sync-colors-page file-id page colors)]+              (recur (next pages)+                     (concat rchanges page-rchanges)+                     (concat uchanges page-uchanges)))))))))++(defn- generate-sync-colors-page+  [file-id page colors]+  (let [linked-color? (fn [shape]+                        (some+                          #(let [attr (name %)+                                 attr-ref-id (keyword (str attr ""-ref-id""))+                                 attr-ref-file (keyword (str attr ""-ref-file""))]+                             (and (get shape attr-ref-id)+                                  (= file-id (get shape attr-ref-file))))+                          cp/color-sync-attrs))++        linked-shapes (cph/select-objects linked-color? page)]+    (loop [shapes (seq linked-shapes)+           rchanges []+           uchanges []]+      (let [shape (first shapes)]+        (if (nil? shape)+          [rchanges uchanges]+          (let [[shape-rchanges shape-uchanges]+                (generate-sync-colors-shape shape page colors)]+            (recur (next shapes)+                   (concat rchanges shape-rchanges)"
https://api.github.com/repos/penpot/penpot/pulls/339,495788853,"@@ -0,0 +1,126 @@+;; This Source Code Form is subject to the terms of the Mozilla Public+;; License, v. 2.0. If a copy of the MPL was not distributed with this+;; file, You can obtain one at http://mozilla.org/MPL/2.0/.+;;+;; This Source Code Form is ""Incompatible With Secondary Licenses"", as+;; defined by the Mozilla Public License, v. 2.0.+;;+;; Copyright (c) 2020 UXBOX Labs SL++(ns app.main.ui.dashboard.files+  (:require+   [app.main.data.dashboard :as dd]+   [app.main.store :as st]+   [app.main.ui.components.context-menu :refer [context-menu]]+   [app.main.ui.dashboard.grid :refer [grid]]+   [app.main.ui.icons :as i]+   [app.main.ui.keyboard :as kbd]+   [app.main.ui.modal :as modal]+   [app.util.dom :as dom]+   [app.util.i18n :as i18n :refer [t]]+   [app.util.router :as rt]+   [okulary.core :as l]+   [rumext.alpha :as mf]))++(mf/defc header+  [{:keys [team project] :as props}]+  (let [local  (mf/use-state {:menu-open false+                             :edition false})+        locale (mf/deref i18n/locale)+        project-id (:id project)+        team-id    (:id team)++        on-menu-click+        (mf/use-callback #(swap! local assoc :menu-open true))++        on-menu-close+        (mf/use-callback #(swap! local assoc :menu-open false))++        on-edit+        (mf/use-callback #(swap! local assoc :edition true :menu-open false))++        on-blur+        (mf/use-callback+         (mf/deps project)+         (fn [event]+           (let [name (-> event dom/get-target dom/get-value)]+             #_(st/emit! (dd/rename-project (:id project) name))"
https://api.github.com/repos/penpot/penpot/pulls/344,498226964,"@@ -73,9 +73,10 @@ (s/def ::layout-flags (s/coll-of ::layout-flag))  (def default-layout-  #{:sitemap-    :sitemap-pages-    :layers+  #{;; :sitemap+    ;; :sitemap-pages+    ;; :layers+    :assets     :element-options"
https://api.github.com/repos/penpot/penpot/pulls/345,498716688,"@@ -185,19 +185,24 @@         lt-distances (->> lt-shapes (map distance-to-selrect) (filter pos?) (into #{}))         gt-distances (->> gt-shapes (map distance-to-selrect) (filter pos?) (into #{})) -         ;; We'll show the distances that match a distance from the selrect         show-candidate? #(check-in-set % (set/union lt-distances gt-distances))          ;; Checks the distances between elements for distances that match the set of distances         distance-coincidences (concat (get-shapes-match show-candidate? lt-shapes)                                       (get-shapes-match show-candidate? gt-shapes)) +         ;; Show the distances that either match one of the distances from the selrect         ;; or are from the selrect and go to a shape on the left and to the right-        show-distance? #(check-in-set % (into #{} (concat-                                                   (map first distance-coincidences)-                                                   (set/intersection lt-distances gt-distances))))+        show-distance?+        (fn [dist]+          (let [distances-to-show+                (->> (d/concat (mapv first distance-coincidences)"
https://api.github.com/repos/penpot/penpot/pulls/340,500175793,"@@ -186,3 +188,9 @@       (ts/schedule 100 #(st/emit! (dm/show {:content ""Something wrong has happened.""                                             :type :error                                             :timeout 5000}))))))+"
https://api.github.com/repos/penpot/penpot/pulls/352,501459485,"@@ -69,19 +78,19 @@ RUN set -ex; \ RUN set -ex; \     mkdir -p /tmp/node; \     cd /tmp/node; \-    export PATH=""$PATH:/usr/local/node-v12.18.3/bin""; \-    wget https://nodejs.org/dist/v12.18.3/node-v12.18.3-linux-x64.tar.xz; \-    tar xvf node-v12.18.3-linux-x64.tar.xz; \-    mv /tmp/node/node-v12.18.3-linux-x64 /usr/local/node-v12.18.3; \-    /usr/local/node-v12.18.3/bin/npm install -g yarn; \+    export PATH=""$PATH:/usr/local/node-v12.18.4/bin""; \"
https://api.github.com/repos/penpot/penpot/pulls/356,504815256,"@@ -1269,13 +1263,13 @@   ""modals.delete-project-confirm.message"" : {     ""used-in"" : [ ""src/app/main/ui/dashboard/files.cljs:57"" ],     ""translations"" : {-      ""en"" : ""Are you sure you wan't to delete this project?""+      ""en"" : ""Are you sure you want to delete this project?""     }   },   ""modals.delete-project-confirm.title"" : {     ""used-in"" : [ ""src/app/main/ui/dashboard/files.cljs:56"" ],     ""translations"" : {-      ""en"" : ""Deleting project""+      ""en"" : ""Delete project"""
https://api.github.com/repos/penpot/penpot/pulls/354,505348132,"@@ -58,7 +58,7 @@ (defn get-object-with-children   ""Retrieve a list with an object and all of its children""   [id objects]-  (map #(get objects %) (concat [id] (get-children id objects))))+  (map #(get objects %) (d/concat [id] (get-children id objects))))"
https://api.github.com/repos/penpot/penpot/pulls/358,506171401,"@@ -0,0 +1,29 @@+;; This Source Code Form is subject to the terms of the Mozilla Public+;; License, v. 2.0. If a copy of the MPL was not distributed with this+;; file, You can obtain one at http://mozilla.org/MPL/2.0/.+;;+;; This Source Code Form is ""Incompatible With Secondary Licenses"", as+;; defined by the Mozilla Public License, v. 2.0.+;;+;; Copyright (c) 2020 UXBOX Labs SL++(ns app.main.ui.workspace.colorpicker.pixel-picker"
https://api.github.com/repos/penpot/penpot/pulls/357,509156319,"@@ -0,0 +1,310 @@+;; This Source Code Form is subject to the terms of the Mozilla Public+;; License, v. 2.0. If a copy of the MPL was not distributed with this+;; file, You can obtain one at http://mozilla.org/MPL/2.0/.+;;+;; This Source Code Form is ""Incompatible With Secondary Licenses"", as+;; defined by the Mozilla Public License, v. 2.0.+;;+;; Copyright (c) 2020 UXBOX Labs SL++(ns app.main.data.workspace.comments+  (:require+   [cuerdas.core :as str]+   [app.common.data :as d]+   [app.common.exceptions :as ex]+   [app.common.geom.matrix :as gmt]+   [app.common.geom.point :as gpt]+   [app.common.geom.shapes :as geom]+   [app.common.math :as mth]+   [app.common.pages :as cp]+   [app.common.pages-helpers :as cph]+   [app.common.spec :as us]+   [app.common.uuid :as uuid]+   [app.config :as cfg]+   [app.main.constants :as c]+   [app.main.data.workspace.common :as dwc]+   [app.main.repo :as rp]+   [app.main.store :as st]+   [app.main.streams :as ms]+   [app.main.worker :as uw]+   [app.util.router :as rt]+   [app.util.timers :as ts]+   [app.util.transit :as t]+   [app.util.webapi :as wapi]+   [beicon.core :as rx]+   [cljs.spec.alpha :as s]+   [clojure.set :as set]+   [potok.core :as ptk]))+++(s/def ::comment-thread any?)+(s/def ::comment any?)++(declare create-draft-thread)+(declare clear-draft-thread)+(declare retrieve-comment-threads)+(declare refresh-comment-thread)+(declare handle-interrupt)+(declare handle-comment-layer-click)++(defn initialize-comments+  [file-id]+  (us/assert ::us/uuid file-id)+  (ptk/reify ::start-commenting"
https://api.github.com/repos/penpot/penpot/pulls/368,512504329,"@@ -236,16 +243,92 @@             frames  (get-in state [:viewer-data :frames])             share-token  (get-in state [:viewer-data :share-token])             index   (d/index-of-pred frames #(= (:id %) frame-id))]-        (rx/of (rt/nav :viewer {:page-id page-id :file-id file-id} {:token share-token-                                                                    :index index}))))))+        (rx/of (rt/nav :viewer+                       {:page-id page-id+                        :file-id file-id}+                       {:token share-token+                        :index index}))))))++(defn set-current-frame [frame-id]+  (ptk/reify ::current-frame+    ptk/UpdateEvent+    (update [_ state]+      (assoc-in state [:viewer-data :current-frame-id] frame-id))))++(defn deselect-all []+  (ptk/reify ::deselect-all+    ptk/UpdateEvent+    (update [_ state]+      (assoc-in state [:viewer-local :selected] #{}))))++(defn select-shape+  ([id]+   (ptk/reify ::select-shape+     ptk/UpdateEvent+     (update [_ state]+       (-> state+           (assoc-in [:viewer-local :selected] #{id}))))))++(defn toggle-selection+  [id]+  (ptk/reify ::toggle-selection+    ptk/UpdateEvent+    (update [_ state]+      (let [selected (get-in state [:viewer-local :selected])]+        (cond-> state+          (not (selected id)) (update-in [:viewer-local :selected] conj id)+          (selected id)       (update-in [:viewer-local :selected] disj id))))))++(defn shift-select-to+  [id]+  (ptk/reify ::shift-select-to+    ptk/UpdateEvent+    (update [_ state]+      (let [objects (get-in state [:viewer-data :objects])+            selection (-> state+                          (get-in [:viewer-local :selected] #{})+                          (conj id))]+        (-> state+            (assoc-in [:viewer-local :selected]+                      (cph/expand-region-selection objects selection)))))))++(defn select-all+  []+  (ptk/reify ::shift-select-to"
https://api.github.com/repos/penpot/penpot/pulls/366,514140864,"@@ -27,10 +27,13 @@    [app.util.i18n :refer [tr]]    [app.util.router :as rt]    [app.util.time :as dt]+   [app.util.logging :as log]    [beicon.core :as rx]    [cljs.spec.alpha :as s]    [potok.core :as ptk])) +(log/set-level! :warn)"
https://api.github.com/repos/penpot/penpot/pulls/375,514922767,"@@ -16,38 +16,13 @@    [app.util.color :as uc]    [app.common.math :as mth]    [app.main.ui.icons :as i]+   [app.util.code-gen :as code]"
https://api.github.com/repos/penpot/penpot/pulls/378,516573837,"@@ -11,43 +11,69 @@   (:require    [rumext.alpha :as mf]    [cuerdas.core :as str]+   [okulary.core :as l]+   [app.common.math :as mth]    [app.util.dom :as dom]    [app.util.i18n :refer [t] :as i18n]    [app.util.color :as uc]-   [app.common.math :as mth]-   [app.main.ui.icons :as i]    [app.util.code-gen :as cg]    [app.util.webapi :as wapi]+   [app.main.ui.icons :as i]+   [app.main.store :as st]    [app.main.ui.components.copy-button :refer [copy-button]]    [app.main.ui.components.color-bullet :refer [color-bullet color-name]])) ++(def file-colors-ref+  (l/derived (l/in [:viewer-data :file :colors]) st/state))++(defn make-colors-library-ref [file-id]+  (let [get-library+        (fn [state]+          (get-in state [:viewer-libraries file-id :data :colors]))]+    #(l/derived get-library st/state)))+ (mf/defc color-row [{:keys [color format copy-data on-change-format]}]-  (let [locale (mf/deref i18n/locale)]+  (let [locale (mf/deref i18n/locale)++        colors-library-ref (mf/use-memo"
https://api.github.com/repos/penpot/penpot/pulls/379,516630516,"@@ -43,6 +43,7 @@    [clojure.set :as set]    [clojure.set :as set]    [cuerdas.core :as str]+   [cljs.pprint :refer [pprint]]"
https://api.github.com/repos/penpot/penpot/pulls/383,517969278,"@@ -152,7 +152,9 @@         locale       (mf/deref i18n/locale)         project      (mf/deref refs/workspace-project)         file         (mf/deref workspace-file)-        libraries    (mf/deref refs/workspace-libraries)+        libraries    (d/filterm+                       (fn [[key val]] (:is-direct val))+                       (mf/deref refs/workspace-libraries))"
https://api.github.com/repos/penpot/penpot/pulls/385,521236293,"@@ -83,7 +83,7 @@                                             :fullname (str ""Profile "" index)                                             :password ""123123""                                             :demo? true-                                            :email (str ""profile"" index "".test@uxbox.io"")})+                                            :email (str ""profile"" index "".test@penpot.io"")})                     team-id  (:default-team-id prof)"
https://api.github.com/repos/penpot/penpot/pulls/389,522862355,"@@ -178,7 +178,7 @@ (defmethod ptk/handle-error :validation   [error]   (ts/schedule-   (st/emitf (dm/show {:content ""Unexpected validation error.""+   (st/emitf (dm/show {:content ""Unexpecred validation error (server side)."""
https://api.github.com/repos/penpot/penpot/pulls/394,528636788,"@@ -134,6 +134,15 @@       ""es"" : ""Entrar con Gitlab""     }   },+  ""auth.login-with-github-submit"" : {+    ""used-in"" : [ ""src/app/main/ui/auth/login.cljs:154"" ],+    ""translations"" : {+      ""en"" : ""Login with Github"",+      ""fr"" : ""Se connecter via Github"",+      ""ru"" : ""Вход через Gitnub"","
https://api.github.com/repos/penpot/penpot/pulls/396,529298802,"@@ -0,0 +1,697 @@+;; This Source Code Form is subject to the terms of the Mozilla Public+;; License, v. 2.0. If a copy of the MPL was not distributed with this+;; file, You can obtain one at http://mozilla.org/MPL/2.0/.+;;+;; This Source Code Form is ""Incompatible With Secondary Licenses"", as+;; defined by the Mozilla Public License, v. 2.0.+;;+;; Copyright (c) 2020 UXBOX Labs SL++(ns app.main.data.workspace.drawing.path+  (:require+   [beicon.core :as rx]+   [potok.core :as ptk]+   [app.common.math :as mth]+   [app.common.data :as d]+   [app.common.geom.point :as gpt]+   [app.common.geom.shapes :as gsh]+   [app.util.data :as ud]+   [app.common.data :as cd]+   [app.util.geom.path :as ugp]+   [app.main.streams :as ms]+   [app.main.data.workspace.common :as dwc]+   [app.main.data.workspace.drawing.common :as common]+   [app.common.geom.shapes.path :as gsp]))++;; CONSTANTS+(defonce enter-keycode 13)+++;; PRIVATE METHODS++(defn get-path-id+  ""Retrieves the currently editing path id""+  [state]+  (or (get-in state [:workspace-local :edition])+      (get-in state [:workspace-drawing :object :id])))++(defn get-path+  ""Retrieves the location of the path object and additionaly can pass+  the arguments. This location can be used in get-in, assoc-in... functions""+  [state & path]+  (let [edit-id (get-in state [:workspace-local :edition])+        page-id (:current-page-id state)]+    (cd/concat+     (if edit-id+       [:workspace-data :pages-index page-id :objects edit-id]+       [:workspace-drawing :object])+     path)))++(defn update-selrect+  ""Updates the selrect and points for a path""+  [shape]+  (let [selrect (gsh/content->selrect (:content shape))+        points (gsh/rect->points selrect)]+    (assoc shape :points points :selrect selrect)))++(defn next-node+  ""Calculates the next-node to be inserted.""+  [shape position prev-point prev-handler]+  (let [last-command (-> shape :content last :command)+        add-line?   (and prev-point (not prev-handler) (not= last-command :close-path))+        add-curve?  (and prev-point prev-handler (not= last-command :close-path))]+    (cond+      add-line?   {:command :line-to+                   :params position}+      add-curve?  {:command :curve-to+                   :params (ugp/make-curve-params position prev-handler)}+      :else       {:command :move-to+                   :params position})))++(defn append-node+  ""Creates a new node in the path. Usualy used when drawing.""+  [shape position prev-point prev-handler]+  (let [command (next-node shape position prev-point prev-handler)]+    (-> shape+        (update :content (fnil conj []) command)+        (update-selrect))))++(defn move-handler-modifiers [content index prefix match-opposite? dx dy]+  (let [[cx cy] (if (= prefix :c1) [:c1x :c1y] [:c2x :c2y])+        [ocx ocy] (if (= prefix :c1) [:c2x :c2y] [:c1x :c1y])+        opposite-index (ugp/opposite-index content index prefix)]++    (cond-> {}+      :always+      (update index assoc cx dx cy dy)++      (and match-opposite? opposite-index)+      (update opposite-index assoc ocx (- dx) ocy (- dy)))))++(defn end-path-event? [{:keys [type shift] :as event}]+  (or (= event ::end-path)+      (= (ptk/type event) :esc-pressed)+      (= event :interrupt) ;; ESC+      (and (ms/keyboard-event? event)+           (= type :down)+           ;; TODO: Enter now finish path but can finish drawing/editing as well+           (= enter-keycode (:key event)))))+++;; EVENTS++(defn init-path [id]+  (ptk/reify ::init-path+    ptk/UpdateEvent+    (update [_ state]+      (-> state+          #_(assoc-in [:workspace-drawing :object :initialized?] true)+          #_(assoc-in [:workspace-local :edit-path :last-point] nil)))))"
https://api.github.com/repos/penpot/penpot/pulls/403,531420701,"@@ -571,7 +571,10 @@         [:*           [:span (:name file)]           [:span.tool-link.tooltip.tooltip-left {:alt ""Open library file""}-           [:a {:href (str ""#"" url) :target ""_blank""} i/chain]]])]+           [:a {:href (str ""#"" url)+                :target ""_blank""+                :on-click (fn [event] (dom/stop-propagation event))}"
https://api.github.com/repos/penpot/penpot/pulls/406,531610592,"@@ -0,0 +1,45 @@+;; This Source Code Form is subject to the terms of the Mozilla Public+;; License, v. 2.0. If a copy of the MPL was not distributed with this+;; file, You can obtain one at http://mozilla.org/MPL/2.0/.+;;+;; This Source Code Form is ""Incompatible With Secondary Licenses"", as+;; defined by the Mozilla Public License, v. 2.0.+;;+;; Copyright (c) 2020 UXBOX Labs SL++(ns app.main.ui.components.numeric-input+  (:require+   [rumext.alpha :as mf]+   [app.main.ui.keyboard :as kbd]+   [app.common.data :as d]+   [app.util.dom :as dom]+   [app.util.object :as obj]))++(mf/defc numeric-input+  {::mf/wrap-props false}+  [props]+  (let [on-key-down+        (fn [event]"
https://api.github.com/repos/penpot/penpot/pulls/404,532397561,"@@ -36,8 +37,9 @@         nil          (= type :frame)-        (do (dom/stop-propagation event)-            (st/emit! (dw/start-move-selected)))+        (when selected?+          (do (dom/stop-propagation event)+              (st/emit! (dw/start-move-selected))))"
https://api.github.com/repos/penpot/penpot/pulls/407,532431266,"@@ -3700,10 +3700,10 @@   ""workspace.toolbar.rect"" : {     ""used-in"" : [ ""src/app/main/ui/workspace/left_toolbar.cljs:64"" ],     ""translations"" : {-      ""en"" : ""Box (B)"",-      ""fr"" : ""Boîte (B)"",-      ""ru"" : ""Прямоугольник (B)"","
https://api.github.com/repos/penpot/penpot/pulls/435,540784560,"@@ -1197,10 +1224,16 @@       (watch [_ state stream]         (let [objects  (dwc/lookup-page-objects state)               selected (get-in state [:workspace-local :selected])-              cdata    (prepare-selected objects selected)]-          (->> (t/encode cdata)-               (wapi/write-to-clipboard)-               (rx/from)+              pdata    (reduce (partial collect-object-ids objects) {} selected)+              initial  {:type :copied-shapes+                        :selected selected+                        :objects {}+                        :images #{}}]+          (->> (rx/from (seq (vals pdata)))+               (rx/fmap (partial prepare-object objects selected))"
https://api.github.com/repos/penpot/penpot/pulls/441,553238016,"@@ -5,9 +5,18 @@ ;; This Source Code Form is ""Incompatible With Secondary Licenses"", as ;; defined by the Mozilla Public License, v. 2.0. ;;-;; Copyright (c) 2020 UXBOX Labs SL+;; Copyright (c) 2020 Andrey Antukh <niwi@niwi.nz>"
https://api.github.com/repos/penpot/penpot/pulls/443,553302038,"@@ -376,22 +409,54 @@               {:file-id file-id                :is-local local?                :url uri-               :name name})]+               :name (or name (url-name uri))})++            file-stream+            (when data+              (->> (rx/from data)+                   (rx/map di/validate-file)))++            image-stream+            (cond+              (seq uris)++              (rx/merge+               (->> (rx/from uris)+                    (rx/filter (comp not svg-url?))+                    (rx/map prepare-uri)+                    (rx/mapcat #(rp/mutation! :create-file-media-object-from-url %))+                    (rx/do on-image))++               (->> (rx/from uris)+                    (rx/filter svg-url?)+                    (rx/merge-map fetch-svg)+                    (rx/merge-map parse-svg)+                    (rx/with-latest vector uris)+                    (rx/map #(assoc (first %) :name (or name (url-name (second %)))))+                    (rx/do on-svg)))"
https://api.github.com/repos/penpot/penpot/pulls/445,553862621,"@@ -99,6 +99,13 @@         (fn [color]           (emit-changes! #(-> % (assoc-in [:params :color] color)))) +        handle-detach-color+        (fn []+          (emit-changes! #(-> % (assoc-in [:params :color]+                                          (-> (:color params)+                                              (assoc :id nil)+                                              (assoc :file-id nil))))))"
https://api.github.com/repos/penpot/penpot/pulls/451,555691388,"@@ -184,24 +198,51 @@                  (rx/map select-shapes))))))))  (defn select-inside-group-  [group-id position]-  (ptk/reify ::select-inside-group-    ptk/WatchEvent-    (watch [_ state stream]-      (let [page-id  (:current-page-id state)-            objects  (dwc/lookup-page-objects state page-id)-            group    (get objects group-id)-            children (map #(get objects %) (:shapes group))--            ;; We need to reverse the children because if two children-            ;; overlap we want to select the one that's over (and it's-            ;; in the later vector position-            selected (->> children-                          reverse-                          (d/seek #(geom/has-point? % position)))]-        (when selected-          (rx/of (deselect-all) (select-shape (:id selected))))))))-+  ([group-id position] (select-inside-group group-id position false))+  ([group-id position deep-children]+   (ptk/reify ::select-inside-group+     ptk/WatchEvent+     (watch [_ state stream]+       (let [page-id  (:current-page-id state)+             objects  (dwc/lookup-page-objects state page-id)+             group    (get objects group-id)+             children (map #(get objects %) (:shapes group))++             ;; We need to reverse the children because if two children+             ;; overlap we want to select the one that's over (and it's+             ;; in the later vector position+             selected (->> children+                           reverse+                           (d/seek #(geom/has-point? % position)))]+         (when selected+           (rx/of (deselect-all) (select-shape (:id selected)))))))))++(defn select-last-layer+  ([position]+   (ptk/reify ::select-last-layer+     ptk/WatchEvent+     (watch [_ state stream]+       (let [page-id  (:current-page-id state)+             objects (dwc/lookup-page-objects state page-id)+             find-shape+             (fn [selection]+               (when (seq selection)"
https://api.github.com/repos/penpot/penpot/pulls/461,558398911,"@@ -0,0 +1,49 @@+/**+ *+ * This Source Code Form is subject to the terms of the Mozilla Public+ * License, v. 2.0. If a copy of the MPL was not distributed with this+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.+ *+ * This Source Code Form is ""Incompatible With Secondary Licenses"", as+ * defined by the Mozilla Public License, v. 2.0.+ *+ * Copyright (c) 2020 UXBOX Labs SL+ */+ */++/*+ * Provide instances of some javascript global objects, by looking for+ * them in the browser, the current worker or creating a dummy for test+ * environment.+ */++""use strict"";++goog.provide(""app.util.globals"");+goog.provide(""app.util.globals.window"");+goog.provide(""app.util.globals.location"");"
https://api.github.com/repos/penpot/penpot/pulls/474,561165272,"@@ -132,13 +148,13 @@          ;; Distance between the elements in an area, these are the snap         ;; candidates to either side-        lt-cand (inner-distance shapes-lt)-        gt-cand (inner-distance shapes-gt)+        lt-cand (inner-distance (mapv :selrect shapes-lt))+        gt-cand (inner-distance (mapv :selrect shapes-gt))          ;; Distance between the elements to either side and the current shape         ;; this is the distance that will ""snap""-        lt-dist (mapv dist-lt shapes-lt)-        gt-dist (mapv dist-gt shapes-gt)+        lt-dist (->> (map dist-lt shapes-lt) (into #{}))+        gt-dist (->> (map dist-gt shapes-gt) (into #{}))"
https://api.github.com/repos/penpot/penpot/pulls/477,564371151,"@@ -529,14 +529,15 @@         (st/emit! (rt/nav-new-window :workspace pparams qparams))))))  (defn ext-library-changed-  [file-id modified-at changes]+  [file-id modified-at revn changes]   (us/assert ::us/uuid file-id)   (us/assert ::cp/changes changes)   (ptk/reify ::ext-library-changed     ptk/UpdateEvent     (update [_ state]       (-> state-          (assoc-in [:workspace-libraries file-id :modified-at] modified-at)+          (update-in [:workspace-libraries file-id]+                     #(assoc % :modified-at modified-at :revn revn))"
https://api.github.com/repos/penpot/penpot/pulls/480,564473756,"@@ -450,7 +450,7 @@                 <table border=""0"" cellpadding=""0"" cellspacing=""0"" role=""presentation"" style=""vertical-align:top;"" width=""100%"">                   <tr>                     <td align=""center"" style=""font-size:0px;padding:10px 25px;word-break:break-word;"">-                      <div style=""font-family:Source Sans Pro, sans-serif;font-size:14px;line-height:150%;text-align:center;color:#64666A;"">Penpot © 2020 | Made with &lt;3 and Open Source</div>+                      <div style=""font-family:Source Sans Pro, sans-serif;font-size:14px;line-height:150%;text-align:center;color:#64666A;"">Penpot @ 2021 | Made with &lt;3 and Open Source</div>"
https://api.github.com/repos/penpot/penpot/pulls/483,564687710,"@@ -153,8 +153,15 @@             result))]     (reduce extract-attrs [] shapes))) +;; TODO: Remove when added to rumext+(defn check-props"
https://api.github.com/repos/penpot/penpot/pulls/500,566957024,"@@ -464,24 +464,27 @@          (assoc response                 :cookies (session/cookies session {:value """" :max-age -1})))}))) -(def ^:private sql:teams-ownership-check-  ""with teams as (-     select tpr.team_id as id-       from team_profile_rel as tpr-      where tpr.profile_id = ?-        and tpr.is_owner is true++(def sql:owned-teams+  ""with owner_teams as (+      select tpr.team_id as id+        from team_profile_rel as tpr+       where tpr.is_owner is true+         and tpr.profile_id = 'ea9a487c-1e3a-5ec8-8fe4-e46257a603d7'"
https://api.github.com/repos/penpot/penpot/pulls/502,567113875,"@@ -727,7 +730,8 @@        :width (:width vport 0)        :height (:height vport 0)        :view-box (format-viewbox vbox)-       :ref viewport-ref+       :ref #(do (mf/set-ref-val! viewport-ref %)+                 (reset! viewport-node %))"
https://api.github.com/repos/penpot/penpot/pulls/503,567478062,"@@ -186,17 +184,17 @@               (sql/insert table params opts)               (assoc opts :return-keys true)))) -(defn- select-values [map ks]-  (reduce #(conj %1 (map %2)) [] ks))+;; (defn- select-values [map ks]+;;   (reduce #(conj %1 (map %2)) [] ks))  (defn insert-multi!   [ds table param-list]   (doseq [params param-list]-      (insert! ds table params))+    (insert! ds table params))   ;; FIXME: Won't work   #_(let [keys (->> param-list first keys (into []))-        params (->> param-list (mapv #(->> keys (select-values %) (into []))) )]-    (jdbc-sql/insert-multi! ds table keys params default-options)))+          params (->> param-list (mapv #(->> keys (select-values %) (into []))) )]"
https://api.github.com/repos/penpot/penpot/pulls/510,567955927,"@@ -21,37 +21,47 @@ jobs:      environment:       # Customize the JVM maximum heap limit-      JVM_OPTS: -Xmx512m+      JVM_OPTS: -Xmx1g      steps:       - checkout        # Download and cache dependencies       - restore_cache:          keys:-           - v1-dependencies-{{ checksum ""backend/deps.edn"" }}+           - v1-dependencies-{{ checksum ""backend/deps.edn"" }}-{{ checksum ""frontend/deps.edn""}}            # fallback to using the latest cache if no exact match is found            - v1-dependencies-        # run lint       - run:           working_directory: ""./backend""-          name: lint+          name: backend lint           command: ""clj-kondo --lint src/""        # run test       - run:           working_directory: ""./backend""-          name: test+          name: backend test           command: ""clojure -M:dev:tests""           environment:             PENPOT_DATABASE_URI: ""postgresql://localhost/penpot""             PENPOT_DATABASE_USERNAME: penpot_test             PENPOT_DATABASE_PASSWORD: penpot_test             PENPOT_REDIS_URI: ""redis://localhost/1"" +      - run:+          working_directory: ""./frontend""+          name: frontend tests+          command: |+            yarn install+            npx shadow-cljs compile tests+            node target/tests.js"
https://api.github.com/repos/penpot/penpot/pulls/552,569457778,"@@ -376,3 +376,25 @@      ;; The first id will be the top-most     (get objects (first sorted-ids))))++(defn is-parent?+  ""Check if `parent-candidate` is parent of `shape-id`""+  [objects shape-id parent-candidate]++  (loop [current (get objects parent-candidate)+         done #{}+         pending (get-in objects [parent-candidate :shapes]) ]"
https://api.github.com/repos/penpot/penpot/pulls/512,569465400,"@@ -3823,166 +3834,172 @@     }   },   ""workspace.shape.menu.back"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:107"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:124"" ],     ""translations"" : {       ""en"" : ""Send to back"",       ""es"" : ""Enviar al fondo""     }   },   ""workspace.shape.menu.backward"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:104"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:121"" ],     ""translations"" : {       ""en"" : ""Send backward"",       ""es"" : ""Enviar atrás""     }   },   ""workspace.shape.menu.copy"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:85"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:102"" ],     ""translations"" : {       ""en"" : ""Copy"",       ""es"" : ""Copiar""     }   },   ""workspace.shape.menu.create-component"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:151"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:168"" ],     ""translations"" : {       ""en"" : ""Create component"",       ""es"" : ""Crear componente""     }   },   ""workspace.shape.menu.cut"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:88"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:105"" ],     ""translations"" : {       ""en"" : ""Cut"",       ""es"" : ""Cortar""     }   },   ""workspace.shape.menu.delete"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:181"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:200"" ],     ""translations"" : {       ""en"" : ""Delete"",       ""es"" : ""Eliminar""     }   },   ""workspace.shape.menu.detach-instance"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/sidebar/options/component.cljs:79"", ""src/app/main/ui/workspace/sidebar/options/component.cljs:84"", ""src/app/main/ui/workspace/context_menu.cljs:163"", ""src/app/main/ui/workspace/context_menu.cljs:173"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:180"", ""src/app/main/ui/workspace/context_menu.cljs:190"", ""src/app/main/ui/workspace/sidebar/options/component.cljs:95"", ""src/app/main/ui/workspace/sidebar/options/component.cljs:100"" ],     ""translations"" : {       ""en"" : ""Detach instance"",       ""es"" : ""Desacoplar instancia""     }   },   ""workspace.shape.menu.duplicate"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:94"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:111"" ],     ""translations"" : {       ""en"" : ""Duplicate"",       ""es"" : ""Duplicar""     }   },   ""workspace.shape.menu.forward"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:98"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:115"" ],     ""translations"" : {       ""en"" : ""Bring forward"",       ""es"" : ""Mover hacia delante""     }   },   ""workspace.shape.menu.front"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:101"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:118"" ],     ""translations"" : {       ""en"" : ""Bring to front"",       ""es"" : ""Mover al frente""     }   },   ""workspace.shape.menu.go-master"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/sidebar/options/component.cljs:86"", ""src/app/main/ui/workspace/context_menu.cljs:177"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:194"", ""src/app/main/ui/workspace/sidebar/options/component.cljs:102"" ],     ""translations"" : {       ""en"" : ""Go to master component file"",       ""es"" : ""Ir al archivo del componente maestro""     }   },   ""workspace.shape.menu.group"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:114"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:131"" ],     ""translations"" : {       ""en"" : ""Group"",       ""es"" : ""Grupo""     }   },   ""workspace.shape.menu.hide"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:137"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:154"" ],     ""translations"" : {       ""en"" : ""Hide"",       ""es"" : ""Ocultar""     }   },   ""workspace.shape.menu.lock"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:143"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:160"" ],     ""translations"" : {       ""en"" : ""Lock"",       ""es"" : ""Bloquear""     }   },   ""workspace.shape.menu.mask"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:117"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:134"", ""src/app/main/ui/workspace/context_menu.cljs:147"" ],     ""translations"" : {       ""en"" : ""Mask"",       ""es"" : ""Máscara""     }   },   ""workspace.shape.menu.paste"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:91"", ""src/app/main/ui/workspace/context_menu.cljs:190"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:108"", ""src/app/main/ui/workspace/context_menu.cljs:209"" ],     ""translations"" : {       ""en"" : ""Paste"",       ""es"" : ""Pegar""     }   },   ""workspace.shape.menu.reset-overrides"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/sidebar/options/component.cljs:80"", ""src/app/main/ui/workspace/sidebar/options/component.cljs:85"", ""src/app/main/ui/workspace/context_menu.cljs:165"", ""src/app/main/ui/workspace/context_menu.cljs:175"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:182"", ""src/app/main/ui/workspace/context_menu.cljs:192"", ""src/app/main/ui/workspace/sidebar/options/component.cljs:96"", ""src/app/main/ui/workspace/sidebar/options/component.cljs:101"" ],     ""translations"" : {       ""en"" : ""Reset overrides"",       ""es"" : ""Deshacer modificaciones""     }   },   ""workspace.shape.menu.show"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:135"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:152"" ],     ""translations"" : {       ""en"" : ""Show"",       ""es"" : ""Mostrar""     }   },   ""workspace.shape.menu.show-master"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/sidebar/options/component.cljs:82"", ""src/app/main/ui/workspace/context_menu.cljs:169"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:186"", ""src/app/main/ui/workspace/sidebar/options/component.cljs:98"" ],     ""translations"" : {       ""en"" : ""Show master component"",       ""es"" : ""Ver componente maestro""     }   },   ""workspace.shape.menu.ungroup"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:123"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:140"" ],     ""translations"" : {       ""en"" : ""Ungroup"",       ""es"" : ""Desagrupar""     }   },   ""workspace.shape.menu.unlock"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:141"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:158"" ],     ""translations"" : {       ""en"" : ""Unlock"",       ""es"" : ""Desbloquear""     }   },   ""workspace.shape.menu.unmask"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:127"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:144"" ],     ""translations"" : {       ""en"" : ""Unmask"",       ""es"" : ""Quitar máscara""     }   },   ""workspace.shape.menu.update-master"" : {-    ""used-in"" : [ ""src/app/main/ui/workspace/sidebar/options/component.cljs:81"", ""src/app/main/ui/workspace/context_menu.cljs:167"" ],+    ""used-in"" : [ ""src/app/main/ui/workspace/context_menu.cljs:184"", ""src/app/main/ui/workspace/context_menu.cljs:196"", ""src/app/main/ui/workspace/sidebar/options/component.cljs:97"", ""src/app/main/ui/workspace/sidebar/options/component.cljs:103"" ],     ""translations"" : {       ""en"" : ""Update master component"",       ""es"" : ""Actualizar componente maestro""     }   },+  ""workspace.sidebar.history"" : {+    ""used-in"" : [ ""src/app/main/ui/workspace/left_toolbar.cljs:122"" ],+    ""translations"" : {+      ""en"" : ""History (%s)"""
https://api.github.com/repos/penpot/penpot/pulls/561,570041542,"@@ -173,6 +173,12 @@       ""es"" : ""Introduce la nueva contraseña""     }   },+  ""auth.notifications.profile-not-verified"": {+    ""translations"": {+      ""en"": ""Profile is not verified, please verify profile before continue."",+      ""es"": ""El perfil aun no ha sido validado, porfavor valide el perfil antes de continuar."""
https://api.github.com/repos/penpot/penpot/pulls/591,571636088,"@@ -21,7 +21,7 @@     ""used-in"" : [ ""src/app/main/ui/auth/login.cljs:161"", ""src/app/main/ui/auth/register.cljs:138"" ],     ""translations"" : {       ""en"" : ""Create demo account"",-      ""fr"" : ""Vous voulez juste essayer?"",+      ""fr"" : ""Vous voulez juste essayer ?"","
https://api.github.com/repos/penpot/penpot/pulls/606,572834055,"@@ -43,6 +43,16 @@  ;; --- Emails +(s/def ::subject ::us/string)+(s/def ::content ::us/string)++(s/def ::feedback+  (s/keys :req-un [::subject ::content]))++(def feedback+  ""A new profile registration welcome email."""
https://api.github.com/repos/penpot/penpot/pulls/635,575055940,"@@ -0,0 +1,212 @@+;; This Source Code Form is subject to the terms of the Mozilla Public+;; License, v. 2.0. If a copy of the MPL was not distributed with this+;; file, You can obtain one at http://mozilla.org/MPL/2.0/.+;;+;; This Source Code Form is ""Incompatible With Secondary Licenses"", as+;; defined by the Mozilla Public License, v. 2.0.+;;+;; Copyright (c) 2020 Andrey Antukh <niwi@niwi.nz>++(ns app.http.awsns+  ""AWS SNS webhook handler for bounces.""+  (:require+   [app.common.exceptions :as ex]+   [app.db :as db]+   [app.db.sql :as sql]+   [app.util.http :as http]+   [app.util.json :as json]+   [clojure.pprint :refer [pprint]]+   [clojure.spec.alpha :as s]+   [clojure.tools.logging :as log]+   [cuerdas.core :as str]+   [integrant.core :as ig]+   [jsonista.core :as j]))++(declare parse-json)+(declare parse-notification)+(declare process-report)++(defn- pprint-report+  [message]+  (binding [clojure.pprint/*print-right-margin* 120]+    (with-out-str (pprint message))))++(defmethod ig/pre-init-spec ::handler [_]+  (s/keys :req-un [::db/pool]))++(defmethod ig/init-key ::handler+  [_ cfg]+  (fn [request]+    (let [body  (parse-json (slurp (:body request)))++          body  {""Type"" ""Notification""+                 ""Message"" (json/encode-str body)}++          mtype (get body ""Type"")]"
https://api.github.com/repos/penpot/penpot/pulls/637,575215557,"@@ -158,7 +162,7 @@     (watch [_ state stream]       (let [{:keys [id] :as profile} (:profile state)]         (->> (rp/mutation :update-profile-props {:props {:onboarding-viewed true}})-             (rx/map (constantly fetch-profile)))))))+             (rx/map (constantly (fetch-profile))))))))"
https://api.github.com/repos/penpot/penpot/pulls/636,575302368,"@@ -120,6 +120,21 @@                        (rx/map (constantly false))))                  (rx/dedupe))]         (rx/subscribe-with ob sub)+        sub))++(defonce keyboard-ctrl+  (let [sub (rx/behavior-subject nil)+        ob  (->> (rx/merge+                  (->> st/stream+                       (rx/filter keyboard-event?)+                       (rx/map :ctrl))"
https://api.github.com/repos/penpot/penpot/pulls/734,588114496,"@@ -0,0 +1,2665 @@+{+  ""requires"": true,+  ""lockfileVersion"": 1,"
https://api.github.com/repos/penpot/penpot/pulls/739,589517609,"@@ -120,6 +120,17 @@         (obj/merge! attrs (clj->js stroke-attrs)))       attrs))) +(defn add-layer-props [attrs shape]+  (let [layer-attrs+        (cond-> {}"
https://api.github.com/repos/penpot/penpot/pulls/747,592679289,"@@ -171,8 +179,10 @@     (ptk/reify ::fetch-shared-files       ptk/WatchEvent       (watch [_ state stream]-        (->> (rp/query :shared-files {:team-id team-id})-             (rx/map #(partial fetched %)))))))+        (rx/concat+          (->> (rp/query :shared-files {:team-id team-id})+               (rx/map #(partial fetched %)))+          (rx/of (clear-selected-files)))))))"
https://api.github.com/repos/penpot/penpot/pulls/752,595139809,"@@ -12,6 +12,8 @@ - Duplicate and move files and projects [Taiga #267](https://tree.taiga.io/project/penpot/us/267) - Import SVG will create Penpot's shapes - Improve french translations [#731](https://github.com/penpot/penpot/pull/731)+- Replace Slate-Editor with DraftJS [#752](https://github.com/penpot/penpot/pull/752)"
https://api.github.com/repos/penpot/penpot/pulls/766,598670966,"@@ -84,8 +84,10 @@  ;; --- Toggle shape's selection status (selected or deselected) -(defn select-shape-  ([id] (select-shape id false))+(defn select-shape-"
https://api.github.com/repos/penpot/penpot/pulls/785,601838165,"@@ -84,10 +84,24 @@                   (d/without-nils)                   (blob/encode)))))) +(def sql:retrieve-used-libraries+  ""select flr.*+     from file_library_rel as flr+    inner join file as l on (flr.library_file_id = l.id)+    where flr.file_id = ?+      and l.deleted_at is null"")++(def sql:retrieve-used-media-objects+  ""select fmo.*+     from file_media_object as fmo+    inner join storage_object as o on (fmo.media_id = o.id)+    where fmo.file_id = ?+      and (o.deleted_at is null or o.deleted_at > now())"")"
https://api.github.com/repos/penpot/penpot/pulls/800,603592166,"@@ -38,7 +41,21 @@                               (let [value (-> event dom/get-target dom/get-value)                                     value (or (d/parse-integer value) value)]                                 (swap! state assoc :current-value value)-                                (when on-change (on-change value))))]+                                (when on-change (on-change value))))++        on-node-load+        (fn [node]+          ;; There is a problem when changing the state in this callback that+          ;; produces the dropdown to close in the same event+          (timers/schedule+           #(when-let [bounds (when node (dom/get-bounding-rect node))]+              (let [{window-height :height} (dom/get-window-size)+                    {:keys [left top height]} bounds+                    bottom (when (< (- window-height top) 300) (- window-height top))+                    top (when (>= (- window-height top) 300) (+ top height))]+                (swap! state assoc :left left)+                (swap! state assoc :top top)+                (swap! state assoc :bottom bottom)))))]"
https://api.github.com/repos/penpot/penpot/pulls/802,604108319,"@@ -59,14 +60,14 @@  (defmethod ig/init-key ::pool   [_ {:keys [migrations metrics] :as cfg}]-  (log/infof ""initialize connection pool '%s' with uri '%s'"" (:name cfg) (:uri cfg))+  (log/infof ""initialize connection pool '%s' with uri '%s'"" (name (:name cfg)) (:uri cfg))   (instrument-jdbc! (:registry metrics))   (let [pool (create-pool cfg)]     (when (seq migrations)       (with-open [conn ^AutoCloseable (open pool)]         (mg/setup! conn)-        (doseq [[mname steps] migrations]-          (mg/migrate! conn {:name (name mname) :steps steps}))))+        (doseq [[name steps] migrations]+          (mg/migrate! conn {:name (c/name name) :steps steps}))))"
https://api.github.com/repos/penpot/penpot/pulls/807,604836007,"@@ -0,0 +1,106 @@+image:+  file: docker/gitpod/Dockerfile++ports:+  # nginx+  - port: 3449+    onOpen: open-preview++  # frontend nREPL+  - port: 3447+    onOpen: ignore+    visibility: private++  # frontend shadow server+  - port: 3448+    onOpen: ignore+    visibility: private++  # backend+  - port: 6060+    onOpen: ignore++  # exporter shadow server+  - port: 9630+    onOpen: ignore+    visibility: private++  # exporter http server+  - port: 6061+    onOpen: ignore++  # mailhog web interface+  - port: 8025+    onOpen: ignore++  # mailhog postfix+  - port: 1025+    onOpen: ignore++  # postgres+  - port: 5432+    onOpen: ignore++  # redis+  - port: 6379+    onOpen: ignore++  # openldap+  - port: 389+    onOpen: ignore++tasks:+  # https://github.com/gitpod-io/gitpod/issues/666#issuecomment-534347856+  - name: gulp+    command: >+      cd $GITPOD_REPO_ROOT/frontend/;+      sleep 5;+      yarn && npx gulp --theme=${PENPOT_THEME} watch++  - name: frontend shadow watch+    command: >+      cd $GITPOD_REPO_ROOT/frontend/;+      sleep 5;+      yarn && npx shadow-cljs watch main++  - init: gp await-port 5432 && psql -f $GITPOD_REPO_ROOT/docker/gitpod/files/postgresql_init.sql+    name: backend+    command: >+      cd $GITPOD_REPO_ROOT/backend/;+      ./scripts/start-dev++  - name: exporter shadow watch+    command:+      cd $GITPOD_REPO_ROOT/exporter/;+      yarn && npx shadow-cljs watch main++  - name: exporter web server+    openMode: split-right+    command: >+      cd $GITPOD_REPO_ROOT/exporter/;+      sleep 2;+      ./scripts/wait-and-start.sh++  - name: signed terminal+    before: >+      [[ ! -z ${GNUGPG}  ]] &&+      cd ~ &&+      rm -rf .gnupg &&+      echo ${GNUGPG} | base64 -d | tar --no-same-owner -xzvf -+    init: >+      [[ ! -z ${GNUGPG_KEY}  ]] &&+      git config --global commit.gpgsign true &&+      git config --global user.signingkey ${GNUGPG_KEY}+    command: cd $GITPOD_REPO_ROOT++  - name: redis+    command: redis-server++  - before: go get github.com/mailhog/MailHog+    name: mailhog+    command: MailHog++  - name: Nginx+    command: >+      nginx &&+      multitail /var/log/nginx/access.log -I /var/log/nginx/error.log"
https://api.github.com/repos/penpot/penpot/pulls/809,610547622,"@@ -93,11 +95,15 @@         (catch Throwable e           (try             (let [cdata (errors/get-error-context request e)]-              (update-thread-context! cdata)-              (log/errorf e ""unhandled exception: %s (id: %s)"" (ex-message e) (str (:id cdata)))-              {:status 500 :body ""internal server error""})"
https://api.github.com/repos/penpot/penpot/pulls/840,613970992,"@@ -68,6 +68,12 @@ msgstr ""Great to see you again!"" msgid ""auth.login-with-github-submit"" msgstr ""Login with Github"" +msgid ""auth.login-with-google-submit""+msgstr ""Login with Google""++msgid ""auth.login-with-oidc-submit""+msgstr ""Login with OpenID (SSO)""+"
https://api.github.com/repos/plexus/chestnut/pulls/15,18702389,"@@ -1,25 +1,15 @@ (ns {{name}}.core-  (:require-macros [cljs.core.async.macros :refer [go]])-  (:require [{{name}}.dev :as dev]-            [cljs.core.async :refer [chan <!]]-            [om.core :as om :include-macros true]{{{core-cljs-requires}}}))+  (:require [om.core :as om :include-macros true]+            {{{core-cljs-requires}}}))"
https://api.github.com/repos/plexus/chestnut/pulls/27,18944104,"@@ -23,9 +23,11 @@    :min-lein-version ""2.5.0"" +  :jar-exclusions [#""\.swp|\.swo|\.DS_Store{{{cljx-extension}}}""]"
https://api.github.com/repos/plexus/chestnut/pulls/87,23844706,"@@ -154,6 +156,10 @@ reports and pull requests are very welcome.  ## Changelog +### v0.7.0-SNAPSHOT-20150130"
https://api.github.com/repos/plexus/chestnut/pulls/89,23845658,"@@ -0,0 +1,175 @@+"
https://api.github.com/repos/plexus/chestnut/pulls/181,93834278,"@@ -1,5 +1,10 @@ (ns user   (:require [{{project-ns}}.server]+            [com.stuartsierra.component :as component]+            [figwheel-sidecar.config :as config]+            [figwheel-sidecar.system :as sys]"
https://api.github.com/repos/plexus/chestnut/pulls/233,253306156,"@@ -1,3 +1,3 @@ ((nil . ((cider-refresh-before-fn . ""reloaded.repl/suspend"")          (cider-refresh-after-fn  . ""reloaded.repl/resume"")-         (cider-cljs-lein-repl    . ""(do (user/go) (user/cljs-repl))""))))+         (cider-default-cljs-repl . ""(do (user/go) (user/cljs-repl))""))))"
https://api.github.com/repos/plumatic/plumbing/pulls/27,11656108,"@@ -282,6 +282,17 @@             10)))     (is (= 11 @calls)))) +(deftest defmemo-test+  (let [calls (atom 0)]+    (plumbing.core/defmemo factorial [x]"
https://api.github.com/repos/plumatic/plumbing/pulls/49,17097456,"@@ -401,6 +401,37 @@    `(do ~@body)    (reverse (partition 2 bindings)))) +(defmacro if-letk+  ""bindings => binding-form test++  If test is true, evaluates then with binding-form bound to the value of +  test, if not, yields else""+  ([bindings then]+     `(if-let ~bindings ~then nil))+  ([bindings then else & oldform]+     (assert (vector? bindings) ""if-letk requires a vector for its binding"")+     (assert (nil? oldform) ""if-letk requires 1 or 2 forms after binding vector"")"
https://api.github.com/repos/plumatic/plumbing/pulls/78,21759513,"@@ -38,15 +37,29 @@             (reset! m-atom# (assoc! ~m-sym ~key-expr ~val-expr))))         (persistent! @m-atom#)))) -(defn update-  ""Updates the value in map m at k with the function f.--  Like update-in, but for updating a single top-level key.-  Any additional args will be passed to f after the value.""-  ([m k f] (assoc m k (f (get m k))))-  ([m k f x1] (assoc m k (f (get m k) x1)))-  ([m k f x1 x2] (assoc m k (f (get m k) x1 x2)))-  ([m k f x1 x2 & xs] (assoc m k (apply f (get m k) x1 x2 xs))))+(defmacro pre-1_7+  ""Evaluate and yield nested forms only on pre 1.7 release of Clojure(Script)""+  [& forms]+  (when (pos? (compare [1 7] (mapv #+clj  *clojure-version*+                                   #+cljs *clojurescript-version*"
https://api.github.com/repos/plumatic/plumbing/pulls/84,23653820,"@@ -37,6 +37,16 @@   [k]   (symbol (name k))) +(defn qualified-k->sym+  ""Make a keyword into a symbol, preserving namespace""+  [k]+  (symbol (namespace k) (name k)))"
https://api.github.com/repos/plumatic/plumbing/pulls/124,58304170,"@@ -14,7 +14,8 @@   ""Like select-keys, but asserts that all keys are present.""   [m ks]   (doseq [k ks]-    (assert (contains? m k)))+    (or (contains? m k)+        (schema/assert-iae false ""Key %s not found in %s"" k (mapv key m))))"
https://api.github.com/repos/plumatic/plumbing/pulls/142,745298064,"@@ -125,28 +125,45 @@ ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;; Compiling and running graphs +#?(:clj (declare interpreted-eager-compile)) #?(:clj (defn eager-compile   ""Compile graph specification g to a corresponding fnk that is optimized for    speed. Wherever possible, fnks are called positionally, to reduce the    overhead of creating and destructuring maps, and the return value is a    record, which is much faster to create and access than a map.  Compilation    is relatively slow, however, due to internal calls to 'eval'.""-  [g]-  (if (fn? g)-    g-    (let [g (for [[k sub-g] (->graph g)]-              [k (eager-compile sub-g)])]-      (graph-positional/positional-flat-compile (->graph g))))))+  ([g] (eager-compile g {}))+  ([g {:keys [positional-limit]+       :or {positional-limit graph-positional/max-graph-size}}]+   (let [eager-compile (fn eager-compile [g]+                         (when (some? g)+                           (if (fn? g)+                             g+                             (let [g* (for [[k sub-g] (->graph g)]+                                        (do (assert sub-g)+                                            [k (eager-compile sub-g)]))]+                               (when (every? second g*)+                                 (let [g (->graph g*)]+                                   (when (<= (-> g pfnk/output-schema count)+                                             positional-limit)+                                     (graph-positional/positional-flat-compile g))))))))]+     (assert g)"
https://api.github.com/repos/plumatic/schema/pulls/3,6193360,"@@ -216,7 +216,7 @@ (defmacro defschema   ""Convenience macro to make it clear to reader that body is meant to be used as a schema""   [name body]-  `(def ~name ~body))+  `(def ~name (schema.core/named ~body ~(str name))))"
https://api.github.com/repos/plumatic/schema/pulls/15,6365430,"@@ -211,13 +211,21 @@   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-;;; Public: miscellaneous macros+;;; Public: miscellaneous macros and helpers++(clojure.core/defn schema-with-name [schema name]+  ""Records name in schema's metadata.""+  (with-meta schema {:name name}))++(clojure.core/defn schema-name [schema]+  ""Returns the name of a schema defined via defschema.""+  (-> schema meta :name))"
https://api.github.com/repos/plumatic/schema/pulls/23,6553155,"@@ -1,3 +1,6 @@+## 0.1.5+ * Add annotated arglists to functions defined with `s/defn` (fixes #18)+"
https://api.github.com/repos/plumatic/schema/pulls/66,9998700,"@@ -55,6 +55,14 @@              (every? keyword? (.-vs ^schema.core.EnumSchema schema)))     string->keyword)) +(defn set-matcher [schema]+  #+clj (if (instance? clojure.lang.APersistentSet schema)"
https://api.github.com/repos/plumatic/schema/pulls/84,11962952,"@@ -533,9 +533,23 @@         `(do ~@body#)))  (defmacro with-fn-validation-  ""Execute body with input and ouptut schema validation turned on for all s/defn-   and s/fn instances globally (across all threads).  Not concurrency-safe.""+  ""Execute body with input and ouptut schema validation turned on for+   all s/defn and s/fn instances globally (across all threads). After+   all forms have been executed, resets function validation to its+   previously set value. Not concurrency-safe.""   [& body]-  `(do-     (schema.core/set-fn-validation! true)-     (try ~@body (finally (schema.core/set-fn-validation! false)))))+  `(if-let [toggle-val (.get_cell utils/use-fn-validation)]"
https://api.github.com/repos/plumatic/schema/pulls/88,12357874,"@@ -50,6 +51,12 @@ (defn string->keyword [s]   (if (string? s) (keyword s) s)) +(defn string->boolean+  ""returns true for strings that are equal, ignoring case, to the string 'true'+   (following java.lang.Boolean/parseBoolean semantics)""+  [s]+  (if (string? s) (= ""true"" (str/lower-case s)) s))"
https://api.github.com/repos/plumatic/schema/pulls/114,13990907,"@@ -37,6 +37,10 @@       value       (symbol (str ""a-"" #+clj (.getName ^Class t) #+cljs t))))) +(defn record? [x]+  #+clj (instance? clojure.lang.IRecord x)+  #+cljs (satisfies? IRecord x))"
https://api.github.com/repos/plumatic/schema/pulls/119,14425560,"@@ -447,6 +451,21 @@     `(let ~outer-bindings        (schema.core/schematize-fn (clojure.core/fn ~name ~@fn-body) ~schema-form)))) +(clojure.core/defn normalized-defn-args"
https://api.github.com/repos/plumatic/schema/pulls/122,14430662,"@@ -433,16 +433,20 @@    See (doc schema.macros/defn) for details.     Additional gotchas and limitations:-    - Like s/defn, the output schema must go on the fn name.  If you want an-      output schema, your function must have a name.-    - Unlike s/defn, the function schema is stored in metadata on the fn.-      Clojure's implementation for metadata on fns currently produces a-      wrapper fn, which will decrease performance and negate the benefits-      of primitive type hints compared to clojure.core/fn.""-  [& fn-args]-  (let [[name more-fn-args] (if (symbol? (first fn-args))-                              (extract-arrow-schematized-element &env fn-args)-                              [(with-meta (gensym ""fn"") {:schema `schema.core/Any}) fn-args])+    - Like s/defn, the output schema must go on the fn name. If you+      don't supply a name, schema will gensym one for you and attach+      the schema.+    - Unlike s/defn, the function schema is stored in metadata on the+      fn.  Clojure's implementation for metadata on fns currently+      produces a wrapper fn, which will decrease performance and+      negate the benefits of primitive type hints compared to+      clojure.core/fn.""+  [& [car :as fn-args]]+  (let [fn-args (cond (symbol? car) fn-args+                      (= :- car) (cons (gensym ""fn"") fn-args)+                      :else [(with-meta (gensym ""fn"")+                               {:schema `schema.core/Any}) fn-args])"
https://api.github.com/repos/plumatic/schema/pulls/123,14441441,"@@ -54,14 +54,14 @@        (error! (utils/format* ""Key %s not found in %s"" k# m#)))))  (defmacro assert!-  ""Like assert, but throws a RuntimeException and takes args to format.  Only-   for use in client-code.""+  ""Like assert, but throws a RuntimeException (in Clojure) and takes args to format.""   [form & format-args]   `(when-not ~form      (error! (utils/format* ~@format-args))))  (defmacro assert-c!-  ""Like assert! but throws a RuntimeException and takes args to format.  Only+  ""DEPRECATED.  (No longer necessary now that macroexpansion properly detects context)."
https://api.github.com/repos/plumatic/schema/pulls/126,15262189,"@@ -940,7 +940,7 @@ (clojure.core/defn ^FnSchema fn-schema   ""Produce the schema for a function defined with s/fn or s/defn.""   [f]-  (macros/assert! (fn? f) ""Non-function %s"" (utils/type-of f))+  (macros/assert! (ifn? f) ""Non-function %s"" (utils/type-of f))"
https://api.github.com/repos/plumatic/schema/pulls/129,15543048,"@@ -354,6 +354,44 @@   (is (thrown? Exception (s/checker {(s/required-key ""A"") s/Str (s/optional-key ""A"") s/Str}))))  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+;;; Handle Struct++#+clj+(do (defstruct ts1 :num :str :map :vec)+    (defstruct ts2 :num :str)++    (deftest struct-tests+      (let [schema {(s/required-key :num) s/Num+                    (s/required-key :str) s/Str+                    (s/required-key :map) {s/Keyword s/Str}+                    (s/required-key :vec) [s/Num]+                    (s/optional-key :opt) s/Num}]+        (every? identity+                [(valid! schema (struct ts1 1 ""str"" {:key ""str""} [1]))"
https://api.github.com/repos/plumatic/schema/pulls/142,17156026,"@@ -668,7 +668,7 @@  (defn- preserve-map-type [original walker-result]   (if (and (utils/record? original) (not (utils/error? walker-result)))-    (merge original walker-result)+    (into original walker-result)"
https://api.github.com/repos/plumatic/schema/pulls/149,17709331,"@@ -0,0 +1,9 @@+(ns schema.macros-test+  (:use clojure.test)+  (:require+   [schema.core :as s]+   [schema.macros :as macros]))++(deftest fn-test+  (is 5 ((macros/fn [a b] (+ a b)) 2 3))+  (is 'jump (get (meta ^{:frogs 'jump} (macros/fn [])) :frogs)))"
https://api.github.com/repos/plumatic/schema/pulls/159,18739879,"@@ -7,6 +7,8 @@    [schema.utils :as utils]    potemkin)) +(def ^:dynamic *compile-fn-validation* true)"
https://api.github.com/repos/plumatic/schema/pulls/166,19574501,"@@ -335,19 +334,19 @@   Schema   (walker [this]           (clojure.core/fn [x]-            (if #+clj (satisfies? p x) #+cljs ((:proto-pred (meta this)) x)"
https://api.github.com/repos/plumatic/schema/pulls/167,19784805,"@@ -858,6 +858,50 @@    (one second-schema second-name)])  +;; A delimited sequence schema matches sequences where the first part+;; of the sequence matches the left-schema, and the last part of the+;; sequence matches the right-schema. The transition point is+;; indicated by the location of the delimiter.  All matched sequences+;; must contain at least one delimiter; when the sequence contains+;; multiple delimiters, the greedy? flag indicates whether to split at+;; the first or last occurence of the delimiter."
https://api.github.com/repos/plumatic/schema/pulls/179,23969463,"@@ -57,6 +57,21 @@   [s]   (if (string? s) (= ""true"" (str/lower-case s)) s)) +(defn string->uuid+  ""Returns instance of UUID if input is a string.+   Note: in CLJS, this does not guarantee a specific UUID string representation,+         similar to #uuid reader""+  [x]+  #+clj+  (if (string? x)+    (try (java.util.UUID/fromString x)+         (catch IllegalArgumentException _ x))+    x)"
https://api.github.com/repos/plumatic/schema/pulls/207,28817647,"@@ -573,6 +573,26 @@       (macros/error! (utils/format* ""Not an IDeref: %s"" schema)))     (Recursive. schema))) +#+cljs+(do+  (cljs.core/defrecord Recursive [derefable]+    Schema+    (walker [this]+      (let [a (atom nil)]+        (reset! a (start-walker+                   (let [old subschema-walker]+                     (clojure.core/fn [s] (if (= s this) #(@a %) (old s))))+                   @derefable))))+    (explain [this]+      (let [{:keys [ns name]} (meta derefable)]+        (list 'recursive (str ns ""/"" name)))))"
https://api.github.com/repos/plumatic/schema/pulls/211,29272031,"@@ -1231,13 +1231,26 @@ (s/defschema TestFoo {:bar s/Str})  (deftest test-defschema-  (is (= 'TestFoo (:name (meta TestFoo)))))+  (is (= 'TestFoo (:name (meta TestFoo))))+  (is (= 'schema.core-test/TestFoo (:full-name (meta TestFoo)))))  (deftest schema-with-name-test   (let [schema (s/schema-with-name {:baz s/Num} 'Baz)]     (valid! schema {:baz 123})     (invalid! schema {:baz ""abc""})-    (is (= 'Baz (s/schema-name schema)))))+    (is (= 'Baz (s/schema-name schema)))+    (is (=  nil (s/full-schema-name schema)))))  (deftest schema-name-test   (is (= 'TestFoo (s/schema-name TestFoo))))++(deftest full-schema-name-test+  (is (= 'schema.core-test/TestFoo (s/full-schema-name TestFoo))))++(s/defschema TestBar ""BarTest"" {:foo s/Str})++#+clj ;; no Var meta-data on cljs+(deftest defschema-var-metadata+  (let [{:keys [line doc]} (-> TestBar s/full-schema-name resolve meta)]+    (is (= line 1250))"
https://api.github.com/repos/plumatic/schema/pulls/244,37486914,"@@ -1,3 +1,12 @@+## 1.0.0-alpha1+ * New schema backend, which is faster, simpler, and more declarative, enabling more applications and simplifying tooling.  Users of built-in schema types should experience very little or no breakage, but tooling or custom schema types will need to be updated."
https://api.github.com/repos/plumatic/schema/pulls/248,37605912,"@@ -515,6 +487,83 @@      [(if (= pred :else) (constantly true) pred) schema])    (if (odd? (count preds-and-schemas)) (last preds-and-schemas)))) +(defprotocol HasPrecondition+  (precondition [this]+    ""Return the Precondition for this schema.+     A Precondition is a function of a value that returns a+     ValidationError or nil (see spec.core)""))++(extend-protocol HasPrecondition+  schema.spec.leaf.LeafSpec+  (precondition [this]+    (:pre this))"
https://api.github.com/repos/plumatic/schema/pulls/246,37607912,"@@ -26,56 +31,156 @@     (fn [d] (generators/make-gen (fn [r s] (generators/call-gen @d r s))))     (fn [] (subschema-generator schema params)))) -(defprotocol LeafGeneratable-  (leaf-generator [s] ""return a generator for s""))+(defprotocol CompositeGenerator+  (composite-generator [s params])) -(extend-type nil-  LeafGeneratable-  (leaf-generator [x]-    (cond-     (= x s/Int) generators/int-     (= x s/Str) generators/string-ascii-     (= x s/Keyword) generators/keyword-     :else (generators/return x))))+(extend-protocol CompositeGenerator+  schema.spec.variant.VariantSpec+  (composite-generator [s params]+    (generators/such-that+     #(not ((:pre s) %))"
https://api.github.com/repos/plumatic/schema/pulls/247,37608789,"@@ -1,42 +1,91 @@ (ns schema.experimental.complete-  ""Experimental support for 'completing' partial values to match a target schema,-   e.g. for tests where only part of an object is important.""+  ""(Extremely) experimental support for 'completing' partial datums to match+   a schema. To use it, you must provide your own test.check dependency.""   (:require    [clojure.test.check.generators :as check-generators]-   [schema.core :as s]    [schema.spec.core :as spec]-   [schema.experimental.generators :as generators]    schema.spec.collection    schema.spec.leaf-   schema.spec.variant))--(defprotocol Completer-  (completer [s]))+   schema.spec.variant+   [schema.coerce :as coerce]+   [schema.core :as s]+   [schema.macros :as macros]+   [schema.utils :as utils]+   [schema.experimental.generators :as generators]))  (def +missing+ ::missing) -(extend-protocol Completer-  schema.spec.leaf.LeafSpec-  (completer [s]-    (let [g (generators/leaf-generator s)]-      (fn [x] (if (= x +missing+) (last (check-generators/sample g 5)) x))))+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+;;; Private helpers++(defprotocol Completer+  (completer* [spec s sub-checker generator-opts]+    ""A function applied to a datum as part of coercion to complete missing fields."")) +(extend-protocol Completer   schema.spec.variant.VariantSpec-  (completer [s] (s/checker s))+  (completer* [spec s sub-checker generator-opts]+    (let [g (apply generators/generator s generator-opts)]+      (fn [x]+        (if (= +missing+ x)+          (last (check-generators/sample g 40))"
https://api.github.com/repos/plumatic/schema/pulls/253,37685510,"@@ -27,7 +27,7 @@   [{:keys [schema]}    {:keys [subschema-generator ^java.util.Map cache] :as params}]   (spec/with-cache cache schema-    (fn [d] (generators/make-gen (fn [r s] (generators/call-gen @d r s))))+    (fn [d] (#'generators/make-gen (fn [r s] (generators/call-gen @d r (quot s 2)))))"
https://api.github.com/repos/plumatic/schema/pulls/255,37690801,"@@ -4,15 +4,20 @@ A Clojure(Script) library for declarative data description and validation.  Leiningen dependency (Clojars): `[prismatic/schema ""0.4.4""]`. [Latest codox API docs](http://prismatic.github.io/schema). -**This is an alpha release. The API and organizational structure are-subject to change. Comments and contributions are much appreciated.**"
https://api.github.com/repos/plumatic/schema/pulls/265,38615507,"@@ -13,7 +13,17 @@   (let [g (:guard o)         c (spec/sub-checker o params)         step (if g-               (fn [x] (if (g x) (c x) (else x)))+               (fn [x]+                 (macros/try-catchall+                  (if (g x)"
https://api.github.com/repos/plumatic/schema/pulls/280,40944095,"@@ -116,6 +116,7 @@     s/Symbol (generators/fmap (comp symbol name) generators/keyword)     Object generators/any     s/Any generators/any+    s/Uuid (generators/fmap (fn [_] (java.util.UUID/randomUUID)) generators/int)"
https://api.github.com/repos/plumatic/schema/pulls/303,45558669,"@@ -88,22 +88,19 @@  (def gen-rational   ""Simple generator of rational numbers.""-  (generators/one-of-   [generators/int-    (generators/fmap-     (fn [[a b]] (/ (* a a a a a) b))-     (generators/tuple-      generators/int-      generators/s-pos-int))]))+  (generators/fmap (fn [[num den]] (/ num den))+                   (generators/tuple generators/large-integer+                                     (generators/such-that #(not (zero? %))+                                                           generators/large-integer))))"
https://api.github.com/repos/plumatic/schema/pulls/398,135983052,"@@ -1,6 +1,7 @@ (ns schema.macros   ""Macros and macro helpers used in schema.core.""   (:require+   [cljs.analyzer.api]"
https://api.github.com/repos/plumatic/schema/pulls/426,740762235,"@@ -44,37 +44,39 @@   (let [t (type-of value)]     (if (<= (count (str value)) @max-value-length)       value-      (symbol (str ""a-"" #+clj (.getName ^Class t) #+cljs t)))))+      (symbol (str ""a-"" #?(:clj (.getName ^Class t) :cljs t)))))) +#?(:clj (defmacro char-map []-  clojure.lang.Compiler/CHAR_MAP)+  clojure.lang.Compiler/CHAR_MAP)) +#?(:clj"
https://api.github.com/repos/plumatic/schema/pulls/429,742365967,"@@ -1398,10 +1398,28 @@ (defmacro letfn   ""s/letfn : s/fn :: clojure.core/letfn : clojure.core/fn""   [fnspecs & body]-  (list `let-        (vec (interleave (map first fnspecs)-                         (map #(cons `fn %) fnspecs)))-        `(do ~@body))))+  (let [{:keys [outer-bindings+                fnspecs+                declare-class-schemas]}+        (reduce (fn [acc fnspec]+                  (let [[name more-fn-args] (macros/extract-arrow-schematized-element &env fnspec)+                        {:keys [outer-bindings schema-form fn-body]} (macros/process-fn- &env name more-fn-args)]+                    (-> acc+                        (update :outer-bindings into outer-bindings)+                        (update :fnspecs conj (cons name fn-body))+                        (update :declare-class-schemas conj `(utils/declare-class-schema!+                                                               (utils/fn-schema-bearer ~name)+                                                               ~schema-form)))))+                {:outer-bindings []+                 :fnspecs []+                 :declare-class-schemas []}+                fnspecs)]+    `(let ~outer-bindings+       (clojure.core/letfn+         ~fnspecs+         (do+           ~@declare-class-schemas"
https://api.github.com/repos/plumatic/schema/pulls/430,743982067,"@@ -1276,20 +1276,27 @@       don't supply a name, schema will gensym one for you and attach       the schema.     - Unlike s/defn, the function schema is stored in metadata on the-      fn.  Clojure's implementation for metadata on fns currently-      produces a wrapper fn, which will decrease performance and-      negate the benefits of primitive type hints compared to-      clojure.core/fn.""+      fn. The implications of this differ per platform:+      :clj   The resulting function has the same performance characteristics+             as clojure.core/fn. Additionally, the following invariant+             holds for all parameters and schema annotations:+               (let [f (s/fn this ... [...] this)]+                 (assert (identical? f (f ...))))+      :cljs  Returns a wrapper function that forwards arguments positionally+             up to 20 arguments, and then via `apply` beyond 20 arguments.+             See `cljs.core/with-meta` and `cljs.core.MetaFn`.""   [& fn-args]   (let [fn-args (if (symbol? (first fn-args))                   fn-args                   (cons (gensym ""fn"") fn-args))         [name more-fn-args] (macros/extract-arrow-schematized-element &env fn-args)         {:keys [outer-bindings schema-form fn-body]} (macros/process-fn- &env name more-fn-args)]-    `(let ~outer-bindings-       (schematize-fn"
https://api.github.com/repos/plumatic/schema/pulls/432,748774050,"@@ -362,6 +362,155 @@              (new ~(symbol (str name))                   ~@(map (fn [s] `(safe-get ~map-sym ~(keyword s))) field-schema))))))) +(defn -instrument-protocol-method+  ""Given a protocol Var pvar, its method method-var and instrument-method,+  instrument the protocol method.""+  [pvar ;:- Var+   method-var ;:- (Var InnerMth)+   instrument-method #_:- #_(s/=>* OuterMth+                                   [InnerMth+                                    (named (=> Any OuterMth InnerMth)+                                           'sync!)])]+  (let [;; propagate method cache to inner method+        sync! (fn [^clojure.lang.AFunction outer-mth+                   ^clojure.lang.AFunction inner-mth]+                (when-not (identical? (.__methodImplCache outer-mth)"
https://api.github.com/repos/plumatic/schema/pulls/436,800102617,"@@ -23,19 +23,18 @@       (let [_ (macros/assert! (= 2 (count e)) ""remaining can have only one schema."")             c (spec/sub-checker (second e) params)]         #?(:clj (fn [^java.util.List res x]-                  (doseq [i x]-                    (.add res (c i)))+                  (reduce (fn [res i] (doto res (.add (c i)))) res x)"
https://api.github.com/repos/plumatic/schema/pulls/440,879029957,"@@ -201,13 +220,17 @@      (or (:always-validate fn-meta)          *assert*)))) +(def ^:dynamic *ufv-sym* 'ufv__) ;; dynamic for backwards compat"
https://api.github.com/repos/plumatic/schema/pulls/442,912403685,"@@ -101,8 +101,25 @@ (def primitive-sym? '#{float double boolean byte char short int long                        floats doubles booleans bytes chars shorts ints longs objects}) -(defn valid-tag? [env tag]-  (and (symbol? tag) (or (primitive-sym? tag) (class? (resolve env tag)))))+(defn resolve-tag+  ""Given a Symbol, attempt to return a valid Clojure tag else nil.++  Symbols not contained in `primitive-sym?` will be resolved. Symbols+  resolved to Vars have thier values checked in an attempt to provide"
https://api.github.com/repos/plumatic/schema/pulls/445,945227243,"@@ -290,6 +290,41 @@ You can also write sequence schemas that expect particular values in specific po ;;   (not (instance? java.lang.Number ""4""))] ``` +### Polymorphic schemas++Macros such as `s/defn` can define functions with polymorphic schemas. At runtime, they will be checked+by expanding polymorphic variables to their most general values. For example, at runtime `identity-mono`+and `identity-poly` are instrumented in the same way:++```clojure+(s/defn identity-mono :- s/Any+  [x :- s/Any]+  x)++(s/defn :all [T]+  identity-poly :- T+  [x :- T]+  x)+```++The actual value chosen as the ""most general"" depends on the polymorphic variables kind and should not be"
https://api.github.com/repos/quil/quil/pulls/79,9354558,"@@ -0,0 +1 @@+53324"
https://api.github.com/repos/quil/quil/pulls/97,12024423,"@@ -13,4 +13,5 @@                  [org.jogamp.jogl/jogl-all-main ""2.1.5-01""]                  [org.jogamp.gluegen/gluegen-rt-main ""2.1.5-01""]                  [com.lowagie/itext ""2.1.7""]]+  :plugins [[lein-localrepo ""0.5.3""]]"
https://api.github.com/repos/quil/quil/pulls/102,12437851,"@@ -56,7 +57,7 @@       (.setDefaultCloseOperation JFrame/DO_NOTHING_ON_CLOSE))     (javax.swing.SwingUtilities/invokeLater      (fn []-       (.setResizable frame true)+       (.setResizable frame resizable?)"
https://api.github.com/repos/quil/quil/pulls/103,12471312,"@@ -237,6 +238,13 @@     (.registerMethod applet ""dispose"" listener-obj)     applet)) +(def ^{:private true}+  opts-applet-params+  #{:resizable :exit-on-close :keep-on-top})++(defn make-hmap [lst key-val]"
https://api.github.com/repos/quil/quil/pulls/105,12627311,"@@ -352,7 +350,7 @@                               (catch Exception e                                 (println ""Exception in Quil draw-fn for sketch"" title "": "" e ""\nstacktrace: "" (with-out-str (print-cause-trace e)))                                 (Thread/sleep 1000))))-        draw-fn           (if (:safe-draw-fn options) safe-draw-fn draw-fn)+        draw-fn           (if (not (:no-safe-draw options)) safe-draw-fn draw-fn)"
https://api.github.com/repos/quil/quil/pulls/114,13595937,"@@ -4175,6 +4175,26 @@   ([] (update-pixels (current-graphics)))   ([^PImage img] (.updatePixels img))) +(defn +  ^{:requires-bindings true+    :processing-name ""resize()""+    :category ""Image""+    :added ""1.0""}"
https://api.github.com/repos/quil/quil/pulls/119,15315701,"@@ -1,4 +1,4 @@-(defproject quil ""2.2.1-SNAPSHOT""+(defproject org.clojars.norgat/quil ""2.2.1-SNAPSHOT"""
https://api.github.com/repos/quil/quil/pulls/122,15727967,"@@ -69,7 +70,8 @@                      :mousePressed mouse-pressed                      :mouseReleased mouse-released                      :mouseOut mouse-out-                     :mouseOver mouse-over)+                     :mouseOver mouse-over+                     :mouseScrolled (apply mouse-scrolled [(* -1 (.-mouseScroll prc))])) ;; -1 need for compability to Clojure version"
https://api.github.com/repos/quil/quil/pulls/123,15777790,"@@ -34,7 +31,43 @@                    :rules :clj}                   {:source-paths [""src/cljx/quil""]                    :output-path ""target/gen/cljs/quil""+                   :rules :cljs}++                  {:source-paths [""test/cljx""]+                   :output-path ""target/gen/clj/test""+                   :rules :clj}+                  {:source-paths [""test/cljx""]+                   :output-path ""target/gen/cljs/test""                    :rules :cljs}]}    :source-paths [""src/clj"" ""target/gen/clj"" ""src/cljs"" ""target/gen/cljs""]-  :resource-paths [""resources""])+  :test-paths [""test/clj"" ""target/gen/clj/test""]+  :resource-paths [""resources""]++  :jar-exclusions [#""^test/*""]+  :uberjar-exclusions [#""^test/*""]"
https://api.github.com/repos/quil/quil/pulls/126,16101483,"@@ -45,21 +45,28 @@    :profiles {:dev {:dependencies [[hiccup ""1.0.5""]                                   [garden ""1.1.6""]+                                  [compojure ""1.1.8""]+                                  [javax.servlet/servlet-api ""2.5""]"
https://api.github.com/repos/quil/quil/pulls/129,16384586,"@@ -72,3 +72,45 @@           (q/stroke-weight 3)           (q/line (mod (q/millis) 300) (mod (q/millis) 300)                   300 150)))++(q/defsketch get-pixel+  :site [500 500]+  :draw (fn []+          (q/background 255)+          (let [gr (q/create-graphics 100 100)]+            (q/with-graphics gr+              (q/background 255)+              (q/fill 127 255 180)+              (q/ellipse 50 50 70 70))++            (q/image gr 0 0)++            (q/image (q/get-pixel gr) 0 120)+            (q/fill (q/get-pixel gr 50 50))+            (q/rect 120 120 100 100)+            (q/image (q/get-pixel gr 0 0 50 50) 240 120)++            (q/image (q/get-pixel) 400 400)+            (q/fill (q/get-pixel 50 50))+            (q/rect 120 240 100 100)+            (q/image (q/get-pixel 0 0 50 50) 240 240))))++(q/defsketch set-pixel+  :size [500 500]+  :draw (fn []+          (q/background 255)+          (let [gr (q/create-graphics 100 100)]+            (q/with-graphics gr+              (q/background 255))++            (q/load-pixels gr)++            (doseq [i (range 30)+                    j (range 30)]+              (q/set-pixel gr i j (q/color (* 7 i) (* 7 j) 0)))+            (q/update-pixels gr)"
https://api.github.com/repos/quil/quil/pulls/139,18690623,"@@ -80,7 +80,13 @@   [& opts]   (let [opts-map (apply hash-map opts)         host-elem (dom/get-element (:host opts-map))-        processing-fn (make-sketch opts-map)]+        processing-fn (make-sketch opts-map)+        host-elem-context (.-processing-context host-elem)"
https://api.github.com/repos/quil/quil/pulls/168,46374572,"@@ -98,7 +104,7 @@  (def cheat-sheet-applet   ""-\\colouredbox{blue1}{+\\colouredbox{blue}{   \\section{Applet}   \\begin{tabularx}{\\hsize}{lX}  Creation & \\cmd{applet defapplet} \\\\"
https://api.github.com/repos/quil/quil/pulls/198,91871343,"@@ -152,3 +152,21 @@             (q/fill 0)             (q/text-align :center :center)             (q/text (str ""Key events: "" @counter) 250 250))))+++(q/defsketch mouse-and-key-pressed-variable+  :size [500 500]+  :draw (fn []+          (q/background 240)+          (q/fill 0 255 255)+          (let [angle 0"
https://api.github.com/repos/quil/quil/pulls/201,99075085,"@@ -42,3 +42,14 @@   (q/fill 0)   (q/random-seed 42)   (q/text (str ""(q/random 42) = "" (q/random 42)) 10 20))++(defsnippet random-2d {}+  (q/background 255)+  (q/fill 0)+  (q/text (str ""(q/random-2d) = "" (q/random-2d)) 10 20))"
https://api.github.com/repos/quil/quil/pulls/203,102381839,"@@ -16,7 +16,7 @@                  [quil/processing-svg ""3.2.2""]                  [quil/jogl-all-fat ""2.3.2""]                  [quil/gluegen-rt-fat ""2.3.2""]-                 [quil/processing-js ""1.6.3.0""]+                 [quil/processing-js ""1.6.4.1""]"
https://api.github.com/repos/quil/quil/pulls/242,193917558,"@@ -4356,6 +4356,12 @@   [size]   (.textSize (current-graphics) (float size))) +(defn get-text-size+  ""Return the current text size, as a float. Font size is measured in units"
https://api.github.com/repos/quil/quil/pulls/244,195304292,"@@ -1867,6 +1867,19 @@   #?(:clj (.frameRate (ap/current-applet))      :cljs (.-__frameRate (ap/current-applet)))) +(defn+  ^{:requires-bindings true+    :processing-name ""isLooping()""+    :category ""Environment""+    :subcategory nil+    :added ""2.7.2""}+  is-looping+  ""Returns whether the sketch is looping.""+  []+  #?(:clj (.isLooping (ap/current-applet))+     :cljs (.-__isLooping (ap/current-applet))))"
https://api.github.com/repos/quil/quil/pulls/256,222995350,"@@ -4663,14 +4663,29 @@   ""Temporarily set the fill color for the body of this macro.    The code outside of with-fill form will have the previous fill color set. -   The fill color has to be in a vector!-   Example: (with-fill [255] ...)-            (with-fill [10 80 98] ...)""-  [fill-args & body]-  `(let [old-fill# (quil.core/current-fill)]-     (apply quil.core/fill ~fill-args)-     ~@body-     (quil.core/fill old-fill#)))+   A fill argument of nil disables the fill.++   Example: (with-fill 255 ...)"
https://api.github.com/repos/quil/quil/pulls/266,244078845,"@@ -819,7 +821,8 @@   ""Extracts the blue value from a color, scaled to match current color-mode.   Returns a float.""   [color]-  (.blue (current-graphics) (unchecked-int color)))+  #?(:clj (.blue (current-graphics) (unchecked-int color))+     :cljs (.blue (current-graphics) color)))"
https://api.github.com/repos/quil/quil/pulls/268,244552854,"@@ -4048,9 +4052,10 @@   ([^String s x y]    (when (current-fill)      (.text (current-graphics) s (float x) (float y))))-  ([^String s x y z]-   (when (current-fill)-     (.text (current-graphics) s (float x) (float y) (float z))))+  #?(:clj"
https://api.github.com/repos/quil/quil/pulls/269,244911467,"@@ -682,22 +682,21 @@                   (float cx2) (float cy2) (float cz2)                   (float x) (float y) (float z)))) -(defn-  ^{:require-binding false-    :processing-name ""binary()""-    :category ""Data""-    :subcategory ""Conversion""-    :added ""1.0""}-  binary-  ""Returns a string representing the binary value of an int, char or-  byte. When converting an int to a string, it is possible to specify-  the number of digits used.""-  ([val]-   #?(:clj (PApplet/binary (int val))-      :cljs (.binary (ap/current-applet) val)))"
https://api.github.com/repos/quil/quil/pulls/272,254565646,"@@ -2744,6 +2752,17 @@       (let [pix-array (.toArray (.-pixels img))]         (set! (.-stored-pix-array img) pix-array)         pix-array))))+#?(:cljs+   (defn+     ^{:requires-bindings true+       :processing-name ""plane()""+       :category ""Shape""+       :subcategory ""3D Primitives""+       :added ""1.0""}"
https://api.github.com/repos/quil/quil/pulls/280,261481553,"@@ -4450,7 +4450,8 @@   changed with texture-mode.""   ([x y] (.vertex (current-graphics) (float x) (float y)))   ([x y z] (.vertex (current-graphics) (float x) (float y) (float z)))-  ([x y u v] (.vertex (current-graphics) (float x) (float y) (float u) (float v)))+  ([x y u v] #?(:clj (.vertex (current-graphics) (float x) (float y) (float u) (float v))+                :cljs (.vertex (current-graphics) (float x) (float y) 0 (float u) (float v))))"
https://api.github.com/repos/quil/quil/pulls/294,272847042,"@@ -18,14 +18,12 @@  (defsnippet save   ""save""-  {:renderer :p3d}+  {:renderer :p3d+   :settings q/no-loop}    (q/camera 150 150 150 0 0 0 0 0 1)   (q/box 100)   (q/save ""generated/box.png"")-  (comment ""stop sketch after saving image"")-  (comment ""otherwise it will show save dialog"")-  (comment ""on every iteration"")   (q/exit))"
https://api.github.com/repos/quil/quil/pulls/304,284985369,"@@ -75,23 +75,27 @@  (defsnippet ortho-perspective   [""ortho"" ""perspective""]-  {:renderer :p3d-   :setup (q/frame-rate 1)}+  {:renderer :p3d}    (q/background 240)-  (comment ""flip between ortho and perspective camera every frame"")-  (comment ""enable ortho camera"")++  (comment ""set camera to look from [400, 100, 200] at point [100, 0, 0]"")+  (q/camera 400 100 200 100 0 0 0 0 -1)+   (comment ""in ortho all figures will look the same regardless distance"")+  (q/ortho)+  (comment ""draw 3 red boxes with x coordinates 0, 100 and 200"")+  (q/fill 200 0 0)+  (doseq [x [0 100 200]]+   (q/with-translation [x 50 0]+     (q/box 50)))+   (comment ""in perspective (default) all figures will look smaller the farther they are"")-  (if (even? (q/frame-count))-    (q/ortho)-    (q/perspective))-  (comment ""set camera to look from [300, 0, 300] at point [100, 0, 0]"")-  (q/camera 300 0 300 100 0 0 0 0 -1)-  (q/fill 0 127 127)-  (comment ""draw 3 boxes with x coordinates 0, 100 and 200"")+  (q/perspective)"
https://api.github.com/repos/quil/quil/pulls/311,291017865,"@@ -0,0 +1,12 @@+(ns quil.test-util+  #?(:clj (:import java.awt.GraphicsEnvironment)))++(defn- display-density []+  #?(:clj (.. GraphicsEnvironment (getLocalGraphicsEnvironment) (getDefaultScreenDevice) (getScaleFactor))+     :cljs (.-devicePixelRatio js/window)))"
https://api.github.com/repos/quil/quil/pulls/316,309061118,"@@ -3362,6 +3368,33 @@   (let [mode (u/resolve-constant-key mode rect-modes)]     (.rectMode (current-graphics) mode))) +(defn+  ^{:requires-bindings true+    :processing-name nil+    :p5js-name nil+    :category ""Debugging""+    :added ""3.1.0""}+  print-first-n+  ""Prints the provided arguments for the first `n` iterations.""+  [n & more]+  (when (<= n (frame-count))+    (apply print more)))"
https://api.github.com/repos/quil/quil/pulls/337,507575945,"@@ -66,7 +66,6 @@   (let [m              (meta applet)         keep-on-top?   (:keep-on-top m)         surface        (.getSurface applet)-        frame          (.frame applet)"
https://api.github.com/repos/quil/quil/pulls/375,1103901087,"@@ -1,3 +1,12 @@+## 4.0.0+__11th February 2023_++* updated dependencies on Processing to 4.1.2"
https://api.github.com/repos/quil/quil/pulls/367,1472152064,"@@ -13,24 +13,21 @@     (throw #?(:clj (RuntimeException. missing-navigation-key-error)               :cljs (js/Error. missing-navigation-key-error))))) -(defn- default-position-  ""Default position configuration: zoom is neutral and central point is-  `width/2, height/2`.""-  []-  {:position [(/ (q/width) 2.0)+(defn- default-settings []+  {:width (q/width)+   :height (q/height)"
https://api.github.com/repos/razum2um/awesome-clojure/pulls/59,81588633,"@@ -331,4 +336,8 @@  ## Project Management   -  * [milestones](https://github.com/turbopape/milestones) +  * [milestones](https://github.com/turbopape/milestones)+ +## Products++  * [Metabase](http://www.metabase.com/)"
https://api.github.com/repos/razum2um/awesome-clojure/pulls/74,122120581,"@@ -14,9 +14,11 @@   - [mal](https://github.com/kanaka/mal/tree/master/clojure)   - [scheje](https://github.com/turbopape/scheje) - [Awesome tools in Clojure](#awesome-tools-in-clojure)+  - [Code and Project Documentation](http://docs.caudate.me/lucidity/lucid-publish.html)"
https://api.github.com/repos/razum2um/awesome-clojure/pulls/147,567507554,"@@ -93,7 +93,7 @@   * [Durable Queue](https://github.com/Factual/durable-queue): queue persisted on disk   * [bifurcan](https://github.com/lacuna/bifurcan): linear map/set/list (stores entries contiguously in memory), ;writtern in java, but test suite (read: usage examples) [in clojure](https://github.com/lacuna/bifurcan/blob/master/test/bifurcan)   -## Web Framework"
https://api.github.com/repos/razum2um/awesome-clojure/pulls/173,961077612,"@@ -525,6 +525,11 @@ anylysis and visualization.*   * [fsmviz](https://github.com/jebberjeb/fsmviz)   * [rhizome](https://github.com/ztellman/rhizome) +## Game Development+  * [herfi](https://github.com/ertugrulcetin/herfi) - 3D multiplayer game prototype written in Clojure and ClojureScript+  * [racing-game-cljs](https://github.com/ertugrulcetin/racing-game-cljs) - A 3D racing game built with ClojureScript, React and ThreeJS+  * [jme-clj](https://github.com/ertugrulcetin/jme-clj) - A Clojure 3D Game Engine (Wrapper), Powered by jMonkeyEngine+"
https://api.github.com/repos/reagent-project/reagent/pulls/149,33284101,"@@ -226,17 +226,51 @@                     jsprops)]             (make-element argv comp p first-child))))))) +(defn- expand-tags+  ""Used to supported the extended Hiccup syntax for nested elements. In addition to the keyword+  specifying tag, optional id, and optional class(es), the '>' character indicates a nested element.++  e.g.++      [:nav.navbar>div.container>div.navbar-header>a.navbar-brand {:href \""...\""} \""Home\""]++  is the same as:++      [:nav.navbar [:div.container [:div.navbar-header [:a.navbar-bran {:href \""...\""} \""Home\""]]]]++  tags - the original keyword split at '>'+  hiccup-form - the original hiccup form (a keyword in the first position)""+  [tags hiccup-form]+  (loop [deepest? true+         [tag & tag-queue] (reverse tags)+         tail     (rest hiccup-form)]+    (if (nil? tag)+      tail+      (recur false+             tag-queue+             (if deepest?+               (into [(keyword tag)] tail)+               [(keyword tag) tail])))))+ (defn vec-to-elem [v]   (assert (pos? (count v))           (str ""Hiccup form should not be empty: ""                (pr-str v) (comp/comp-name)))-  (let [tag (nth v 0)]-    (assert (valid-tag? tag)-            (str ""Invalid Hiccup form: ""-                 (pr-str v) (comp/comp-name)))-    (if-some [ne (native-element tag v)]-      ne-      (reag-element tag v))))+  (let [tag  (nth v 0)+        tags (do+               (assert (valid-tag? tag)+                       (str ""Invalid Hiccup form: ""+                            (pr-str v) (comp/comp-name)))+               (if (keyword? tag)"
https://api.github.com/repos/reagent-project/reagent/pulls/154,33830331,"@@ -73,13 +73,24 @@                            class))))     p)) +(defn stringify-class [{:keys [class] :as props}]+  (if (coll? class)+    (->> class+         (filter identity)"
https://api.github.com/repos/reagent-project/reagent/pulls/126,70707557,"@@ -90,12 +90,48 @@ (defn input-unmount [this]   (.! this :cljsInputValue nil)) +;; <input type=""??"" >+;; The properites 'selectionStart' and 'selectionEnd' only exist on some inputs+;; See: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply+(def these-inputs-have-selection-api #{""text"" ""textarea"" ""password"" ""search"" ""tel"" ""url""})"
https://api.github.com/repos/reagent-project/reagent/pulls/260,78829505,"@@ -175,15 +175,14 @@     (let [v ($ jsprops :value)           value (if (nil? v) """" v)           on-change ($ jsprops :onChange)]-      (when (nil? ($ this :cljsInputElement))+      (when (nil? ($ this :cljsDOMValue))"
https://api.github.com/repos/reagent-project/reagent/pulls/283,94291094,"@@ -56,7 +55,7 @@     (assert field (str ""Field name must start with - in "" field))     `(aset ~object ~@names ~value))) -(defmacro .' [& args]+#_(defmacro .' [& args]"
https://api.github.com/repos/reagent-project/reagent/pulls/306,130237625,"@@ -93,7 +95,12 @@                                        ""examples/geometry/src""]                         :compiler {:parallel-build true                                    :main ""reagentdemo.core""-                                   :output-to ""outsite/public/js/main.js""}}}}+                                   :output-to ""outsite/public/js/main.js""+                                   :language-in :ecmascript6+                                   :language-out :ecmascript3+                                   :npm-deps {:react ""15.6.1""+                                              :react-dom ""15.6.1""+                                              :create-react-class ""15.5.3""}}}}}"
https://api.github.com/repos/reagent-project/reagent/pulls/308,141688415,"@@ -1,10 +1,10 @@ {     ""dependencies"": {         ""browser-resolve"": ""^1.11.2"",-        ""create-react-class"": ""^15.5.3"",+        ""create-react-class"": ""^15.6.0"",         ""module-deps"": ""^4.1.1"",-        ""react"": ""^15.5.3"",-        ""react-dom"": ""^15.5.3"",+        ""react"": ""^16.0.0"",+        ""react-dom"": ""^16.0.0"","
https://api.github.com/repos/reagent-project/reagent/pulls/282,144336779,"@@ -270,13 +342,20 @@ (declare as-element)  (defn native-element [parsed argv first]-  (let [comp ($ parsed :name)]+  (let [comp ($ parsed :name)+        synthetic-input ($ parsed :syntheticInput)+        synthetic-on-update ($ parsed :syntheticOnUpdate)"
https://api.github.com/repos/reagent-project/reagent/pulls/343,169522601,"@@ -0,0 +1,1052 @@+# Reagent User Manual++<!-- toc -->++* [Using Hiccup to Describe HTML](#using-hiccup-to-describe-html)+  * [Special treatment of `nil` child nodes](#special-treatment-of-nil-child-nodes)+  * [Special interpretation of `style` attribute](#special-interpretation-of-style-attribute)+  * [Special interpretation of `class` attribute](#special-interpretation-of-class-attribute)+  * [Special notation for nested elements](#special-notation-for-nested-elements)+  * [Rendering Hiccup](#rendering-hiccup)+* [Creating Components](#creating-components)+  * [What is a ""Component""](#what-is-a-component)+  * [Core of a Component: the Render Function](#core-of-a-component-the-render-function)+  * [Three forms of components](#three-forms-of-components)+  * [Form-1: A Simple Function](#form-1-a-simple-function)+  * [Form-2: A Function Returning A Function](#form-2-a-function-returning-a-function)+  * [How Reagent Knows the Difference Between Form-1 and Form-2](#how-reagent-knows-the-difference-between-form-1-and-form-2)+  * [Form-3: A Class With Life Cycle Methods](#form-3-a-class-with-life-cycle-methods)+  * [All Three Component Forms Are the Same](#all-three-component-forms-are-the-same)+  * [with-let: Handling destruction](#with-let-handling-destruction)+  * [Keys](#keys)+* [How Reagent Renders](#how-reagent-renders)+  * [The difference between parenthesis and square brackets](#the-difference-between-parenthesis-and-square-brackets)+* [Managing state: atoms, cursors, Reactions, and tracking](#managing-state-atoms-cursors-reactions-and-tracking)+  * [Intro to atoms](#intro-to-atoms)+    * [Mutating a ratom](#mutating-a-ratom)+    * [Dereferencing a ratom](#dereferencing-a-ratom)+    * [The effect of dereferencing a ratom](#the-effect-of-dereferencing-a-ratom)+    * [rswap!](#rswap)+  * [Cursors](#cursors)+    * [More general cursors](#more-general-cursors)+  * [Reactions](#reactions)+  * [The track function](#the-track-function)+    * [The track! function](#the-track-function)+* [When Components Re-render](#when-components-re-render)+* [Batching and Timing: How Reagent Renders Changes to Application State](#batching-and-timing-how-reagent-renders-changes-to-application-state)+  * [The bad news](#the-bad-news)+  * [An example](#an-example)+  * [Tapping into the rendering loop](#tapping-into-the-rendering-loop)+* [Interop with React](#interop-with-react)+  * [Creating React Elements directly](#creating-react-elements-directly)+  * [Creating React Elements from Hiccup forms](#creating-react-elements-from-hiccup-forms)+  * [Creating Reagent ""Components"" from React Components](#creating-reagent-components-from-react-components)+  * [Creating React Components from Reagent ""Components""](#creating-react-components-from-reagent-components)+  * [Example: ""Decorator"" Higher-Order Components](#example-decorator-higher-order-components)+  * [Example: Function-as-child Components](#example-function-as-child-components)+  * [Getting props and children of current component](#getting-props-and-children-of-current-component)+  * [React Interop Macros](#react-interop-macros)+* [Todo](#todo)++<!-- tocstop -->++# Using Hiccup to Describe HTML++Reagent uses a datastructure known as Hiccup to describe HTML. Hiccup describes HTML elements and user-defined components as a nested ClojureScript vector:++```clojure+[:div {:class ""parent""}+  [:p {:id ""child-one""} ""I'm first child element.""]+  [:p ""I'm the second child element.""]]+```++As described below, reagent provides a number of extensions and conveniences to Hiccup, but the general rules of Hiccup are as follows:++1. The first element is either a keyword or a symbol+   * If it is a keyword, the element is an HTML element where `(name keyword)` is the tag of the HTML element.+   * If it is a symbol, reagent will treat the vector as a component, as described in the next section.+2. If the second element is a map, it represents the attributes to the element. The attribute map may be omitted.+3. Any additional elements must either be Hiccup vectors representing child nodes or string literals representing child text nodes.++## Special treatment of `nil` child nodes++Reagent and React ignore nil nodes, which allow conditional logic in Hiccup forms:++```clojure+(defn my-div [child?]+  [:div+    ""Parent Element""+    (when child? [:div ""Child element""])])+```++In this example `(my-div false)` will evaluate to `[:div ""Parent Element"" nil]`, which reagent will simply treat the same as `[:div ""Parent Element""]`.++## Special interpretation of `style` attribute++The `:style` attribute can be written a string or as a map. The following two are equivalent:++```clojure+[:div {:style ""color: red; font-weight: bold""} ""Alert""]+[:div {:style {:color ""red""+               :font-weight ""bold""}+      ""Alert""]+```++The map form is the same as [React's style attribute](https://reactjs.org/docs/dom-elements.html#style), except that when using the map form of the style attribute, the keys should be the same name as the CSS attribute as shown in the above example (not camel cased as is required JavaScript).++## Special interpretation of `class` attribute++In JavaScript, `class` is a reserved keyword, so React uses the `className` to specify class attibutes. Reagent just uses `class`.++As of reagent 0.8.0, the `class` attribute accepts a collection of classes and will remove any nil value:++```clojure+[:div {:class [""a-class"" (when active? ""active"") ""b-class""]}]+```++## Special notation for nested elements++Reagent extends standard Hiccup in one way: it is possible to ""squeeze"" elements together by using a `>` character.++This:++```clojure+[:div+  [:p+    [:b ""Nested Element""]]]+```++can be written as:++```clojure+[:div>p>b ""Nested Element""]+```++## Rendering Hiccup++The primary entrypoint to the reagent library is `reagent.core/render`.++```"
https://api.github.com/repos/reagent-project/reagent/pulls/380,195940571,"@@ -7,42 +7,28 @@ (def mui-theme-provider (r/adapt-react-class mui/MuiThemeProvider)) (def menu-item (r/adapt-react-class mui/MenuItem)) -(def ^:private input-component-  (r/reactify-component-    (fn [props]-      [:input (-> props-                  (assoc :ref (:inputRef props))-                  (dissoc :inputRef))])))--(def ^:private textarea-component-  (r/reactify-component-    (fn [props]-      [:textarea (-> props-                     (assoc :ref (:inputRef props))-                     (dissoc :inputRef))])))--;; To fix cursor jumping when controlled input value is changed,-;; use wrapper input element created by Reagent instead of-;; letting Material-UI to create input element directly using React.-;; Create-element + convert-props-value is the same as what adapt-react-class does.-(defn text-field [props & children]-  (let [props (-> props-                  (assoc-in [:InputProps :inputComponent] (cond-                                                            (and (:multiline props) (:rows props) (not (:maxRows props)))-                                                            textarea-component--                                                            ;; FIXME: Autosize multiline field is broken.-                                                            (:multiline props)-                                                            nil--                                                            ;; Select doesn't require cursor fix so default can be used.-                                                            (not (:select props))-                                                            nil--                                                            :else-                                                            input-component))-                  rtpl/convert-prop-value)]-    (apply r/create-element mui/TextField props (map r/as-element children))))+(defn adapt-input-component [component]+  (fn [props & _]+    (r/create-class+      {:getInitialState (fn [] #js {:value (:value props)})+       :component-will-receive-props+       (fn [this [_ next-props]]+         (when (not= (:value next-props) (.-value (.-state this)))+           (.setState this #js {:value (:value next-props)})))"
https://api.github.com/repos/reagent-project/reagent/pulls/392,207079510,"@@ -175,7 +175,23 @@ Reactions are what give `r/atom`, `r/cursor`, and function `r/cursor` and `r/wra * `on-set` and `on-dispose` are run when the reaction is set and unset from the DOM * `derefed` **TODO unclear** -**TODO EXAMPLE**+Here's an example:+```+ (def app-state (reagent.ratom/atom {:state-var-1 {:var-a 2"
https://api.github.com/repos/reagent-project/reagent/pulls/430,283949638,"@@ -192,9 +192,13 @@     (fn componentWillUpdate [nextprops]       (this-as c (.call f c c (props-argv c nextprops)))) +    :getSnapshotBeforeUpdate+    (fn getSnapshotBeforeUpdate [_ _]+      (this-as c (.call f c c)))"
https://api.github.com/repos/reagent-project/reagent/pulls/450,323064763,"@@ -24,18 +24,29 @@ (def dont-camel-case #{""aria"" ""data""})  (defn capitalize [s]-  (if (< (count s) 2)+  (if (< (.-length s) 2)     (string/upper-case s)     (str (string/upper-case (subs s 0 1)) (subs s 1))))  (defn dash-to-prop-name [dashed]   (if (string? dashed)     dashed     (let [name-str (name dashed)-          [start & parts] (string/split name-str #""-"")]-      (if (dont-camel-case start)-        name-str-        (apply str start (map capitalize parts))))))+          [start & parts] (.split name-str #""-"")]+      (cond+        (contains? dont-camel-case start) name-str++        (not (nil? parts))"
https://api.github.com/repos/reagent-project/reagent/pulls/461,347949254,"@@ -37,7 +37,7 @@   ;; are rendered before children   (.sort a compare-mount-order)   (dotimes [i (alength a)]-    (let [c (aget a i)]+    (let [^js/React.Component c (aget a i)]"
https://api.github.com/repos/reagent-project/reagent/pulls/468,359045657,"@@ -29,8 +29,8 @@   ;; top-most component is mounted last and gets largest"
https://api.github.com/repos/reagent-project/reagent/pulls/472,362760353,"@@ -321,7 +321,9 @@               (and (ifn? src)                    (not (vector? src))))           (str ""src must be a reactive atom or a function, not ""-               (pr-str src)))+               (pr-str src)+               ""while attempting to get path: """
https://api.github.com/repos/reagent-project/reagent/pulls/479,395535038,"@@ -147,7 +147,9 @@            rst)))  (defn- merge-class [p1 p2]-  (assoc p2 :class (class-names (:class p1) (:class p2))))+  (if-let [names (class-names (:class p1) (:class p2))]+    (assoc p2 :class names)+    p2))"
https://api.github.com/repos/reagent-project/reagent/pulls/577,957388756,"@@ -456,19 +456,17 @@   (-deref [this]     (when-some [e caught]       (throw e))-    (let [non-reactive (nil? *ratom-context*)]-      (when non-reactive-        (flush!))-      (if (and non-reactive (nil? auto-run))-        (when dirty?-          (let [oldstate state]-            (set! state (f))-            (when-not (or (nil? watches) (= oldstate state))-              (notify-w this oldstate state))))-        (do-          (notify-deref-watcher! this)-          (when dirty?-            (._run this false)))))+    (if (reactive?)+      (notify-deref-watcher! this)"
https://api.github.com/repos/reagent-project/reagent/pulls/594,1398251042,"@@ -0,0 +1,42 @@+(ns reagent.context+  (:require-macros [reagent.core]+                   [reagent.context])+  (:require [react :as react]+            [reagent.core :as r]))++(defn make-context+  ""Creates a context with the given name and optional default value.+   The default value will be used when trying to retrieve the context value with no provider present.+   Attempting to retrieve a context value that has no provider, and no default value will result in a crash.""+  ([name]+   (let [context (react/createContext)]+     (set! (.-displayName context) name)+     context))+  ([name default-value]+   (let [context (react/createContext default-value)]+     (set! (.-displayName context) name)+     context)))++(defn provider+  ""Provides the value for the given context to descendant components.""+  [{:keys [context value]} & contents]+  (into [:r> (.-Provider context) #js{:value value}]+        contents))++(defn consumer+  ""Retrieves the value for the given context.+   render-f must be a reagent render function that will be called with the value.+   If there's no provider, will return the default value if it is set, or throw otherwise.""+  [{:keys [context]} render-f]+  ;; Use with-let to maintain a stable render function, otherwise the child will+  ;; remount every time a new prop comes into the parent.+  (r/with-let [wrapper-comp+               ;; Passes through context to component using meta data. See:+               ;; https://github.com/reagent-project/reagent/blob/ce80585e9aebe0a6df09bda1530773aa512f6103/doc/ReactFeatures.md#context+               ^{:context-type context}+               (fn [render-f]+                 (let [value (.-context (r/current-component))]+                   (when (undefined? value)+                     (throw (js/Error. (str ""Missing provider for "" (.-displayName context)))))+                   (render-f value)))]"
https://api.github.com/repos/reagent-project/reagent/pulls/598,1420981590,"@@ -0,0 +1,8 @@+# React Refresh++- `reagent.dev` ns must be required before anything that loads `react-dom`+- Don't call `r.dom/render` after reload (e.g. shadow-cljs hook)+- Call `reagent.dev/refresh!` instead+- Only components defined using `r/defc` will refresh+- Reagent doesn't try to create Hook signatures for components,+  so hook state is reset for updated components."
https://api.github.com/repos/redplanetlabs/specter/pulls/76,60334036,"@@ -573,6 +573,18 @@         (= (s/setval (s/subset s3) s4 combined) (-> combined (set/difference s2) (set/union s4)))         )))) +(deftest submap-test+  (is (= [{:foo 1, :baz nil}]+         (s/select [(s/submap :foo :baz)] {:foo 1 :bar 2})))+  (is (= {:foo 1, :barry 1}+         (s/setval [(s/submap :bar)] {:barry 1} {:foo 1 :bar 2})))+  (is (= {:bar 1, :foo 2, :baz nil}+         (s/transform [(s/submap :foo :baz) s/ALL s/LAST (comp not nil?)] inc {:foo 1 :bar 1})))"
https://api.github.com/repos/redplanetlabs/specter/pulls/107,65924888,"@@ -0,0 +1,91 @@+(ns com.rpl.specter.transient+  #+cljs+  (:require-macros [com.rpl.specter.macros+                    :refer+                    [defnav+                     defpathedfn]])+  (:use #+clj+        [com.rpl.specter.macros :only+         [defnav+          defpathedfn]])+  (:require [com.rpl.specter.impl :as i]+            [com.rpl.specter :refer [subselect selected?]]))++(defnav+  ^{:doc ""Navigates to the specified key of a transient collection,+          navigating to nil if it doesn't exist.""}+  keypath!+  [key]+  (select* [this structure next-fn]+    (next-fn (get structure key)))+  (transform* [this structure next-fn]+    (assoc! structure key (next-fn (get structure key)))))++(def END!+  ""Navigates to an empty (persistent) vector at the end of a transient vector.""+  (i/comp-paths* [(i/->TransientEndNavigator)]))++(defn- t-get-first+  [tv]+  (nth tv 0))++(defn- t-get-last+  [tv]+  (nth tv (dec (i/transient-vec-count tv))))++(defn- t-update-first+  [tv next-fn]+  (assoc! tv 0 (next-fn (nth tv 0))))++(defn- t-update-last+  [tv next-fn]+  (let [i (dec (i/transient-vec-count tv))]+    (assoc! tv i (next-fn (nth tv i)))))++(def FIRST!+  ""Navigates to the first element of a transient vector.""+  (i/->PosNavigator t-get-first t-update-first))++(def LAST!+  ""Navigates to the last element of a transient vector.""+  (i/->PosNavigator t-get-last t-update-last))++#+clj+(defn- select-keys-from-transient-map+  ""Selects keys from transient map, because built-in select-keys uses+  `find` which is unsupported.""+  [m m-keys]+  (loop [result {}+         m-keys m-keys]+    (if-not (seq m-keys)+      result+      (let [k (first m-keys)+            ;; support Clojure 1.6 where contains? is broken on transients+            item (get m k ::not-found)]+        (recur (if-not (identical? item ::not-found)+                 (assoc result k item)+                 result)+               (rest m-keys))))))++#+cljs+(defn- select-keys-from-transient-map+  ""Uses select-keys on a transient map.""+  [m m-keys]+  (select-keys m m-keys))++(defnav+  ^{:doc ""Navigates to the specified persistent submap of a transient map.""}+  submap!+  [m-keys]+  (select* [this structure next-fn]+    (next-fn (select-keys-from-transient-map structure m-keys)))+  (transform* [this structure next-fn]+    (let [selected (select-keys-from-transient-map structure m-keys)+          res (next-fn selected)]+      (as-> structure %+        (reduce (fn [m k]+                  (dissoc! m k))+                % m-keys)+        (reduce (fn [m [k v]]"
https://api.github.com/repos/redplanetlabs/specter/pulls/231,145853431,"@@ -1434,6 +1434,19 @@   (is (= ""abq"" (setval s/LAST ""q"" ""abc"")))   ) +(deftest regex-navigation-test+  (is (= (select #""t"" ""test"") [""t"" ""t""]))+  (is (= (select [:a #""t""] {:a ""test""}) [""t"" ""t""]))+  (is (= (transform #""t"" clojure.string/capitalize ""test"") ""TesT""))+  (is (= (transform [:a #""t""] clojure.string/capitalize {:a ""test""}) {:a ""TesT""}))+  (is (= (transform #""\s+\w"" clojure.string/triml ""Hello      World!"") ""HelloWorld!""))+  (is (= (setval #""t"" ""z"" ""test"") ""zesz""))+  (is (= (setval [:a #""t""] ""z"" {:a ""test""}) {:a ""zesz""}))+  (is (= (transform #""aa*"" (fn [s] (-> s count str)) ""aadt"") ""2dt""))+  (is (= (transform #""[Aa]+"" (fn [s] (apply str (take (count s) (repeat ""@"")))) ""Amsterdam Aardvarks"") ""@msterd@m @@rdv@rks""))+  (is (= (select [#""(\S+):\ (\d+)"" (s/nthpath 2)] ""Mary: 1st George: 2nd Arthur: 3rd"") [""1"" ""2"" ""3""]))+  (is (= (transform (s/subselect #""\d\w+"") reverse ""Mary: 1st George: 2nd Arthur: 3rd""))))"
https://api.github.com/repos/redplanetlabs/specter/pulls/294,488182476,"@@ -960,7 +960,26 @@   (is (= [[] [2] [4 6]]          (select            [(s/continuous-subseqs number?) (s/filterer even?)]-           [1 ""a"" ""b"" 2 3 ""c"" 4 5 6 ""d"" ""e"" ""f""]))))+           [1 ""a"" ""b"" 2 3 ""c"" 4 5 6 ""d"" ""e"" ""f""])))+  (defn- make-bounds-pred-fn [start end]"
https://api.github.com/repos/redplanetlabs/specter/pulls/291,488184121,"@@ -980,6 +980,28 @@         (setval (srange index index) [v] structure)         )))) +(defrichnav+  ^{:doc ""Navigates to the empty space between the index and the prior index. For select+          navigates to NONE, and transforms to non-NONE insert at that position.""}+  before-index-new+  [index]+  (select* [this vals structure next-fn]+           NONE)+  (transform* [this vals structure next-fn]+              (let [v (next-fn vals NONE)]+                (if (identical? NONE v)+                  structure+                  (let [updated (concat (take index structure) [v] (drop index structure))]"
https://api.github.com/repos/redplanetlabs/specter/pulls/317,697612388,"@@ -1504,3 +1504,61 @@    [& path]    (map compact* path)    ))++(defnav+  ^{:doc ""Navigates to a sequence resulting from (sort ...), but is a+         view to the original structure that can be transformed.++         If the transformed sequence is smaller than the input sequence, values+         which are included are sorted by the same indices as the input value's+         index in the input sequence.++         If the transformed sequence is larger than the input sequence, values+         added to the end of the sequence will be appended to the end of the+         original sequence.""}+  SORTED+  []+  (select* [this structure next-fn]+    (n/sorted-select structure identity compare next-fn))+  (transform* [this structure next-fn]+    (n/sorted-transform structure identity compare next-fn)))++(defnav+  ^{:doc ""Navigates to a sequence resulting from (sort comparator ...), but+         is a view to the original structure that can be transformed.++         If the transformed sequence is smaller than the input sequence, values+         which are included are sorted by the same indices as the input value's+         index in the input sequence.++         If the transformed sequence is larger than the input sequence, values+         added to the end of the sequence will be appended to the end of the+         original sequence.""}+  sorted+  [comparator]+  (select* [this structure next-fn]+    (n/sorted-select structure identity comparator next-fn))+  (transform* [this structure next-fn]+    (n/sorted-transform structure identity comparator next-fn)))++(defdynamicnav sorted-by+  ""Navigates to a sequence sorted by the value stored in the keypath, by the+  comparator, if one is provided.++  This sequence is a view to the original structure that can be transformed. If+  the transformed sequence is smaller than the input sequence, values which are+  included are sorted by the same indices as the input value's index in the+  input sequence.++  If the transformed sequence is larger than the input sequence, values added to+  the end of the sequence will be appended to the end of the original sequence.++  Value collection (e.g. collect, collect-one) may not be used in the keypath.""+  ([keypath] (sorted-by keypath compare))+  ([keypath comparator]+   (late-bound-nav [late (late-path keypath)"
https://api.github.com/repos/replikativ/datahike/pulls/29,263519616,"@@ -419,7 +422,7 @@ (defn- ^:declared components->pattern [db index cs]) (defn ^:declared indexing? [db attr]) -+;;rb: not found"
https://api.github.com/repos/replikativ/datahike/pulls/49,298780642,"@@ -1,12 +1,13 @@ (ns ^:no-doc datahike.pull-api   (:require-    [datahike.db :as db]-    [datahike.datom :as dd]-    [datahike.pull-parser :as dpp #?@(:cljs [:refer [PullSpec]])])-    #?(:clj-      (:import-        [datahike.datom Datom]-        [datahike.pull_parser PullSpec])))+   [datahike.db :as db]+   [datahike.datom :as dd]+   #?@(:cljs [datalog.parse.type :refer [PullSpec]])"
https://api.github.com/repos/replikativ/datahike/pulls/58,308088526,"@@ -0,0 +1,300 @@+(ns datahike.test.schema+  (:require+   #?(:cljs [cljs.test    :as t :refer-macros [is are deftest testing]]+      :clj  [clojure.test :as t :refer        [is are deftest testing use-fixtures]])+   [datahike.api :as d]+   [datahike.schema :as ds]+   [datahike.test.core :as tdc])+  (:import [java.io File]))+++(def name-schema {:db/ident :name+                  :db/valueType :db.type/string+                  :db/cardinality :db.cardinality/one})++(def find-name-q '[:find ?n+                   :where [_ :name ?n]])++(def find-schema-q '[:find ?n ?vt ?c+                      :where+                      [?e :db/ident ?n]+                      [?e :db/valueType ?vt]+                     [?e :db/cardinality ?c]])++(deftest test-empty-db+  (let [uri ""datahike:mem://test-empty-db""+        _ (d/delete-database uri)+        _ (d/create-database uri)+        conn (d/connect uri)+        db (d/db conn)+        tx [{:name ""Alice""}]]++    (is (= {:db/ident {:db/unique :db.unique/identity}} (:schema db)))++    (testing ""transact without schema present""+      (is (thrown-msg?+           ""No schema found in db.""+           (d/transact! conn tx))))++    (testing ""transacting new schema""+      (d/transact! conn [name-schema])+      (is (= #{[:name :db.type/string :db.cardinality/one]}+             (d/q find-schema-q (d/db conn))))+      (is (=  {:db/ident #:db{:unique :db.unique/identity}+               :name #:db{:ident :name+                          :valueType :db.type/string+                          :cardinality :db.cardinality/one}+               1 :name}+              (:schema (d/db conn)))))++    (testing ""transacting data with schema present""+      (d/transact! conn tx)+      (is (=  #{[""Alice""]}+              (d/q find-name-q (d/db conn)))))++    (testing ""insert new data with wrong data type""+      (is (thrown-msg?+           ""Bad entity value 42 at [:db/add 3 :name 42], value does not match schema definition. Must be conform to: string?""+           (d/transact! conn [{:name 42}]))))++    (testing ""insert new data with additional attributes not in schema""+      (is (thrown-msg?+           ""Bad entity attribute :age at {:db/id 3, :age 42}, not defined in current schema""+           (d/transact! conn [{:name ""Bob"" :age 42}]))))++    (testing ""insert incomplete schema :db/ident""+      (is (thrown-msg?+           ""Incomplete schema transaction attributes, expected :db/ident, :db/valueType, :db/cardinality""+           (d/transact! conn [{:db/ident :phone}]))))++    (testing ""insert incomplete schema :db/valueType""+      (is (thrown-msg?+           ""Incomplete schema transaction attributes, expected :db/ident, :db/valueType, :db/cardinality""+           (d/transact! conn [{:db/valueType :db.type/string}]))))++    (testing ""insert incomplete schema :db/cardinality""+      (is (thrown-msg?+           ""Incomplete schema transaction attributes, expected :db/ident, :db/valueType, :db/cardinality""+           (d/transact! conn [{:db/cardinality :db.cardinality/many}]))))++    (testing ""insert incomplete schema :db/cardinality, :db/ident""+      (is (thrown-msg?+           ""Incomplete schema transaction attributes, expected :db/ident, :db/valueType, :db/cardinality""+           (d/transact! conn [{:db/ident :phone :db/cardinality :db.cardinality/many}]))))++    (testing ""insert schema with incorrect value type""+      (is (thrown-msg?+           ""Bad entity value :string at [:db/add 3 :db/valueType :string], value does not match schema definition. Must be conform to: #{:db.type/instant :db.type/boolean :db.type/uuid :db.type/value :db.type/string :db.type/keyword :db.type/ref :db.type/bigdec :db.type/float :db.type/bigint :db.type/double :db.type/long :db.type/symbol}""+           (d/transact! conn [{:db/ident :phone+                               :db/cardinality :db.cardinality/one+                               :db/valueType :string}]))))))++(deftest test-db-with-initial-schema+  (let [uri ""datahike:mem://test-db-with-initial-schema""+        _ (d/delete-database uri)+        _ (d/create-database {:uri uri :initial-tx [name-schema]})+        conn (d/connect uri)]++    (testing ""schema existence""+      (let [db (d/db conn)]+        (is (= {:db/ident {:db/unique :db.unique/identity}+                :name #:db{:ident :name,+                           :valueType :db.type/string+                           :cardinality :db.cardinality/one}+                1 :name}+               (:schema db)))+        (is (= #{[:name :db.type/string :db.cardinality/one]} (d/q find-schema-q db)))))++    (testing ""insert new data according to schema""+      (d/transact! conn [{:name ""Alice""}])+      (is (= #{[""Alice""]} (d/q find-name-q (d/db conn)))))++    (testing ""extend schema with :age""+      (d/transact! conn [{:db/ident :age+                          :db/valueType :db.type/long+                          :db/cardinality :db.cardinality/one}])+      (let [db (d/db conn)]+        (is (= {:db/ident {:db/unique :db.unique/identity}+                :name #:db{:ident :name,+                           :valueType :db.type/string,+                           :cardinality :db.cardinality/one},+                1 :name,+                :age #:db{:ident :age,+                          :valueType :db.type/long,+                          :cardinality :db.cardinality/one},+                3 :age}+               (:schema db)))+        (is (= #{[:name :db.type/string :db.cardinality/one] [:age :db.type/long :db.cardinality/one]}+               (d/q find-schema-q db)))))++    (testing ""insert new data""+      (d/transact! conn [{:name ""Bob"" :age 42}])+      (is (= #{[""Alice""] [""Bob""]} (d/q find-name-q (d/db conn)))))++    (testing ""change cardinality for :name""+      (d/transact! conn [{:db/id 1+                          :db/cardinality :db.cardinality/many}])+      (let [db (d/db conn)]+        (is (= {:db/ident {:db/unique :db.unique/identity}+                :name #:db{:ident :name,+                           :valueType :db.type/string,+                           :cardinality :db.cardinality/many},+                1 :name,+                :age #:db{:ident :age,+                          :valueType :db.type/long,+                          :cardinality :db.cardinality/one},+                3 :age}+               (:schema db)))+        (is (= #{[:name :db.type/string :db.cardinality/many] [:age :db.type/long :db.cardinality/one]}+               (d/q find-schema-q db)))))))++(defn testing-type [conn type-name tx-val tx-id wrong-val]+  (testing type-name+    (let [schema-name (keyword ""value"" type-name)]+      (d/transact! conn [{schema-name tx-val}])+      (is (= #{[tx-val]}+             (d/q '[:find ?v :in $ ?sn :where [?e ?sn  ?v]] (d/db conn) schema-name)))+      (is (thrown-msg?+           (str ""Bad entity value ""+                wrong-val+                "" at [:db/add ""+                tx-id+                "" ""+                schema-name+                "" ""+                wrong-val+                ""], value does not match schema definition. Must be conform to: ""+                (ds/describe-type (keyword ""db.type"" type-name)))+           (d/transact! conn [{schema-name wrong-val}]))))))++(deftest test-schema-types+  (let [uri ""datahike:mem://test-schema-types""+        _ (d/delete-database uri)+        schema-tx [{:db/ident :value/bigdec+                    :db/valueType :db.type/bigdec+                    :db/cardinality :db.cardinality/one}+                   {:db/ident :value/bigint+                    :db/valueType :db.type/bigint+                    :db/cardinality :db.cardinality/one}+                   {:db/ident :value/boolean+                    :db/valueType :db.type/boolean+                    :db/cardinality :db.cardinality/one}+                   {:db/ident :value/double+                    :db/valueType :db.type/double+                    :db/cardinality :db.cardinality/one}+                   {:db/ident :value/float+                    :db/valueType :db.type/float+                    :db/cardinality :db.cardinality/one}+                   {:db/ident :value/instant+                    :db/valueType :db.type/instant+                    :db/cardinality :db.cardinality/one}+                   {:db/ident :value/keyword+                    :db/valueType :db.type/keyword+                    :db/cardinality :db.cardinality/one}+                   {:db/ident :value/long+                    :db/valueType :db.type/long+                    :db/cardinality :db.cardinality/one}+                   {:db/ident :value/string+                    :db/valueType :db.type/string+                    :db/cardinality :db.cardinality/one}+                   {:db/ident :value/symbol+                    :db/valueType :db.type/symbol+                    :db/cardinality :db.cardinality/one}+                   {:db/ident :value/uuid+                    :db/valueType :db.type/uuid+                    :db/cardinality :db.cardinality/one}]+        _ (d/create-database {:uri uri :initial-tx schema-tx})+        conn (d/connect uri)]++    (testing-type conn ""bigdec"" (bigdec 1) 13 1)+    (testing-type conn ""bigint"" (biginteger 1) 14 1)+    (testing-type conn ""boolean"" true 15 0)+    (testing-type conn ""double"" (double 1) 16 1)+    (testing-type conn ""float"" (float 1) 17 1)+    (testing-type conn ""instant"" (java.util.Date.) 18 1)+    (testing-type conn ""keyword"" :one 19 1)+    (testing-type conn ""long"" (long 2) 20 :2)+    (testing-type conn ""string"" ""one"" 21 :one)+    (testing-type conn ""symbol"" 'one  22 :one)+    (testing-type conn ""uuid"" (java.util.UUID/randomUUID)  23 1)))++(deftest test-schema-cardinality+  (let [uri ""datahike:mem://test-schema-cardinality""+        _ (d/delete-database uri)+        schema-tx [{:db/ident :owner+                    :db/valueType :db.type/string+                    :db/index true+                    :db/unique :db.unique/identity+                    :db/cardinality :db.cardinality/one}+                   {:db/ident :cars+                    :db/valueType :db.type/keyword+                    :db/cardinality :db.cardinality/many}]+        _ (d/create-database {:uri uri :initial-tx schema-tx})+        conn (d/connect uri)]++    (testing ""insert :owner and :cars one by one""+      (d/transact! conn [{:db/id -1+                          :owner ""Alice""}+                         {:db/id -1+                          :cars :audi}+                         {:db/id -1+                          :cars :bmw}])+      (is (= #{[""Alice"" :audi] [""Alice"" :bmw]}+             (d/q '[:find ?o ?c :where [?e :owner ?o] [?e :cars ?c]] (d/db conn)))))++    (testing ""insert :cars as list""+      (d/transact! conn [{:db/id -2+                          :owner ""Bob""+                          :cars [:chrysler :daimler]}])+      (is (= #{[""Alice"" :audi] [""Alice"" :bmw] [""Bob"" :chrysler] [""Bob"" :daimler]}+             (d/q '[:find ?o ?c :where [?e :owner ?o] [?e :cars ?c]] (d/db conn)))))++    (testing ""insert to cardinality one""+      (d/transact! conn [{:db/id [:owner ""Alice""]+                          :owner ""Charlie""}])+      (is (= #{[""Charlie"" :audi] [""Charlie"" :bmw] [""Bob"" :chrysler] [""Bob"" :daimler]}+             (d/q '[:find ?o ?c :where [?e :owner ?o] [?e :cars ?c]] (d/db conn)))))++    (testing ""test  cardinality change if unique is set"""
https://api.github.com/repos/replikativ/datahike/pulls/57,311468899,"@@ -0,0 +1,85 @@+(ns examples.core+  (:require [datahike.api :as d]))++;; define base uri we can connect to+(def uri ""datahike:mem://temporal-index"")++;; define schema+(def schema-tx [{:db/ident :name+                 :db/valueType :db.type/string+                 :db/unique :db.unique/identity+                 :db/index true+                 :db/cardinality :db.cardinality/one}+                {:db/ident :age+                 :db/valueType :db.type/long+                 :db/cardinality :db.cardinality/one}])++(def config {:uri uri :initial-tx schema-tx})++;; cleanup any previous data+(d/delete-database uri)++;; create the database with default configuration w+(d/create-database config)++;; connect to the database+(def conn (d/connect uri))++;; transact age and name data+(d/transact! conn [{:name ""Alice"" :age 25} {:name ""Bob"" :age 30}])++;; let's find name and age of all data+(def query '[:find ?n ?a :where [?e :name ?n] [?e :age ?a]])++;; search current data without any new data+(d/q query (d/db conn))++(def first-date (java.util.Date.))++;; let's change something+(d/transact! conn [{:db/id [:name ""Alice""] :age 30}])++;; search for current data of Alice+(d/q query (d/db conn))++;; now we search within historical data+(d/q query (d/history conn))++;; let's find the dates for each attribute additions"
https://api.github.com/repos/replikativ/datahike/pulls/68,317609306,"@@ -0,0 +1,56 @@+# Datomic Migration++Although datahike supports a part of [Datomic's+API](https://docs.datomic.com/client-api/datomic.client.api.html), some+behaviour is different using the different functions. The following functions+are supported in datahike: +- [as-of](#as-of)+- [connect](#connect)+- [create-database](#create-database)+- [datoms](#datoms)+- [db](#db)+- [delete-database](#delete-database)+- [history](#history)+- [index-range](#index-range)+- [pull](#pull)+- [q](#q)+- [since](#since)+- [transact](#transact)+- [with](#with)+- [with-db](#with-db)++See the subsections for differences and migration strategies."
https://api.github.com/repos/replikativ/datahike/pulls/71,322331789,"@@ -5,8 +5,8 @@ (s/def :db.type/id #(or (= (class %) java.lang.Long) string?))  ;; db types-(s/def :db.type/bigdec #(= (class %) java.math.BigDecimal))-(s/def :db.type/bigint #(= (class %) java.math.BigInteger))+(s/def :db.type/bigdec decimal?)+(s/def :db.type/bigint integer?)"
https://api.github.com/repos/replikativ/datahike/pulls/91,346688212,"@@ -0,0 +1,153 @@+package datahike.java;++import clojure.java.api.Clojure;+import clojure.lang.IFn;+import clojure.lang.Keyword;+import clojure.lang.PersistentVector;+import clojure.lang.RT;++import java.util.*;++import static datahike.java.Util.deref;++public class Datahike {+    /**+     * Imports the Clojure defined 'datahike.api' namespace.+     */+    static {+        IFn require = Clojure.var(""clojure.core"", ""require"");+        require.invoke(Clojure.read(""datahike.api""));+    }++    private static final IFn deleteDatabaseFn = Clojure.var(""datahike.api"", ""delete-database"");+    private static final IFn createDatabaseFn = Clojure.var(""datahike.api"", ""create-database"");+    private static final IFn connectFn = Clojure.var(""datahike.api"", ""connect"");+    private static final IFn transactFn = Clojure.var(""datahike.api"", ""transact"");+    private static final IFn dbFn = Clojure.var(""datahike.api"", ""db"");+    private static final IFn qFn = Clojure.var(""datahike.api"", ""q"");+    private static final IFn historyFn = Clojure.var(""datahike.api"", ""history"");+    private static final IFn asOfFn = Clojure.var(""datahike.api"", ""as-of"");+    private static final IFn sinceFn = Clojure.var(""datahike.api"", ""since"");+    private static final IFn pullFn = Clojure.var(""datahike.api"", ""pull"");+    private static final IFn releaseFn = Clojure.var(""datahike.api"", ""release"");+    private static final IFn pullManyFn = Clojure.var(""datahike.api"", ""pull-many"");+    private static final IFn seekDatomsFn = Clojure.var(""datahike.api"", ""seek-datoms"");+    private static final IFn tempIdFn = Clojure.var(""datahike.api"", ""tempid"");+    private static final IFn entityFn = Clojure.var(""datahike.api"", ""entity"");+    private static final IFn entityDbFn = Clojure.var(""datahike.api"", ""entity-db"");+    private static final IFn isFilteredFn = Clojure.var(""datahike.api"", ""is-filtered"");+    private static final IFn filterFn = Clojure.var(""datahike.api"", ""filter"");+    private static final IFn withFn = Clojure.var(""datahike.api"", ""with"");++    /**+     * @return a de-referenced version of the connection+     */+    public static Object dConn(Object conn) {+        return deref.invoke(conn);+    };++    public static void deleteDatabase(String uri) {+        deleteDatabaseFn.invoke(uri);+    }++    public static void createDatabase(String uri) {+        createDatabaseFn.invoke(uri);+    }++    public static void createDatabase(String uri, Object... args) {+        List argsCopy = new ArrayList(Arrays.asList(args));+        argsCopy.add(0, uri);+        createDatabaseFn.applyTo(RT.seq(argsCopy));+    }++    public static Object connect(String uri) {+        return connectFn.invoke(uri);+    }++    public static Object db(Object conn) {+        return dbFn.invoke(conn);+    }++    public static Set<PersistentVector> q(String query, Object... inputs) {+        List argsCopy = new ArrayList(Arrays.asList(inputs));+        argsCopy.add(0, Clojure.read(query));+        return (Set<PersistentVector>)qFn.applyTo(RT.seq(argsCopy));+    }++    public static Object transact(Object conn, PersistentVector txData) {+        return transactFn.invoke(conn, txData);+    }++    /** dConn: the dereferenced conn object */+    public static Object history(Object dConn) { return historyFn.invoke(dConn); };++    public static Object asOf(Object dConn, Date date) {+        return asOfFn.invoke(dConn, date);+    }++    public static Object since(Object dConn, Date date) {+        return sinceFn.invoke(dConn, date);+    }++    public static Map pull(Object dConn, String selector, int eid) {+        return (Map) pullFn.invoke(dConn, Clojure.read(selector), eid);+    }++    public static Map pull(Object dConn, String selector, PersistentVector eid) {+        return (Map) pullFn.invoke(dConn, Clojure.read(selector), eid);+    }+++    public static List pullMany(Object dConn, String selector, PersistentVector eids) {+        return (List) pullManyFn.invoke(dConn, Clojure.read(selector), eids);+    }++    public static void release(Object conn) {+        releaseFn.invoke(conn);+    }++    public static List seekdatoms(Object dConn, Keyword index, Object c1) {+        return (List)seekDatomsFn.invoke(dConn, index, c1);+    }++    public static List seekdatoms(Object dConn, Keyword index, Object c1, Object c2) {+        return (List)seekDatomsFn.invoke(dConn, index, c1, c2);+    }++    public static List seekdatoms(Object dConn, Keyword index, Object c1, Object c2, Object c3) {+        return (List)seekDatomsFn.invoke(dConn, index, c1, c2, c3);+    }++    public static List seekdatoms(Object dConn, Keyword index, Object c1, Object c2, Object c3, Object c4) {+        return (List)seekDatomsFn.invoke(dConn, index, c1, c2, c3, c4);+    }++    public static Long tempId(Keyword k) {+        return (Long) tempIdFn.invoke(k);+    }++    public static Long tempId(Keyword k, Long i) {+        return (Long)tempIdFn.invoke(k, i);+    }++    public static IEntity entity(Object dConn, int eid) {+        return (IEntity)entityFn.invoke(dConn, eid);+    }++    // TODO: this would also benefit from an Entity interface"
https://api.github.com/repos/replikativ/datahike/pulls/106,360429667,"@@ -438,7 +442,9 @@   (-config [db] (-config (.-origin-db db)))    ISearch-  (-search [db pattern] (temporal-search (.-origin-db db) pattern))+  (-search [db pattern]+    ()"
https://api.github.com/repos/replikativ/datahike/pulls/110,390403055,"@@ -67,6 +67,43 @@     (catch Exception e       (throw (.getCause e))))) ++(defn migrate [connection tx-data]+  (future+    (locking connection+      (let [{:keys [db-after] :as tx-report} @(d/migrate connection tx-data)"
https://api.github.com/repos/replikativ/datahike/pulls/128,398002248,"@@ -8,11 +8,13 @@                  [org.clojure/clojurescript ""1.10.597"" :scope ""provided""]                  [persistent-sorted-set     ""0.1.2""]                  [org.clojure/tools.reader ""1.3.2""]+                 [environ ""1.1.0""]                  [io.replikativ/hitchhiker-tree ""0.1.5""]                  [io.replikativ/superv.async ""0.2.9""]                  [io.lambdaforge/datalog-parser ""0.1.1""]] -  :plugins [[lein-cljsbuild ""1.1.7""]]+  :plugins [[lein-cljsbuild ""1.1.7""]+            [lein-environ ""1.1.0""]]"
https://api.github.com/repos/replikativ/datahike/pulls/137,411381225,"@@ -539,11 +542,44 @@      :clj  (when (namespace sym)              (when-some [v (resolve sym)] @v)))) +(def ^:private find-method+  #?(:cljs nil+     :clj (memoize+           (fn find-method-impl [^Class this-class method-name args-classes]+             (or (->> this-class+                      .getMethods+                      (some (fn [^Method method]+                              (when (and (= method-name (.getName method))+                                         (= (count args-classes)+                                            (.getParameterCount method))+                                         (every? true? (map #(Reflector/paramArgTypeMatch %1 %2)+                                                            (.getParameterTypes method)+                                                            args-classes)))+                                method))))+                 (throw (ex-info (str (.getName this-class) "".""+                                      method-name ""(""+                                      (str/join "","" (map #(.getName ^Class %) args-classes))+                                      "") not found"")+                                 {:this-class this-class+                                  :method-name method-name+                                  :args-classes args-classes})))))))"
https://api.github.com/repos/replikativ/datahike/pulls/136,428870476,"@@ -876,6 +877,10 @@           :cljs [^boolean indexing?]) [db attr]   (is-attr? db attr :db/index)) +(defn #?@(:clj [^Boolean no-history?]+          :cljs [^boolean indexing]) [db attr]"
https://api.github.com/repos/replikativ/datahike/pulls/157,429566251,"@@ -1,3 +1,17 @@+# 0.3.0++- overhaul configuration while still supporting the old one+- support of environment variables for configuration +- added better default configuration+- adjust time points in history functions to match Datomic's API+- add load-entities capabilities+- add cas support for nil +- add support for non-date tx attributes +- add Java API+- add Java interop in queries+- add basic pagination+- add noHistory support+"
https://api.github.com/repos/replikativ/datahike/pulls/145,436794255,"@@ -10,6 +10,7 @@                  [org.clojure/tools.reader ""1.3.2""]                  [environ ""1.1.0""]                  [io.replikativ/hitchhiker-tree ""0.1.7""]+                 [com.taoensso/timbre ""4.10.0""]"
https://api.github.com/repos/replikativ/datahike/pulls/179,436899525,"@@ -11,71 +11,76 @@               [java.util Date])))  (def-  ^{:arglists '([uri])-    :doc-              ""Connects to a datahike database via URI or configuration. URI contains storage backend type-            and additional information for backends like database name, credentials, or-            location. Refer to the store project in the examples folder or the documentation-            in the config markdown file in the doc folder.+  ^{:arglists '([] [config])+    :doc ""Connects to a datahike database via configuration. For more information on the configuration refer to the [docs](https://github.com/replikativ/datahike/blob/master/doc/config.md). -            Usage:+The configuration for a connection is a subset of the database configuration with only the store necessary: `:store`."
https://api.github.com/repos/replikativ/datahike/pulls/187,443065214,"@@ -1,3 +1,15 @@+# 0.3.1+- support returning maps (#149, #186)+- support on-write schema for empty-db (#178)+- add hashmap for transact! (#173)+- cleanup old benchmarks (#181)+- cleanup leftover code (#172)+- fix index selection (#143)+- fix in-memory database existence check (#180)+- improve API docs+- update dependencies+- use java 1.8 for release build+"
https://api.github.com/repos/replikativ/datahike/pulls/201,453220282,"@@ -10,7 +10,7 @@                  [org.clojure/tools.reader ""1.3.2""]                  [environ ""1.2.0""]                  [com.taoensso/timbre ""4.10.0""]-                 [io.replikativ/hitchhiker-tree ""0.1.7""]+                 [io.replikativ/hitchhiker-tree ""0.1.7""] ;; TODO: Change to the version of the hh-tree that has the upsert op."
https://api.github.com/repos/replikativ/datahike/pulls/220,475050239,"@@ -1120,12 +1124,11 @@                 (and keep-history? indexing?) (update-in [:temporal-avet] #(di/-insert % datom :avet)))         db)))) - (defn- with-temporal-datom [db ^Datom datom]   (let [indexing? (indexing? db (.-a datom))         schema? (ds/schema-attr? (.-a datom))         current-datom ^Datom (first (-search db [(.-e datom) (.-a datom) (.-v datom)]))-        history-datom ^Datom (first (search-temporal-indices db [(.-e datom) (.-a datom) (.-v datom)]))+        history-datom ^Datom (first (search-temporal-indices db [(.-e datom) (.-a datom) (.-v datom) (.-tx datom)]))"
https://api.github.com/repos/replikativ/datahike/pulls/229,490150421,"@@ -0,0 +1,153 @@+(ns datahike.test.entity-spec+  (:require+   #?(:cljs [cljs.test :as t :refer-macros [is are deftest testing]]+      :clj  [clojure.test :as t :refer [is are deftest testing use-fixtures]])+   [datahike.test.core]+   [datahike.api :as d]))++(def cfg-template {:store {:backend :mem+                           :id ""entity-spec""}+                   :keep-history? false+                   :schema-flexibility :write})++(def schema-template+  [{:db/ident :account/email+    :db/valueType :db.type/string+    :db/unique :db.unique/identity+    :db/cardinality :db.cardinality/one}+   {:db/ident :account/balance+    :db/valueType :db.type/long+    :db/cardinality :db.cardinality/one}])++(defn setup-db [cfg]+  (d/delete-database cfg)+  (d/create-database cfg)+  (d/connect cfg))++(deftest test-attribute-assertion+  (let [schema (conj schema-template+                     {:db/ident :account/guard+                      :db.entity/attrs [:account/email :account/balance]})+        valid-account {:account/email ""antonia@a.corp""+                       :account/balance 1000}+        invalid-account {:account/email ""arthur@b.corp""}+        empty-account {}]+    (letfn [(tx-with-ensure [conn account]+              (d/transact conn [(assoc account :db/ensure :account/guard)]))]+      (testing ""with write schema flexibility""+        (let [cfg (-> cfg-template+                      (assoc-in [:store :id] ""attribute-assertion-write"")+                      (assoc :initial-tx schema))+              conn (setup-db cfg)]+          (testing ""assert valid account""+            (let [{:keys [db-after]} (tx-with-ensure conn valid-account)]+              (is (= valid-account (d/pull db-after '[:account/email :account/balance] [:account/email (:account/email valid-account)])))))+          (testing ""assert invalid account""+            (is (thrown-msg?+                 ""Entity 5 missing attributes #{:account/balance} of spec :account/guard""+                 (tx-with-ensure conn invalid-account))))+          (testing ""assert empty entity""+            (is (thrown-msg?+                 ""Entity 5 missing attributes #{:account/balance :account/email} of spec :account/guard""+                 (tx-with-ensure conn empty-account))))))+      (testing ""with read schema flexibility""+        (let [cfg (-> cfg-template+                      (assoc :schema-flexibility :read)+                      (assoc-in [:store :id] ""attribute-assertion-read"")+                      (assoc :initial-tx schema))+              conn (setup-db cfg)]+          (testing ""assert valid account""+            (let [{:keys [db-after]} (tx-with-ensure conn valid-account)]+              (is (= valid-account (d/pull db-after '[:account/email :account/balance] [:account/email (:account/email valid-account)])))))+          (testing ""assert invalid account""+            (is (thrown-msg?+                 ""Entity 5 missing attributes #{:account/balance} of spec :account/guard""+                 (tx-with-ensure conn invalid-account))))+          (testing ""assert empty entity""+            (is (thrown-msg?+                 ""Entity 5 missing attributes #{:account/balance :account/email} of spec :account/guard""+                 (tx-with-ensure conn empty-account)))))))))++(defn is-email? [db eid]+  ;; email could not exist+  (if-let [email (:account/email (d/entity db eid))]+    (-> (re-find #""(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)"" email) empty? not)+    false))++(defn positive-balance? [db eid]+  ;; balance could not exist+  (if-let [balance (-> (d/entity db eid) :account/balance)]+    (< 0 balance)+    false))++(deftest test-predicate-assertion+  (let [schema (conj schema-template+                     {:db/ident :account/guard+                      :db.entity/preds ['datahike.test.entity-spec/is-email? 'datahike.test.entity-spec/positive-balance?]})+        valid-account {:account/email ""greta@a.corp""+                       :account/balance 1000}+        invalid-account {:account/email ""georg""+                         :account/balance 500}+        invalid-account-multiple {:account/email ""gustav""+                                  :account/balance -500}+        empty-account {}+        cfg (-> cfg-template+                (assoc-in [:store :id] ""predicate-assertion"")+                (assoc :initial-tx schema))+        conn (setup-db cfg)]+    (letfn [(tx-with-ensure [account]+              (d/transact conn [(assoc account :db/ensure :account/guard)]))]+      (testing ""assert valid account""+        (let [{:keys [db-after]} (tx-with-ensure valid-account)]+          (is (= valid-account (d/pull db-after '[:account/email :account/balance] [:account/email (:account/email valid-account)])))))+      (testing ""assert invalid account with one invalid predicate""+        (is (thrown-msg?+             ""Entity 5 failed predicates #{datahike.test.entity-spec/is-email?} of spec :account/guard""+             (tx-with-ensure invalid-account))))+      (testing ""assert invalid account with mulitple invalid predicates"""
https://api.github.com/repos/replikativ/datahike/pulls/232,494256541,"@@ -51,3 +52,49 @@     (d/transact conn [{:db/id 1, :name ""Alice""}])     (is (= hitchhiker.tree.DataNode            (-> @conn :eavt type)))))+++(deftest test-hitchhiker-tree-gc+  (testing ""Testing gc after appending data.""+    (let [uri ""datahike:file:///tmp/datahike-hh-gc-test-fs"""
https://api.github.com/repos/replikativ/datahike/pulls/239,504793336,"@@ -104,6 +104,76 @@     (is (thrown? clojure.lang.ExceptionInfo (d/transact conn 1)))     (is (thrown? clojure.lang.ExceptionInfo (d/transact conn {:foo ""bar""}))))) +(deftest test-q-docs+  (let [cfg {:store {:backend :mem+                     :id ""q""}+             :initial-tx [[:db/add -1 :name ""Ivan""]+                          [:db/add -1 :likes ""fries""]+                          [:db/add -1 :likes ""pizza""]+                          [:db/add -1 :friend 296]]+             :keep-history? false+             :schema-flexibility :read}+        _ (d/delete-database cfg)+        _ (d/create-database cfg)+        conn (d/connect cfg)]+    (is (= #{[""fries""] [""candy""] [""pie""] [""pizza""]}+           (d/q '[:find ?value :where [_ :likes ?value]]+                #{[1 :likes ""fries""]+                  [2 :likes ""candy""]+                  [3 :likes ""pie""]+                  [4 :likes ""pizza""]})))++    (is (= #{[""fries""] [""candy""] [""pie""] [""pizza""]}+           (d/q {:query '[:find ?value :where [_ :likes ?value]]+                 :args [#{[1 :likes ""fries""]+                          [2 :likes ""candy""]+                          [3 :likes ""pie""]+                          [4 :likes ""pizza""]}]})))++    (is (= #{[""pizza""]}+           (d/q {:query '[:find ?value :where [_ :likes ?value]]+                 :offset 2+                 :limit 1+                 :args [#{[1 :likes ""fries""]+                          [2 :likes ""candy""]+                          [3 :likes ""pie""]+                          [4 :likes ""pizza""]}]})))++    (is (= #{[""candy""] [""pizza""]}"
https://api.github.com/repos/replikativ/datahike/pulls/238,505348126,"@@ -1,5 +1,5 @@ (ns datahike.index.hitchhiker-tree-  (:require [hitchhiker.tree.utils.async :as async]+  (:require [hitchhiker.tree.utils.clojure.async :as async]"
https://api.github.com/repos/replikativ/datahike/pulls/236,518197411,"@@ -194,14 +196,14 @@                   (filter (fn [^Datom d] (= tx (datom-tx d))) (-all eavt)) ;; _ _ _ tx                   (-all eavt)])))) -(defrecord-updatable DB [schema eavt aevt avet temporal-eavt temporal-aevt temporal-avet max-eid max-tx rschema hash config]+(defrecord-updatable DB [schema eavt aevt avet temporal-eavt temporal-aevt temporal-avet max-eid max-tx rschema hash config ident-ref-map ref-ident-map]"
https://api.github.com/repos/replikativ/datahike/pulls/251,520428147,"@@ -1375,277 +1495,339 @@     :db.purge/attribute     :db.history.purge/before}) +(defn flush-tuples+  ""Generates all the add or retract operations needed for updating the states of composite tuples.+  E.g., if '::queued-tuples' contains {100 {:a+b+c [123 nil nil]}}, this function creates this vector [:db/add 100 :a+b+c [123 nil nil]]""+  [report]+  (let [db (:db-after report)]+    (reduce-kv+      (fn [entities eid tuples+values]+        (reduce-kv+          (fn [entities tuple value]+            (let [value   (if (every? nil? value) nil value)+                  current (:v (first (-datoms db :eavt [eid tuple])))]+              (cond+                (= value current) entities+                ;; adds ::internal to meta-data to mean that these datoms were generated internally.+                (nil? value)      (conj entities ^::internal [:db/retract eid tuple current])+                :else             (conj entities ^::internal [:db/add eid tuple value]))))+          entities+          tuples+values))+      []+      (::queued-tuples report))))+ (defn transact-tx-data [initial-report initial-es]   (when-not (or (nil? initial-es)-                (sequential? initial-es))+              (sequential? initial-es))     (raise ""Bad transaction data "" initial-es "", expected sequential collection""-           {:error :transact/syntax, :tx-data initial-es}))-  (loop [report (update initial-report :db-after transient)-         es (if (-keep-history? (get-in initial-report [:db-before]))-              (concat [[:db/add (current-tx report) :db/txInstant (get-time) (current-tx report)]] initial-es)-              initial-es)]-    (let [[entity & entities] es-          db (:db-after report)-          {:keys [tempids]} report]-      (cond-        (empty? es)-        (-> report+      {:error :transact/syntax, :tx-data initial-es}))+  (let [has-tuples? (seq (-attrs-by (:db-after initial-report) :db.type/tuple))+        initial-es' (if has-tuples?+                      (interleave initial-es (repeat ::flush-tuples))+                      initial-es)]+    (loop [report (update initial-report :db-after transient)+           es (if (-keep-history? (get-in initial-report [:db-before]))+                (concat [[:db/add (current-tx report) :db/txInstant (get-time) (current-tx report)]] initial-es')+                initial-es')]+      (let [[entity & entities] es+            db (:db-after report)+            {:keys [tempids]} report]+        (cond+          (empty? es)+          (-> report             (assoc-in [:tempids :db/current-tx] (current-tx report))             (update-in [:db-after :max-tx] inc)             (update :db-after persistent!)) -        (nil? entity)-        (recur report entities)--        (map? entity)-        (let [old-eid (:db/id entity)]-          (cond+-            ;; :db/current-tx / ""datomic.tx"" => tx-           (tx-id? old-eid)-           (let [id (current-tx report)]-             (recur (allocate-eid report old-eid id)-                    (cons (assoc entity :db/id id) entities)))--            ;; lookup-ref => resolved | error-           (sequential? old-eid)-           (let [id (entid-strict db old-eid)]-             (recur report-                    (cons (assoc entity :db/id id) entities)))--            ;; upserted => explode | error-           :let [upserted-eid (upsert-eid db entity)]--           (some? upserted-eid)-           (if (and (tempid? old-eid)+          (nil? entity)+          (recur report entities)++          (= ::flush-tuples entity)+          (if (contains? report ::queued-tuples)+            (recur+              (dissoc report ::queued-tuples)+              (concat (flush-tuples report) entities))+            (recur report entities))++          (map? entity)+          (let [old-eid (:db/id entity)]+            (cond++              ;; :db/current-tx / ""datomic.tx"" => tx+              (tx-id? old-eid)+              (let [id (current-tx report)]+                (recur (allocate-eid report old-eid id)+                  (cons (assoc entity :db/id id) entities)))++              ;; lookup-ref => resolved | error+              (sequential? old-eid)+              (let [id (entid-strict db old-eid)]+                (recur report+                  (cons (assoc entity :db/id id) entities)))++              ;; upserted => explode | error+              :let [upserted-eid (upsert-eid db entity)]++              (some? upserted-eid)+              (if (and (tempid? old-eid)                     (contains? tempids old-eid)                     (not= upserted-eid (get tempids old-eid)))-             (retry-with-tempid initial-report report initial-es old-eid upserted-eid)-             (do-                ;; schema tx-               (when (ds/schema-entity? entity)-                 (if-let [attr-name (get-in db [:schema upserted-eid])]-                   (when-let [invalid-updates (ds/find-invalid-schema-updates entity (get-in db [:schema attr-name]))]-                     (when-not (empty? invalid-updates)-                       (raise ""Update not supported for these schema attributes""-                              {:error :transact/schema :entity entity :invalid-updates invalid-updates})))-                   (when (= :write (get-in db [:config :schema-flexibility]))-                     (when (or (:db/cardinality entity) (:db/valueType entity))-                       (when-not (ds/schema? entity)-                         (raise ""Incomplete schema transaction attributes, expected :db/ident, :db/valueType, :db/cardinality""-                                {:error :transact/schema :entity entity}))))))-               (recur (allocate-eid report old-eid upserted-eid)-                      (concat (explode db (assoc entity :db/id upserted-eid)) entities))))--            ;; resolved | allocated-tempid | tempid | nil => explode-           (or (number? old-eid)-               (nil? old-eid)-               (string? old-eid))-           (let [new-eid (cond-                           (nil? old-eid) (next-eid db)-                           (tempid? old-eid) (or (get tempids old-eid)-                                                 (next-eid db))-                           :else old-eid)-                 new-entity (assoc entity :db/id new-eid)]-             (when (ds/schema-entity? entity)-               (if-let [attr-name (get-in db [:schema new-eid])]-                 (when-let [invalid-updates (ds/find-invalid-schema-updates entity (get-in db [:schema attr-name]))]-                   (when-not (empty? invalid-updates)-                     (raise ""Update not supported for these schema attributes""+                (retry-with-tempid initial-report report initial-es old-eid upserted-eid)+                (do+                  ;; schema tx+                  (when (ds/schema-entity? entity)+                    (if-let [attr-name (get-in db [:schema upserted-eid])]+                      (when-let [invalid-updates (ds/find-invalid-schema-updates entity (get-in db [:schema attr-name]))]+                        (when-not (empty? invalid-updates)+                          (raise ""Update not supported for these schema attributes""                             {:error :transact/schema :entity entity :invalid-updates invalid-updates})))-                 (when (= :write (get-in db [:config :schema-flexibility]))-                   (when (or (:db/cardinality entity) (:db/valueType entity))-                     (when-not (ds/schema? entity)-                       (raise ""Incomplete schema transaction attributes, expected :db/ident, :db/valueType, :db/cardinality""+                      (when (= :write (get-in db [:config :schema-flexibility]))+                        (when (or (:db/cardinality entity) (:db/valueType entity))+                          (when-not (ds/schema? entity)+                            (raise ""Incomplete schema transaction attributes, expected :db/ident, :db/valueType, :db/cardinality""                               {:error :transact/schema :entity entity}))))))-             (recur (allocate-eid report old-eid new-eid)-                    (concat (explode db new-entity) entities)))--            ;; trash => error-           :else-           (raise ""Expected number, string or lookup ref for :db/id, got "" old-eid-                  {:error :entity-id/syntax, :entity entity})))--        (sequential? entity)-        (let [[op e a v] entity]-          (cond-            (= op :db.fn/call)-            (let [[_ f & args] entity]-              (recur report (concat (apply f db args) entities)))--            (and (keyword? op)-                 (not (builtin-fn? op)))-            (if-some [ident (entid db op)]-              (let [fun (-> (-search db [ident :db/fn]) first :v)-                    args (next entity)]-                (if (fn? fun)-                  (recur report (concat (apply fun db args) entities))-                  (raise ""Entity "" op "" expected to have :db/fn attribute with fn? value""-                         {:error :transact/syntax, :operation :db.fn/call, :tx-data entity})))-              (raise ""Can’t find entity for transaction fn "" op-                     {:error :transact/syntax, :operation :db.fn/call, :tx-data entity}))--            (and (tempid? e) (not= op :db/add))-            (raise ""Can't use tempid in '"" entity ""'. Tempids are allowed in :db/add only""-                   {:error :transact/syntax, :op entity})--            (or (= op :db.fn/cas)+                  (recur (allocate-eid report old-eid upserted-eid)+                    (concat (explode db (assoc entity :db/id upserted-eid)) entities))))++              ;; resolved | allocated-tempid | tempid | nil => explode+              (or (number? old-eid)+                (nil? old-eid)+                (string? old-eid))+              (let [new-eid (cond+                              (nil? old-eid) (next-eid db)+                              (tempid? old-eid) (or (get tempids old-eid)+                                                  (next-eid db))+                              :else old-eid)+                    new-entity (assoc entity :db/id new-eid)]+                (when (ds/schema-entity? entity)+                  (if-let [attr-name (get-in db [:schema new-eid])]+                    (when-let [invalid-updates (ds/find-invalid-schema-updates entity (get-in db [:schema attr-name]))]+                      (when-not (empty? invalid-updates)+                        (raise ""Update not supported for these schema attributes""+                          {:error :transact/schema :entity entity :invalid-updates invalid-updates})))+                    (when (= :write (get-in db [:config :schema-flexibility]))+                      (when (or (:db/cardinality entity) (:db/valueType entity))+                        (when-not (ds/schema? entity)+                          (raise ""Incomplete schema transaction attributes, expected :db/ident, :db/valueType, :db/cardinality""+                            {:error :transact/schema :entity entity}))))))+                (recur (allocate-eid report old-eid new-eid)+                  (concat (explode db new-entity) entities)))++              ;; trash => error+              :else+              (raise ""Expected number, string or lookup ref for :db/id, got "" old-eid+                {:error :entity-id/syntax, :entity entity})))++          (sequential? entity)+          (let [[op e a v] entity]+            (cond+              (= op :db.fn/call)+              (let [[_ f & args] entity]+                (recur report (concat (apply f db args) entities)))++              (and (keyword? op)+                (not (builtin-fn? op)))+              (if-some [ident (entid db op)]+                (let [fun (-> (-search db [ident :db/fn]) first :v)+                      args (next entity)]+                  (if (fn? fun)+                    (recur report (concat (apply fun db args) entities))+                    (raise ""Entity "" op "" expected to have :db/fn attribute with fn? value""+                      {:error :transact/syntax, :operation :db.fn/call, :tx-data entity})))+                (raise ""Can’t find entity for transaction fn "" op+                  {:error :transact/syntax, :operation :db.fn/call, :tx-data entity}))++              (and (tempid? e) (not= op :db/add))+              (raise ""Can't use tempid in '"" entity ""'. Tempids are allowed in :db/add only""+                {:error :transact/syntax, :op entity})++              (or (= op :db.fn/cas)                 (= op :db/cas))-            (let [[_ e a ov nv] entity-                  e (entid-strict db e)-                  _ (validate-attr a entity db)-                  nv (if (ref? db a) (entid-strict db nv) nv)-                  datoms (-search db [e a])]-              (if (nil? ov)-                (if (empty? datoms)-                  (recur (transact-add report [:db/add e a nv]) entities)-                  (raise "":db.fn/cas failed on datom ["" e "" "" a "" "" (if (multival? db a) (map :v datoms) (:v (first datoms))) ""], expected nil""-                         {:error :transact/cas, :old (if (multival? db a) datoms (first datoms)), :expected ov, :new nv}))-                (let [ov (if (ref? db a) (entid-strict db ov) ov)-                      _ (validate-val nv entity db)]-                  (if (multival? db a)-                    (if (some (fn [^Datom d] (= (.-v d) ov)) datoms)-                      (recur (transact-add report [:db/add e a nv]) entities)-                      (raise "":db.fn/cas failed on datom ["" e "" "" a "" "" (map :v datoms) ""], expected "" ov-                             {:error :transact/cas, :old datoms, :expected ov, :new nv}))-                    (let [v (:v (first datoms))]-                      (if (= v ov)+              (let [[_ e a ov nv] entity+                    e (entid-strict db e)+                    _ (validate-attr a entity db)+                    nv (if (ref? db a) (entid-strict db nv) nv)+                    datoms (-search db [e a])]+                (if (nil? ov)+                  (if (empty? datoms)+                    (recur (transact-add report [:db/add e a nv]) entities)+                    (raise "":db.fn/cas failed on datom ["" e "" "" a "" "" (if (multival? db a) (map :v datoms) (:v (first datoms))) ""], expected nil""+                      {:error :transact/cas, :old (if (multival? db a) datoms (first datoms)), :expected ov, :new nv}))+                  (let [ov (if (ref? db a) (entid-strict db ov) ov)+                        _ (validate-val nv entity db)]+                    (if (multival? db a)+                      (if (some (fn [^Datom d] (= (.-v d) ov)) datoms)                         (recur (transact-add report [:db/add e a nv]) entities)-                        (raise "":db.fn/cas failed on datom ["" e "" "" a "" "" v ""], expected "" ov-                               {:error :transact/cas, :old (first datoms), :expected ov, :new nv})))))))--            (tx-id? e)-            (recur (allocate-eid report e (current-tx report)) (cons [op (current-tx report) a v] entities))--            (and (ref? db a) (tx-id? v))-            (recur (allocate-eid report v (current-tx report)) (cons [op e a (current-tx report)] entities))--            (tempid? e)-            (let [upserted-eid (when (is-attr? db a :db.unique/identity)-                                 (:e (first (-datoms db :avet [a v]))))-                  allocated-eid (get tempids e)]-              (if (and upserted-eid allocated-eid (not= upserted-eid allocated-eid))-                (retry-with-tempid initial-report report initial-es e upserted-eid)-                (let [eid (or upserted-eid allocated-eid (next-eid db))]-                  (recur (allocate-eid report e eid) (cons [op eid a v] entities)))))--            (and (ref? db a) (tempid? v))-            (if-let [vid (get tempids v)]-              (recur report (cons [op e a vid] entities))-              (recur (allocate-eid report v (next-eid db)) es))--            (= op :db/add)-            (recur (transact-add report entity) entities)--            (= op :db/retract)-            (if-some [e (entid db e)]-              (let [v (if (ref? db a) (entid-strict db v) v)]-                (validate-attr a entity db)-                (validate-val v entity db)-                (if-some [old-datom (first (-search db [e a v]))]-                  (recur (transact-retract-datom report old-datom) entities)-                  (recur report-                         entities)))-              (recur report entities))--            (= op :db.fn/retractAttribute)-            (if-let [e (entid db e)]-              (let [_ (validate-attr a entity db)-                    datoms (vec (-search db [e a]))]-                (recur (reduce transact-retract-datom report datoms)-                       (concat (retract-components db datoms) entities)))-              (recur report entities))--            (or (= op :db.fn/retractEntity)+                        (raise "":db.fn/cas failed on datom ["" e "" "" a "" "" (map :v datoms) ""], expected "" ov+                          {:error :transact/cas, :old datoms, :expected ov, :new nv}))+                      (let [v (:v (first datoms))]+                        (if (= v ov)+                          (recur (transact-add report [:db/add e a nv]) entities)+                          (raise "":db.fn/cas failed on datom ["" e "" "" a "" "" v ""], expected "" ov+                            {:error :transact/cas, :old (first datoms), :expected ov, :new nv})))))))++              (tx-id? e)+              (recur (allocate-eid report e (current-tx report)) (cons [op (current-tx report) a v] entities))++              (and (ref? db a) (tx-id? v))+              (recur (allocate-eid report v (current-tx report)) (cons [op e a (current-tx report)] entities))++              (tempid? e)+              (let [upserted-eid (when (is-attr? db a :db.unique/identity)+                                   (:e (first (-datoms db :avet [a v]))))+                    allocated-eid (get tempids e)]+                (if (and upserted-eid allocated-eid (not= upserted-eid allocated-eid))+                  (retry-with-tempid initial-report report initial-es e upserted-eid)+                  (let [eid (or upserted-eid allocated-eid (next-eid db))]+                    (recur (allocate-eid report e eid) (cons [op eid a v] entities)))))++              (and (ref? db a) (tempid? v))+              (if-let [vid (get tempids v)]+                (recur report (cons [op e a vid] entities))+                (recur (allocate-eid report v (next-eid db)) es))++              (and (homogeneous-tuple-attr? db a)"
https://api.github.com/repos/replikativ/datahike/pulls/257,530896555,"@@ -0,0 +1,79 @@+# Pull-API: Terminology+++## Selector++Quoted vector holding one or several of the following expressions:+1) wildcard+   - pulls all datoms for entity id+   - e.g. * -> {:db/id 1 :name ""Petr"" :child [{:db/id 2}]}+2) keyword for+   - attributes to get+     - e.g. :child (= has child) -> {:child [#:db{:id 10}]}+   - reverse attributes to get (datom where requested entity is referenced)+     - signaled by underscore+     - e.g. :_child (= child of) -> {:_child [#:db{:id 1}]}+3) map of keywords for (reverse) attributes to get and+   - vectors of attributes+     - attribute should be reference+     - e.g. {:child [:name :age]} -> {:child {:name ""Thomas"" :age 10}}+     - e.g. {:_child [:name :age]} -> {:_child {:name ""Charles"" :age 10}}+   - three dots+     - for infinite recursion on attribute+   - number+     - for finite recursion on attribute+4) function call form:+   - limit:+     - restricts amount of pulled datoms to given number+     - e.g. (limit :child 2)+   - defaults:+     - sets a default value if search returns nil+     - e.g. (default :name ""unknown"")+5) vectors of 3+   - functions of 4) in vector form+     - attribute, function name as keyword, parameter+     - e.g. [:child :limit 2]+            [:name :default ""unknown""]+   - renaming of attributes with :as+     - attribute, :as, new name+     - e.g. [:aka :as :alias]+            [:name :as ""Name""]++## Pattern = (Pull-)Spec++Record with keys+- :wildcard? = boolean value indicating if wildcard expansion has to be done+- :attrs = map of attribute names as in selector and map with keys+           - :attr = attribute name as in database; only different from key when key describes reverse attribute"
https://api.github.com/repos/replikativ/datahike/pulls/259,535922384,"@@ -1,20 +1,79 @@ (ns benchmark.core-  (:require [benchmark.measure :as m]+  (:require [clojure.tools.cli :as cli]+            [benchmark.measure :as m]             [benchmark.config :as c]-            [clojure.pprint :as pp]))---(defn -main [& _]-  (let [measurements (vec (for [config       c/db-configs-                                initial-size c/initial-datoms-                                n            c/datom-counts-                                _            (range c/iterations)]-                              (m/measure-performance-full initial-size n config)))]-    (->> measurements-         (apply concat)-         (group-by :context)-         (mapv (fn [[context group]]-                 {:context context-                  :mean-time (/ (reduce (fn [x y] (+ x (:time y))) 0 group)-                                (count group))}))-         pp/pprint)))+            [benchmark.store :refer [transact-missing-schema transact-data ->RemoteDB]]+            [clojure.pprint :refer [pprint]]))+++(def cli-options+  [[""-u"" ""--db-server-url URL"" ""Base URL for datahike server, e.g. http://localhost:3000""+    :default nil]+   [""-n"" ""--db-name DBNAME"" ""Database name for datahike server"" :default nil]+   [""-g"" ""--db-token TOKEN"" ""Token for datahike server"" :default nil]+   [""-t"" ""--tag TAG"" ""Add tag to measurements""+    :default #{}"
https://api.github.com/repos/replikativ/datahike/pulls/272,557590505,"@@ -1,3 +1,37 @@+# 0.3.3++- Support for tuples (#104)+- Switch to Clojure CLI tools (#253)+- Adapt API namespace for Datomic compatibility (#196)+- Implement query with string (#196)+- Implement transact with lazy sequence (#196, #78, #151)+- Change upsert implementation to improve transaction performance (#62)+- Improve [cljdoc](https://cljdoc.org/d/io.replikativ/datahike/) (#88)+- Format source code according to [Clojure Style Guide](https://github.com/bbatsov/clojure-style-guide) (#198)+- Improve benchmark tooling+- Improve documentation on the pull-api namespace++The improved api namespace is now the entry point to using Datahike and should be the only namespace that needs to be imported in your projects. However it is still possible to use other namespaces but there will be changes that might break existing behaviour. Please take a look at the [improved cljdoc documentation](https://cljdoc.org/d/io.replikativ/datahike/) for the api namespace.++With the change in the upsert implementation (#62), we expect up to 3x speedup in terms of transaction time. However, it also brings a breaking change to the content of transaction reports. In previous Datahike versions, following an upsert operation (which updates an existing entry), you would see in the :tx-data section of the transaction report both the old retracted datom and its newly added version. E.g.:++```+#datahike.db.TxReport{+...+:tx-data [#datahike/Datom[1 :name ""Ivan"" 536870914 false]+          #datahike/Datom[1 :name ""Petr"" 536870914 true]]+...}+```++With this release, you would only see the newly added entry and no information about retraction or addition is shown (it is assumed to be an addition).+```+#datahike.db.TxReport{+...+:tx-data [#datahike/Datom [1 :name ""Petr"" 536870914]]+...}+```++Thanks to all the contributors and the community for helping on this release, namely Judith, Pablo, Wade, Chrislain, Timo, Konrad and Christian. Special thanks go to [clojurists together](https://www.clojuriststogether.org/) for funding large parts of this work."
https://api.github.com/repos/replikativ/datahike/pulls/281,570228547,"@@ -0,0 +1,15 @@+<component name=""ProjectRunConfigurationManager"">+  <configuration default=""false"" name=""REPL"" type=""ClojureREPL"" factoryName=""Local"" activateToolWindowBeforeRun=""false"">+    <module name=""datahike"" />+    <setting name=""displayName"" value=""REPL"" />+    <setting name=""replType"" value=""NREPL"" />+    <setting name=""execution"" value=""DEPS"" />+    <setting name=""jvmArgs"" value="""" />+    <setting name=""parameters"" value="""" />+    <setting name=""workingDir"" value=""$PROJECT_DIR$"" />+    <setting name=""profiles"" value="""" />+    <setting name=""aliases"" value=""dev,test"" />+    <setting name=""fixLineNumbers"" value=""false"" />+    <method v=""2"" />+  </configuration>+</component>"
https://api.github.com/repos/replikativ/datahike/pulls/282,578292146,"@@ -1,5 +1,7 @@ (ns sandbox-  (:require [datahike.api :as d]))+  (:require [datahike.api :as d]+            [datahike-leveldb.core]+            [datahike-postgres.core :as pg]))"
https://api.github.com/repos/replikativ/datahike/pulls/288,582637961,"@@ -40,6 +40,18 @@ jobs:           paths:             - .m2             - replikativ+  benchmark:+    machine:+      image: ubuntu-2004:202101-01+    environment:+      TIMBRE_LEVEL: "":warn""+    steps:+      - attach_workspace:+          at: /home/circleci+      - run: curl -O https://download.clojure.org/install/linux-install-1.10.2.796.sh+      - run: chmod +x linux-install-1.10.2.796.sh+      - run: sudo ./linux-install-1.10.2.796.sh+      - run: cd ~/replikativ && clojure -M:benchmark --db-server-url ${DB_URL} --db-name ${DB_NAME} --db-token ${DB_TOKEN} --tag ${CIRCLE_SHA1}"
https://api.github.com/repos/replikativ/datahike/pulls/292,602835137,"@@ -1237,30 +1241,33 @@   (let [indexing? (indexing? db (.-a datom))         a (.-a datom)         schema? (or (ds/schema-attr? a) (ds/entity-spec-attr? a))-        keep-history? (and (-keep-history? db) (not (no-history? db a)))]+        keep-history? (and (-keep-history? db) (not (no-history? db a)))+        op-count (.op-count db)]     (if (datom-added datom)       (cond-> db-        true (update-in [:eavt] #(di/-insert % datom :eavt))-        true (update-in [:aevt] #(di/-insert % datom :aevt))-        indexing? (update-in [:avet] #(di/-insert % datom :avet))+        true (update-in [:eavt] #(di/-insert % datom :eavt op-count))+        true (update-in [:aevt] #(di/-insert % datom :aevt op-count))+        indexing? (update-in [:avet] #(di/-insert % datom :avet op-count))         true (advance-max-eid (.-e datom))         true (update :hash + (hash datom))         schema? (-> (update-schema datom)-                    update-rschema))+                  update-rschema)+        true (update :op-count + 1))       (if-some [removing ^Datom (first (-search db [(.-e datom) (.-a datom) (.-v datom)]))]         (cond-> db-          true (update-in [:eavt] #(di/-remove % removing :eavt))-          true (update-in [:aevt] #(di/-remove % removing :aevt))-          indexing? (update-in [:avet] #(di/-remove % removing :avet))+          true (update-in [:eavt] #(di/-remove % removing :eavt op-count))+          true (update-in [:aevt] #(di/-remove % removing :aevt op-count))+          indexing? (update-in [:avet] #(di/-remove % removing :avet op-count))           true (update :hash - (hash removing))           schema? (-> (remove-schema datom) update-rschema)-          keep-history? (update-in [:temporal-eavt] #(di/-insert % removing :eavt))-          keep-history? (update-in [:temporal-eavt] #(di/-insert % datom :eavt))-          keep-history? (update-in [:temporal-aevt] #(di/-insert % removing :aevt))-          keep-history? (update-in [:temporal-aevt] #(di/-insert % datom :aevt))+          keep-history? (update-in [:temporal-eavt] #(di/-insert % removing :eavt op-count))+          keep-history? (update-in [:temporal-eavt] #(di/-insert % datom :eavt (+ 1 op-count)))"
https://api.github.com/repos/replikativ/datahike/pulls/310,620322446,"@@ -4,7 +4,7 @@   <groupId>io.replikativ</groupId>   <artifactId>datahike</artifactId>   <packaging>jar</packaging>-  <version>0.3.6-SNAPSHOT</version>"
https://api.github.com/repos/replikativ/datahike/pulls/324,628548633,"@@ -204,7 +204,15 @@  (defmulti -lesser?   {:arglists '([value & more])}-  (fn [value & more] (class value)))+  (fn [value & _more] (class value)))++(defmethod -lesser? java.lang.String [^String s0 & more]+  (reduce (fn [res [s1 ^String s2]]+            (if (neg? (compare s1 s2))+              res+              (reduced false)))+          true"
https://api.github.com/repos/replikativ/datahike/pulls/323,629218846,"@@ -0,0 +1,63 @@+# Architecture Decision Record Template++## Context++The database record `DB` from `datahike.db` has too many fields. Extending the record with new fields is tedious and not clearly defined. +Each change requires updating the `IConfiguration` from `datahike.connector` where the store is updated and a new `DB` record is written.++## Options++### Refactoring++Adjust the database record `DB` and combine fields into categories. Proposed fields:++- `:indexes`: all index nodes+- `config`: as it is now with cleanup+- `meta`: fixed meta data created by Datahike like `:id`, `:created-at`, `version`+- `metrics`: db metrics like `max-eid` or `op-count`+- `schema`: cleaned schema data, reverse schema can be computed+- `store`: konserve store connected Datahike is connected to++![datahike-db-record](../assets/datahike-db-record.svg)++Additionally simplify `DB` copy process after connections and transactions.++#### Pro++- unified and cleaner DB record+- more extensible through nested structures+- creates prerequisits for future metrics and additional meta data like migration history that needs to be stored in the record "
https://api.github.com/repos/replikativ/datahike/pulls/332,637571630,"@@ -8,7 +8,9 @@         io.replikativ/superv.async                  {:mvn/version ""0.2.11""}         io.lambdaforge/datalog-parser               {:mvn/version ""0.1.8""}         io.replikativ/zufall                        {:mvn/version ""0.1.0""}-        junit/junit                                 {:mvn/version ""4.13.1""}}+        junit/junit                                 {:mvn/version ""4.13.1""}+        io.replikativ/datahike-client               {:git/url ""https://github.com/replikativ/datahike-client.git"""
https://api.github.com/repos/replikativ/datahike/pulls/331,639787527,"@@ -0,0 +1,13 @@+#!/usr/bin/env bash++++# Run by being in the dir where this file is defined."
https://api.github.com/repos/replikativ/datahike/pulls/315,640380939,"@@ -677,6 +656,58 @@  ;; ---------------------------------------------------------------------------- +(def db-caches (atom {}))++(defn insert-cache [db-hash cache]+  (let [caches @db-caches]+    (if (>= (count caches) max-db-caches)+      (let [[last-used-db _] (reduce (fn [[d-hash1 [c1 ^Date last-accessed1]]"
https://api.github.com/repos/replikativ/datahike/pulls/320,640471017,"@@ -2,54 +2,86 @@   (:require [hitchhiker.tree :as tree]             [hitchhiker.tree.op :as op])) +(defn- increase-by-one?+  ""Returns true if elements in vector 'indices' form a prefix of the vector indices.+  This is equivalent to check whether the elements increase by one and contains 0.+  E.g., [0 1 2] => true, [0 2 3] => false, [1 2] => false.""+  [indices]+  (if (.contains indices 0)+    (let [m (apply max indices)+          s (apply + indices)]+      (= s (/ (* m (+ 1 m)) 2)))+    false))++(def prefix? (memoize increase-by-one?))++(defn- max-t+  ""Returns the key with max 't' component.""+  [ks]+  (when (seq ks)+    (apply max-key #(nth % 3) ks)))++(defn mask [new indices]+  (reduce (fn [mask pos]+            (assoc mask pos (nth new pos)))+          [nil nil nil nil]+          indices))+ (defn old-key   ""Returns the old version of the given 'new' key if it exists in 'old-keys'.-  If there are multiple old versions, the one with the biggest transaction time is returned.""-  [old-keys new]-  (let [[a b _ _] new]-    (when (seq old-keys)-      (when-let [candidates (subseq old-keys >= [a b nil nil])]+  If there are multiple old versions, the one with the biggest transaction time is returned.+  'indices' is a vector of integer indicating which positions in keys are significant,+  i.e., [0 2] means that the first and third entry in the key are used for filtering.""+  [old-keys new indices]+  (when (seq old-keys)+    (let [mask (mask new indices)]+      (when-let [candidates (subseq old-keys >= mask)]         (->> candidates              (map first)-             (take-while #(and (= a (first %)) (= b (second %))))-             reverse-             first)))))+             ((if (prefix? indices) take-while filter)"
https://api.github.com/repos/replikativ/datahike/pulls/341,645783875,"@@ -677,6 +677,70 @@  ;; ---------------------------------------------------------------------------- +(def db-caches (atom {}))+(def db-cache-sizes (atom {}))++(defn insert-cache [db-hash cache]+  (let [caches @db-caches]+    (when (>= (count caches) max-db-caches) ;; TODO: better part of record so it can be destroyed?+      (let [last-used-db (first (reduce (fn [[d-hash1 {^Date d1 :last-access :as cache1}]"
https://api.github.com/repos/replikativ/datahike/pulls/325,646426549,"@@ -4,72 +4,91 @@             [datahike.api :as d])   (:import [java.util UUID])) - (defmacro timed   ""Evaluates expr. Returns the value of expr and the time in a map.""   [expr]   `(let [start# (. System (nanoTime))          ret# ~expr]      {:res ret# :t (/ (double (- (. System (nanoTime)) start#)) 1000000.0)})) --(defn init-db [initial-size config]+(defn init-db [entity-count config]   (d/delete-database config)   (d/create-database config) -  (let [entity-count (int (Math/floor (/ initial-size (count c/schema))))-        tx           (vec (repeatedly entity-count c/rand-entity))+  (let [tx (vec (repeatedly entity-count (partial c/rand-entity entity-count)))         conn (d/connect config)]     (d/transact conn c/schema)     (when (pos? (count tx))       (d/transact conn tx))-    (d/release conn)-    entity-count))---(defn measure-performance-full [initial-size n-datoms {:keys [config-name config] }]-  (log/debug (str ""Measuring database with config named '"" name -                  "", schema size "" (count c/schema)-                  ""', database datoms "" initial-size -                  "" and "" n-datoms "" datom"" (when (not= n-datoms 1) ""s"") -                  "" in transaction...""))+    {:initial-tx tx+     :conn conn}))++(defn measure-performance-full [db-entities+                                {:keys [iterations function query data-found-opts data-types tx-entity-counts] :as _options}+                                {:keys [config-name config]}]+  (log/info (str ""Measuring database with config named '"" config-name "", ""+                  (count c/schema) "" attributes in entity, and ""+                  db-entities "" entities in database""))+     (let [unique-config (assoc config :name (str (UUID/randomUUID)))         simple-config (-> config                           (assoc :name config-name)                           (assoc :backend (get-in config [:store :backend]))                           (dissoc :store))-      -        initial-entities (init-db initial-size unique-config)-        initial-datoms (* initial-entities (count c/schema))--        {conn :res t-connection-0 :t} (timed (d/connect unique-config))--        tx-entities (int (Math/ceil (/ n-datoms (count c/schema))))-        tx-datoms (* tx-entities (count c/schema))--        tx (vec (repeatedly tx-entities c/rand-entity))-        t-transaction-n (:t (timed (d/transact conn tx)))--        final-datoms (+ initial-datoms tx-datoms)-        final-entities (+ initial-entities tx-entities)-+        db-datoms (* db-entities (count c/schema))++        {:keys [initial-tx conn]} (init-db db-entities unique-config)++        [conn2 connection-times] (if (#{:all :connection} function)+                                   (let [_  (d/release conn)+                                         {conn-new :res conn-t :t} (timed (d/connect unique-config))]+                                     [conn-new [{:time conn-t+                                                 :context {:dh-config simple-config+                                                           :function :connection+                                                           :db-entities db-entities+                                                           :db-datoms db-datoms}}]])+                                   [conn []])++        query-times (if (#{:all :query} function)+                      (let [data-found (case data-found-opts+                                         true [true]+                                         false [false]+                                         :all [true false])+                            queries (if (pos? (count initial-tx))+                                      (c/all-queries @conn2 initial-tx data-types data-found)+                                      (c/non-var-queries @conn2 data-types))+                            filtered-queries (if (= query :all)+                                               queries+                                               (filter #(= query (:function %)) queries))]+                        (vec (for [{:keys [function query details]} filtered-queries]+                               (do (log/debug (str "" Querying with "" function "" using "" details ""...""))+                                    {:time (:t (timed (d/q query @conn2)))+                                      :context {:dh-config simple-config+                                                :function function+                                                :db-entities db-entities+                                                :db-datoms db-datoms+                                                :execution details}} ))))+                      [])         _ (d/release conn)-        t-connection-0n (:t (timed (d/connect unique-config)))---        queries0n (vec (for [{:keys [function query details]} (if (pos? (count tx))-                                                                (c/all-queries @conn tx)-                                                                (c/non-var-queries @conn))]-                        (do (log/debug (str "" Querying with "" function "" using "" details ""...""))-                            {:time (:t (timed (d/q query @conn)))-                             :context {:dh-config simple-config :function function :db-entities final-entities :db-datoms final-datoms-                                       :execution details}})))]-    (d/release conn) -    (concat queries0n-            [{:time t-connection-0  :context {:dh-config simple-config :function :connection  :db-entities initial-entities :db-datoms initial-datoms}}-             {:time t-transaction-n :context {:dh-config simple-config :function :transaction :db-entities initial-entities :db-datoms initial-datoms -                                              :execution {:tx-entities tx-entities :tx-datoms tx-datoms}}}-             {:time t-connection-0n  :context {:dh-config simple-config :function :connection  :db-entities final-entities :db-datoms final-datoms}}])))+        _ (d/delete-database unique-config)+        transaction-times (if (#{:all :transaction} function)+                            (for [tx-entities tx-entity-counts+                                  _ (range iterations)]+                              (let [unique-config (assoc config :name (str (UUID/randomUUID)))+                                    {:keys [conn]} (init-db db-entities unique-config)+                                    tx (vec (repeatedly tx-entities c/rand-entity))"
https://api.github.com/repos/replikativ/datahike/pulls/365,674958605,"@@ -20,7 +20,7 @@  public class DatahikeTest { -    private String uri = ""datahike:mem://test-empty-db"";+    private String uri = ""datahike:mem://test-empty-db-java"";"
https://api.github.com/repos/replikativ/datahike/pulls/330,678248173,"@@ -77,9 +77,6 @@                                  [{:db/id 1, :name ""Ivan""}                                   {:db/id 2, :name ""Oleg""}])         db (d/db-with ref-db entities)]-    (is (nil? (d/entity db nil)))-    (is (nil? (d/entity db ""abc"")))-    (is (nil? (d/entity db :keyword)))"
https://api.github.com/repos/replikativ/datahike/pulls/366,685132382,"@@ -0,0 +1,62 @@+(ns ^:no-doc datahike.index.hitchhiker-tree.insert+  (:require [hitchhiker.tree :as tree]+            [hitchhiker.tree.op :as op]))++(defn mask [new indices]+  (reduce (fn [mask pos]+            (assoc mask pos (nth new pos)))+          [nil nil nil nil]+          indices))++(defn equals-at-indices?+  ""Returns true if 'k1' and 'k2' are equals at positions given in 'indices'.""+  [indices k1 k2]+  (reduce (fn [_ i]+            (if (= (nth k2 i) (nth k1 i))+              true+              (reduced false)))+          true+          indices))++(defn exists-old?+  ""Returns true if 'new' already exists in 'old-keys'.""+  [old-keys new]+  (when (seq old-keys)+    (let [indices [0 1 2]+          mask (mask new indices)]+      (when-let [candidates (subseq old-keys >= mask)]+        (->> candidates+             (map first)+             first+             (equals-at-indices? indices new))))))++(defrecord InsertOp [key op-count]+  op/IOperation+  (-insertion-ts [_] op-count)+  (-affects-key [_] key)+  (-apply-op-to-coll [_ kvs]+    (if (exists-old? kvs key)+      kvs+      (assoc kvs key nil)))+  (-apply-op-to-tree [_ tree]+    (let [children (cond+                     (tree/data-node? tree) (:children tree)+                     :else (:children (peek (tree/lookup-path tree key))))]+      (if (exists-old? children key)+        tree+        (tree/insert tree key nil)))))"
https://api.github.com/repos/replikativ/datahike/pulls/369,689686810,"@@ -287,6 +292,20 @@                         (resolve-datom db nil attr end nil emax txmax)                         :avet)) +  (-tx-range [db start end]+             (let [txs (tx-log/-slice (:tx-log db) start end)+                   coerce-txs (fn [[tx tx-data]] {:tx (- tx tx0)+                                                  :data (if (:attribute-refs? (:config db))+                                                          (mapv (fn [d] (update d :a (partial -ident-for db))) tx-data)+                                                          tx-data)})]+               (map coerce-txs txs)))++  (-lookup-tx [db tx]+              (let [tx (tx-log/-get (:tx-log db) tx)]+                (if (:attribute-refs? (:config db))+                  (mapv (fn [d] (update d :a (partial -ident-for db))) tx)"
https://api.github.com/repos/replikativ/datahike/pulls/373,693778926,"@@ -0,0 +1,41 @@+(ns datahike.test.attribute-refs.db+  (:require+   #?(:cljs [cljs.test :as t :refer-macros [is deftest testing]]+      :clj [clojure.test :as t :refer [is deftest testing]])+   [datahike.api :as d]))++(def ref-cfg+  {:store {:backend :mem :id ""attr-refs-test""}+   :keep-history? true+   :attribute-refs? true+   :schema-flexibility :write+   :name ""attr-refs-test""})++(def name-schema [{:db/ident :name+                   :db/cardinality :db.cardinality/one+                   :db/valueType :db.type/string}])++(defn setup-db [cfg]"
https://api.github.com/repos/replikativ/datahike/pulls/392,716521285,"@@ -18,39 +18,33 @@           true           indices)) -(defn old-key-  ""Returns the key with the same values as 'new' at the positions given by 'indices', if it exists.""-  [kvs new indices]-  (when (seq kvs)-    (let [mask (mask new indices)]-      (when-let [candidate (->> (subseq kvs >= mask)-                                (map first)-                                first)]-        (when (equals-at-indices? indices candidate new)-          candidate)))))+(defn exists-old?+  ""Returns true if 'new' already exists in 'old-keys'.""+  [old-keys new]+  (when (seq old-keys)+    (let [indices [0 1 2]+          mask (mask new indices)]+      (when-let [candidates (subseq old-keys >= mask)]+        (->> candidates+             (map first)+             first"
https://api.github.com/repos/replikativ/datahike/pulls/395,724966083,"@@ -191,6 +191,67 @@                                       [:db/add -1 :name ""Oleg""]                                       [:db/add -1 :age 36]]))))) +(defn temporal-history-test [cfg]+  (let [schema [{:db/ident       :name+                 :db/cardinality :db.cardinality/one+                 :db/index       true+                 :db/unique      :db.unique/identity+                 :db/valueType   :db.type/string}+                {:db/ident       :age+                 :db/cardinality :db.cardinality/one+                 :db/valueType   :db.type/long}]+        _ (api/delete-database cfg)+        _ (api/create-database cfg)+        conn (api/connect cfg)]+    (testing ""inserting a new datom creates an entry in history""+      (api/transact conn {:tx-data schema})+      (api/transact conn {:tx-data [{:name ""Alice""+                                     :age  25}]})+      (is (= 1 (count (d/datoms (api/history @conn) :eavt [:name ""Alice""] :age)))))++    (testing ""inserting the exact same datom""+      (api/transact conn {:tx-data [{:db/id [:name ""Alice""]+                                     :age 25}]})+      (testing "" does not change the history for any index other than persistent-set""+        (when (not= (:index cfg) :datahike.index/persistent-set)+          (is (= 1 (count (api/datoms (api/history @conn) :eavt [:name ""Alice""] :age))))))+      (testing "" adds another version of the datom when index is persistent-set""+        (when (= (:index cfg) :datahike.index/persistent-set)"
https://api.github.com/repos/replikativ/datahike/pulls/411,744849910,"@@ -99,7 +99,7 @@ stable on-disk schema. _Take a look at the ChangeLog before upgrading_.   (d/history @conn)) ;; => #{[20] [25]} -;; you might need to release the connection for specific stores like leveldb+;; you might need to release the connection for specific stores like leveldb ; -> keep reference to leveldb?"
https://api.github.com/repos/replikativ/datahike/pulls/413,745383967,"@@ -1097,25 +1102,27 @@   (->> (-collect context symbols)        (map vec))) -(defmulti q (fn [query & args] (type query)))- (defmethod q clojure.lang.LazySeq [query & args]   (q {:query query :args args}))  (defmethod q clojure.lang.PersistentVector [query & args]   (q {:query query :args args})) +(defmethod q clojure.lang.PersistentList [query & args]+  (q {:query query :args args}))+ (defmethod q clojure.lang.PersistentArrayMap [query-map & inputs]-  (let [query (if (contains? query-map :query) (:query query-map) query-map)-        query (if (string? query) (edn/read-string query) query)-        args (if (contains? query-map :args) (:args query-map) inputs)-        parsed-q (memoized-parse-query query)-        find (:qfind parsed-q)+  (let [query         (if (contains? query-map :query) (:query query-map) query-map)+        query         (if (string? query) (edn/read-string query) query)+        query         (if (= 'quote (first query)) (second query) query)+        args          (if (contains? query-map :args) (:args query-map) inputs)+        parsed-q      (memoized-parse-query query)+        find          (:qfind parsed-q)         find-elements (dpip/find-elements find)-        find-vars (dpi/find-vars find)-        result-arity (count find-elements)-        with (:qwith parsed-q)-        returnmaps (:qreturnmaps parsed-q)+        find-vars     (dpi/find-vars find)+        result-arity  (count find-elements)+        with          (:qwith parsed-q)+        returnmaps    (:qreturnmaps parsed-q)"
https://api.github.com/repos/replikativ/datahike/pulls/408,745402782,"@@ -37,7 +37,11 @@     :db.type/symbol     :db.type/uuid     :db.type/value-    :db.type/tuple})+    :db.type/tuple+    :db.type/cardinality+    :db.type.install/attribute+    :db.type/valueType+    :db.type/unique})"
https://api.github.com/repos/riemann/riemann/pulls/238,4670948,"@@ -212,6 +212,12 @@          (human-uniq (map :service events) ""services"")          (human-uniq (map :state events) ""states"")]))) +(defn attributes"
https://api.github.com/repos/riemann/riemann/pulls/272,7252388,"@@ -48,6 +52,38 @@               (stop! core)))) +(deftest sse-subscribe-events-test+  (riemann.logging/suppress+   [""riemann.transport"" ""riemann.core"" ""riemann.pubsub""]+   (let [s1       (tcp-server)+         s2       (sse-server)+         index    (index/index)+         pubsub   (pubsub/pubsub-registry)+         core     (transition! +                   (core)+                   {:index    index+                    :pubsub   pubsub+                    :services [s1 s2]+                    :streams  [(partial index/update index)]})+         client   (client/tcp-client)+         convert  (comp json/parse-string+                        second+                        (partial re-matches #""data: (.*)\n\n"")+                        formats/bytes->string)+         response (http-request +                   {:method :get+                    :url    ""http://127.0.0.1:5558/index?query=true""})]+     (try+       (client/send-event client {:service ""service1""})+       (client/send-event client {:service ""service2""})+       (Thread/sleep 100)"
https://api.github.com/repos/riemann/riemann/pulls/319,9551279,"@@ -155,9 +155,9 @@   ""Set the index used by this core. Returns the index.""   [& opts]   (let [index (apply riemann.index/index opts)]-    (locking core -      (swap! next-core assoc :index index))-    index))+    (locking core+      (swap! next-core assoc :index index)"
https://api.github.com/repos/riemann/riemann/pulls/323,9773356,"@@ -1,27 +1,50 @@ (ns ^{:doc    ""Forwards events to HipChat""       :author ""Hubert Iwaniuk""}   riemann.hipchat+  (:use [clojure.string :only [join]])   (:require [clj-http.client :as client]             [cheshire.core :as json])) +(defn- get-state [ev]+  ""Gets the state from an event""+  (:state ev))++(defn- get-nested-state [ev]+  ""Gets the state from the first event+  in a vector.""+  (:state (first ev)))++(defn- set-message-colour [ev]+  ""Set the colour to be used in the+  hipchat message.""+  (let [state (if-let [s (get-state ev)] s (get-nested-state ev))]"
https://api.github.com/repos/riemann/riemann/pulls/333,10329938,"@@ -1054,19 +1054,27 @@  (defn coalesce   ""Combines events over time. Coalesce remembers the most recent event for each-  service/host combination that passes through it (limited by :ttl). Every time-  it receives an event, it passes on *all* events it remembers. When events+  service/host combination that passes through it (limited by :ttl). Every second,+  it passes on *all* events it remembers. When events   expire, they are included in the emitted sequence of events *once*, and   removed from the state table thereafter.    Use coalesce to combine states that arrive at different times--for instance,   to average the CPU use over several hosts.""   [& children]"
https://api.github.com/repos/riemann/riemann/pulls/343,10632856,"@@ -153,8 +153,10 @@   nil events and nil metrics.""   [events]   (when-let [e (some identity events)]-    (let [metrics (non-nil-metrics events)]-      (assoc e :metric (/ (reduce + metrics) (clojure.core/count metrics))))))+    (let [metrics (non-nil-metrics events)+          c (clojure.core/count metrics)]"
https://api.github.com/repos/riemann/riemann/pulls/345,10870132,"@@ -37,6 +37,19 @@  (def default-ttl 60) +(defn query-for-host-and-service+  ""Check if the AST is only searching for the host and service""+  [query-ast]+  (if (and (list? query-ast)+           (= 'and (first query-ast)))+    (let [and-exprs              (rest query-ast)+          [eq-exprs other-exprs] (split-with #(= (first %) '=) and-exprs)"
https://api.github.com/repos/riemann/riemann/pulls/346,11323308,"@@ -887,6 +887,41 @@                                (partial * c-existing))))]         (call-rescue (assoc event :metric m) children))))) +(defn ewma+  ""Exponential weighted moving average. Constant space and time overhead.+  Passes on each event received, but with metric adjusted to the moving+  average. Takes into account the time between events.""+  [halflife & children]+  (let [m (atom {:metric 0})+        r (expt Math/E (/ (Math/log 1/2) halflife))+        c-existing r+        c-new (- 1 r)]+    (fn stream [event]+      ; Compute new ewma+      (let [time-new (or (:time event) 0)]+        (swap! m (fn [x]+          (merge x {:time (or (get x :time) time-new)})))+        (let [time-old (get @m :time)+              time-diff (- time-new time-old)+          m (when-let [metric-new (:metric event)]+            (cond+              (> time-diff 0) (swap! m (fn [x]"
https://api.github.com/repos/riemann/riemann/pulls/353,11354479,"@@ -203,6 +203,10 @@        (search [this query-ast]          (index/search source query-ast))        (update [this event]+         (when-not (:time event)+           (warn ""trying to index event with no time"")"
https://api.github.com/repos/riemann/riemann/pulls/395,13090009,"@@ -6,27 +6,46 @@    (defn slack_format [message]     ""Format message according to slack formatting spec.""-    (escape message {\< ""&lt;"" \> ""&gt;""}))+    (escape message {\< ""&lt;"" \> ""&gt;"" \& ""&amp;""}))"
https://api.github.com/repos/riemann/riemann/pulls/401,13786861,"@@ -10,21 +10,41 @@         split-service (if service (split service #"" "") [])]      (join ""."" split-service))) +(defn influxdb-series-name"
https://api.github.com/repos/riemann/riemann/pulls/410,14268002,"@@ -0,0 +1,45 @@+(ns riemann.stackdriver+  ""Forwards events to Stackdriver.""+  (:require [clj-http.client :as client]+            [cheshire.core :refer [generate-string]])+  (:use [clojure.string :only [join split]]))++(def gateway-url ""https://custom-gateway.stackdriver.com/v1/custom"")++(defn metric-name+  ""Constructs a metric-name for an event.""+  [opts event]+  (let [service ((:name opts) event)+        split-service (if service (split service #"" "") [])]+     (join ""."" split-service)))++(defn generate-datapoint+  ""Generate datapoint from an event.""+  [opts event]+  (let [value (:metric event)  +        service (metric-name opts event)]+    {:name service+     :value value+     :collected_at (long (:time event))}))++(defn post-datapoint+  ""Post the riemann metrics datapoints.""+  [api-key uri data]+  (let [http-options {:body data+                      :content-type :json+                      :headers {""x-stackdriver-apikey"" api-key}}]+    (client/post uri http-options)))++(defn stackdriver+  ""Returns a function which accepts an event and sends it to Stackdriver.""+  [opts]+  (let [opts (merge { :api-key ""stackdriver-api-key""+                      :name :service } opts)]+    (fn [event]+      (when (:metric event))+      (let [data-point {:timestamp (-> (System/currentTimeMillis) (quot 1000))"
https://api.github.com/repos/riemann/riemann/pulls/419,15258785,"@@ -48,10 +48,10 @@         (map (fn [[k v]] (str (capitalize (name k)) "": "" v))              {:package (:name project)               :version (get-version project)-              :section ""base""+              :section ""java""               :priority ""optional""               :architecture ""all""-              :depends (join "", "" [""bash""])+              :depends (join "", "" [""default-jre-headless (<= 1.7) | java7-runtime""])"
https://api.github.com/repos/riemann/riemann/pulls/422,15423042,"@@ -0,0 +1,200 @@+(ns riemann.transport.http+  ""Provides restful HTTP interface to the core index.""+  (:require [riemann.query         :as query]+            [riemann.index         :as index]+            [riemann.pubsub        :as p]+            [aleph.formats         :as formats]+            [gloss.core            :as gloss]+            [cheshire.core         :as json]+            [interval-metrics.core :as metrics])+  (:use [riemann.common        :only [event-to-json ensure-event-time]]+        [riemann.core          :only [stream!]]+        [riemann.instrumentation :only [Instrumented]]+        [riemann.service       :only [Service ServiceEquiv]]+        [riemann.time          :only [unix-time]]+        [aleph.http            :only [start-http-server,wrap-ring-handler]]+        [lamina.api            :only [bridge-join]]+        [interval-metrics.measure :only [measure-latency]]+        [clojure.java.io       :only [reader]]+        [clojure.tools.logging :only [info warn]]+        [clj-http.util         :only [url-decode]]+        [clojure.string        :only [split,join]]+        [net.cgrand.moustache  :only [app]]+        [ring.middleware.params :only [wrap-params]]+        ))++(defn json-response [status body]+  ""generate a ring http response with a json body""+  {+    :status status+    :headers {""Content-Type"" ""application/json""}+    :body (json/encode body)+  })++(defn apply-paging [s offset limit]+  (take limit (drop offset s)))++(defn integer-param++  ([params key default] (let [key-name (name key)]+                          (if (contains? params key-name)+                            (try+                              (Integer/parseInt (params key-name))+                              (catch NumberFormatException e+                                (throw (IllegalArgumentException. (str ""parameter "" key-name "" is not an integer"")))))+                            default)))++  ([params key default pred] (let [result (integer-param params key default)]+                               (if (pred result)+                                 result+                                 (throw (IllegalArgumentException. (str ""parameter "" (name key) "" is not valid"")))+                                 )))+  )++(defn get-events [core req]+  (try+    (let [params (:params req)+          offset (integer-param params :offset 0 #(>= % 0))+          limit  (integer-param params :limit 250 pos?)+          q      (get params ""q"")+          index  (:index @core)+          items  (if (nil? q)+                   index+                   (index/search index (query/ast q)))]+      (json-response 200 {+                           :items (apply-paging items offset limit)+                           }))+    (catch IllegalArgumentException e+      (json-response 400 {:message (.getMessage e)}))))++(defn get-events-by-host [core req host]+  (try+    (let [params (:params req)+          offset (integer-param params :offset 0)+          limit  (integer-param params :limit 250)+          i      (filter #(= (:host %) host)+                         (:index @core))]+      (json-response 200 {+                          :items (apply-paging i offset limit)+                          }))+    (catch IllegalArgumentException e+      (json-response 400 {:message (.getMessage e)}))))++(defn get-events-by-host-service [core req host service]+  (let [event (index/lookup (:index @core) host service)]+    (if (nil? event)+      (json-response 404 {:message ""no such event""})+      (json-response 200 event))))++(defn http-handler [core]+  ""Returns a function which is called with new http connections.+   Responsible for routing requests to the appropriate handler.""+  (wrap-params+    (app+      [""events""] {:get #(get-events core %)}+      [""events"" host] {:get #(get-events-by-host core % host)}+      [""events"" host service] {:get #(get-events-by-host-service core % host service)}+     )))++(defrecord HttpServer [host port core server stats]+  ServiceEquiv+  (equiv? [this other]+          (and (instance? HttpServer other)+               (= host (:host other))+               (= port (:port other))))++  Service+  (conflict? [this other]+             (and (instance? HttpServer other)+                  (= host (:host other))+                  (= port (:port other))))++  (reload! [this new-core]+           (reset! core new-core))++  (start! [this]+          (locking this+            (when-not @server+              (reset! server (start-http-server (wrap-ring-handler (http-handler core))+                                                {:host host+                                                 :port port}))+              (info ""HTTP server"" host port ""online""))))++  (stop! [this]+         (locking this+           (when @server+             (@server)+             (info ""HTTP server"" host port ""shut down""))))++  Instrumented+  (events [this]+          ; Take snapshots of our current stats.+          (let [svc (str ""riemann server http "" host "":"" port)+                base {:time (unix-time)+                      :state ""ok""}+                out (metrics/snapshot! (:out stats))+                in  (metrics/snapshot! (:in stats))]+            (map (partial merge base)+                 (concat [; Connections+                          {:service (str svc "" conns"")+                           :metric (deref (:conns stats))}++                          ; Rates+                          {:service (str svc "" out rate"")+                           :metric (:rate out)}+                          {:service (str svc "" in rate"")+                           :metric (:rate in)}]++                         ; Latencies+                         (map (fn [[q latency]]+                                {:service (str svc "" out latency "" q)+                                 :metric latency})+                              (:latencies out))+                         (map (fn [[q latency]]+                                {:service (str svc "" in latency "" q)+                                 :metric latency})+                              (:latencies in)))+             ))))++(defn http-server+  ""Starts a new http server for a core. Starts immediately.++  Options:+  :host   The address to listen on (default 127.0.0.1)+          Currently does nothing; this option depends on an incomplete+          feature in Aleph, the underlying networking library. Aleph will+          currently bind to all interfaces, regardless of this value.+  :post   The port to listen on (default 5558)++  All output is in json, and lists are structured as++  {+     \""items\"":[+        {\""key1\"":\""value1\""},+        {\""key1\"":\""value2\""}+     ]+  }++  lists can be paged using query parameters 'offset' and 'limit'+  GET /events - list of all events in the index+                query parameters:+                'offset' - offset of first item to return+                'limit'  - max number to return (defualt is 250)+                'q'      - riemann query to match events against+  GET /events/{hostname} - list of all events for a single host+                query parameters:+                'offset' - offset of first item to return+                'limit'  - max number to return (defualt is 250)++  GET /events/{hostname}/{eventname} - a single event"
https://api.github.com/repos/riemann/riemann/pulls/420,15434923,"@@ -22,7 +22,7 @@                                        com.sun.jdmk/jmxtools                                        com.sun.jmx/jmxri]]     [net.logstash.log4j/jsonevent-layout ""1.5""]-    [aleph ""0.3.2""]"
https://api.github.com/repos/riemann/riemann/pulls/423,15495268,"@@ -117,11 +117,16 @@         [[:time (unix-time)]          [:state ""expired""]])) +(defn event-with-iso8601-time+  ""change the event's time from a unix ts to a iso8601 time""+  [event]+  (assoc event :time (unix-to-iso8601 (:time event))))+ (defn event-to-json   ""Convert an event to a JSON string.""   [event]   (json/generate-string-    (assoc event :time (unix-to-iso8601 (:time event)))))"
https://api.github.com/repos/riemann/riemann/pulls/436,16913008,"@@ -0,0 +1,36 @@+(ns riemann.keenio+  ""Forwards events to Keen IO""+  (:require [clj-http.client :as client])+  (:require [cheshire.core :as json]))++(def ^:private event-url+  ""https://api.keen.io/3.0/projects/"")++(defn- post"
https://api.github.com/repos/riemann/riemann/pulls/447,18263175,"@@ -0,0 +1,90 @@+;(ns riemann.mailgun+  ;""Forwards events to Mailgun""+  ;(:require [clj-http.client :as client]))+(use 'aleph.http)+(use '[riemann.common :only [body subject]])++(def ^:private event-url+  ""https://api.mailgun.net/v2/%s/messages"")++(defn- post+  ""POST to the Mailgun events API.""+  [mgun-opts msg-opts]+  (sync-http-request"
https://api.github.com/repos/riemann/riemann/pulls/471,22238181,"@@ -48,6 +49,7 @@ simple	:	( t | f | nil 		| greater_equal 		| not_equal 		| equal+		| limit"
https://api.github.com/repos/riemann/riemann/pulls/478,22299837,"@@ -1270,22 +1270,32 @@   (with {:host nil :state \""broken\""} prn)""   [& args]   (if (map? (first args))-    ; Merge in a map of new values.-    (let [[m & children] args]-      (fn stream [event]-        ;    Merge on protobufs is broken; nil values aren't applied.-        ;    (let [e (merge event m)]-        (let [e (reduce (fn [m, [k, v]]-                          (if (nil? v) (dissoc m k) (assoc m k v)))-                        event m)]-          (call-rescue e children))))+    (let [[m & children] args+          transform-event+          (fn [individual-event]"
https://api.github.com/repos/riemann/riemann/pulls/485,22540775,"@@ -139,13 +139,15 @@  (defn exception->event   ""Creates an event from an Exception.""-  [^Throwable e]-  (map->Event {:time (unix-time)-               :service ""riemann exception""-               :state ""error""-               :tags [""exception"" (.getName (class e))]-               :description (str e ""\n\n""-                                 (join ""\n"" (.getStackTrace e)))}))+  ([exception] (exception->event exception nil))+  ([^Throwable e original]+   (map->Event {:time (unix-time)+                :service ""riemann exception""+                :state ""error""+                :tags [""exception"" (.getName (class e))]+                :original-event original"
https://api.github.com/repos/riemann/riemann/pulls/494,22830681,"@@ -32,6 +32,17 @@                  comment))      ~@body)) +(defmacro defndeprecated+  [name comment ds args & body]+  `(let [emit-depr-warning# (delay+                              (info ~(str ""Deprecated: ""+                                       (format ""<%s:%s> "" *file* (:line (meta &form)))+                                       comment)))]+     (defn ~name ~args ~ds+       (do+         (force emit-depr-warning#)+         ~@body))))+"
https://api.github.com/repos/riemann/riemann/pulls/500,23548556,"@@ -0,0 +1,98 @@+(ns riemann.boundary+  ""Forwards events to Boundary Premium.""+  (:require [clj-http.client :as client]+            [cheshire.core :as json]+            [clojure.string :as s]))++(def ^:private base-uri ""Boundary API base URI.""+  ""https://premium-api.boundary.com"")+(def ^:private version ""Boundary API version to use.""+  ""v1"")++(defn ^:private boundarify+  ""As of Boundary's specs, metric ids can only contain characters+  matching \""[A-Z0-9_]\"", thus all other characters will be stripped+  and the remaining ones will be upcased.++  To preserve structure, unacceptable characters will be removed+  *after* substituting spaces with underscores.++  Should an organization name be provided, it will be placed before+  the name of the service.++  Last but not least, if after all the manipulation of the string, no+  characters remain (i.e. empty string), an exception is thrown.++  Examples:++  ((boundarify) \""foo\"") => \""FOO\""+  ((boundarify) \""foo bar\"") => \""FOO_BAR\""+  ((boundarify) \""foo@\"") => \""FOO\""+  ((boundarify) \""foo@bar\"") => \""FOOBAR\""+  ((boundarify \""org\"") \""foo\"") => \""ORG_FOO\""+  ((boundarify) \""!#@\"") => exception+  ((boundarify \""org\"") \""!#@\"") => exception+  ""+  [& [organization]]+  (fn [service]"
https://api.github.com/repos/riemann/riemann/pulls/514,25128884,"@@ -131,7 +131,8 @@       (when (:metric event)         (with-pool [client pool (:claim-timeout opts)]                    (let [string (str (join "" "" [(path event)-                                                (float (:metric event))+                                                ((fn [x] (try (float x) (catch Exception e (str ""NaN"")))) (:metric event))"
https://api.github.com/repos/riemann/riemann/pulls/541,27770577,"@@ -93,6 +94,13 @@       (lookup [this host service]         (.get hm [host service])) +      Instrumented+      (events [this]+        (let [base {:state ""ok"" :time (unix-time)}]+          (map (partial merge base)+               [{:service ""riemann index event-count"""
https://api.github.com/repos/riemann/riemann/pulls/553,29960420,"@@ -52,14 +51,14 @@   ""Creates a HipChat adapter. Takes your HipChat authentication token,    and returns a function which posts a message to a HipChat. -  (let [hc (hipchat {:token \""...\""+  (let [hc (hipchat {:server \""...\""+                     :token \""...\""                      :room 12345-                     :from \""Riemann reporting\""                      :notify 0})]     (changed-state hc))""-  [{:keys [token room from notify]}]+  [{:keys [server token room notify]}]   (fn [e] (post token-               {:room_id room-                :from    from+               {:server  server"
https://api.github.com/repos/riemann/riemann/pulls/575,34529625,"@@ -14,6 +14,27 @@   ""A set of event fields in Riemann with special handling logic.""   #{:host :service :time :metric :tags :ttl}) +(defn replace-disallowed-9 [field]+  (clojure.string/replace+    (clojure.string/replace+      (clojure.string/replace field "" "" ""\\ "") ""="" ""\\="") "","" ""\\,""))++(defn kv-encode-9 [kv]+  (clojure.string/join "","" (map (fn [[key value]]+   (str (replace-disallowed-9 key) ""="" (replace-disallowed-9 value))) kv)))++(defn lineprotocol-encode-9 [event]+  (let [encoded_fields (kv-encode-9 (get event ""fields""))+        encoded_tags  (kv-encode-9 (get event ""tags""))]++    (str (get event ""name"") "","" encoded_tags "" "" encoded_fields  ""\n"")))+++(defn lineprotocol-encode-list-9 [events]+  ; encode {""points"" [{""name"" ""xyzzy"", ""time"" ""2015-06-26T07:06:45.000Z"", ""tags"" {""host"" ""h""}, ""fields"" {""value"" 0.6514667122989345, ""state"" ""ok"", ""description"" ""at 2015-06-26 09:06:45 +0200""}}], ""database"" ""foo""}+  ; [{""name"" ""xyzzy"", ""time"" ""2015-06-26T07:06:45.000Z"", ""tags"" {""host"" ""h""}, ""fields"" {""value"" 0.6514667122989345, ""state"" ""ok"", ""description"" ""at 2015-06-26 09:06:45 +0200""}}]+  ; {""name"" ""xyzzy"", ""time"" ""2015-06-26T07:06:45.000Z"", ""tags"" {""host"" ""h""}, ""fields"" {""value"" 0.6514667122989345, ""state"" ""ok"", ""description"" ""at 2015-06-26 09:06:45 +0200""}}+  (clojure.string/join (pmap lineprotocol-encode-9 (get events ""points""))))"
https://api.github.com/repos/riemann/riemann/pulls/566,34529753,"@@ -150,6 +150,19 @@                     (transient {}))             persistent!))))) +(defn lookup+  ""Lookup an event by host/service in a vector of tapped events returned by+  inject!. If several matching events have passed through the tap, the last one+  will be returned.""+  [events host service]+  (last+    (filter"
https://api.github.com/repos/riemann/riemann/pulls/586,35109504,"@@ -50,7 +50,7 @@ (defn get-layout   ""Fetch a logging layout by name""   [layout-name]-  (get layouts (or layout-name :riemann)))+  (or (get layouts layout-name) (get layouts :riemann)))"
https://api.github.com/repos/riemann/riemann/pulls/598,37893898,"@@ -1,161 +1,185 @@ (ns riemann.logging-  ""Configures log4j to log to a file. It's a trap!""-  ; With thanks to arohner-  (:import (org.apache.log4j-             Logger-             BasicConfigurator-             EnhancedPatternLayout+  (:import (org.slf4j+             LoggerFactory)+           (ch.qos.logback.classic              Level+             Logger)+           (ch.qos.logback.core              ConsoleAppender-             FileAppender-             SimpleLayout)-           (net.logstash.log4j JSONEventLayoutV0-                               JSONEventLayoutV1)-           (org.apache.log4j.spi RootLogger))-  (:import (org.apache.log4j.rolling TimeBasedRollingPolicy-                                     SizeBasedTriggeringPolicy-                                     FixedWindowRollingPolicy-                                     RollingFileAppender))-  (:import org.apache.commons.logging.LogFactory)+             FileAppender)+           (ch.qos.logback.core.rolling+             RollingFileAppender+             TimeBasedRollingPolicy+             FixedWindowRollingPolicy+             SizeBasedTriggeringPolicy)+           (ch.qos.logback.classic.encoder+             PatternLayoutEncoder)+           (net.logstash.logback.encoder+             LogstashEncoder))   (:require wall.hack)) +(defn get-logger+  ([]+    (LoggerFactory/getLogger Logger/ROOT_LOGGER_NAME))+  ([logger]+    (LoggerFactory/getLogger logger)))++(defn- get-context+  []+  (LoggerFactory/getILoggerFactory))+++(defmulti encoder identity)++(defmethod encoder :json+  [type]+  (LogstashEncoder.))++(defmethod encoder :riemann+  [type]+  (doto (PatternLayoutEncoder.)+    (.setPattern ""%p [%d] %t - %c - %m%n%throwable"")))++(defmethod encoder :default+  [type]+  (encoder :riemann))++ (defn set-level-  ""Set the level for the given logger, by string name. Use:+  ""Set the level for the given logger, by string name.++  Example:++  (set-level Level/INFO)+    or   (set-level \""riemann.client\"", Level/DEBUG)""   ([level]-   (. (Logger/getRootLogger) (setLevel level)))+    (. (get-logger)+      (setLevel level)))   ([logger level]-   (. (Logger/getLogger logger) (setLevel level))))+    (. (get-logger logger)+      (setLevel level))))  (defmacro suppress   ""Turns off logging for the evaluation of body.""   [loggers & body]   (let [[logger & more] (flatten [loggers])]     (if logger-      `(let [old-level# (.getLevel (Logger/getLogger ~logger))]+      `(let [old-level# (.getLevel (get-logger ~logger))]          (try-           (set-level ~logger Level/FATAL)+           (set-level ~logger Level/ERROR)            (suppress ~more ~@body)            (finally              (set-level ~logger old-level#))))       `(do ~@body)))) -(def ^{:doc ""available logging patterns""}-  layouts-  {:riemann       (EnhancedPatternLayout. ""%p [%d] %t - %c - %m%n%throwable"")-   :json-event    (JSONEventLayoutV0.)-   :json-event-v0 (JSONEventLayoutV0.)"
https://api.github.com/repos/riemann/riemann/pulls/596,39300965,"@@ -40,7 +40,8 @@   ""Generate OpsGenie alias based on event""   [event]   (hash (str (:host event) "" ""-       (:service event))))+       (:service event) "" ""+       (apply str (:tags event)))))"
https://api.github.com/repos/riemann/riemann/pulls/608,40498999,"@@ -134,71 +122,62 @@   [tag-fields event]   (when (and (:time event) (:service event) (:metric event))     {""measurement"" (:service event)-     ""time"" (unix-to-iso8601 (:time event))+     ""time"" (long (:time event))"
https://api.github.com/repos/riemann/riemann/pulls/611,40991074,"@@ -27,7 +27,9 @@  (defn lineprotocol-encode-9 [event]   (let [encoded_fields (kv-encode-9 (get event ""fields""))-        encoded_tags   (kv-encode-9 (get event ""tags""))]+        encoded_tags   (clojure.string/join "","" (map+                         (fn [[tag value]] (str (replace-disallowed-9 tag) ""="" (replace-disallowed-9 value)))+                         (get event ""tags"")))]     (str (replace-disallowed-9 (get event ""measurement"")) "","" encoded_tags "" "" encoded_fields "" "" (get event ""time""))))"
https://api.github.com/repos/riemann/riemann/pulls/615,42254355,"@@ -70,40 +70,117 @@     (format ""disable %s.%s %s %s""             host service (int (ceil (/ ttl 60))) description))) -(defn- send-line-error-handler-  [e]-  (error e ""cannot reach xymon host""))--(defn send-line-  ""Connects to Xymon server, sends line, then closes the connection.-   This is a blocking operation and should happen on a separate thread.""-  [opts line]-  (try-    (let [opts (merge-                {:host ""127.0.0.1"" :port 1984 :timeout 5-                 :error-handler send-line-error-handler}-                opts)-          addr (InetSocketAddress. (:host opts) (:port opts))-          sock (Socket.)]-      (.setSoTimeout sock (:timeout opts))-      (.connect sock addr (:timeout opts))-      (with-open [writer (io/writer sock)]-        (.write writer line)-        (.flush writer)))-    (catch Exception e-      ((:error-handler opts) e))))+(defn *send-message-error-handler*+  """
https://api.github.com/repos/riemann/riemann/pulls/633,47540928,"@@ -0,0 +1,13 @@+[Unit]+Description=Riemann+After=network.target++[Service]+User=riemann+EnvironmentFile=/etc/sysconfig/riemann+ExecStart=/usr/bin/riemann /etc/riemann/riemann.config+ExecReload=/bin/kill -HUP ${MAINPID}+ExecStop=/bin/kill -WINCH ${MAINPID}"
https://api.github.com/repos/riemann/riemann/pulls/637,49270633,"@@ -0,0 +1,64 @@+(ns riemann.irc+  ""Forwards events to IRC""+  (:use [clojure.string :only [join upper-case]])+  (:import (java.net Socket)+           (java.io PrintWriter InputStreamReader BufferedReader)))++(defn irc-message+  ""Formats an event into a string""+  [e]+  (str (join "" "" [""Riemann alert on"" (str (:host e)) ""-"" (str (:service e)) ""is"" (upper-case (str (:state e))) ""- Description:"" (str (:description e))])))++; IRC client code from http://nakkaya.com/2010/02/10/a-simple-clojure-irc-client/++(declare conn-handler)++(defn connect [server port]+  (let [socket (Socket. server port)+        in (BufferedReader. (InputStreamReader. (.getInputStream socket)))+        out (PrintWriter. (.getOutputStream socket))+        conn (ref {:in in :out out})]+    (doto (Thread. #(conn-handler conn)) (.start))+    conn))++(defn write [conn msg]+  (doto (:out @conn)+    (.println (str msg ""\r""))+    (.flush)))++(defn conn-handler [conn]+  (while (nil? (:exit @conn))+    (let [msg (.readLine (:in @conn))]+      (println msg)+      (cond+       (re-find #""^ERROR :Closing Link:"" msg)+       (dosync (alter conn merge {:exit true}))+       (re-find #""^PING"" msg)+       (write conn (str ""PONG ""  (re-find #"":.*"" msg)))))))++(defn login [conn nick]+  (write conn (str ""NICK "" nick))+  (write conn (str ""USER "" nick "" 0 * :"" nick)))++(defn join-chan [conn channel]+  (write conn (str ""JOIN "" channel)))++(defn privmsg [conn channel message-string]+  (write conn (str ""PRIVMSG "" channel "" :"" message-string)))++(defn irc+  ""Creates an adapter to forward events to IRC. The IRC event will+  contain the host, state, service, metric and description.++  Requires: server, port, name of IRC user to send events, and channel name.++  Can be configured like so:++  (def sendirc (irc \""chat.freenode.net\"", 6667, \""riemann-bot\"", \""#riemannbot\""))""+  [server port nick channel]+  (def irc-connection (connect server port))"
https://api.github.com/repos/riemann/riemann/pulls/630,49270660,"@@ -151,13 +158,11 @@   `:tag-fields`     A set of event fields to map into InfluxDB series tags.                     (default: `#{:host}`)   `:tags`           A common map of tags to apply to all points. (optional)-  `:timeout`        HTTP timeout in milliseconds. (default: `5000`)""+  `:timeout`        HTTP timeout in milliseconds. (default: `5000`)+  `:measurement`    The name of the measurement to be used by influx"
https://api.github.com/repos/riemann/riemann/pulls/627,49270701,"@@ -75,7 +123,19 @@                         the pool. Default 0.1.    :block-start          Wait for the pool's initial connections to open-                        before returning.""+                        before returning.++  :ttl                  A function which, given an event, returns the TTL in+                        seconds.+                        Note: TTL is only supported in the HTTP API, and is+                              ignored when sent via Telnet.++  :batch                Batch metrics into KairosDB. Consider using this when"
https://api.github.com/repos/riemann/riemann/pulls/645,52294495,"@@ -31,10 +33,15 @@    :namespace   AWS CloudWatch namespace.""   [opts]-  (let [opts (merge {:access-key ""aws-access-key""+  (let [opts (if (or (contains? opts :access-key) (contains? opts :access-key))"
https://api.github.com/repos/riemann/riemann/pulls/673,58372715,"@@ -131,6 +131,40 @@ <h1 class=""twelvecol"">A <span class=""focus"">guide</span> to working with Riemann   </div> </div> +<h3>A minimal configuration</h3>+<div class=""row"">+  <div class=""sixcol"">+    <p>We present here a minimal configuration which only prints incoming events to+      standard output. This configuration can prove useful when debugging clients to+      make sure expected events are reaching riemann.</p>"
https://api.github.com/repos/riemann/riemann/pulls/691,64131424,"@@ -0,0 +1,64 @@+(ns riemann.druid+  ""Forwards events to Druid""+  (:require+    [clj-http.client :as http]+    [cheshire.core :refer [generate-string]]+    [riemann.common :refer [unix-to-iso8601]]))++(defn post-datapoint+  ""Post the riemann metrics as datapoints.""+  [host port dataset json-data]+  (let [p (str port)+        scheme ""http://""+        endpoint ""/v1/post/""+        url (str scheme host "":"" p endpoint dataset)+        http-options {:body json-data+                      :content-type :json+                      :conn-timeout 5000+                      :socket-timeout 5000+                      :throw-entire-message? true}]+    (http/post url http-options)))++(defn generate-event [event]+  {:host        (:host event)+   :service     (:service event)+   :state       (:state event)+   :timestamp   (unix-to-iso8601 (:time event))+   :tags        (:tags event)+   :description (:description event)+   :value       (:metric event)})++(defn druid+  ""Returns a function which accepts single events or batches of+   events in a vectorand send them to Druid Tranquility Server."
https://api.github.com/repos/riemann/riemann/pulls/692,64989067,"@@ -0,0 +1,75 @@+(ns riemann.prometheus+  ""Forwards riemann events to Prometheus Pushgateway.""+  (:require [clojure.string :as str]+            [clj-http.client :as http]))++;; Helper Functions++(defn replace-disallowed+  ""Replaces all existence of space with underscore.""+  [field]+  (str/escape field {\space ""_"", \. ""_"", \: ""_"" \- ""_""}))++(defn generate-metricname+  ""Generates the metric name as per prometheus specification.""+  [event]+  (replace-disallowed (:service event)))++(defn generate-datapoint+  ""Accepts riemann event and converts it into prometheus datapoint.""+  [event]+  (when (and (:metric event) (:service event))+    (str (generate-metricname event) \space (:metric event) \newline)))+++(defn generate-labels+  ""Generates the Prometheus labels from Riemann tags.""+  [tagv]+  (let [tagk (->> (range)+                  (-> tagv count)+                  (vec))]+    (clojure.string/join """" (map #(str ""/tag"" %1 ""/"" %2) tagk tagv))))++(defn generate-url+  ""Generates the URL to which datapoint should be posted.""+  [opts event]+  (let [scheme ""http://""+        host   (:host opts)+        port   (:port opts)+        endp   ""/metrics/job/""+        job    (:job opts)+        lhost  (str ""/host/"" (:host event))+        ltags  (generate-labels (:tags event))]+    (str scheme host "":"" port endp job lhost ltags)))++(defn post-datapoint+  ""Post the riemann metric as prometheus datapoint.""+  [url datapoint]+  (let [http-options {:body datapoint+                      :content-type :json+                      :conn-timeout 5000+                      :socket-timeout 5000+                      :throw-entire-message? true}]+    (http/post url http-options)))++(defn prometheus+  ""Returns a function which accepts an event and sends it to prometheus.++   Usage:+   (prometheus {:host \""prometheus.example.com\""})++   Options:+   `:host` Prometheus Pushgateway Server IP (default: \""localhost\"")+   `:port` Prometheus Pushgateway Server Port (default: 9091)+   `:job`  Group Name to be assigned (default: \""riemann\"")+  ""+  [opts]+  (let [opts (merge {:host ""localhost""+                     :port 9091+                     :job  ""riemann""}+                    opts)]+    (fn [event]+      (let [url (generate-url opts event)+            datapoint (generate-datapoint event)]+        (when (and (:metric event) (:service event))"
https://api.github.com/repos/riemann/riemann/pulls/714,74780820,"@@ -0,0 +1,48 @@+(ns ^{:doc ""Send events to Telegram""}+  riemann.telegram+  (:require [clj-http.client :as client]+            [clojure.string :refer [join]]))"
https://api.github.com/repos/riemann/riemann/pulls/722,79309085,"@@ -0,0 +1,58 @@+(ns riemann.elasticsearch+  ""Forwards events to Elasticsearch.""+  (:require [clj-http.client :as http]+            [cheshire.core :as json]+            [clj-time.coerce :as time-coerce]+            [clj-time.format :as time-format]))++(defn- datetime-from-event+  ""Returns the datetime from event correcting (secs -> millisecs) before conversion.""+  [event]+  (time-coerce/from-long (* 1000 (:time event))))++(defn- format-event"
https://api.github.com/repos/riemann/riemann/pulls/745,91007713,"@@ -193,6 +193,14 @@ <h2 id=""collectd"">Collectd</h2>         href=""https://collectd.org/wiki/index.php/Plugin:Write_Riemann"">Write         Riemann plugin for collectd</a> submits collectd values as events to       Riemann.</p>+      +      <h2 id=""crabby"">Crabby</h2>+      <p><a"
https://api.github.com/repos/riemann/riemann/pulls/747,91228543,"@@ -9,10 +9,11 @@   ""A set of event fields in Riemann with special handling logic.""   #{:service :metric :tags :time :ttl}) +"
https://api.github.com/repos/riemann/riemann/pulls/744,91786744,"@@ -1179,10 +1208,22 @@    (by [:foo :bar]     (coalesce 10 prn))""-  [& [dt & children]]-  (let [children (if (number? dt) children (cons dt children))+  [& [dt stream-name & children]]+  (let [children (cond+                   (and (number? dt) (keyword? stream-name)) children+                   (number? dt) (cons stream-name children)+                   (keyword? dt) (cons stream-name children)+                   true (remove nil? (conj children dt stream-name)))+        stream-name (if (keyword? dt)+                      dt+                      (if (keyword? stream-name)+                        stream-name+                        nil))         dt (if (number? dt) dt 1)-        chm (java.util.concurrent.ConcurrentHashMap.)+        chm (if-let [state (get-stream-state stream-name)]"
https://api.github.com/repos/riemann/riemann/pulls/753,93330000,"@@ -0,0 +1,77 @@+(ns riemann.netuitive+  ""Forward events to Netuitive.""+  (:use [clojure.string :only [join split]])+  (:require [clj-http.client :as client]+            [cheshire.core :refer [generate-string]]))++(def ^:private gateway-url ""https://api.app.netuitive.com/ingest/"")++(defn parsetime+   ""Converts ratio time in seconds to epoch time in millis""+   [time]+   biginteger (* 1000 time))"
https://api.github.com/repos/riemann/riemann/pulls/754,93763920,"@@ -41,6 +44,8 @@   :es-index        Index name, default is \""riemann\"".   :index-suffix    Index-suffix, default is \""-yyyy.MM.dd\"".   :type            Type to send to index, default is \""event\"".+  :username        Username to authenticate with"
https://api.github.com/repos/riemann/riemann/pulls/760,95912053,"@@ -0,0 +1,30 @@+(ns riemann.kafka+  ""Forwards events to Kafka.""+  (:require [kinsky.client :as client]))++(defn kafka+  ""Returns a functions which accepts an event and sends it to a Kafka topic."
https://api.github.com/repos/riemann/riemann/pulls/781,102639207,"@@ -36,3 +41,70 @@          (let [[topic message-key] args]            (client/send!              producer topic message-key event)))))))++(defn json-deserializer+  ""Deserialize JSON. Let bad payload not break the consumption.""+  []+  (client/deserializer+    (fn [_ payload]+      (when payload+        (try+          (json/parse-string (String. payload ""UTF-8"") true)+        (catch Exception e+          (error e ""Could not decode message"")))))))++(defn start-kafka-thread+  ""Start a kafka thread which will pop messages off the queue as long+  as running? is true""+  [running? core opts]+  (let [opts (merge {:bootstrap.servers ""localhost:9092""+                     :topic ""riemann""+                     :key.deserializer client/keyword-deserializer+                     :value.deserializer json-deserializer}+                    opts)+        consumer (client/consumer (dissoc opts :topic :key.deserializer :value.deserializer)+                                  (:key.deserializer opts)+                                  (:value.deserializer opts))+        topic (:topic opts)]+    (future+      (try+        (client/subscribe! consumer topic)+        (while running?+          (let [msgs (client/poll! consumer 100)+                records (get-in msgs [:by-topic topic])]+            (doseq [record records]+              (let [event (post-load-event (get record :value))]+                (stream! @core event)))))+        (catch Exception e+          (error e ""Interrupted consumption""))+        (finally +          (client/close! consumer))))))++(defn kafka-consumer+  ""Yield a kafka consumption service""+  [opts]+  (let [running? (atom true)+        core     (atom nil)]+    (reify+      clojure.lang.ILookup+      (valAt [this k not-found]+        (or (.valAt this k) not-found))+      (valAt [this k]+        (info ""Looking up: "" k)+        (if (= (name k) ""opts"") opts))"
https://api.github.com/repos/riemann/riemann/pulls/785,106717295,"@@ -782,6 +782,8 @@ <h1 class=""twelvecol"">A <span class=""focus"">guide</span> to working with Riemann     like rate, rollup, etc will take effect atomically as the virtual clock     advances.</p> +    <p>You can also inject events on specific streams using <code>(inject! [stream] events)</code>."
https://api.github.com/repos/riemann/riemann/pulls/789,107380129,"@@ -2089,3 +2089,67 @@                             (dissoc ::clock-skew-timestamp)                             (assoc :metric delta))]                 (call-rescue event children)))))))++(defn cond-dt+  ""Takes a function of events `f` and a time period `dt` in seconds. Detects if `(f event)` is true during dt seconds.+  If it is, cond-dt passes on all events validating the condition and with a `time` > `(+ (:time first-ok-event) dt)` until an invalid event event arrives.+  Skips too old events or events without time""+  [f dt & children]+  (let [last-changed-state (atom {:ok false+                                  :time nil})]+    (fn [event]+      (let [{ok :ok changed-state-time :time} @last-changed-state+            ;; changed-state-time is the time+            event-time (:time event)+            valid-event (f event)]+        (when event-time ;; filter events with no time+          (swap! last-changed-state (fn [state]+                        (cond+                          (and valid-event (and (not ok)+                                                (or (not changed-state-time)+                                                    (> event-time changed-state-time))))+                          ;; event is validating the condition+                          ;; last event is not ok, has no time or is too old+                          ;; => last-changed-state is now ok with a new time+                          {:ok true :time event-time}+                          (and (not valid-event) (and ok+                                                      (or (not changed-state-time)+                                                          (> event-time changed-state-time))))+                          ;; event is not validating the condition+                          ;; last event is ok, has no time or is too old+                          ;; => last-changed-state is now ko with a new time+                          {:ok false :time event-time}+                          ;; default value, return the state+                          :default state)))+          (when (and valid-event+                      ;; we already had an ok event+                     ok+                     ;; check is current time > first ok event + dt+                     (> event-time (+ changed-state-time dt)))+            (call-rescue event children)))))))++(defn above+  ""Takes a number `threshold` and a time periode in seconds `dt`. Detects if the `:metric` value is > to thresold during dt seconds using cond-dt."
https://api.github.com/repos/riemann/riemann/pulls/804,110644662,"@@ -59,20 +60,120 @@         [newtags (concat (:tags event) [\""extra-tag\""])]         (merge event {:tags newtags}))))""   [opts & maybe-formatter]-  (let-    [opts (merge {:es-endpoint ""http://127.0.0.1:9200""-                  :es-index ""riemann""-                  :index-suffix ""-yyyy.MM.dd""-                  :type ""event""}-                 opts)-     event-formatter (if (first maybe-formatter) (first maybe-formatter) format-event)]--    (fn[event] (post-                 (if (and (:username opts) (:password opts))-                   [(:username opts) (:password opts)])-                 (format ""%s/%s%s/%s""-                         (:es-endpoint opts)-                         (:es-index opts)-                         (time-format/unparse (time-format/formatter (:index-suffix opts)) (datetime-from-event event))-                         (:type opts))-                 (event-formatter event)))))+  (let [opts (merge {:es-endpoint ""http://127.0.0.1:9200""+                     :es-index ""riemann""+                     :index-suffix ""-yyyy.MM.dd""+                     :type ""event""}+                    opts)+        event-formatter (if (first maybe-formatter) (first maybe-formatter) format-event)]+    (fn [event]+      (let [credentials (when (and (:username opts) (:password opts))+                          [(:username opts) (:password opts)])+            body (json/generate-string (event-formatter event))+            es-endpoint (format ""%s/%s%s/%s""+                                (:es-endpoint opts)+                                (:es-index opts)+                                (time-format/unparse (time-format/formatter (:index-suffix opts)) (datetime-from-event event))+                                (:type opts))+            http-options {}]+        (post+         credentials+         es-endpoint+         body+         http-options)))))++(defn gen-request-bulk-body-reduce+  ""Reduction fn used in `gen-request-bulk-body` to generate the body request""+  [result elem]+  (str+   result+   ;;action and metadata+   (json/generate-string {(:es-action elem) (:es-metadata elem)}) ""\n""+   ;; source (optional)+   (when (:es-source elem)+     (str (json/generate-string (:es-source elem)) ""\n""))))++(defn gen-request-bulk-body+  ""Takes a list of events, generates the body request for Elasticsearch""+  [events]+  (reduce gen-request-bulk-body-reduce """" events))++(defn default-bulk-formatter+  ""Returns a function which accepts an event and format it for the Elasticsearch bulk API."
https://api.github.com/repos/ring-clojure/ring/pulls/106,7960318,"@@ -1,22 +1,22 @@ (ns ring.middleware.file   ""Static file serving.""-  (:import java.io.File)   (:require [ring.util.codec :as codec]             [ring.util.response :as response]             [ring.util.request :as request]-            [ring.middleware.head :as head]))+            [ring.middleware.head :as head]+            [clojure.java.io :as io]))  (defn- ensure-dir   ""Ensures that a directory exists at the given path, throwing if one does not.""-  [^String dir-path]-  (let [dir (File. dir-path)]+  [dir-path]+  (let [dir (io/as-file dir-path)]     (if-not (.exists dir)       (throw (Exception. (format ""Directory does not exist: %s"" dir-path))))))  (defn file-request   ""If request matches a static file, returns it in a response. Otherwise returns nil.""   [req root-path & [opts]]-  (let [opts (merge {:root root-path, :index-files? true, :allow-symlinks? false} opts)]+  (let [opts (merge {:root (str root-path), :index-files? true, :allow-symlinks? false} opts)]"
https://api.github.com/repos/ring-clojure/ring/pulls/110,8145505,"@@ -52,7 +52,9 @@ (defn header   ""Returns an updated Ring response with the specified header added.""   [resp name value]-  (assoc-in resp [:headers name] (str value)))+  (if (contains? (:headers resp) name)+    (update-in resp [:headers name] (fn [v] (flatten (conj [] v (str value)))))"
https://api.github.com/repos/ring-clojure/ring/pulls/178,22297563,"@@ -9,18 +9,20 @@   ""If request matches a static resource, returns it in a response map.   Otherwise returns nil.""   {:added ""1.2""}-  [request root-path]+  [request root-path & [loader]]"
https://api.github.com/repos/ring-clojure/ring/pulls/185,23889432,"@@ -92,13 +92,22 @@       (.exists file)         file))) -(defn- file-content-length [resp]-  (let [file ^File (:body resp)]-    (header resp ""Content-Length"" (.length file))))+(defn- file-info [^File file]+  (if file"
https://api.github.com/repos/ring-clojure/ring/pulls/220,52527660,"@@ -200,3 +201,38 @@               (Thread/sleep 250)               (recur (inc i))))           (is (= thread-count (count (all-threads)))))))))++(deftest test-ssl-context-factory+  (defn- get-ssl-context-factory"
https://api.github.com/repos/ring-clojure/ring/pulls/214,60837744,"@@ -4,19 +4,35 @@   This middleware should be limited to use in development environments.""   (:require [ns-tracker.core :refer [ns-tracker]])) +(defn- reloader [dirs retry?]+  (let [modified-namespaces (ns-tracker dirs)+        load-queue (java.util.concurrent.LinkedBlockingQueue.)]+    (fn []+      (locking load-queue+        (doseq [ns-sym (modified-namespaces)]+          (.offer load-queue ns-sym))+        (loop []+          (when-let [ns-sym (.peek load-queue)]+            (if retry?+              (do (require ns-sym :reload) (.remove load-queue))+              (do (.remove load-queue) (require ns-sym :reload)))+            (recur)))))))+ (defn wrap-reload   ""Reload namespaces of modified files before the request is passed to the   supplied handler.    Accepts the following options: -  :dirs - A list of directories that contain the source files.-          Defaults to [\""src\""].""+  :dirs                   - A list of directories that contain the source files.+                            Defaults to [\""src\""].+  :reload-compile-errors? - If true, keep attempting to reload namespaces+                            that have compile errors.  Defaults to true.""   {:arglists '([handler] [handler options])}-  [handler & [options]]-  (let [source-dirs (:dirs options [""src""])-        modified-namespaces (ns-tracker source-dirs)]+  [handler & {:keys [dirs reload-compile-errors?]"
https://api.github.com/repos/ring-clojure/ring/pulls/276,97548966,"@@ -55,23 +56,44 @@     (file-item-iterator-seq       (.getItemIterator ^FileUpload upload context)))) +(defn- parse-content-type-charset [^FileItemStream item]+  (some->> (.getContentType item)+           (re-find re-charset)+           second))++(defn- parse-html5-charset [params]+  (when-let [charset (->> params (filter #(= (first %) ""_charset_"")) first second :bytes)]+    (String. ^bytes charset ""US-ASCII"")))++(defn- decode-string-values [fallback-encoding forced-encoding params]+  (let [html5-enc (parse-html5-charset params)]+    (map"
https://api.github.com/repos/ring-clojure/ring/pulls/289,117734820,"@@ -96,8 +97,17 @@       (.setIdleTimeout (options :max-idle-time 200000)))))  (defn- ^ThreadPool create-threadpool [options]-  (let [pool (QueuedThreadPool. ^Integer (options :max-threads 50))]-    (.setMinThreads pool (options :min-threads 8))+  (let [min-threads (options :min-threads 8)+        queue-capacity (max min-threads 8)"
https://api.github.com/repos/ring-clojure/ring/pulls/296,123876355,"@@ -102,8 +102,13 @@     (is (= {""Set-Cookie"" (list ""a=b"" ""c=d"")}            (:headers resp))))) +(deftest wrap-cookies-unrecognized-attrs+  (let [response {:cookies {""a"" {:value ""foo"" :unrecognized true}}}+        handler  (wrap-cookies (constantly response))]+    (handler {})))"
https://api.github.com/repos/ring-clojure/ring/pulls/307,141331815,"@@ -66,35 +66,35 @@     (random/bytes 16)))  (defn- deserialize-  [x]-  (edn/read-string {:readers *data-readers*} x))+  [options x]"
https://api.github.com/repos/ring-clojure/ring/pulls/315,153655653,"@@ -44,6 +44,14 @@       :headers {""Location"" url}       :body    body})) +(defn bad-request+  ""Returns a Ring response for a HTTP 201 created response."""
https://api.github.com/repos/ring-clojure/ring/pulls/321,173263052,"@@ -40,14 +40,20 @@   Accepts the following options:    :index-files?    - look for index.* files in directories, defaults to true-  :allow-symlinks? - serve files through symbolic links, defaults to false""+  :allow-symlinks? - serve files through symbolic links, defaults to false+  :handler-first? - let handler process the files first. if handler successfully processes the file, do not serve static content"""
https://api.github.com/repos/ring-clojure/ring/pulls/323,174234406,"@@ -26,15 +26,26 @@ (defn- ok-response? [response]   (= (:status response) 200)) +(defn- validators-match?+  ""Checks if all provided cache validators match against the current"
https://api.github.com/repos/ring-clojure/ring/pulls/340,208010829,"@@ -58,6 +58,7 @@   ([handler root-path]    (wrap-resource handler root-path {}))   ([handler root-path options]-   (if (:prefer-handler? options)-     (wrap-resource-prefer-handler   handler root-path options)-     (wrap-resource-prefer-resources handler root-path options))))+   (let [root-path (clojure.string/replace root-path #""/$"" """")]"
https://api.github.com/repos/ring-clojure/ring/pulls/343,216272848,"@@ -170,6 +172,14 @@   ([handler options]    (fn      ([request]-      (handler (multipart-params-request request options)))+      (try+        (handler (multipart-params-request request options))+        (catch InvalidFileNameException e+          (response/bad-request (.getMessage e)))))      ([request respond raise]-      (handler (multipart-params-request request options) respond raise)))))+      (try+        (handler (multipart-params-request request options) respond raise)+        (catch InvalidFileNameException e+          (handler request"
https://api.github.com/repos/ring-clojure/ring/pulls/359,252882834,"@@ -8,12 +8,12 @@                  [ring/ring-codec ""1.1.1""]                  [commons-io ""2.6""]                  [commons-fileupload ""1.3.3""]-                 [clj-time ""0.14.3""]                  [crypto-random ""1.2.0""]                  [crypto-equality ""1.0.0""]]   :aliases {""test-all"" [""with-profile"" ""default:+1.8:+1.9"" ""test""]}   :profiles   {:provided {:dependencies [[javax.servlet/servlet-api ""2.5""]]}-   :dev {:dependencies [[javax.servlet/servlet-api ""2.5""]]}+   :dev {:dependencies [[clj-time ""0.14.3""] ;; for tests"
https://api.github.com/repos/ring-clojure/ring/pulls/365,274425739,"@@ -375,3 +375,27 @@       (let [response (http/get test-url)]         (is (= (:body response)                (apply str (for [i (range 10)] (str ""data: "" i ""\n\n"")))))))))++(def call-count (atom 0))++(defn- broken-handler [request]+  (swap! call-count inc)+  (throw (ex-info ""unhandled exception"" {})))++(defn- broken-handler-cps [request respond raise]+  (swap! call-count inc)+  (raise (ex-info ""unhandled exception"" {})))++(testing ""broken handler is only called once (see https://github.com/ring-clojure/ring/issues/364)"""
https://api.github.com/repos/ring-clojure/ring/pulls/380,332767888,"@@ -115,6 +120,44 @@       (is (thrown-with-msg? ConnectException #""Connection refused""                             (http/get test-url))))) +  (testing ""HTTPS server that needs client certs""+    (with-server client-cert-handler {:client-auth :need+                                      :keystore ""test/keystore.jks""+                                      :key-password ""password""+                                      :port test-port+                                      :ssl? true+                                      :ssl-port test-ssl-port}+      (let [response (try (http/get test-ssl-url {:insecure? true})+                          (catch Exception e :exception-caught))]"
https://api.github.com/repos/ring-clojure/ring/pulls/387,376544510,"@@ -5,117 +5,151 @@   This middleware is for debugging purposes, and should be limited to   development environments.""   (:require [clojure.java.io :as io]+            [clojure.string :as str]             [hiccup.core :refer [html h]]             [hiccup.page :refer [html5]]-            [clj-stacktrace.core :refer :all]-            [clj-stacktrace.repl :refer :all]+            [clj-stacktrace.core :refer [parse-exception]]"
https://api.github.com/repos/ring-clojure/ring/pulls/390,377955877,"@@ -1,20 +1,20 @@ (ns ring.middleware.test.stacktrace-  (:require [clojure.test :refer :all]-            [ring.middleware.stacktrace :refer :all]))+  (:require [clojure.test :refer [deftest is testing]]"
https://api.github.com/repos/ring-clojure/ring/pulls/405,426292168,"@@ -140,8 +144,14 @@   :ssl?                 - allow connections over HTTPS   :ssl-port             - the SSL port to listen on (defaults to 443, implies                           :ssl? is true)-  :exclude-ciphers      - When :ssl? is true, exclude these cipher suites-  :exclude-protocols    - When :ssl? is true, exclude these protocols+  :exclude-ciphers             - When :ssl? is true, additionally exclude these+                                 cipher suites+  :exclude-ciphers-overrides   - When :ssl? is true, only exclude these cipher+                                 suites (takes precendence over :exclude-ciphers)+  :exclude-protocols           - When :ssl? is true, additionally exclude these+                                 protocols+  :exclude-protocols-overrides - When :ssl? is true, only exclude these protocols+                                 (takes precendence over :exclude-protocols)   :keystore             - the keystore to use for SSL connections"
https://api.github.com/repos/ring-clojure/ring/pulls/410,464781754,"@@ -138,6 +164,15 @@   :configurator         - a function called with the Jetty Server instance   :async?               - if true, treat the handler as asynchronous   :async-timeout        - async context timeout in ms (defaults to 0, no timeout)+  :async-timeout-handler   - when :async? is true and a non-zero value is"
https://api.github.com/repos/ring-clojure/ring/pulls/412,466024631,"@@ -146,6 +148,7 @@   :ssl?                 - allow connections over HTTPS   :ssl-port             - the SSL port to listen on (defaults to 443, implies                           :ssl? is true)+  :ssl-context          - the SSLContext to use for SSL connections"
https://api.github.com/repos/ring-clojure/ring/pulls/417,492930595,"@@ -15,7 +15,9 @@            [org.eclipse.jetty.server.handler AbstractHandler]            [org.eclipse.jetty.util BlockingArrayQueue]            [org.eclipse.jetty.util.thread ThreadPool QueuedThreadPool]-           [org.eclipse.jetty.util.ssl SslContextFactory$Server]+           [org.eclipse.jetty.util.ssl"
https://api.github.com/repos/ring-clojure/ring/pulls/391,508930957,"@@ -13,6 +13,7 @@  (defn wrap-stacktrace-log   ""Wrap a handler such that exceptions are logged to *err* and then rethrown.+"
https://api.github.com/repos/ring-clojure/ring/pulls/422,511512780,"@@ -1,7 +1,8 @@ (ns ring.core.test.protocols   (:require [clojure.test :refer :all]             [clojure.java.io :as io]-            [ring.core.protocols :refer :all]))+            [ring.core.protocols :refer :all])+  (:import (java.io SequenceInputStream IOException InputStream OutputStream)))"
https://api.github.com/repos/ring-clojure/ring/pulls/444,687194220,"@@ -148,7 +148,8 @@     pool))  (defn- ^Server create-server [options]-  (let [server (Server. (create-threadpool options))]+  (let [pool (if (:thread-pool options) (:thread-pool options) (create-threadpool options))"
https://api.github.com/repos/ring-clojure/ring/pulls/446,703529947,"@@ -8,25 +8,32 @@   (let [params (codec/form-decode params encoding)]     (if (map? params) params {}))) +(defn- assoc-param-map [req k v]+  (some-> req (assoc k (if-let [v' (req k)]+                         (reduce-kv assoc v' v)+                         v))))+ (defn assoc-query-params   ""Parse and assoc parameters from the query string with the request.""   {:added ""1.3""}   [request encoding]-  (merge-with merge request-    (if-let [query-string (:query-string request)]-      (let [params (parse-params query-string encoding)]-        {:query-params params, :params params})-      {:query-params {}, :params {}})))+  (let [params (if-let [query-string (:query-string request)]+                 (parse-params query-string encoding)+                 {})]+    (-> request+        (assoc-param-map :query-params params)+        (assoc-param-map :params params))))  (defn assoc-form-params   ""Parse and assoc parameters from the request body with the request.""   {:added ""1.2""}   [request encoding]-  (merge-with merge request-    (if-let [body (and (req/urlencoded-form? request) (:body request))]-      (let [params (parse-params (slurp body :encoding encoding) encoding)]-        {:form-params params, :params params})-      {:form-params {}, :params {}})))+  (let [params (if-let [body (and (req/urlencoded-form? request) (:body request))]"
https://api.github.com/repos/ring-clojure/ring/pulls/478,1186882484,"@@ -13,11 +14,13 @@             SslConnectionFactory             SecureRequestCustomizer]            [org.eclipse.jetty.server.handler AbstractHandler]+           [org.eclipse.jetty.unixsocket UnixSocketConnector]            [org.eclipse.jetty.util BlockingArrayQueue]            [org.eclipse.jetty.util.thread ThreadPool QueuedThreadPool]            [org.eclipse.jetty.util.ssl SslContextFactory$Server KeyStoreScanner]            [javax.servlet AsyncContext DispatcherType AsyncEvent AsyncListener]            [javax.servlet.http HttpServletRequest HttpServletResponse]))+(set! *warn-on-reflection* true)"
https://api.github.com/repos/seancorfield/honeysql/pulls/31,25751300,"@@ -93,6 +93,12 @@ (defhelper merge-right-join [m clauses]   (update-in m [:right-join] concat clauses)) +(defhelper full-join [m clauses]+  (assoc m :full-join clauses))++(defhelper merge-full-join [m clauses]+  (assoc m :merge-full-join clauses))"
https://api.github.com/repos/seancorfield/honeysql/pulls/130,70187073,"@@ -0,0 +1,84 @@+(ns honeysql.types"
https://api.github.com/repos/seancorfield/honeysql/pulls/174,128132355,"@@ -291,26 +292,26 @@ Here's a big, complicated query. Note that Honey SQL makes no attempt to verify              [:between :f.e 10 20]]     :group-by [:f.a]     :having [:< 0 :f.e]-    :order-by [[:b.baz :desc] :c.quux [:f.a :nulls-first]+    :order-by [[:b.baz :desc] :c.quux [:f.a :nulls-first]]     :limit 50     :offset 10}  (sql/format *1 {:param1 ""gabba"" :param2 2})-=> [""SELECT DISTINCT f.*, b.baz, c.quux, b.bla AS \""bla-bla\"", NOW(), @x := 10-     FROM foo AS f, baz AS b"
https://api.github.com/repos/seancorfield/honeysql/pulls/237,255286637,"@@ -2,6 +2,7 @@   (:refer-clojure :exclude [format])   (:require [#?@(:clj [clojure.test :refer]                  :cljs [cljs.test :refer-macros]) [deftest testing is are]]+            honeysql.core"
https://api.github.com/repos/seancorfield/honeysql/pulls/325,628909527,"@@ -214,11 +214,13 @@      (fn [fk _] (param-value (fk)))}))  (defn- format-var [x & [opts]]-  (let [c (name-_ x)]+  (let [c (name x)]"
https://api.github.com/repos/stuartsierra/component/pulls/14,20692906,"@@ -205,7 +205,7 @@ To create a component, define a Clojure record that implements the     (.close connection)"
https://api.github.com/repos/stuartsierra/component/pulls/62,244407706,"@@ -304,3 +304,57 @@     (is (= local-key (:dependency-key data)))     (is (= a (:component data)))     (is (= system (:system data)))))++(defn protocols-extentable-via-metadata? []+  (let [{:keys [major minor]} *clojure-version*]+    (and (= major 1)"
https://api.github.com/repos/swannodette/mori/pulls/128,22696731,"@@ -0,0 +1,200 @@+(ns mori.chain+  (:require [mori :as m]))++(declare Chainable)++(defn ^:export _ [coll & keywordize?]+  (cond+   (and coll+        (.-isChainable coll)) coll+   (or (m/isCollection coll)+       (nil? coll)) (Chainable. coll)+   :else (Chainable. (m/toClj coll keywordize?))))++(deftype Chainable [coll]+  Object+  (map [this f] (_ (m/map f coll)))+  (reduce [this f start] (_ (m/reduce f start coll)))+  (count [this]  ( m/count coll))+  (distinct [this] (_ (m/distinct coll)))+  ;; Not sure `empty` should be here+  (empty [this] (_ (m/empty coll)))+  (first [this] (_ (m/first coll)))+  (second [this] (_ (m/second coll)))+  (next [this] (_ (m/next coll)))+  (rest [this] (_ (m/rest coll)))+  ;; TODO: Handle both arities ([coll x] & [this x & xs]) ?+  (conj [this x] (_ (m/conj coll x)))+  (cons [this x] (_ (m/cons x coll)))+  (find [this key] (_ (m/find coll key)))+  (nth [this n not-found] (_ (m/nth coll n not-found)))+  (last [this] (_ (m/last coll)))+  ;; TODO: Handle variadic arities?+  (assoc [this key value] (_ (m/assoc coll key value)))+  (dissoc [this & ks] (_ (apply m/dissoc coll ks)))+  (getIn [this ks not-found] (_ (m/getIn coll ks not-found)))+  ;; TODO: Handle variadic args+  (updateIn [this ks f ] (_ (m/updateIn coll ks f)))+  (assocIn [this ks value] (_ (m/assocIn coll ks value)))+  (disj [this key] (_ (m/disj coll key)))+  (pop [this] (_ (m/pop coll)))+  (peek [this] (_ (m/peek coll)))+  (hash [this] (m/hash coll))+  (get [this k not-found] (_ (m/get coll k not-found)))+  (hasKey [this key] (m/hasKey coll key))+  (reverse [this] (_ (m/reverse coll)))+  (take [this] (_ (m/take coll)))+  (take [this n] (_ (m/take n coll)))+  (drop [this] (_ (m/drop coll)))+  (drop [this n] (_ (m/drop n coll)))+  (takeNth [this n] (_ (m/takeNth n coll)))+  (partition [this n] (_ (m/partition n coll)))+  (partition [this n step] (_ (m/partition n step coll)))+  (partition [this n step pad] (_ (m/partition n step pad coll)))+  (partitionAll [this n] (_ (m/partitionAll n coll)))+  (partitionAll [this n step] (_ (m/partitionAll n step coll)))+  (partitionBy [this f] (_ (m/partitionBy f coll)))+  (iterate [this f] (_ (m/iterate coll f coll)))+  (into [this from] (_ (m/into coll from)))+  (intoArray [this] (_ (m/intoArray coll)))+  (merge [this & maps] (_ (apply m/merge coll maps)))+  ;; TODO: Fix apply issue here+  (mergeWith [this f & maps] (_ (apply m/merge f coll maps)))+  (subvec [this start end] (_ (m/subvec coll start end)))+  (takeWhile [this pred] (_ (m/takeWhile pred coll)))+  (dropWhile [this pred] (_ (m/dropWhile pred coll)))+  (groupBy [this f] (_ (m/groupBy f coll)))+  (interpose [this sep] (_ (m/interpose sep coll)))+  (interleave [this & colls] (_ (apply m/interleave coll colls)))+  (concat [this & zs] (_ (apply m/concat coll zs)))+  (sort [this] (_ (m/sort coll)))+  (sortBy [this f] (_ (m/sortBy f coll)))+  (vec [this] (_ (vec coll)))+  +  ;; Should prStr be here for clj programmers?+  (prStr [this] (pr-str coll))+  (isEqual [this other] (= coll+                           ;; Compare against a potentiall wrapped/unwrapped other+                           (or (.-coll other)+                               other)))+  ;; Same as isEqual, apparently more idiomatic with ES6 now+  (is [this other] (= coll (or (.-coll other)+                               other)))+  (isEmpty [this] (m/isEmpty coll))++  ;; It may be impossible to create a list through this interface, but+  ;; useful in case a manually created one is passed in+  (isList [this] (m/isList coll))+  (isSeq [this] (m/isSeq coll))+  (isVector [this] (m/isVector coll))+  (isMap [this] (m/isMap coll))+  (isSet [this] (m/isSet coll))+  +  (isSymbol [this] (m/isSymbol coll))+  +  (isCollection [this] (m/isCollection coll))+  (isSequential [this] (m/isSequential coll))+  (isAssociative [this] (m/isAssociative coll))+  (isCounted [this] (m/isCounted coll))+  (isIndexed [this] (m/isIndexed coll))+  (isReduceable [this] (m/isReduceable coll))+  (isSeqable [this] (m/isSeqable coll))+  (isReversible [this] (m/isReversible coll))++  (isChainable [_] true)+  (toSeq [this] (_ (m/seq coll)))+  (toSet [this] (_ (m/set coll)))+  ;; Not sure if .toJs or .out makes more sense for the JS world. Perhaps .out should give the .-coll out so other mori functions could use it, and .toJs should be for converting to JS values?"
https://api.github.com/repos/swarmpit/swarmpit/pulls/83,130228077,"@@ -60,6 +57,26 @@   (->> (cmo/->password password)        (cc/change-password user))) +(def password-check hashers/check)++(defn password-check-upgrade+  [password hash upgrade-f]+  (try+    (password-check password hash)+    (catch Exception e+      (if (= hash (digest ""sha-256"" password))+        (do (upgrade-f) true)+        false))))++(defn user-by-credentials+  [credentials]+  (let [{:keys [username password]} credentials"
https://api.github.com/repos/swarmpit/swarmpit/pulls/133,139315553,"@@ -7,5 +7,5 @@    (testing ""dns error""     (is (thrown-with-msg?-          ExceptionInfo #""Registry failure: .* Name or service""+          ExceptionInfo #""Registry failure: .*"""
https://api.github.com/repos/swarmpit/swarmpit/pulls/306,255352632,"@@ -4,7 +4,7 @@ MAINTAINER Pavol Noha <pavol.noha@gmail.com> RUN apk add --update curl && \     rm -rf /var/cache/apk/* -ENV VERSION ""18.03.0-ce""+ENV VERSION ""18.09.0-ce"""
https://api.github.com/repos/swarmpit/swarmpit/pulls/447,361205933,"@@ -20,18 +20,23 @@   [{:keys [identity]}]   (let [username (get-in identity [:usr :username])         user (cc/user-by-username username)]-    (if (admin? user)-      true-      (error {:code    403-              :message ""Unauthorized admin access""}))))+    (cond (not (enabled? user))"
https://api.github.com/repos/swarmpit/swarmpit/pulls/611,725620226,"@@ -29,3 +29,7 @@ Default is `nil`. ## `SWARMPIT_WORK_DIR` Swarmpit working directory location. Default is `/tmp`.++## `SARMPIT_BASE_URL`"
https://api.github.com/repos/taoensso/carmine/pulls/245,528991175,"@@ -106,24 +106,25 @@                            perform a de-duplication check. If unspecified, a                            unique id will be auto-generated.     * allow-requeue?     - When true, allow buffered escrow-requeue for a-                           message in the :locked or :done-with-backoff state.""-  ;; TODO Option to enqueue something with an init backoff?+                           message in the :locked or :done-with-backoff state.+    * initial-backoff    - Initial backoff in millis."""
https://api.github.com/repos/taoensso/sente/pulls/145,32884256,"@@ -1,4 +1,4 @@-(defproject com.taoensso/sente ""1.5.0""+(defproject com.taoensso/sente ""1.6.0"""
https://api.github.com/repos/taoensso/sente/pulls/158,38169347,"@@ -754,7 +754,7 @@  #+cljs ;; Handles reconnects, keep-alives, callbacks: (defrecord ChWebSocket-    [client-id url chs socket_ kalive-ms kalive-timer_ kalive-due?_ nattempt_+    [client-id url params chs socket_ kalive-ms kalive-timer_ kalive-due?_ nattempt_"
https://api.github.com/repos/taoensso/sente/pulls/160,38357498,"@@ -0,0 +1,36 @@+(ns taoensso.sente.server-adapters.nginx-clojure+  ""Experimental- subject to change!+  Optional Nginx-Clojure v0.4.2+ adapter for use with Sente.""+  (:require [taoensso.sente.interfaces :as i]+            [nginx.clojure.core :as ncc]))++(def ^:dynamic *max-message-size* nginx.clojure.WholeMessageAdapter/DEFAULT_MAX_MESSAGE_SIZE)++(extend-type nginx.clojure.NginxHttpServerChannel+  i/IAsyncNetworkChannel+  (open?  [nc-ch] (not (ncc/closed? nc-ch)))+  (close! [nc-ch] (ncc/close! nc-ch))+  (send!* [nc-ch msg close-after-send?]+    (let [closed? (ncc/closed? nc-ch)]+      (ncc/send! nc-ch msg true (boolean close-after-send?))+      (not closed?))))++(deftype NginxClojureAsyncNetworkChannelAdapter []+  i/IAsyncNetworkChannelAdapter+  (ring-req->net-ch-resp [net-ch-adapter ring-req callbacks-map]+    (let [{:keys [on-open on-msg on-close]} callbacks-map+          nc-ch (ncc/hijack! ring-req true)+          upgrade-ok? (ncc/websocket-upgrade! nc-ch false)]+      ;; Returns {:status 200 :body <nginx-clojure-implementation-channel>}:+      (when (not upgrade-ok?) ;; send general header for non-websocket request+        (.setIgnoreFilter nc-ch false)+        (ncc/send-header! nc-ch 200  {""Content-Type"" ""text/html""} false false))+      (ncc/add-aggregated-listener! nc-ch *max-message-size*+        {:on-open (when on-open (fn [nc-ch] (on-open nc-ch)))+         :on-error nil ;;Do we need/want this?+         :on-message (when on-msg (fn [nc-ch msg] (on-msg nc-ch msg)))+         :on-close (when on-close (fn [nc-ch reason] (on-close nc-ch reason)))})+      {:status 200 :body nc-ch})))++(def nginx-clojure-adapter (NginxClojureAsyncNetworkChannelAdapter.))+(def sente-web-server-adapter nginx-clojure-adapter) ; Alias for ns import convenience"
https://api.github.com/repos/taoensso/sente/pulls/215,57536143,"@@ -17,71 +17,80 @@    [org.clojure/tools.reader ""0.10.0""]    [com.taoensso/timbre      ""4.3.1""]] +  :cljx"
https://api.github.com/repos/taoensso/sente/pulls/243,70188708,"@@ -48,7 +48,9 @@       [lein-ancient                    ""0.6.10""]       ;; [com.cemerick/austin          ""0.1.4""]       [com.cemerick/clojurescript.test ""0.3.3""]-      [lein-codox                      ""0.9.5""]]}]}+      [lein-codox                      ""0.9.5""]+      [lein-npm                        ""0.6.2""]]}]}+  :npm {:dependencies [[websocket ""1.0.23""]]}"
https://api.github.com/repos/taoensso/sente/pulls/246,71046917,"@@ -1310,14 +1310,16 @@      Common options:        :type           ; e/o #{:auto :ws :ajax}. You'll usually want the default (:auto).        :host           ; Server host (defaults to current page's host).+       :protocol       ; Custom protocol, #{:wss :ws}.+                       ; React native don't have window.location."
https://api.github.com/repos/taoensso/sente/pulls/263,79973525,"@@ -828,11 +829,12 @@                    :requested-reconnect                    :downgrading-ws-to-ajax                    :unexpected}] reason)-     (if (or (:open? state) (not= reason :unexpected))-       (assoc state-         :open? false-         :last-close {:udt (enc/now-udt) :reason reason})-       state)))+     (let [state (dissoc state :next-reconnect)]"
https://api.github.com/repos/taoensso/sente/pulls/275,154538586,"@@ -0,0 +1,35 @@+(ns taoensso.sente.client-adapters.aleph+  ""Sente client adapter for Aleph (https://github.com/ztellman/aleph).""+  {:author ""Frozenlock""}+  (:require+   [taoensso.sente.interfaces :as i]  +   [aleph.http        :as aleph]+   [manifold.stream   :as s]+   [taoensso.timbre :as timbre :refer (tracef debugf infof warnf errorf)]))+++(extend-type manifold.stream.core.IEventSink+  i/IClientWebSocket+  (cws-close! [cws]       +    (s/close! cws))+  (cws-send!  [cws msg]+    (if (s/closed? cws)+      false+      (do (s/put! cws msg)+          true))))++(defn aleph-create-client-websocket! +  ""Create a websocket with provided URL. Return an IClientWebSocket+  implementation, or nil if connection failed.""+  [url {:keys [on-msg on-error on-close]}]+  (let [ws (try @(aleph/websocket-client url)+                (catch Exception e +                  (do (errorf e)"
https://api.github.com/repos/taoensso/sente/pulls/374,475122443,"@@ -1038,12 +1045,53 @@                  ;; (errorf e ""Unable to load npm websocket lib"")                  nil)))))))) +#?(:clj+   (defn create-java-client-websocket! [onerror-fn onmessage-fn onclose-fn uri-str headers]+     (let [uri (URI. uri-str)+           ;headers+           ;(ImmutableMap/of+           ;  ""Origin"" ""http://localhost:3200""+           ;  ""Referer"" ""http://localhost:3200""+           ;  ""Sec-WebSocket-Extensions"" ""permessage-deflate; client_max_window_bits""+           ;  )+           ws-client (proxy [WebSocketClient] [uri headers]"
https://api.github.com/repos/taoensso/sente/pulls/409,974084457,"@@ -1,8 +1,8 @@ (ns taoensso.sente.server-adapters.undertow-  ""Sente server adapter for ring-undertow-adapter.""+  ""Sente server adapter for ring-undertow-adapter.+   Modified to avoid core.async and use promise directly and with read timeout"""
https://api.github.com/repos/taoensso/timbre/pulls/17,4713332,"@@ -0,0 +1,45 @@+(ns taoensso.timbre.appenders.mongo+  ""MongoDB appender. Depends on  https://github.com/aboekhoff/congomongo.""+  {:author ""Emlyn Corrin""}+  (:require [somnium.congomongo :as mongo]))++(def conn (atom nil))++;; Note: including :throwable will fail with:+;;   IllegalArgumentException: can't serialize class java.lang.Exception+(def default-keys [:hostname :ns :level :error? :instant :message :args])++(def default-args {:host ""127.0.0.1"" :port 27017})++(defn connect [{:keys [db server write-concern]}]+  (let [args (merge default-args server)+        c (mongo/make-connection db args)]+    (when write-concern+      (mongo/set-write-concern c write-concern))+    c))++(defn ensure-conn [config]+  (swap! conn #(or % (connect config))))++(defn log-message [params {:keys [collection logged-keys]+                           :or {logged-keys default-keys}+                           :as config}]+  (mongo/with-mongo (ensure-conn config)+    (mongo/insert! collection (select-keys params logged-keys))))"
https://api.github.com/repos/taoensso/timbre/pulls/176,69391178,"@@ -0,0 +1,21 @@+(ns taoensso.timbre.appenders.3rd-party.appenders.newrelic+  ""A New Relic appender""+  {:author ""Camilo Polymeris""}+  (:import (com.newrelic.api.agent NewRelic)+           (java.util HashMap)))++(defn newrelic-appender+  ""New Relic appender. The Java agent must be installed and configured via newrelic.yml, see+  https://docs.newrelic.com/docs/agents/java-agent/installation/java-agent-manual-installation#h2-install-agent""+  [& _]+  {:enabled?   true+   :async?     true+   :min-level  :warn+   :rate-limit [[100 60000]]                                ;matches New Relic's own cap+   :output-fn  :inherit+   :fn         (fn [data]+                 (let [{:keys [output-fn ?err level]} data+                       params (HashMap. {""Log level"" (name level)})]+                   (if ?err+                     (NewRelic/noticeError ?err params)+                     (NewRelic/noticeError (output-fn data) params))))})"
https://api.github.com/repos/taoensso/timbre/pulls/270,420400988,"@@ -0,0 +1,20 @@+(ns taoensso.timbre.appenders.3rd-party.udp-socket+  {:author ""Leo Zovic (@inaimathi)""}+  (:import [java.net DatagramSocket DatagramPacket InetSocketAddress]))++(defn udp-appender+  [host port]"
https://api.github.com/repos/taoensso/timbre/pulls/334,567469365,"@@ -84,25 +99,11 @@       {:enabled? true       :fn-      (let [lock (Object.)]-        (fn self [data]-          (let [{:keys [output_]} data]-            (let [output (force output_)]-              (try-                (when locking? (monitor-enter lock)) ; For thread safety, Ref. #251-                (with-open [^java.io.BufferedWriter w (jio/writer fname :append append?)]-                  (.write   w ^String output)-                  (.newLine w))--                (catch java.io.IOException e-                  (if (:spit-appender/retry? data)-                    (throw e) ; Unexpected error-                    (do-                      (jio/make-parents fname)-                      (self (assoc data :spit-appender/retry? true)))))-                (finally-                  (when locking?-                    (monitor-exit lock))))))))}))+      (fn self [data]+        (if locking?+          (locking (Object.)"
https://api.github.com/repos/technomancy/leiningen/pulls/1264,5430048,"@@ -24,7 +24,7 @@ if ""x%LEIN_HOME%"" == ""x"" (     set LEIN_HOME=!USERPROFILE!\.lein ) -if ""x%LEIN_JAR%"" == ""x"" set LEIN_JAR=!LEIN_HOME!\self-installs\leiningen-!LEIN_VERSION!-standalone.jar+if ""x%LEIN_JAR%"" == ""x"" set ""LEIN_JAR=!LEIN_HOME!\self-installs\leiningen-!LEIN_VERSION!-standalone.jar"""
https://api.github.com/repos/technomancy/leiningen/pulls/1271,5522566,"@@ -10,23 +10,35 @@  (def ^:dynamic *exit-after-tests* true) -;; TODO: spin this off into a library for 3.0-(defn- form-for-hook-selectors [selectors]-  `(when (seq ~selectors)-     (leiningen.core.injected/add-hook-      (resolve 'clojure.test/test-var)-      (fn test-var-with-selector [test-var# var#]-        (when (reduce (fn [acc# [selector# args#]]-                        (let [sfn# (if (vector? selector#)-                                     (second selector#)-                                     selector#)]-                          (or acc#-                              (apply sfn#-                                     (merge (-> var# meta :ns meta)-                                            (assoc (meta var#) ::var var#))-                                     args#))))-                      false ~selectors)-          (test-var# var#))))))+(def form-for-suppressing-unselected-tests+  ""A function that figures out which vars need to be suppressed based+   on the given selectors, moves their :test metadata+   to :leiningen/skipped-test (so that clojure.test won't think they+   are tests), runs the given function, and then sets the metadata+   back.""+  `(fn [namespaces# selectors# func#]+     (let [copy-meta# (fn [var# from-key# to-key#]+                        (if-let [x# (get (meta var#) from-key#)]+                          (alter-meta! var# #(-> % (assoc to-key# x#) (dissoc from-key#)))))+           vars# (when (seq selectors#)+                   (->> namespaces#+                        (mapcat (comp vals ns-interns))+                        (remove (fn [var#]+                                  (some (fn [[selector# args#]]+                                          (let [sfn# (if (vector? selector#)+                                                       (second selector#)+                                                       selector#)]+                                            (apply sfn#+                                                   (merge (-> var# meta :ns meta)+                                                          (assoc (meta var#) ::var var#))+                                                   args#)))+                                        selectors#)))+                        (doall)))"
https://api.github.com/repos/technomancy/leiningen/pulls/1342,6849840,"@@ -237,14 +237,16 @@         [:directory (:target-path project)]         [:outputDirectory (:compile-path project)]         [:plugins-	        (if-let [plugins (seq (:pom-plugins project))]-	                       (for [[dep version configuration] plugins]-	                         [:plugin-	                          [:groupId (or (namespace dep) (name dep))]-	                          [:artifactId (name dep)]-	                          [:version version]                           -                            ;place for maven configuration tag    -                            [:configuration configuration]+            (if-let [plugins (seq (:pom-plugins project))]+                           (for [[dep version plugin-addition] plugins]+                             [:plugin+                              [:groupId (or (namespace dep) (name dep))]+                              [:artifactId (name dep)]+                              [:version version]+                              (if (map? plugin-addition) +                              	(seq plugin-addition)+                              	[:configuration plugin-addition]"
https://api.github.com/repos/technomancy/leiningen/pulls/1383,8042594,"@@ -40,7 +40,11 @@ function add_path {     shift     while [ -n ""$1"" ];do         # http://bashify.com/?Useful_Techniques:Indirect_Variables:Indirect_Assignment-    export ${path_var}=""${!path_var}${delimiter}$(make_native_path ""$1"")""+        if [[ -z ${!path_var} ]]; then"
https://api.github.com/repos/technomancy/leiningen/pulls/1456,9932068,"@@ -187,7 +187,9 @@    :uberjar-merge-with {""META-INF/plexus/components.xml""                           'leiningen.uberjar/components-merger,                         ""data_readers.clj""-                          'leiningen.uberjar/clj-map-merger}+                          'leiningen.uberjar/clj-map-merger,+                        #""META-INF/services/.*""   ; So we don't break Java's ServiceLoader mechanism during uberjar construction+                          [slurp str spit]}"
https://api.github.com/repos/technomancy/leiningen/pulls/1673,17139356,"@@ -602,6 +602,18 @@                           (io/file ""/etc"" ""leiningen""))]     (user/load-profiles sys-profile-dir))) +(defn- scope-plugin-profile [local-name plugin-name]+  (keyword (str ""plugin."" plugin-name) local-name))++(defn- plugin-profiles [project]+  ;; Technically this doesn't honor default-profiles; problem?+  (for [[plugin version] (concat (:plugins project)+                                 (:plugins (:user (user/profiles))))+        :let [profiles (io/resource (format ""%s.plugin/profiles.clj"" plugin))]"
https://api.github.com/repos/technomancy/leiningen/pulls/1745,19378826,"@@ -129,13 +129,13 @@ be deactivated.""      (let [project (project/merge-profiles project [:uberjar])            project (update-in project [:jar-inclusions]                               concat (:uberjar-inclusions project))-           standalone-filename (jar/get-jar-filename project :standalone)            [_ jar] (try (first (jar/jar project main))                         (catch Exception e                           (when main/*debug*                             (.printStackTrace e))                           (main/abort ""Uberjar aborting because jar failed:""-                                      (.getMessage e))))]+                                      (.getMessage e))))+           standalone-filename (jar/get-jar-filename project :standalone)]"
https://api.github.com/repos/technomancy/leiningen/pulls/1919,32810179,"@@ -6,7 +6,9 @@  export LEIN_VERSION=""2.5.2-SNAPSHOT"" -if [ `whoami` = ""root"" ] && [ ""$LEIN_ROOT"" = """" ]; then"
https://api.github.com/repos/technomancy/leiningen/pulls/2090,53110059,"@@ -134,3 +135,23 @@                                  :bytes """"}]))]       (is (not (.contains out-str                           ""Warning: The Main-Class specified does not exist""))))))++(deftest javac-launched-with-whitelisted-settings+  (let [user-profile {:local-repo ""foo/bar""+                      :mirrors {""central"" {:name ""central""+                                           :url ""http://uk.maven.org/maven2""}}}"
https://api.github.com/repos/technomancy/leiningen/pulls/2126,59142839,"@@ -486,6 +493,19 @@           (doseq [[_ {:keys [native-prefix file]}] snap-deps]             (extract-native-dep! native-path file native-prefix)))))) +(defn resolve-managed-dependencies+  ""TODO"""
https://api.github.com/repos/technomancy/leiningen/pulls/2164,70517724,"@@ -947,15 +948,18 @@ Also merges default profiles.""  (defn read-raw   ""Read project file without loading certificates, plugins, middleware, etc.""-  [file]+  [source]   (locking read-raw     (binding [*ns* (find-ns 'leiningen.core.project)]-      (try (load-file file)-           (catch Exception e-             (throw (Exception. (format ""Error loading %s"" file) e)))))+      (try+        (if (instance? Reader source)"
https://api.github.com/repos/technomancy/leiningen/pulls/2112,72687619,"@@ -0,0 +1,214 @@+THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC+LICENSE (""AGREEMENT""). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM"
https://api.github.com/repos/technomancy/leiningen/pulls/2207,79309361,"@@ -531,14 +531,46 @@                                    :managed-dependencies)]     (apply resolve-managed-dependencies dependencies-key managed-dependencies-key project rest))) +(defn normalize-dep-vector+  ""Normalize the vector for a single dependency, to ensure it is compatible with+  the format expected by pomegranate.  The main purpose of this function is to+  to detect the case where the version string for a dependency has been omitted,+  due to the use of `:managed-dependencies`, and to inject a `nil` into the+  vector in the place where the version string should be.""+  [dep]+  (if dep+    (let [id (first dep)+          sec (second dep)+          version (if-not (keyword? sec) sec)+          opts (if (keyword? sec)+                 (nthrest dep 1)+                 (nthrest dep 2))]+      ;; it's important to preserve the metadata, because it is used for+      ;; profile merging, etc.+      (with-meta+       (concat [id version] opts)"
https://api.github.com/repos/technomancy/leiningen/pulls/2214,80954250,"@@ -538,17 +538,17 @@   due to the use of `:managed-dependencies`, and to inject a `nil` into the   vector in the place where the version string should be.""   [dep]-  (if dep+  ;; Some plugins may replace a keyword with a version string later on, so+  ;; assume that even lenght vectors are alright. If not, then they will blow up"
https://api.github.com/repos/technomancy/leiningen/pulls/2235,96620277,"@@ -5,231 +5,45 @@             [leiningen.core.user :as user]             [leiningen.core.main :as main]             [leiningen.core.project :as project]-            [clj-http.client :as http])-  (:import (org.apache.lucene.search BooleanClause$Occur)-           (org.apache.lucene.search BooleanQuery)-           (org.apache.maven.index IteratorSearchRequest MAVEN NexusIndexer)-           (org.apache.maven.index.context IndexingContext)-           (org.apache.maven.index.creator JarFileContentsIndexCreator-                                           MavenPluginArtifactInfoIndexCreator-                                           MinimalArtifactInfoIndexCreator)-           (org.apache.maven.index.expr UserInputSearchExpression)-           (org.apache.maven.index.updater IndexUpdater IndexUpdateRequest-                                           ResourceFetcher)-           (org.codehaus.plexus DefaultPlexusContainer PlexusContainer)))--(defonce container (DefaultPlexusContainer.))--(defonce indexer (.lookup container NexusIndexer))--(def ^:private default-indexers [(MinimalArtifactInfoIndexCreator.)-                                 (JarFileContentsIndexCreator.)-                                 (MavenPluginArtifactInfoIndexCreator.)])--(defn index-location [url]-  (io/file (user/leiningen-home) ""indices"" (string/replace url #""[:/]"" ""_"")))--(defn- add-context [[id {:keys [url]}]]-  (.addIndexingContextForced indexer id url nil (index-location url)-                             url nil default-indexers))--(defn- remove-context [context]-  (.removeIndexingContext indexer context false))--(gen-class- :name leiningen.search.extstream- :extends java.io.InputStream- :state state- :init init- :constructors {[java.io.InputStream Long] []}- :methods [[saveTotalBytes [Long] void]-           [printProgress [] void]]- :prefix ""ext-""- :main false)--(defn ext-init [stream content-length]-  [ [] (atom (into {} {:stream stream-                      :content-length content-length-                      :total-bytes 0})) ])---(defn- ext-saveTotalBytes [this total-bytes ]-  (let [state-map (.state this)]-    (reset! state-map (assoc @state-map-                        :total-bytes total-bytes))))---(defn- ext-printProgress [this]-  (let [state @(.state this)-        total-bytes (:total-bytes state)-        content-length (:content-length state)]-    (if (< 0 content-length)-      (let [progress (/ (* total-bytes 100.0) content-length)-            ending (if-not (== progress 100) ""\r"" ""\n"")]-        (printf ""%.1f%% complete%s"" progress ending))-      (printf ""%d bytes downloaded\r"" total-bytes))-    (flush)))---(defn ext-read-byte<> [this bytebuf]-  (let [state @(.state this)-        stream (:stream state)-        count (.read stream bytebuf)]-    (ext-saveTotalBytes this (+ (:total-bytes state) count))-    (ext-printProgress this)-    count))---(defn ext-read-byte<>-int-int [this bytebuf off len]-  (let [state @(.state this)-        stream (:stream state)-        count (.read stream bytebuf off len)]-    (ext-saveTotalBytes this (+ (:total-bytes state) count))-    (ext-printProgress this)-    count))---(defn- http-resource-fetcher []-  (let [base-url (promise)-        stream (promise)]-    (proxy [ResourceFetcher] []-      ;; TODO: handle connect/disconnect properly-      (connect [id url]-        (deliver base-url url))-      (disconnect []-        (.close @stream))-      (^java.io.InputStream retrieve [name]-        (println ""Downloading"" (str @base-url ""/"" name))-        (let [r (http/get (str @base-url ""/"" name)-                          {:throw-exceptions false :as :stream})-              l (Long/parseLong (get-in r [:headers ""content-length""] ""0""))-              s (leiningen.search.extstream. (:body r) l)]-          (deliver stream s)-          s)))))--(defn update-index [context]-  (.fetchAndUpdateIndex (.lookup container IndexUpdater)-                        (IndexUpdateRequest. context (http-resource-fetcher))))--(defn- refresh? [url project]-  (if-not (:offline? project)-    (< (.lastModified (io/file (index-location url) ""timestamp""))-       (- (System/currentTimeMillis) 86400000))))--(defn- parse-result [result]-  (let [group-id (.groupId result)-        artifact-id (.artifactId result)-        version (.version result)-        classifier (.classifier result)-        packaging (.packaging result)-        name (if (= group-id artifact-id)-               (symbol artifact-id)-               (symbol group-id artifact-id))-        classifier-opts (and classifier [:classifier classifier])-        packaging-opts (if (not= ""jar"" packaging) [:packaging packaging])]-    [(pr-str (into [name version] (concat classifier-opts packaging-opts)))-     (or (.description result) """")]))--(def ^:private page-size (:search-page-size (:user (user/profiles)) 50))--(defn- print-results [response page]-  (when (seq response)-    (println "" == Showing page"" page ""/""-             (-> (.getTotalHitsCount response) (/ page-size) Math/ceil int))-    (doseq [[dep description] (map parse-result response)]-      (println dep description))-    (println)))--(def ^{:private true}-  multi-entry-splitter-re #""([a-z]+)(?:\:)('[^']+'|[^ ]+)"")--(defn- lookup-lucene-field-for-  [^String s]-  (case (-> (or s """") .toLowerCase .trim)-    """"            MAVEN/ARTIFACT_ID-    ""id""          MAVEN/ARTIFACT_ID-    ""a""           MAVEN/ARTIFACT_ID-    ""artifact-id"" MAVEN/ARTIFACT_ID-    ""artifact_id"" MAVEN/ARTIFACT_ID-    ""g""           MAVEN/GROUP_ID-    ""group""       MAVEN/GROUP_ID-    ""group-id""    MAVEN/GROUP_ID-    ""group_id""    MAVEN/GROUP_ID-    ""d""           MAVEN/DESCRIPTION-    ""desc""        MAVEN/DESCRIPTION-    ""description"" MAVEN/DESCRIPTION-    ""v""           MAVEN/VERSION-    ""version""     MAVEN/VERSION-    (throw (IllegalArgumentException. (format ""search over the field %s is not supported; known fields: id, description (aliased as d), group (aliased as g), version (aliased as v)"" s)))))--(defn- query-parts [^String s]-  (for [[full-text field query] (or (re-seq multi-entry-splitter-re s)-                                    [[s """"]])]-    [(lookup-lucene-field-for field)-     (or query full-text)]))--(defn- construct-query [[field q]]-  (let [search-expression (UserInputSearchExpression. q)]-    (try (.constructQuery indexer field search-expression)-         (catch Exception e-           (binding [*out* *err*]-             (println (.getMessage e)))))))--(defn search-repository [query contexts page]-  (let [query-parts (query-parts query)-        queries (map construct-query query-parts)-        constructed-query (BooleanQuery.)-        _ (doseq [q queries :when q]-            (.add constructed-query q BooleanClause$Occur/MUST))-        request (doto (IteratorSearchRequest. constructed-query contexts)-                  (.setStart (* (dec page) page-size))-                  (.setCount page-size))]-    (with-open [response (.searchIterator indexer request)]-      (let [search-fields (map (comp #(.getDescription %) first)-                               query-parts)]-        (println (format ""Searching over %s...""-                         (string/join "", "" search-fields))))-      (print-results response page))))+            [clj-http.client :as http]+            [cheshire.core :as json]))++(defn search-central [query]+  (println ""Searching Central..."")+  (let [url (str ""http://search.maven.org/solrsearch/select?wt=json&q="" query)]"
https://api.github.com/repos/technomancy/leiningen/pulls/2242,99041941,"@@ -106,7 +106,7 @@     <dependency>       <groupId>org.apache.maven.wagon</groupId>       <artifactId>wagon-http</artifactId>-      <version>2.10</version>+      <version>2.12</version>"
https://api.github.com/repos/technomancy/leiningen/pulls/2258,105569849,"@@ -298,10 +298,12 @@          (throw (ex-info ""Could not resolve dependencies"" {:suppress-msg true                                                            :exit-code 1} e)))        (catch Exception e-         (if (and (instance? java.net.UnknownHostException (root-cause e))-                  (not offline?))-           (get-dependencies-memoized dependencies-key (assoc project :offline? true))-           (throw e)))))))+         (let [root (root-cause e)]"
https://api.github.com/repos/technomancy/leiningen/pulls/2257,105570830,"@@ -261,7 +261,8 @@ wider JVM community. You can add third-party repositories by setting the `:repositories` key in project.clj. See the [sample.project.clj](https://github.com/technomancy/leiningen/blob/stable/sample.project.clj)-for examples on how to do so.+for examples on how to do so. For example, you may want to add the Sonatype repository in +order to get the latest SNAPSHOT development version of a library. "
https://api.github.com/repos/technomancy/leiningen/pulls/2256,105570913,"@@ -123,7 +130,10 @@ force them to be updated, use `lein -U $TASK`.""                               dependencies-key                               managed-dependencies-key                               project)]-               (walk-deps hierarchy print-dep))+               (case command+                 "":tree"" (walk-deps hierarchy print-dep)+                 "":tree-data""  (binding [*print-length* 10000 *print-level* 10000]"
https://api.github.com/repos/technomancy/leiningen/pulls/2285,121903971,"@@ -4,7 +4,10 @@   (:require [clojure.java.io :as io]             [leiningen.core.user :as user]             [leiningen.test.helper :as lthelper]-            [leiningen.core.project :as project]))+            [leiningen.core.project :as project])+  (:import (java.io File)+           (java.nio.file Files Paths)+           (java.nio.file.attribute FileAttribute)))"
https://api.github.com/repos/technomancy/leiningen/pulls/2290,128134589,"@@ -340,6 +340,8 @@ Checkouts are an opt-in feature; not everyone who is working on the project will have the same set of checkouts, so your project should work without checkouts before you push or merge. +Make sure not to override the `base` profile while using checkouts. In practice that usually means using `lein with-profile +foo run` rather than `lein with-profile run`."
https://api.github.com/repos/technomancy/leiningen/pulls/2312,138189283,"@@ -65,9 +69,10 @@   (binding [eval/*dir* (:root project)]     (apply eval/sh-with-exit-code ""Couldn't push to the remote"" ""git"" ""push"" ""--follow-tags"" args))) -(defmethod commit :git [project]+(defmethod commit :git [project & args]"
https://api.github.com/repos/technomancy/leiningen/pulls/2313,139277761,"@@ -66,9 +66,18 @@     (some #(if (= (symbol subtask-name) (:name (meta %))) %)           (:subtasks (meta task))))) +(defn- clean-static-help+  ""Returns a string containing help content. Removes doctoc comments if they+  are present.""+  [help-text]+   (let [doctoc-text #""<!-- END doctoc generated TOC please keep comment here to allow auto update -->""]+     (if (boolean (re-find doctoc-text help-text))"
https://api.github.com/repos/technomancy/leiningen/pulls/2411,176864849,"@@ -154,7 +154,7 @@ First write your credentials map to `~/.lein/credentials.clj` like so:  ```clj {#""blueant"" {:password ""locative1""}- #""https://clojars.org/repo""+ #""https://repo.clojars.org"""
https://api.github.com/repos/technomancy/leiningen/pulls/2444,205238923,"@@ -54,7 +54,7 @@  org.apache.maven/maven-resolver-provider ""3.5.0""  org.clojure/data.xml ""0.0.8""  org.clojure/tools.macro ""0.1.5""- org.clojure/tools.nrepl ""0.2.12""+ nrepl ""0.4.1g"""
https://api.github.com/repos/technomancy/leiningen/pulls/2466,219678012,"@@ -9,11 +9,21 @@                  [org.flatland/classlojure ""0.7.1""]                  [robert/hooke ""1.3.0""]                  [com.cemerick/pomegranate ""1.0.0""-                  :exclusions [org.codehaus.plexus/plexus-utils]]+                  :exclusions [org.codehaus.plexus/plexus-utils+                               org.apache.maven.wagon/wagon-provider-api+                               org.apache.maven.wagon/wagon-http+                               org.apache.httpcomponents/httpclient"
https://api.github.com/repos/technomancy/leiningen/pulls/2471,228770998,"@@ -78,7 +78,7 @@   (if url     (next      (or (re-matches #""(?:[A-Za-z-]{2,}@)?github.com:([^/]+)/([^/]+).git"" url)-         (re-matches #""[^:]+://(?:[A-Za-z-]{2,}@)?github.com/([^/]+)/([^/]+).git"" url)))))+         (re-matches #""[^:]+://(?:[A-Za-z-]{2,}@)?github.com/([^/]+)/([^/]+)(?:.git)?"" url)))))"
https://api.github.com/repos/technomancy/leiningen/pulls/2510,242089017,"@@ -199,27 +199,29 @@        (catch Throwable e#))))  (defn- server-forms [project cfg ack-port start-msg?]-  [`(let [server# (nrepl.server/start-server-                   :bind ~(:host cfg)-                   :port ~(:port cfg)-                   :transport-fn ~(:transport cfg)-                   :greeting-fn ~(:greeting-fn cfg)-                   :ack-port ~ack-port-                   :handler ~(handler-for project))-          port# (:port server#)-          repl-port-file# (apply io/file ~(repl-port-file-vector project))-          ;; TODO 3.0: remove legacy repl port support.-          legacy-repl-port# (if (.exists (io/file ~(:target-path project """")))-                              (io/file ~(:target-path project) ""repl-port""))]-      (when ~start-msg?-        (println ""nREPL server started on port"" port# ""on host"" ~(:host cfg)-                 (str ""- ""-                      (nrepl.transport/uri-scheme ~(or (:transport cfg) #'nrepl.transport/bencode))-                      ""://"" ~(:host cfg) "":"" port#)))-      (spit (doto repl-port-file# .deleteOnExit) port#)-      (when legacy-repl-port#-        (spit (doto legacy-repl-port# .deleteOnExit) port#))-      @(promise))+  [`(do (if ~(some-> (:transport cfg) meta :ns str)"
https://api.github.com/repos/technomancy/leiningen/pulls/2544,266702343,"@@ -75,6 +77,13 @@ function download_failed_message { 	EOS } +function checksum_failed_message {+    cat <<-EOS 1>&2+	Failed to properly download $1+	The checksum was mismatched. and we could not verify the"
https://api.github.com/repos/technomancy/leiningen/pulls/2560,276487077,"@@ -175,6 +175,21 @@ Note to windows users: Be sure to download the full version of select GPA for installation. You then need to run  `gpg-connect-agent /bye` from the command line before starting lein. +#### Troubleshooting++`lein deploy` fails with _gpg: decryption failed: No secret key_ +Likely your secret key is protected by a passphrase, which lein cannot+ask for (yet). Run `gpg --quiet --batch --decrypt ~/.lein/credentials.clj.gpg`+to verify that you can decrpyt the credentials and to cache the passphrase"
https://api.github.com/repos/technomancy/leiningen/pulls/2605,308013019,"@@ -129,9 +129,13 @@ bump. If none is given, it defaults to :patch.""   ([project] (release project *level*))   ([project level]      (binding [*level* (if level (read-string level))]-       (doseq [task (:release-tasks project)]-         (let [current-project (project/init-project (project/read))]-           (main/resolve-and-apply current-project task))))))+       (let [all-tasks (:release-tasks project)+             total-task-count (count all-tasks)]+         (doseq [[i task] (zipmap (range total-task-count) all-tasks)]"
https://api.github.com/repos/technomancy/leiningen/pulls/2617,318377597,"@@ -25,7 +25,11 @@         (if-let [revision (utils/read-git-head git-head)]           (.setProperty properties ""revision"" revision)))       (.store properties baos ""Leiningen""))-    (str baos)))+    (-> baos+        str+        ;; Strip off the timestamp comment printed by java.util.Properties"
https://api.github.com/repos/technomancy/leiningen/pulls/2661,389077671,"@@ -443,13 +443,14 @@ Get the latest version of Leiningen at https://leiningen.org or by executing     (project/ensure-dynamic-classloader)     (aether/register-wagon-factory! ""http"" insecure-http-abort)     (user/init)-    (let [project (if (.exists (io/file *cwd* ""project.clj""))-                    (project/read (str (io/file *cwd* ""project.clj"")))-                    (default-project))]-      (when (:exact-lein-version project) (verify-exact-version project))-      (when (:min-lein-version project) (verify-min-version project))-      (configure-http)-      (resolve-and-apply project raw-args))+    (binding [project/*memoize-middleware* true]+      (let [project (if (.exists (io/file *cwd* ""project.clj""))+                      (project/read (str (io/file *cwd* ""project.clj"")))+                      (default-project))]+        (when (:exact-lein-version project) (verify-exact-version project))+        (when (:min-lein-version project) (verify-min-version project))+        (configure-http)+        (resolve-and-apply project raw-args)))"
https://api.github.com/repos/technomancy/leiningen/pulls/2525,406323684,"@@ -314,7 +321,18 @@                                 :repositories (map classpath/add-repo-auth                                                    (:repositories project)))   (let [launch (utils/require-resolve 'reply.main/launch-nrepl)]-    (launch (options-for-reply project :attach attach)))  )+    (launch (options-for-reply project :attach attach))))++(defn client-with-cfg [project cfg attach]"
https://api.github.com/repos/technomancy/leiningen/pulls/2677,412307017,"@@ -165,9 +165,24 @@ while [ -h ""$SCRIPT"" ] ; do     fi done +if [ ! -x ""$JAVA_CMD"" ] && ! type -f java >/dev/null+then+    msg ""Leiningen couldn't find 'java' executable, which is required.""+    msg ""Please either set JAVA_CMD or put java (>=1.6) in your \$PATH ($PATH).""+    exit 1+fi++export LEIN_JAVA_CMD=""${LEIN_JAVA_CMD:-${JAVA_CMD:-java}}""++DEF_LEIN_JVM_OPTS=""-XX:+TieredCompilation -XX:TieredStopAtLevel=1""+JAVA_VERSION=$($LEIN_JAVA_CMD -version 2>&1 | awk -F '""' '/version/ {split($2, v, "".""); print v[1] }')+if [[ $JAVA_VERSION -lt 13 ]]; then"
https://api.github.com/repos/technomancy/leiningen/pulls/2719,545474862,"@@ -79,6 +80,15 @@   ;; Issue #2715   (test lein-test-reload-bug-project)) +(deftest test-failure-exit-code"
https://api.github.com/repos/technomancy/leiningen/pulls/2696,546127588,"@@ -238,7 +238,10 @@                     (File/createTempFile ""form-init"" "".clj"")                     (io/file (:target-path project) (str checksum ""-init.clj"")))]     (spit init-file-          (binding [*print-dup* *eval-print-dup*]+          (binding [*print-dup* *eval-print-dup*+                    ;; only to resolve reflection warning in run-form (run.clj)+                    *print-meta* (and (seq? form)+                                      (first (filter #(:lein-with-meta (meta %)) form)))]"
https://api.github.com/repos/technomancy/leiningen/pulls/2734,598358275,"@@ -1,14 +1,14 @@-(ns leiningen.new.{{name}}-  (:require [leiningen.new.templates :refer [renderer name-to-path ->files]]+(ns leiningen.new.{{group-id}}.{{artifact-id}}"
https://api.github.com/repos/technomancy/leiningen/pulls/2779,775085431,"@@ -133,15 +153,38 @@       (zip/edit (comp clj->sjacket symbol fn str sjacket->clj ))       zip/root)) -(defn- update-setting [proj [p & ath] fn]-  (let [loc (or (-> proj (find-key p) next-value)-                (-> proj-                    zip/rightmost-                    (insert-entry p)-                    (insert-entry {})-                    zip/left))]+(defn- get-datatype [loc]+  (let [node (->> loc +                  (iterate zip/right)+                  (take-while (comp not nil?))+                  (remove insignificant?)+                  (filter (comp #{:string :map :vector} :tag zip/node))+                  first+                  zip/node)]+    (:tag node)))++(defn- update-setting [proj datatype [p & ath] fn]+  (let [loc (or (case datatype"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/17,851798719,"@@ -337,11 +339,14 @@  (defn -main [& args]   (let [f (java.io.File. (System/getProperty ""user.dir"") ""cljd.edn"")+        is-windows? (= ""windows"" (str/lower-case (or (System/getProperty ""os.name"") """")))         config (if (.exists f)                  (with-open [rdr (-> f io/reader java.io.PushbackReader.)]                    (edn/read rdr))                  {})]     (binding [*ansi* (and (System/console) (get (System/getenv) ""TERM""))+              *dart* (if is-windows? ""dart.bat"" *dart*)"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/29,853371850,"@@ -0,0 +1,24 @@+(ns hooks.flutter+  (:require [clj-kondo.hooks-api :as api]))++(defn widget [{:keys [:node]}]+  (let [[state-key binding-vec & body] (rest (:children node))"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/30,853443180,"@@ -29,14 +29,14 @@     (if watch       (cond->>         `(widgets/StatefulBuilder.-           :key ~(cond-> key (contains? opts :key) (list `foundation/ValueKey.))+           :key ~(when key (list `foundation/ValueKey. key))"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/40,857036401,"@@ -3,6 +3,17 @@             [clojure.set :as set]             [clojure.string :as str])) +(defn- with->bindings+  ""Get :with form, returns mapcat-ed bindigs"""
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/44,860714028,"@@ -1,3 +1,6 @@ {:linters {:non-arg-vec-return-type-hint {:level :off}-           :flutter/widget {:level :error}} +           :flutter/widget {:level :error}+           :clojure-lsp/unused-public-var {:exclude #{main}}+           :unresolved-namespace {:exclude [dart dart:core]}+           :unresolved-symbol {:exclude [bool Function fallback List Map]}} "
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/56,865376231,"@@ -124,7 +124,7 @@ By default a resource is disposed by calling its `.dispose` method. However if t  The resource name is threaded (as per `->`) through the `:dispose` form. Most of the time it will be simply a method or a function. -Last, you can introduce intermediate values to use in resource initialization via `:let`:+Lastly, you can introduce intermediate values to use in resource initialization via `:let`:"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/79,878108479,"@@ -0,0 +1,87 @@+# Troubleshooting++## Table of content+* [Project set-up](./Troubleshooting.md#project-set--up)++##  Project set up++### Error while host compiling [...] Can't resolve widgets/InheritedModel (no source location)++<details>+    <summary>Entire Traceback</summary>+    Something horrible happened! :scream: Error while host-compiling (ns samples.tables ""Faithful port of https://docs.flutter.dev/cookbook/design/tabs"" (:require [""package:flutter/material.dart"" :as m] [cljd.flutter.alpha as f])) (ns samples.tables ""Faithful port of https://docs.flutter.dev/cookbook/design/tabs"" (:require [""package:flutter/material.dart"" :as m] [cljd.flutter.alpha as f])) Can't resolve widgets/InheritedModel (no source location)+</details>+++* Make sure you have the same error even when you remove the main and just keep your module declaration and the requirements. (the (ns ..) part)."
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/81,879485832,"@@ -0,0 +1,43 @@+(ns sample.datatable+  (:require+   [""package:flutter/material.dart"" :as m]+   [cljd.flutter.alpha :as f]))++(defn data-table [& {:keys [cols rows]}]+  (f/widget+   (m/SingleChildScrollView+    :scrollDirection m.Axis/horizontal+    :child+    (m/DataTable+     :headingTextStyle (m/TextStyle+                        :fontWeight m.FontWeight/bold+                        :color m.Colors/blue)+     ;; :columnSpacing 18.0+     ;; :sortColumnIndex 2+     ;; :sortAscending true+     :showBottomBorder true+     :columns (mapv (fn [col] (m/DataColumn :label (m/Text col))) cols)+     :rows (mapv (fn [row] (m/DataRow :cells (mapv (fn [cell] (m/DataCell (m/Text cell))) row))) rows)))))++(def demo+  (f/widget+   (m/Scaffold+    :appBar (m/AppBar :title (m/Text ""DataTable Sample""))+    :body+    (f/nest+     m/Center+     (m/ListView"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/98,887938329,"@@ -0,0 +1,34 @@+(ns sample.snackbar+  ""Faithful port of https://docs.flutter.dev/cookbook/design/snackbars""+  (:require+   [""package:flutter/material.dart"" :as m]+   [cljd.flutter.alpha :as f]))++(def snackbar+  (m/SnackBar+   :content (m/Text ""Yay! A SnackBar!"")+   :action+   (m/SnackBarAction :label ""Undo"" :onPressed (fn []))))+++(def snackbar-demo+  (f/widget+   :inherit [m/ScaffoldMessenger]+   :context ctx"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/119,908539197,"@@ -0,0 +1,77 @@+(ns sample.gesture-detector+  (:require+   [""package:flutter/gestures.dart"" :as g]+   [""package:flutter/material.dart"" :as m]+   [""package:vector_math/vector_math_64.dart"" :as vm]+   [cljd.flutter.alpha :as f]))++(def radius 25)++(defn inside-parallelogram+  [[o a b] mouse-pos]+  (let [oa (.- a o)+        ob (.- b o)+        m (doto+           (vm/Matrix3 (.-dx oa) (.-dy oa) 0+                      (.-dx ob) (.-dy ob) 0+                      (.-dx o)  (.-dy o)  1)+            .invert) +        p-1 (.* m (vm/Vector3 (.-dx mouse-pos) (.-dy mouse-pos) 1))]+    (dart:core/print (str p-1))"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/138,923356436,"@@ -0,0 +1,45 @@+(ns sample.fetch-data+  (:require [""package:flutter/material.dart"" :as m]+            [""package:http/http.dart"" :as http]+            [""dart:convert"" :as convert]+            [""dart:async""]+            [cljd.flutter.alpha :as f]))+++(defn decode-album+  [raw-album]+  (let [json-album (convert/jsonDecode raw-album)]+    (dart:core/print (get json-album ""title""))+    {:user-id (get json-album ""userId"") :id (get json-album ""id"") :title (get json-album ""title"")}))+++(defn fetch-album+  []+  (let [response (await +                  (http/get+                   (dart:core.Uri/parse ""https://jsonplaceholder.typicode.com/albums/1"")))]+     (cond (= (.statusCode response) 200) (decode-album (.body response)) :else {})))++(def my-app+  (f/widget+   :state [state {:future-album (fetch-album)}] +   (m/MaterialApp+    :title ""Fetch Data Example"""
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/156,985774926,"@@ -3734,8 +3738,12 @@             (assert is-plain-method (str ""not a plain method: "" meth))             (when (:dart/const (meta x)) ; should only be on constructors, see #53               (dart-print ""const ""))-            (if (= :class (:kind obj))+            (cond+              (= :class (:kind obj))               (write-type obj)+              (number? obj)"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/157,989776828,"@@ -7275,3 +7275,33 @@             (rf nil)             (error-rf nil)             (.close es))))))))++(defn update-vals+  ""m f => {k (f v) ...}++  Given a map m and a function f of 1-argument, returns a new map where the keys of m+  are mapped to result of applying f to the corresponding values of m.""+  [m f]+  (with-meta+    (persistent!+     (reduce-kv (fn [acc k v] (assoc! acc k (f v)))+                (transient {})+                #_(if (instance? clojure.lang.IEditableCollection m)"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/160,1026304073,"@@ -152,28 +152,41 @@   (let [cljd-sha (get-in *deps* [:libs 'tensegritics/clojuredart :git/sha])         parent-dir         (if cljd-sha-          (-> (System/getProperty ""user.home"") (java.io.File. "".clojuredart"") (java.io.File. ""cache"") (java.io.File. cljd-sha) (doto .mkdirs))-          (-> (System/getProperty ""user.dir"") (java.io.File. "".clojuredart"") (java.io.File. ""cache"") (doto .mkdirs)))-        analyzer-dir (java.io.File. parent-dir ""cljd_helper"")-        analyzer-dart (-> analyzer-dir (java.io.File. ""bin"") (java.io.File. ""analyzer.dart""))]-    (when-not cljd-sha (del-tree analyzer-dir))+          (-> (System/getProperty ""user.dir"") (java.io.File. "".clojuredart"") (java.io.File. ""cache"") (java.io.File. cljd-sha))+          (-> (System/getProperty ""user.dir"") (java.io.File. "".clojuredart"") (java.io.File. ""cache"")))+        _ (when-not cljd-sha (del-tree parent-dir))+        parent-dir (doto parent-dir .mkdirs)"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/163,1032634040,"@@ -2722,46 +2710,86 @@                     :dart                     (cond-> dc-Function                       ret-type (assoc-                                 :return-type ret-type-                                 :parameters (dart-fn-parameters expr)))+                                :return-type ret-type+                                :parameters (dart-fn-parameters expr)))                     :clj (emit-type 'cljd.core/IFn$iface {})                     nil)         dartname (cond-> dartname                    dart-type                    (vary-meta (fn [{:dart/keys [type] :as m}]                                 (assoc m :dart/ret-type type-                                  :dart/type dart-type))))+                                       :dart/type dart-type))))+        dartqname (dart-qualify dartname)         expr (when-not *host-eval*                (if (and (seq? expr) (= 'fn* (first expr)))                  (with-meta (cons (vary-meta (first expr) assoc :var-name sym) (next expr)) (meta expr))                  expr))-        dart-fn-        (binding [*class-prefix* (str *class-prefix* dartname)]-          (swap! nses do-def sym {:dart/name dartname :type :field :dart/type dart-type}) ; predecl so that the def is visible in recursive defs-          (emit expr env))         dart-annotations         (when-not *host-eval* (into [] (map #(emit % env)) (-> form meta :annotations)))-        dart-code-        (when-not *host-eval*-          (with-dart-str-            (write-annotations dart-annotations)-            (cond-              (:dynamic (meta sym))-              (let [k (symbol (name (:current-ns @nses)) (name sym))]-                (write-dynamic-var-top-field k dartname dart-fn))-              (and (seq? expr) (= 'fn* (first expr)) (not (symbol? (second expr))))-              (write-top-dartfn dartname-                (or-                  ; peephole optimization: unwrap single let-                  (and (seq? dart-fn) (= 'dart/let (first dart-fn))-                    (let [[_ [[x e] & more-bindings] x'] dart-fn]-                      (and (nil? more-bindings) (= x x') e)))-                  (ensure-dart-expr dart-fn env)))-              :else-              (write-top-field dartname dart-fn))))]-    (swap! nses alter-def sym assoc :dart/code dart-code)+        top-kind+        (cond+          (:dynamic (meta sym)) :dynamic+          (and (seq? expr) (= 'fn* (first expr)) (not (symbol? (second expr)))) :fn+          :else :field)+        is-redef (let [the-ns (get @nses (:current-ns @nses))]+                   (and (= :field top-kind) (some-> the-ns sym :dart/code)))]+    (let [the-ns (get @nses (:current-ns @nses))+          sym-info (the-ns sym)+          is-redef (and (= :field top-kind) (:dart/code sym-info))]+      (if is-redef+        (do+          (swap! nses update :redefs bump-version dartqname)+          (doseq [[user-ns user-syms] (:used-by sym-info)+                  user-sym user-syms+                  :let [{:keys [dart/refresh-code sub-type] :as user-sym-info}+                        (get-in @nses [user-ns user-sym])]+                  :when refresh-code]+            (swap! nses assoc-in [user-ns user-sym :dart/code] (refresh-code))+            (when (= :field sub-type)+              #_(TODO PROPAGATE))))+        ; when going from field to something else+        (swap! nses update :redefs dissoc dartqname)))++    (binding [*class-prefix* (str *class-prefix* dartname)+              *used-vars* {}]+      ; predecl so that the def is visible in recursive defs+      (swap! nses do-def sym+        {:dart/name dartname :dart/qname dartqname :dart/type dart-type+         :type :field :sub-type top-kind})+      (let [dart-fn (emit expr env)+            write-code-str+            (fn []+              (when-not *host-eval*+                (with-dart-str+                  (write-annotations dart-annotations)+                  (case top-kind+                    :dynamic+                    (let [k (symbol (name (:current-ns @nses)) (name sym))]+                      (write-dynamic-var-top-field k dartname dart-fn))+                    :fn (write-top-dartfn dartname+                                          (or+                            ; peephole optimization: unwrap single let+                                           (and (seq? dart-fn) (= 'dart/let (first dart-fn))+                                                (let [[_ [[x e] & more-bindings] x'] dart-fn]+                                                  (and (nil? more-bindings) (= x x') e)))+                                           (ensure-dart-expr dart-fn env)))+                    :field (write-top-field dartqname dart-fn)))))+            ; 1st write will force all lazy thunks so used-vars will be exhaustive+            dart-code (write-code-str)+            current-ns (:current-ns @nses)]+        (doseq [[used-ns used-syms] *used-vars*+                used-sym used-syms]+          (swap! nses update-in [used-ns used-sym :used-by current-ns]+            (fnil conj #{}) sym))+        (swap! nses+               alter-def sym assoc+               :used-vars *used-vars*+               :dart/code dart-code+               :dart/refresh-code write-code-str)))     (emit sym env))) +(:dart/name (get-in @nses ['cljd.core 'inc]))"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/197,1107084802,"@@ -0,0 +1,157 @@+(ns sample.first-flutter-app-codelabs+  (:require+    [""package:flutter/material.dart"" :as m]+    [""package:english_words/english_words.dart"" :as english]+    [""dart:core"" :as dc]+    [cljd.flutter :as f]))++++(defn big-card [^english/WordPair pair]+  (f/widget+    :get {{{:flds [primary"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/208,1115666116,"@@ -4,7 +4,7 @@ You will find listed below in the `Sample` section all of the current samples, a ## Run a sample  ```sh-clj -Mcljd flutter+clj -M:cljd flutter"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/212,1140978311,"@@ -0,0 +1,38 @@+(ns sample.video-player+  ""Example of video player""+  (:require [""package:flutter/material.dart"" :as m]+            [""package:video_player/video_player.dart"" :as vp]+            [cljd.flutter :as f]))++(def video-player-widget+  (f/widget+    :managed [controller (vp/VideoPlayerController.network+                           ""https://flutter.github.io/assets-for-api-docs/assets/videos/bee.mp4"")]+    :watch [_initialization! (.initialize controller)+            ^vp/VideoPlayerValue+            {:flds [isPlaying+                    aspectRatio+                    isInitialized]} controller]+    (m/Scaffold+      .floatingActionButton+      (f/widget+        (m/FloatingActionButton+          .onPressed (fn []+                         (if isPlaying+                           (.pause controller)+                           (.play controller))+                         nil))+        (m/Icon (if isPlaying m/Icons.pause m/Icons.play_arrow))))+    .body+    m/Center+    (if isInitialized+      (f/widget+        (m/AspectRatio .aspectRatio aspectRatio)+        (vp/VideoPlayer controller))+      (m/Container))))++(defn main []+  (f/run+    m/MaterialApp+    .home (f/widget"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/236,1221932956,"@@ -0,0 +1,69 @@+(ns sample.drawer-navigate-named+  ""Example for using drawer with named routes navigation.""+  (:require [""package:flutter/material.dart"" :as m]+            [cljd.flutter :as f]))++(defn drawer+  [component]+  (f/widget+    :let [drawer-routes [[""/""+                          ""Initial Page""+                          m/Icons.home]+                         [""/favorites""+                          ""Favorite Page""+                          m/Icons.favorite]+                         [""/movies""+                          ""Movies Page""+                          m/Icons.local_movies]]]+    (m/Scaffold+      .appBar (m/AppBar+                .title (m/Text ""Drawer""))+      .drawer (f/widget+                :get [m/Navigator]+                m/Drawer+                (m/ListView+                  .padding (m/EdgeInsets.all 20)+                  .children (into [(f/widget+                                     (m/SizedBox .height 50)+                                     (m/Container))]+                                  (map (fn [[route+                                             title+                                             icon]]+                                         (f/widget+                                           (m/ListTile+                                             .leading (m/Icon icon)+                                             .title (m/Text title)+                                             .onTap+                                             (fn []+                                               (.pop navigator)+                                               (.pushNamed navigator route)+                                               nil)))))+                                  drawer-routes)))+      .body component)))+++(def routes+  {""/""          (drawer+                  (f/widget+                    m/Center+                    (m/Text ""Initial Page!"")))+   ""/favorites"" (drawer+                  (f/widget+                    m/Center+                    (m/Text ""Favorites Page!"")))+   ""/movies""    (drawer+                  (f/widget+                    m/Center+                    (m/Text ""Movies Page!"")))})+++(defn ^:async main []"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/243,1229562134,"@@ -135,6 +135,7 @@       Return value will be passed as argument to the 1-arg arity.       Thus you can pass references to resources to free etc.)     ([resources]+     The resources passed in are what the zero-arity \""setup\"" returned"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/254,1299690220,"@@ -1828,6 +1829,10 @@   ^:mixin EqualsEquivMixin   IPrint   (-print [o ^StringSink sink]+    (when-let [m (and *print-meta* meta)]"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/256,1305289405,"@@ -7162,7 +7162,48 @@       ([] (gensym ""G__""))       ([prefix-string] (symbol (str prefix-string (swap! id inc))))))) -(def tagged-literal nil) ; TODO hack for macros but agged-literal will have to be implemented in cljd+(deftype TaggedLiteral [tag form]+  Object+  (toString [coll]+    (pr-str coll))++  IEquiv+  (-equiv [this other]+    (and (dart/is? other TaggedLiteral)+         (= tag (.-tag other))+         (= form (.-form other))))++  IHash+  (-hash [this]+    (+ (* 31 (hash tag))"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/264,1306732751,"@@ -8246,4 +8246,51 @@       (doseq [tap @tapset]         (try           (tap x)-          (catch Exception ex))))))\ No newline at end of file+          (catch Exception ex))))))++(defprotocol Inst+  (inst-ms* [inst]))"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/262,1306985256,"@@ -7138,13 +7138,72 @@   [& xforms]   (Eduction. (apply comp (butlast xforms)) (last xforms) -1)) +;; UUID+(defprotocol IUUID ""A marker protocol for UUIDs"")++(deftype UUID [uuid ^:mutable __hash]"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/273,1342342704,"@@ -0,0 +1,164 @@+(ns sample.stream-download-percentage+  ""Example for using drawer with named routes navigation.""+  (:require [""package:flutter/material.dart"" :as m]+            [""package:path_provider/path_provider.dart"" :as path-provider]+            [""dart:core"" :as dc]+            [""dart:io"" :as dio]+            [""package:http/http.dart"" :as http]+            [""package:validators/validators.dart"" :as validators]+            [cljd.flutter :as f]+            [clojure.string :as str]))++(defn calculate-percentage+  [{::keys [total+            completion]}]+  (if (= 0 total)+    0+    (-> (- total+           completion)+        (/ total)+        (* 100)+        (- 100)+        (* -1))))+++(defn delete-local-file!+  [file-name]+  (let [old-file (-> file-name+                     dio/File)]+    (when (await (.exists old-file))+      (-> old-file+          .delete))))+++(defn parse-uri+  [tc]+  (let [form-text (-> tc+                      .-text)]+    (when (validators/isURL form-text)+      (-> form-text+          Uri/parse))))+++(defn start-button-handler+  [{::keys [file-name+            request-uri+            *total+            *completion+            file-image-atom]}]+  (delete-local-file! file-name)+  (let [streamed-response (some->> request-uri+                                   (http/Request ""get"")+                                   .send+                                   await)+        local-file-open (dio/File file-name)+        opened-file (.openWrite local-file-open)+        _total-bytes-add (swap! *total+                                #(+ % (.-contentLength streamed-response)))]+    (some-> streamed-response+            .-stream+            (.listen (fn [event]+                       (swap! *completion #(+ % (.-length event)))+                       (.add opened-file event))+                     .onDone (fn []+                               (reset! file-image-atom local-file-open))))))++(defn show-image-ui+  [{::keys [file-image]}]+  (f/widget+    :watch [file-exists? (some-> file-image+                                 .exists)]+    m/Center+    (if file-exists?+      (-> file-image+          .readAsBytesSync+          (m/Image.memory+            .errorBuilder (fn [_ _ _]+                            (m/Text ""Try to download a valid image file""))))+      (m/Text ""Add a link to download an image to show here""))))+++(defn show-image-download-button-ui+  [{::keys [file-name+            path-str]}]+  (f/widget+    :managed [tc (m/TextEditingController)]+    :let [{:flds [text]} tc]+    :watch [file-image (atom (dio/File. file-name)) :as file-image-atom]+    m/Column+    .children+    [(m/Spacer)+     (show-image-ui {::file-image file-image})+     (m/Spacer)+     (f/widget+       (m/TextField+         .decoration (m/InputDecoration+                       .border (m/OutlineInputBorder)+                       .hintText ""Add the link to file download"")+         .controller tc))+     (f/widget+       (m/Row .mainAxisAlignment m/MainAxisAlignment.center)+       .children+       [(m/Spacer)+        (f/widget+          :let [*completion (atom 0)"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/219,1368238933,"@@ -168,16 +169,72 @@         (-> (Thread/currentThread) .getContextClassLoader (.getResourceAsStream ""analyzer.dart"") (.transferTo out))))     (.getPath analyzer-dir))) +(defn ensure-pubspec-dependencies []+  (let [scan-pubspec (fn [filter-line-fn rf]+                       (->> (reduce (fn [[acc seen-cljd-tag] line]"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/283,1382892712,"@@ -0,0 +1,103 @@+(ns sample.isolates+  ""An example following https://blog.codemagic.io/understanding-flutter-isolates/""+  (:require [""package:flutter/material.dart"" :as m]+            [""dart:isolate"" :as di]+            [""dart:core"" :as dc]+            [cljd.flutter :as f]))++(defn heavy-computation-task+  [my-send-port]+  (let [mike-receive-port (di/ReceivePort.)]+    (->> mike-receive-port+         .-sendPort+         (.send ^di/SendPort my-send-port))+    (-> mike-receive-port+        (.forEach+          (fn [[my-message+                coffee-type+                mike-response-send-port]]+            (.send ^di/SendPort+                   mike-response-send-port+                   (str [my-message+                         coffee-type])))))))++(defn isolate-trigger!+  [receive-port+   response-receive-port+   {::keys [message-box+            type]}]+  (let [mike-send-port (await (.-first ^di/ReceivePort receive-port))]+    (.send ^di/SendPort+           mike-send-port+           [message-box+            type+            (.-sendPort ^di/ReceivePort response-receive-port)])))+++(defn isolate-test-ui"
https://api.github.com/repos/Tensegritics/ClojureDart/pulls/295,1414850685,"@@ -2,15 +2,20 @@            :flutter/widget {:level :error}            :clojure-lsp/unused-public-var {:exclude #{main}}            :unresolved-namespace {:exclude [dart dart:core]}-           :unresolved-symbol -           {:exclude [AbstractClassInstantiationError ArgumentError AssertionError BidirectionalIterator -                      BigIntbool bool CastError Comparable Comparator ConcurrentModificationError -                      CyclicInitializationError DateTime double Duration Error Exception Expando  -                      FallThroughError Finalizer FormatException Function IndexError IntegerDivisionByZeroException-                      Invocation Iterable Iterator List Map MapEntry Match NoSuchMethodError Null NullThrownError-                      Object OutOfMemoryError Pattern pragma RangeError RegExp RegExpMatch Runes RuneIterator Set -                      Sink StackOverflowError StackTrace StateError Stopwatch String StringBuffer StringSink-                      Symbol Type TypeError UnimplementedError UnsupportedError Uri WeakReference]}} +           :unresolved-symbol+           {:exclude+            [AbstractClassInstantiationError ArgumentError AssertionError+             BidirectionalIterator BigInt bool Comparable Comparator+             ConcurrentModificationError CyclicInitializationError DateTime+             Deprecated double Duration dynamic Error Exception Expando+             FallThroughError FormatException Function Future IndexError int+             IntegerDivisionByZeroException Invocation Iterable Iterator+             LateInitializationError List Map MapEntry Match NoSuchMethodError+             Null NullThrownError num Object OutOfMemoryError Pattern pragma+             RangeError Record RegExp RegExpMatch RuneIterator Runes Set Sink+             StackOverflowError StackTrace StateError Stopwatch Stream String+             StringBuffer StringSink super Symbol Type TypeError"
https://api.github.com/repos/thheller/shadow-cljs/pulls/122,147260289,"@@ -159,7 +159,8 @@   (let [ns (if macros              (symbol (str name ""$macros""))              name)]-    (env/get-ns-info ns)+    (or (get-in @compile-state-ref [:cljs.analyzer/namespaces ns])+        (env/get-ns-info ns))     (load-namespaces compile-state-ref #{ns} cb)))"
https://api.github.com/repos/thheller/shadow-cljs/pulls/129,149968114,"@@ -17,6 +17,12 @@             [clojure.java.io :as io])   (:import (java.io StringReader))) +(def ^:private print-cause-trace+  (delay+   (do+     (require 'clojure.stacktrace)+     (resolve 'clojure.stacktrace/print-cause-trace))))+"
https://api.github.com/repos/thheller/shadow-cljs/pulls/138,151839716,"@@ -106,6 +106,9 @@ shadow-cljs watch app  # connect to REPL for the build (available while watch is running) shadow-cljs cljs-repl app++# (if you are targeting node) connect to node-repl+shadow-cljs node-repl app"
https://api.github.com/repos/thheller/shadow-cljs/pulls/227,176906013,"@@ -32,9 +32,10 @@ Please refer to the [User Manual](https://shadow-cljs.github.io/docs/UsersGuide.  - [Official Browser Example](https://github.com/shadow-cljs/quickstart-browser) - [mhuebert/shadow-re-frame](https://github.com/mhuebert/shadow-re-frame) - Usage of [re-frame](https://github.com/Day8/re-frame), [re-frame-trace](https://github.com/Day8/re-frame-trace), and the [shadow-cljs](https://github.com/thheller/shadow-cljs/) build tool. **[Live Demo](https://mhuebert.github.io/shadow-re-frame/)**-- [jacekschae/shadow-reagent](https://github.com/jacekschae/shadow-reagent) - shadow-cljs, proto-repl, reagent template+- [jacekschae/shadow-reagent](https://github.com/jacekschae/shadow-reagent) - shadow-cljs + proto-repl + reagent - [jacekschae/shadow-firebase](https://github.com/jacekschae/shadow-firebase) - shadow-cljs + firebase - [ahonn/shadow-electron-starter](https://github.com/ahonn/shadow-electorn-starter) - ClojureScript + Shadow-cljs + Electron + Reagent+- [jacekschae/conduit](https://github.com/jacekschae/conduit) - Real world application built with shadow-cljs + re-frame + re-frame-10x"
https://api.github.com/repos/thheller/shadow-cljs/pulls/289,192852912,"@@ -209,26 +209,41 @@       (load-end)       (dom-insert         [:div-         {:id hud-id-          :style {:position ""absolute""-                  :z-index ""10000""-                  :left ""0px""-                  :bottom ""0px""-                  :right ""0px""-                  :padding ""10px 10px 0 10px""-                  :overflow ""auto""-                  :font-family ""monospace""-                  :font-size ""12px""}}-         (for [{:keys [warnings] :as src} sources-with-warnings-               warning warnings]-           (html-for-warning warning))])-      )))+         {:id    hud-id+          :style {:position       ""fixed""+                  :z-index        ""10000""+                  :left           ""0px""+                  :bottom         ""0px""+                  :right          ""0px""+                  :display        ""flex""+                  :flex-direction ""column""+                  :font-family    ""monospace""+                  :font-size      ""12px""}}+         [:div {:style {:align-self    ""flex-end""+                        :background    ""#fff""+                        :border        ""2px solid #ccc""+                        :border-bottom ""0px""+                        :cursor        ""pointer""+                        :padding       ""6px""+                        :margin-bottom ""-2px""+                        :z-index       ""1""}"
https://api.github.com/repos/thheller/shadow-cljs/pulls/543,314026700,"@@ -127,7 +127,7 @@ The compilation will create the `public/js/main.js` we configured above (`:main`  We also need a simple HTTP server to serve our HTML since modern Browsers all place a few restrictions on files loaded directly from disk which will lead to issues later. `shadow-cljs` provides such a server but you can use anything you like at this point. It only matters that the files from the `public` directory are served properly. To start the built-in web server just adjust the build config from above. -```+```clojure"
https://api.github.com/repos/thheller/shadow-cljs/pulls/600,348021353,"@@ -387,7 +387,9 @@   ([sys-config]    (if (runtime/get-instance)      ::already-running-     (do (log/set-level! (get-in sys-config [:log :level] :info))+     (do (log/set-level! (or (get-in sys-config [:user-config :log :level])+                             (get-in sys-config [:log :level])"
https://api.github.com/repos/thheller/shadow-cljs/pulls/815,550107731,"@@ -8,6 +8,11 @@ npx shadow-cljs --cli-info  npx shadow-cljs clj-run test.runnable/foo -npx shadow-cljs release reagent test-node --verbose+npx shadow-cljs release reagent test-node test-karma --verbose  node out/test-node/script.js++apt-get update+apt-get install chromium --no-install-recommends -y++CHROME_BIN=/usr/bin/chromium npx karma start --single-run"
https://api.github.com/repos/thheller/shadow-cljs/pulls/819,550466772,"@@ -182,7 +182,6 @@     (<!! thread)))  (comment-  (require '[shadow.cljs.devtools.api :as shadow])"
https://api.github.com/repos/thheller/shadow-cljs/pulls/828,556376183,"@@ -42,8 +42,9 @@       [:title (-> (io/file ""."")                   (.getCanonicalFile)                   (.getName))]-      [:link {:rel ""stylesheet"" :href ""/css/main.css""}]-      [:link {:rel ""stylesheet"" :href ""/css/tailwind.min.css""}]+      #_[:link {:rel ""stylesheet"" :href ""/css/main.css""}]+      #_[:link {:rel ""stylesheet"" :href ""/css/tailwind.min.css""}]+      [:link {:rel ""stylesheet"" :href ""https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css""}]"
https://api.github.com/repos/thheller/shadow-cljs/pulls/945,727821076,"@@ -61,7 +62,7 @@               w (transit/writer out :json)]           (try             (transit/write w data)-            (.toString out)+            (.toString out ""UTF-8"")"
https://api.github.com/repos/thheller/shadow-cljs/pulls/1128,1241168601,"@@ -213,7 +213,8 @@       (when (or (= :cljs/quit result)                 (= :repl/quit result))         (let [clj-ns (reset-session (:session msg))]-          (nrepl-out msg {:err ""Exited CLJS session. You are now in CLJ again.\n""})+          (nrepl-out msg {:err ""Exited CLJS session. You are now in CLJ again.+You can use `(shadow.cljs.devtools.api/nrepl-select <build-id>)` to get back in.\n""})"
https://api.github.com/repos/tonsky/datascript/pulls/2,11992274,"@@ -4,18 +4,18 @@  An immutable in-memory database and Datalog query engine in ClojureScript. -DataScript is meant to run inside browser. It is cheap to create, quick to query and ephemeral. You create a database on page load, put some data in it, track changes, do queries and forget about it when user closes the page.+DataScript is meant to run inside the browser. It is cheap to create, quick to query and ephemeral. You create a database on page load, put some data in it, track changes, do queries and forget about it when the user closes the page. -DataScript databases are immutable and based on persistent data structures. In fact, they’re more like a data structures (think Hashmap). Unlike querying real SQL DB, when you query DataScript, it all comes down to a Hashmap lookup. Or series of lookups. Or array iteration. There’s no particular overhead to it. You put little data in it, it’s fast. You put a lot of data, well, at least it has indexes. That should do better than you filtering an array by hand anyway. The thing is really lightweight.+DataScript databases are immutable and based on persistent data structures. In fact, they’re more like data structures than databases (think Hashmap). Unlike querying a real SQL DB, when you query DataScript, it all comes down to a Hashmap lookup. Or series of lookups. Or array iteration. There’s no particular overhead to it. You put a little data in it, it’s fast. You put in a lot of data, well, at least it has indexes. That should do better than you filtering an array by hand anyway. The thing is really lightweight. -DataScript intention is to be a basic building block in client-side applications that needs to track a lot of state during their lifetime. There’s a lot of benefits:+The intention with DataScript is to be a basic building block in client-side applications that needs to track a lot of state during their lifetime. There’s a lot of benefits: -- Central, uniform approach to manage all application state. Clients to work with state become decoupled and independent: rendering, server sync, undo/redo do not interfere with each other.-- Immutability simplifies things even in single-threaded browser environment. Keep track of app state evolution, rewind to any point in time, always render consistent state, sync in background without locking anybody.+- Central, uniform approach to manage all application state. Clients working with state become decoupled and independent: rendering, server sync, undo/redo do not interfere with each other.+- Immutability simplifies things even in a single-threaded browser environment. Keep track of app state evolution, rewind to any point in time, always render consistent state, sync in background without locking anybody. - Datalog query engine to answer non-trivial questions about current app state. - Structured format to track data coming in and out of DB. Datalog queries can be run against it too. -Also check out blog post about [how DataScript fits into current webdev ecosystem](http://tonsky.me/blog/decomposing-web-app-development/).+Also check out these blog post about [how DataScript fits into current webdev ecosystem](http://tonsky.me/blog/decomposing-web-app-development/)."
https://api.github.com/repos/tonsky/datascript/pulls/195,94037837,"@@ -187,23 +187,25 @@    trying to stick to (min+max)/2""   [min-len max-len arr]   (let [chunk-len avg-len-        len       (da/alength arr)-        acc       (transient [])]+        len (da/alength arr)+        acc #?(:clj (java.util.ArrayList. ^int max-len) ;; will be ok if too large"
https://api.github.com/repos/tonsky/datascript/pulls/185,239514946,"@@ -1109,8 +1109,8 @@               (and (ref? db a) (tx-id? v))                 (recur (allocate-eid report v (current-tx report)) (cons [op e a (current-tx report)] entities)) -              (tempid? e)-                (if (not= op :db/add)+              (and (tempid? e) (some #(= op %) [:db/add :db.fn/call :db.fn/cas :db/cas :db/retract :db.fn/retractAttribute :db.fn/retractEntity]))"
https://api.github.com/repos/tonsky/datascript/pulls/343,388563784,"@@ -219,5 +219,24 @@               ""X"")          #{[""abcX""] [""aXb""]}))) +(deftest test-reverse-refs+  (let [db  (-> (d/empty-db {:nested/root {:db/valueType :db.type/ref}})+                (d/db-with [{:db/id    1+                             :db/ident :root}+                            {:db/id       2+                             :nested/root :root}+                            {:db/id       3+                             :nested/root :root}+                            {:foo :bar}]))]+    (testing :literal+      (is (= #{[1 2] [1 3]} (d/q '[:find ?e ?v+                                   :where [?e :nested/_root ?v]]+                                 db))))+    (testing :arg"
https://api.github.com/repos/tonsky/datascript/pulls/370,538723618,"@@ -332,14 +332,20 @@     (if (nil? y) 0       (compare x y)))) +(def cljc-class #?(:cljs type :default class))+ (defn value-compare [x y]"
https://api.github.com/repos/tonsky/datascript/pulls/384,564452096,"@@ -223,6 +223,9 @@     (FilteredDB. db #(pred db %) (atom 0))))  +(def filter-materialized #'db/filter-materialized)"
https://api.github.com/repos/tonsky/FiraCode/pulls/160,57263649,"@@ -4,18 +4,17 @@  ### Problem -Programmers use a lot of symbols, often encoded with several characters. For human brain sequences like `->`, `<=` or `:=` are single logical token, even if they take two or three places on the screen. Your eye spends non-zero amount of energy to scan, parse and join multiple characters into a single logical one. Ideally, all programming languages should be designed with full-fledged Unicode symbols for operators, but that’s not the case yet.+Programmers use a lot of symbols, often encoded with several characters. For the human brain, sequences like `->`, `<=` or `:=` are interpreted as single logical tokens, even if they take two or three characters on the screen. Your eye spends a non-zero amount of energy to scan, parse and join multiple characters into a single logical one. Ideally, all programming languages should be designed with full-fledged Unicode symbols for operators, but that’s not the case yet.  ### Solution  #### Download [Fira Code v1.102](https://github.com/tonsky/FiraCode/releases/download/1.102/FiraCode_1.102.zip) | Follow updates 📢 [@FiraCode](https://twitter.com/FiraCode) --Fira Code is a Fira Mono font extended with a set of ligatures for common programming multi-character combinations. This is just a font rendering feature: underlying code remains ASCII-compatible. This helps to read and understand code faster. For some frequent sequences like `..` or `//` ligatures allow us to correct spacing.+Fira Code is an extension of the Fira Mono font containing a set of ligatures for common programming multi-character combinations. This is just a font rendering feature: underlying code remains ASCII-compatible. This helps to read and understand code faster. For some frequent sequences like `..` or `//`, ligatures allow us to correct spacing.  <img src=""./showcases/all_ligatures.png"" /> -### Terminals support+### Terminal support"
https://api.github.com/repos/tonsky/FiraCode/pulls/168,59652786,"@@ -49,24 +49,25 @@ Work | Don’t work **Mancy** | **Meld** | **Mousepad** |-**Notepad** (Win) |+**Notepad** (Windows) | **QtCreator** |  **RStudio** ([instructions](https://github.com/tonsky/FiraCode/wiki/RStudio-instructions)) | **Scratch** | **TextAdept** (Linux, Mac) |+**TextEdit** (Mac OS X text editor) | **TextMate 2** | **Visual Studio 2015** | **Visual Studio Code** ([instructions](https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions)) | **Xamarin Studio/Monodevelop** | **Xcode** (with [this plugin](https://github.com/robertvojta/LigatureXcodePlugin)) |-Probably work: **Smultron, Vico** |+Probably works: **Smultron, Vico** |  ### Browser support -- IE 10+, Edge: enable with `font-feature-settings: ""calt"" 1;`+- IE 10+ and Edge: enable with `font-feature-settings: ""calt"" 1;` - Firefox - Safari-- Chromium-based browsers: enable with  `font-variant-ligatures: contextual;` or `text-rendering: optimizeLegibility` (see [571246](https://code.google.com/p/chromium/issues/detail?q=font-variant-ligatures&id=571246&thanks=571246&ts=1450553433&))+- Chromium-based browsers (like Chrome, most Android browsers, and Opera): enable with  `font-variant-ligatures: contextual;` or `text-rendering: optimizeLegibility` (see [bug 571246](https://code.google.com/p/chromium/issues/detail?q=font-variant-ligatures&id=571246&thanks=571246&ts=1450553433&))"
https://api.github.com/repos/tonsky/FiraCode/pulls/374,103672692,"@@ -0,0 +1,25 @@+{+  ""name"": ""firacode"",+  ""version"": ""1.205.0"",+  ""description"": ""Fira Code: monospaced font with programming ligatures"",+  ""keywords"": [+    ""font"",+    ""Mozilla Fira Type Family"",+    ""Fira"",+    ""FiraMono""+  ],+  ""repository"": {+    ""type"": ""git"",+    ""url"": ""git+https://github.com/tonsky/FiraCode.git""+  },+  ""author"": {+    ""name"": ""Nikita Prokopov"",+    ""email"": ""prokopov@gmail.com""+  },+  ""license"": ""SIL OPEN FONT LICENSE Version 1.1"","
https://api.github.com/repos/tonsky/FiraCode/pulls/497,141386630,"@@ -59,10 +59,10 @@ Swift: | **Konsole**      | **Cmder**          | | **QTerminal**    | **ConEmu**         | | **Terminal.app** (OS X default terminal)    | **GNOME Terminal** |-| **Termux** (Android terminal emulator) | **iTerm 2** ([coming in 3.1](https://gitlab.com/gnachman/iterm2/issues/3568#note_13118332))  |+| **Termux** (Android terminal emulator) |     | | **upterm**       | **mate-terminal** | | **ZOC** (macOS)  | **mintty** |-|                  | **PuTTY**           |+| **iTerm 2** ([since in 3.1](https://gitlab.com/gnachman/iterm2/issues/3568#note_13118332)) | **PuTTY**           |"
https://api.github.com/repos/tonsky/FiraCode/pulls/518,147585374,"@@ -56,19 +56,23 @@ Swift:  ### Terminal support -| Works            | Doesn’t work       |-| ---------------- | ------------------ |-| **Butterfly**    | **Alacritty**      |-| **Hyper.app**    | **cmd.exe**        |-| **Konsole**      | **Cmder**          |-| **QTerminal**    | **ConEmu**         |-| **Terminal.app** | **GNOME Terminal** |-| **Termux**       | **mate-terminal**  |-| **upterm**       | **mintty**         |-| **ZOC** (macOS)  | **PuTTY**          |-| **iTerm 2** ([since 3.1](https://gitlab.com/gnachman/iterm2/issues/3568#note_13118332)) | **rxvt** |-|                  | **ZOC** (Windows)  |-|                  | **gtkterm, guake, LXTerminal, sakura, Terminator, xfce4-terminal,** and other libvte-based terminals ([bug report](https://bugzilla.gnome.org/show_bug.cgi?id=584160)) |+### Works++**[Butterfly][butterfly]**, **Hyper.app**, **Konsole**, **QTerminal**,"
https://api.github.com/repos/tonsky/FiraCode/pulls/1133,500411276,"@@ -167,7 +167,7 @@ code { font-family: 'Fira Code', monospace; } - ACE - CodeMirror (enable with `font-variant-ligatures: contextual;`) -### Projects using Fira Code+### Projects using the Fira Code"
https://api.github.com/repos/tonsky/FiraCode/pulls/1366,800256669,"@@ -21,7 +21,7 @@ Unicode: - Added U+220E End of Proof `∎` #1115 - Added U+FFFD Replacement Character `�` #1137, thanks @gjvnq - Added U+EE00..U+EE0B Progress Bar `` #1182-- Added U+2237 Propotion `∷` #1219+- Added U+2237 Proportion `∷` #1219"
https://api.github.com/repos/tonsky/FiraCode/pulls/1387,825113835,"@@ -0,0 +1,28 @@+#!/bin/bash+set -o errexit -o nounset -o pipefail+cd ""$(dirname ""$0"")/..""++glyphs_file=${FIRACODE_GLYPHS_FILE:-""FiraCode.glyphs""}++code_blocks=()++for feat in ""$@""; do++	file=""features/${feat}.fea""+	if [ ! -f ""${file}"" ]; then+		echo ""Error: No file for feature ${feat} found!"" >&2+		exit 1+	fi++	# don't grab the ""lookup"" surroundings or comments or whitespace lines+	code=""$(grep -v '^[[:space:]]*lookup\|^[[:space:]]*}\|^[[:space:]]*#\|^[[:space:]]*$' ""${file}"")"" \+		|| { echo ""Error: No code for feature ${feat} found!"" >&2; exit 1; }++	code_blocks+=(""$(tr '\n' ' ' <<< ""${code}"")"")+done++# code block is one line above name declaration+linenum=$(sed -n ""/name = calt;/="" ""${glyphs_file}"")+linenum=$((linenum - 1))+# replace end of line ("";) with code on specified line number+sed -i -e ""${linenum}s@\"";\$@\n${code_blocks[*]}\"";@"" ""${glyphs_file}"""
https://api.github.com/repos/tonsky/FiraCode/pulls/1438,918094115,"@@ -95,7 +95,7 @@ Unicode coverage makes Fira Code a great choice for mathematical writing: | **Android Studio** (2.3+, [instructions](https://github.com/tonsky/FiraCode/wiki/IntelliJ-products-instructions)) | **Adobe Dreamweaver** | | **Anjuta** (unless at the EOF) | **Delphi IDE** | | **AppCode** (2016.2+, [instructions](https://github.com/tonsky/FiraCode/wiki/IntelliJ-products-instructions)) | Standalone **Emacs** ([workaround](https://github.com/tonsky/FiraCode/wiki/Emacs-instructions)) |-| **Atom** 1.1 or newer ([instructions](https://github.com/tonsky/FiraCode/wiki/Atom-instructions)) | **Godot** ([issue](https://github.com/godotengine/godot/issues/9961)) |+| **Atom** 1.1 or newer ([instructions](https://github.com/tonsky/FiraCode/wiki/Atom-instructions)) |"
https://api.github.com/repos/tonsky/FiraCode/pulls/1518,1156036769,"@@ -4,20 +4,33 @@    [fira-code.coll :as coll]    [fira-code.glyphs :as glyphs])) +(def expected-widths #{""0"" 0 1200})+ (defn width-ok? [w]-  (#{""0"" 0 1200} w))+  (expected-widths w))  (defn widths [font]-  (doseq [g     (:glyphs font)-          :when (not= ""0"" (:export g))-          :let  [[w & _ :as ws] (mapv :width (:layers g))]]-    (when-not (apply = ws) -      (println (str ""WARN glyph '"" (:glyphname g) ""' has different widths="" (pr-str ws))))-    (when-not (width-ok? w)-      (println (str ""WARN glyph '"" (:glyphname g) ""' has unexpected width="" (pr-str w)))))-  font)+  (let [warnings (for [g (:glyphs font)+                       :when (not= ""0"" (:export g))+                       :let [ws (mapv :width (:layers g))]]+                   (cond+                     (not (apply = ws))+                     (str ""Glyph '"" (:glyphname g) ""' has different widths: "" (pr-str ws))++                     (not (width-ok? (first ws)))+                     (str ""Glyph '"" (:glyphname g) ""' has unexpected width: "" (pr-str (first ws)))++                     :else nil))]+    (remove nil warnings)))"
https://api.github.com/repos/venantius/ultra/pulls/58,65096828,"@@ -0,0 +1,44 @@+(ns ultra.test.logic+  (:require [clojure.test :as test]+            [clojure.string :as s]+            [ultra.printer :refer [cprint]]+            [ultra.test.diff :refer [pretty]]))++(def logic-ops"
https://api.github.com/repos/venantius/ultra/pulls/73,122086150,"@@ -43,6 +44,19 @@         (diff/print-expected actual expected))       (logic/maybe-print-values event))) +(defmethod report :error [m]"
https://api.github.com/repos/venantius/ultra/pulls/94,236541626,"@@ -96,6 +92,30 @@ The text placed between a map key and a collection value. The keyword :line will  If set to a positive number, then lists will only render at most the first n elements. This can help prevent unintentional realization of infinite lazy sequences. +### Using CIDER alongside Ultra++Projects which extend the Clojure REPL will conflict with each other; a middleware which modifies REPL print output will break the assumption of another middleware expecting unmodified Clojure output. Specifically, Ultra and CIDER collide on certain test result values ([#79](https://github.com/venantius/ultra/issues/79)).++Use either CIDER or Ultra, but not both. Configure `cider-jack-in` to skip the Leiningen user profile, and therefore skip using Ultra, in .emacs:++```emacs+; Skip :user section of ~/.lein/profiles.clj when using cider-jack-in.+(setq cider-lein-parameters+      ""with-profile -user repl :headless :host localhost"")+```++If you have a lein user profile intended to alter CIDER's behavior, consider these options:"
https://api.github.com/repos/walmartlabs/lacinia/pulls/12,107993819,"@@ -85,47 +94,110 @@             }           }"") -(def parsed-query (parser/parse-query compiled-schema query-raw))+(def ^:private benchmark-queries+  {:introspection+   {:query introspection-query-raw}+   :basic+   {:query ""{+   default: human { name appears_in friends { name } home_planet }+   hope_hero: hero(episode: NEWHOPE) { id name friends { name }}+   }""}+   :basic-vars+   {:query ""query ($ep : episode!) {+   default: human { name appears_in friends { name } home_planet }+   hope_hero: hero(episode: $ep) { id name friends { name }}+   }"""
https://api.github.com/repos/walmartlabs/lacinia/pulls/14,108246879,"@@ -18,3 +18,7 @@ date,commit,kind,parse,exec 20170324,1b7f456c,introspection,2.0246591950333332,3.4602085544289043 20170324,1b7f456c,basic,0.5015100832206664,0.24973527992753625 20170324,1b7f456c,basic-vars,0.6428995111702128,0.25122130674037674+20170324,cae8f794,introspection,2.0250440356182797,3.178506137552083+20170324,cae8f794,basic,0.4980364009556764,0.24132741184534814+20170324,cae8f794,basic-vars,0.6358850933709745,0.24591709582839535+20170324,cae8f794,errors,0.23813962460006155,6.3390120183333325"
https://api.github.com/repos/walmartlabs/lacinia/pulls/24,108660878,"@@ -445,12 +445,11 @@ z           resolver-errors (when is-tuple?                             (resolve-errors raw-value))           enforced-tuple (enforcer [enforce-value])-          all-errors (->> (concat-                            (ensure-seq resolver-errors)-                            (ensure-seq (second enforced-tuple)))-                          (filter some?)-                          (mapcat assert-and-wrap-error)-                          seq)]+          all-errors (->> (sequence (comp cat"
https://api.github.com/repos/walmartlabs/lacinia/pulls/31,110001392,"@@ -228,49 +221,109 @@ ;; such as a union-vs-union (the field union must be a subset of the interface union), ;; or interface-union (all members of the union must implement the interface). -(defn ^:private is-compatible-type? [schema i-type-name f-type-name]-  (or (= i-type-name f-type-name)-      (check-compatible (get schema i-type-name)-                        (get schema f-type-name))))+(defn ^:private is-compatible-type?+  ""Compares two field type maps (on from the interface, one from the object) for compatibility.""+  [schema interface-type object-type]+  (let [i-kind (:kind interface-type)+        o-kind (:kind object-type)+        i-type (:type interface-type)+        o-type (:type object-type)]+    (cond+      ;; When the object field is non-null and the interface field allows nulls that's ok,+      ;; the object can be more specific than the interface.+      (and (= o-kind :non-null)+           (not= i-kind :non-null))+      (recur schema i-kind o-type)++      ;; Otherwise :list must match :list, and :root must match :root,+      ;; and :non-null must match :non-null+      (not= o-kind i-kind)+      false++      ;; For :list and :non-null, they match, move down a level, towards :root+      (#{:list :non-null} o-kind)+      (recur schema i-type o-type)++      ;; Shortcut the compatible type check if the exact same type+      (= i-type o-type)+      true++      :else+      (check-compatible (get schema i-type)+                        (get schema o-type)))))  (defn ^:private is-assignable?   ""Returns true if the object field is type compatible with the interface field.""   [schema interface-field object-field]-  (and (= (:multiple? interface-field) (:multiple? object-field))-       (= (:non-nullable? interface-field) (:non-nullable? object-field))-       (is-compatible-type? schema (:type interface-field) (:type object-field))))+  (let [interface-type (:type interface-field)+        object-type (:type object-field)]+    (or (= interface-type object-type)+        (is-compatible-type? schema interface-type object-type))))  ;;------------------------------------------------------------------------------- ;; ## Types -(defn ^:private rewrite-type-  ""Rewrites the :type tag of a field (or an argument) into three keys: :type (just the keyword),-  :non-nullable? and :multiple?.""-  [field]-  ;; TODO: This doesn't handle some variations, since either/both of-  ;; the list and the elements of the list may be non-nullable.-  ;; This applies non-nullable? only to the elements of a list, not to the list-  ;; itself.--  (loop [result (assoc field :multiple? false :non-nullable? false)-         term (:type field)]-    (cond-let+(defn ^:private expand-type+  ""Compiles a type from the input schema to the format used in the+  compiled schema.""+  ;; TODO: This nested maps format works, but given the simple modifiers+  ;; we have, just converting from nested lists to a flattened vector+  ;; might work just as well. It would also make finding the root type+  ;; cheap: just use last.+  [type]+  (cond+    (list? type)+    (let [[modifier next-type & anything-else] type+          kind (get {'list :list+                     'non-null :non-null} modifier)]"
https://api.github.com/repos/walmartlabs/lacinia/pulls/35,110249042,"@@ -2,7 +2,6 @@   (:require     [clojure.test :refer [is]]     [clojure.spec.test :as stest]-    flatland.ordered.map"
https://api.github.com/repos/walmartlabs/lacinia/pulls/36,110260291,"@@ -0,0 +1,151 @@+(ns com.walmartlabs.lacinia.custom-scalars-test+  (:require  [clojure.test :as t]+             [clojure.spec :as s]+             [clojure.test :refer [deftest is testing]]+             [com.walmartlabs.lacinia :as lacinia]+             [com.walmartlabs.lacinia.schema :as schema]+             [com.walmartlabs.test-schema :refer [test-schema]]+             [com.walmartlabs.test-utils :refer [is-thrown instrument-schema-namespace simplify]])+  (:import (java.text SimpleDateFormat)+           (java.util Date)))++(instrument-schema-namespace)++(def default-schema (schema/compile test-schema))++(defn execute+  ""Executes the query but reduces ordered maps to normal maps, which makes+  comparisons easier.  Other tests exist to ensure that order is maintained.""+  [schema q vars context]+  (-> (lacinia/execute schema q vars context)+      simplify))++;;-------------------------------------------------------------------------------+;; ## Tests++(deftest custom-scalar-query+  (let [q ""{ now { date }}""]+    (is (= {:data {:now {:date ""A long time ago""}}}+           (execute default-schema q nil nil)))))++(deftest custom-scalars+  (testing ""custom scalars defined as conformers""+    (let [parse-conformer (s/conformer+                           (fn [x]+                             (prn ""qoooooooo"")"
https://api.github.com/repos/walmartlabs/lacinia/pulls/37,110485812,"@@ -208,7 +208,7 @@                  id                }              }""]-      (is (= {:data nil}"
https://api.github.com/repos/walmartlabs/lacinia/pulls/39,111453460,"@@ -259,21 +237,38 @@  (def ^:private dataset-file ""perf/benchmarks.csv"") +(defn read-dataset+  []+  (let [[header-row & raw-data]+        (-> (io/file dataset-file)+            io/reader+            csv/read-csv)+        parse-double (fn [row ix]+                       (update row ix #(Double/parseDouble %)))]+    (into [header-row]+          (->> raw-data+               (mapv #(parse-double % 3))+               (mapv #(parse-double % 4))))))+ (defn run-benchmarks [options]"
https://api.github.com/repos/walmartlabs/lacinia/pulls/40,111600961,"@@ -0,0 +1,39 @@+#!/usr/local/bin/Rscript "
https://api.github.com/repos/walmartlabs/lacinia/pulls/43,113060800,"@@ -68,10 +68,10 @@   : Additional data that will ultimately be passed to resolver functions.    This function parses the query and invokes [[execute-parsed-query]].""-  [schema query variables context]+  [schema query variables context & [operation-name]]"
https://api.github.com/repos/walmartlabs/lacinia/pulls/47,113203325,"@@ -491,33 +491,43 @@   ""Checks result against variable kind, iterates over nested types, and applies respective   actions, if necessary, e.g. parse for custom scalars.""   [schema result argument-type arg-value]-  (let [nested-type (:type argument-type)-        scalar-type? (and (= :root (:kind argument-type))-                          (scalar? (get schema nested-type)))-        list-type? (= :list (:kind argument-type))-        non-null-kind? (= :non-null (:kind argument-type))]-    (cond-      ;; we can only hit this if we iterate over list members-      (and (nil? result) non-null-kind?)-      (throw-exception (format ""Variable %s contains null members but supplies the value for a list that can't have any null members.""-                               (q arg-value))-                       {:variable-name arg-value})+  (cond-let+    :let [nested-type (:type argument-type)+          kind (:kind argument-type)] -      list-type?-      (if (not (sequential? result))-        (throw-exception (format ""Variable %s doesn't contain the correct number of (nested) lists.""-                                 (q arg-value))-                         {:variable-name arg-value})-        (mapv #(process-result schema % nested-type arg-value) result))+         ;; we can only hit this if we iterate over list members"
https://api.github.com/repos/walmartlabs/lacinia/pulls/50,113700159,"@@ -89,6 +89,12 @@                          :value value                          :value-meta (meta value)}))))) +(defmacro ^:private now"
https://api.github.com/repos/walmartlabs/lacinia/pulls/49,113939497,"@@ -3,17 +3,21 @@             [com.walmartlabs.lacinia.constants :as constants]             [com.walmartlabs.lacinia.executor :as executor]             [com.walmartlabs.lacinia.validator :as validator]-            [com.walmartlabs.lacinia.internal-utils :refer [cond-let to-message]])+            [com.walmartlabs.lacinia.internal-utils :refer [cond-let to-message]]+            [com.walmartlabs.lacinia.resolve :as resolve])   (:import (clojure.lang ExceptionInfo)))  (defn ^:private as-errors   [exception]   [(merge {:message (to-message exception)}           (ex-data exception))]) -(defn execute-parsed-query+(defn execute-parsed-query-async   ""Prepares a query, by applying query variables to it, resulting in a prepared-  query which is then executed.""+  query which is then executed.++  Returns a [[ResolverResult]] around the response value (with :data and/or :errors keys)."""
https://api.github.com/repos/walmartlabs/lacinia/pulls/54,114444418,"@@ -14,7 +14,7 @@     [com.walmartlabs.lacinia.internal-utils      :refer [map-vals map-kvs filter-vals deep-merge q              is-internal-type-name? sequential-or-set? as-keyword-             combine-results]]+             combine-results cond-let]]"
https://api.github.com/repos/walmartlabs/lacinia/pulls/57,115376861,"@@ -10,6 +10,7 @@                  [org.flatland/ordered ""1.5.4""                   :exclusions [org.clojure/tools.macro]]]   :profiles {:dev {:dependencies [[criterium ""0.4.4""]+                                  [org.clojure/test.check ""0.9.0""]"
https://api.github.com/repos/walmartlabs/lacinia/pulls/59,115624200,"@@ -104,64 +100,63 @@   Any resolve errors are enhanced with details about the selection and accumulated in   the execution context.""   [execution-context field-selection]-  (let [container-value (:resolved-value execution-context)]-    (if (= :field (:selection-type field-selection))-      (let [timings (:timings execution-context)-            {:keys [arguments]} field-selection-            {:keys [context]} execution-context-            schema (get context constants/schema-key)-            resolve-context (assoc context :com.walmartlabs.lacinia/selection field-selection)-            field-resolver (field-selection-resolver schema field-selection container-value)-            start-ms (when (and (some? timings)-                                (not (-> field-resolver meta ::schema/default-resolver?)))-                       (System/currentTimeMillis))-            resolver-result (try-                              (field-resolver resolve-context arguments container-value)-                              (catch Throwable t-                                (resolve/resolve-as nil-                                                    (assoc (ex-data t)-                                                           :message (to-message t)))))-            final-result (resolve/resolve-promise)]-        (resolve/on-deliver! resolver-result-                             (fn [resolved-value resolve-errors]-                               (when start-ms-                                 (let [finish-ms (System/currentTimeMillis)-                                       elapsed-ms (- finish-ms start-ms)-                                       timing {:start start-ms-                                               :finish finish-ms-                                               ;; This is just a convienience:-                                               :elapsed elapsed-ms}]-                                   ;; The extra key is to handle a case where we time, say, [:hero] and [:hero :friends]-                                   ;; That will leave :friends as one child of :hero, and :execution/timings as another.-                                   ;; The timings are always a list; we don't know if the field is resolved once,-                                   ;; resolved multiple times because it is inside a nested value, or resolved multiple-                                   ;; times because of multiple top-level operations.-                                   (swap! timings-                                          update-in (conj (:query-path field-selection) :execution/timings)-                                          (fnil conj []) timing)))--                               (when-let [errors (-> resolve-errors-                                                     assert-and-wrap-error-                                                     seq)]-                                 (swap! (:errors execution-context) into-                                        (enhance-errors field-selection errors)))-                               ;; That's it for handling errors, so just resolve the value and-                               ;; not the errors.-                               (resolve/deliver! final-result resolved-value)))-        final-result)-      ;; Else, not a field selection, but a fragment selection, which starts with the-      ;; same resolved value as the containing field or selection.-      (resolve/resolve-as container-value))))+  (let [timings (:timings execution-context)"
https://api.github.com/repos/walmartlabs/lacinia/pulls/61,116068604,"@@ -515,29 +513,43 @@       (throw-exception (format ""Variable %s doesn't contain the correct number of (nested) lists.""                                (q arg-value))                        {:variable-name arg-value})-      (mapv #(process-result schema % nested-type arg-value) result))+      (mapv #(determine-result-type schema % nested-type arg-value) result))      (nil? result)     nil      (map? nested-type)     (recur schema result nested-type arg-value) -    :let [category (when (= :root kind)-                     (get-in schema [nested-type :category]))]+    :let [category (get-in schema [nested-type :category])]      (= category :scalar)-    (process-literal-argument schema {:type argument-type} [:scalar result])+    [:scalar result]      ;; enums have to be handled carefully because they are likely strings in     ;; the variable map.      (= category :enum)-    (process-literal-argument schema {:type argument-type} [:enum (as-keyword result)])+    [:enum (as-keyword result)]++    (= category :input-object)+    [:object (let [object-fields (get-in schema [nested-type :fields])]+               (reduce (fn [acc k]+                         (let [v (get result k)+                               field-type (get object-fields k)]+                           (assoc acc k (determine-result-type schema v field-type arg-value))))+                       {}+                       (keys result)))]      :else     (throw (IllegalStateException. ""Sanity check - no option in process-result.""))))"
https://api.github.com/repos/walmartlabs/lacinia/pulls/63,116560472,"@@ -7,6 +7,11 @@ The old behavior is still available via an option to  Please update your applications carefully. +`compile` now has a new option, `:decorator`."
https://api.github.com/repos/walmartlabs/lacinia/pulls/68,117344278,"@@ -0,0 +1,83 @@+(ns com.walmartlabs.lacinia.selections-tests+  (:require+    [clojure.test :refer [deftest is]]+    [com.walmartlabs.lacinia.parser :as parser]+    [com.walmartlabs.lacinia.executor :as executor]+    [com.walmartlabs.test-utils :refer [default-schema]]+    [com.walmartlabs.lacinia.constants :as constants]))++(defn ^:private app-context+  [query]+  (let [parsed-query (parser/parse-query default-schema query)]+    {constants/parsed-query-key parsed-query+     constants/selection-key (-> parsed-query :selections first)}))+++(defn ^:private root-selections+  [query]+  (-> query+      app-context+      executor/selections-seq))++(deftest simple-cases+  (is (= [:character/name]+         (root-selections ""{ hero { name }}"")))++  (is (= [:human/name :human/homePlanet]+         (root-selections ""{ human { name homePlanet }}"")))++  (is (= [:human/name :human/friends :human/enemies+          :character/name                                   ; friends+          :character/appears_in+          :character/name]                                  ; enemies"
https://api.github.com/repos/walmartlabs/lacinia/pulls/73,118520621,"@@ -236,6 +254,16 @@              }            }""]     (is (= {:data {:luke {:name ""Luke Skywalker""}}}+           (execute default-schema q nil nil))))+  (let [q ""query FetchLukeAliased {+             luke: human(id: \""1000\"") {"
https://api.github.com/repos/walmartlabs/lacinia/pulls/79,121180115,"@@ -0,0 +1,137 @@+(ns com.walmartlabs.lacinia.merge-selections-test+  ""Queries may include the same fields (with or without aliases) repeated multiple times and they should merge together.++  Earlier versions of Lacinia would tend to overwrite the earlier fields with the later ones.""+  (:require+    [clojure.test :refer [deftest is]]+    [com.walmartlabs.test-utils :refer [default-schema execute]]))++(defn ^:private q+  ([query-string]+   (q query-string nil))+  ([query-string vars]+   (execute default-schema query-string vars nil)))++(deftest immediate-field-merge+  ;; Default for human is 1001 - Darth Vader+  (is (= {:data {:human {:name ""Darth Vader""+                         :homePlanet ""Tatooine""}}}+         (q ""+{+  human { name }+  human { homePlanet }+}""))))++(deftest understands-aliases+  ;; Default for human is 1001 - Darth Vader+  (is (= {:data {:darth {:name ""Darth Vader""+                         :homePlanet ""Tatooine""}}}+         (q ""+{+  darth: human { name }+  darth: human { homePlanet }"
https://api.github.com/repos/walmartlabs/lacinia/pulls/84,122494865,"@@ -38,9 +38,7 @@     (resolve/resolve-as {:errors validation-errors})      :else-    (executor/execute-query (assoc context-                                   constants/schema-key schema"
https://api.github.com/repos/walmartlabs/lacinia/pulls/89,125101079,"@@ -0,0 +1,34 @@+Application Context+===================++The application context passed to your field resolvers is normally set by the initial call to+`com.walmartlabs.lacina/execute-query`.+Lacinia uses the context for its own book-keeping (they keys it places into the map are namespaced to+avoid collisions) but otherwise the same map is passed to all field resolvers.++In specific cases, it is useful to allow a field resolver to modify the application context, with the change+exposed just to the fields nested below, but to any depth.++For example, in this query::++  {+    products(search: ""fuzzy"") {+      category {+        name+        product {+          upc+          name+          highlighted_name+        }+     }+  }++Here, the search term is provided to the ``products`` field, but is again needed by the ``highlighted_name``+field, to highlight the parts of the name that match the search term.++The resolver for the ``product`` field can communicate this ""down tree"" to the resolver for the ``highlighted_name`` field:++.. literalinclude:: /_examples/mutable-context.edn+   :language: clojure++This new key, ``::search-term`` is only present in the context below ``products`` field."
https://api.github.com/repos/walmartlabs/lacinia/pulls/92,125911599,"@@ -250,89 +257,97 @@ ;;------------------------------------------------------------------------------- ;; ## Validations -;; This can be expanded at some point-(s/def :type/type some?)-(s/def :type/arg (s/keys :req-un [:type/type]-                         :opt-un [:type/description]))-(s/def :type/args (s/map-of keyword? :type/arg))-;; TODO: No longer accurate, :resolve must always be a function is present.-(s/def :type/resolve (s/or :type/resolve-keyword keyword?-                           :type/resolve-callback fn?))-(s/def :type/field (s/keys :opt-un [:type/description-                                    :type/resolve-                                    :type/args]-                           :req-un [:type/type]))-(s/def :type/fields (s/map-of keyword? :type/field))-(s/def :type/implements (s/coll-of keyword?))-(s/def :type/description string?)-(s/def :type/object (s/keys :req-un [:type/fields]-                            :opt-un [:type/implements-                                     :type/description]))-(s/def :type/interface (s/keys :opt-un [:type/description-                                        :type/fields]))+(s/def ::type (s/or :base-type schema-reference?+                    :complex-type (s/cat :modifier #{'list 'non-null}"
https://api.github.com/repos/walmartlabs/lacinia/pulls/102,129449158,"@@ -233,6 +242,43 @@                             :resolve (fn [_ _ _]                                        ""<Single Value>"")}}} +    :villain"
https://api.github.com/repos/walmartlabs/lacinia/pulls/101,129975096,"@@ -119,7 +130,10 @@         (deliver *result resolved-value)          (when (realized? *callback)-          (@*callback resolved-value))+          (let [callback @*callback]+            (if-some [^Executor executor *callback-executor*]"
https://api.github.com/repos/walmartlabs/lacinia/pulls/106,131022420,"@@ -971,24 +971,43 @@   [schema object options]   (verify-fields-and-args schema object)   (doseq [interface-name (:implements object)-          :let [interface (get schema interface-name)]+          :let [interface (get schema interface-name)+                type-name (:type-name object)]           [field-name interface-field] (:fields interface)-          :let [object-field (get-in object [:fields field-name])]]--    ;; TODO: I believe we are missing a check that arguments on the field are-    ;; compatible with arguments on the interface field.+          :let [object-field (get-in object [:fields field-name])+                interface-field-args (:args interface-field)+                object-field-args (:args object-field)]]      (when-not object-field       (throw (ex-info ""Missing interface field in object definition.""-                      {:object (:type-name object)+                      {:object type-name                        :field-name field-name                        :interface-name interface-name})))      (when-not (is-assignable? schema interface-field object-field)       (throw (ex-info ""Object field is not compatible with extended interface type.""-                      {:object (:type-name object)+                      {:object type-name                        :interface-name interface-name-                       :field-name field-name}))))+                       :field-name field-name})))++    (when interface-field-args+      (doseq [interface-field-arg interface-field-args+              :let [[arg-name interface-arg-def] interface-field-arg+                    object-field-arg-def (get object-field-args arg-name)]]++        (when-not object-field-arg-def+          (throw (ex-info ""Missing interface field argument in object definition.""+                          {:object type-name+                           :field-name field-name+                           :interface-name interface-name+                           :argument-name arg-name})))++        (when-not (is-assignable? schema interface-arg-def object-field-arg-def)+          (throw (ex-info ""Object field's argument is not compatible with extended interface's argument type.""+                          {:object type-name+                           :interface-name interface-name+                           :field-name field-name+                           :argument-name arg-name}))))))"
https://api.github.com/repos/walmartlabs/lacinia/pulls/107,132798414,"@@ -1050,8 +1052,9 @@   ""The default for the :default-field-resolver option, this uses the field name as the key into   the resolved value.""   [field-name]-  ^ResolverResultImpl"
https://api.github.com/repos/walmartlabs/lacinia/pulls/111,135899059,"@@ -130,6 +130,19 @@     (schema/tag-with-type v type)     v)) +(deftest variables-with-escape-sequences+  (let [value (atom nil)+        schema (schema/compile+                {:objects {:value {:fields {:value {:type 'String}}}}+                 :mutations {:change {:type :value+                                      :args {:newValue {:type 'String}}+                                      :resolve (fn [ctx args v]+                                                 (reset! value (:newValue args))+                                                 {:value @value})}}})+        q (parser/parse-query schema ""mutation ($ValueArg: String) { change(newValue: $ValueArg) { value }}"")]+    (is (= (execute-parsed-query q {:ValueArg ""\\\""\\u2B50\\\""""} nil)"
https://api.github.com/repos/walmartlabs/lacinia/pulls/113,137875188,"@@ -0,0 +1,208 @@+grammar GraphqlSchema;"
https://api.github.com/repos/walmartlabs/lacinia/pulls/155,159557490,"@@ -325,7 +330,7 @@      (let [object-fields (:fields schema-type)           default-values (collect-default-values object-fields)-          required-keys (keys (filter-vals :non-nullable? object-fields))+          required-keys (keys (filter-vals non-null-kind? object-fields))"
https://api.github.com/repos/walmartlabs/lacinia/pulls/159,162221426,"@@ -1210,20 +1214,16 @@   ([schema]    (compile schema nil))   ([schema options]+   ;; This is based on clojure.spec's assert, but is always on+   ;; the single branch alt adds :args to the explain path as expected in tests+   (when-not (s/valid? ::compile-args [schema options])+     (let [ed (s/explain-data ::compile-args [schema options])]+       (throw (ex-info+               (str ""Spec assertion failed\n"" (with-out-str (s/explain-out ed)))"
https://api.github.com/repos/walmartlabs/lacinia/pulls/162,165715024,"@@ -39,30 +40,48 @@       (map #(type-name->schema-type schema %)            interfaces)))) +(defn ^:private is-deprecated?+  ""The :deprecated key can either be a boolean, or a string which is the deprecation reason."""
https://api.github.com/repos/walmartlabs/lacinia/pulls/176,176613646,"@@ -257,10 +258,13 @@ (s/def ::schema-key (s/and simple-keyword?                            ::graphql-identifier)) (s/def ::graphql-identifier #(re-matches graphql-identifier (name %)))-(s/def ::identifier (s/and (s/or :keyword simple-keyword?-                                 :symbol simple-symbol?)-                           graphql-identifier?))-(s/def ::type (s/or :base-type ::identifier+;; For style and/or historical reasons, type names can be a keyword or a symbol.+;; The convention is that built-in types used a symbol, and application-defined types+;; use a keyword.+(s/def ::type-name (s/and (s/or :keyword simple-keyword?"
https://api.github.com/repos/walmartlabs/lacinia/pulls/181,179902271,"@@ -1,7 +1,13 @@-{:data {:default {:name ""Darth Vader"",-                  :appears_in [""NEWHOPE"" ""EMPIRE"" ""JEDI""],"
https://api.github.com/repos/walmartlabs/lacinia/pulls/191,191944300,"@@ -20,7 +20,7 @@ See `com.walmartlabs.lacinia.parser.docs/parse-docs` and Lacinia now supports the `:roots` key in the input schema, which makes it possible to define query, mutation, or subscription operations in terms of the fields of an explicitly named object in the schema.-This aligns Lacinia better with other implementations of GraphQL.+This aligns Lacinia better withu other implementations of GraphQL."
https://api.github.com/repos/walmartlabs/lacinia/pulls/204,201446273,"@@ -55,3 +54,58 @@                     ""mutation($g : game_template) { create_game(game_data: $g) }""                     {:g {:name ""Backgammon""}}                     nil)))))+++(deftest allows-for-variables-inside-nested-objects+  (let [schema (compile-schema ""input-object-schema.edn""+                               {:queries/search (fn [_ args _]+                                                  [(pr-str args)])})]+    ;; First we make it easy, don't try to make it promote a single value to a list:+    #_(is (= {:data {:search [""{:filter {:max_count 5, :terms [\""lego\""]}}""]}}"
https://api.github.com/repos/walmartlabs/lacinia/pulls/211,202201872,"@@ -80,38 +80,6 @@                            (cond-> node                              (-> arguments :if false?) (assoc :disabled? true)))}})) -(defn ^:private name-string-from"
https://api.github.com/repos/walmartlabs/lacinia/pulls/216,203884655,"@@ -27,19 +27,24 @@ subscriptionOperationDef   ;  typeDef-  : 'type' typeName implementationDef? '{' fieldDef+ '}'+  : 'type' typeName implementationDef? fieldDefs   ; +fieldDefs"
https://api.github.com/repos/walmartlabs/lacinia/pulls/228,219815829,"@@ -24,7 +24,7 @@     [com.walmartlabs.lacinia.constants :as constants])   (:import     (clojure.lang PersistentQueue)-    (com.walmartlabs.lacinia.resolve ResolveCommand)))+    (com.walmartlabs.lacinia.resolve ResolveCommand)))resolve"
https://api.github.com/repos/walmartlabs/lacinia/pulls/236,224603098,"@@ -16,11 +16,12 @@   ""Parse a Schema Definition Language document into a Lacinia input schema.""   {:added ""0.22.0""}   (:require-    #_[io.pedestal.log :as log]+    [io.pedestal.log :as log]"
https://api.github.com/repos/walmartlabs/lacinia/pulls/246,234750718,"@@ -1,14 +1,36 @@ ## 0.31.0 -- UNRELEASED -Limited support for custom directives.+This release, regrettably, has some backwards incompatible changes (notice the `0.` at the front+of the version number).+The necessary changes to existing applications are expected to minor and localized."
https://api.github.com/repos/walmartlabs/lacinia/pulls/269,254489252,"@@ -46,17 +46,60 @@           {}           (rest prod))) +(defn is-extension?+  [v]+  (get (meta v) :extension false))++(defn ^:private merge-type-extension+  [k v org]+  (doseq [property (keys (get org :fields {}))]+    (when (contains? (get v :fields {}) property)+      (let [locations (keepv meta [org v])]+        (throw (ex-info (format ""Field %s already defined in the existing schema. It cannot also be defined in this type extension.""+                                (q (str (name k) ""/"" (name property))))"
https://api.github.com/repos/walmartlabs/lacinia/pulls/271,263278379,"@@ -1142,19 +1142,29 @@   ""Verifies that the type of every field and every field argument is valid.""   [schema object-def]   (let [directive-defs (::directive-defs schema)-        location (if (= :input-object (:category object-def))+        input-object? (= :input-object (:category object-def))+        location (if input-object?                    :input-field-definition                    :field-definition)]     (doseq [field-def (-> object-def :fields vals)             :let [field-type-name (extract-type-name (:type field-def))-                  qualified-field-name (:qualified-name field-def)]]-      (when-not (get schema field-type-name)+                  qualified-field-name (:qualified-name field-def)+                  field-type (get schema field-type-name)]]+      (when (nil? field-type)         (throw (ex-info (format ""Field %s references unknown type %s.""                                 (q qualified-field-name)                                 (q field-type-name))                         {:field-name qualified-field-name                          :schema-types (type-map schema)}))) +      (when (and (not input-object?)"
https://api.github.com/repos/walmartlabs/lacinia/pulls/277,272409579,"@@ -1,77 +0,0 @@-; Copyright (c) 2018-present Walmart, Inc."
https://api.github.com/repos/walmartlabs/lacinia/pulls/290,294023777,"@@ -18,68 +18,105 @@    [com.walmartlabs.lacinia.parser :as parser]    [com.walmartlabs.lacinia.executor :as executor]    [com.walmartlabs.test-utils :refer [compile-schema execute]]-   [com.walmartlabs.lacinia.constants :as constants]    [clojure.edn :as edn]    [com.walmartlabs.test-schema :refer [test-schema]]    [com.walmartlabs.lacinia.schema :as schema]))  (def default-schema   (schema/compile test-schema {:default-field-resolver schema/hyphenating-default-field-resolver})) -(defn ^:private app-context+(defn ^:private parse-and-wrap   ([query]-   (app-context default-schema query))+   (parse-and-wrap default-schema query))   ([schema query]    (let [parsed-query (parser/parse-query schema query)]-     {constants/parsed-query-key parsed-query-      constants/selection-key (-> parsed-query :selections first)})))+     (executor/parsed-query->context parsed-query))))   (defn ^:private root-selections   [query]   (-> query-      app-context+      parse-and-wrap       executor/selections-seq)) +(defn ^:private root-selections2+  [query]+  (-> query+      parse-and-wrap+      executor/selections-seq2))+ (defn ^:private tree   ([query]    (tree default-schema query))   ([schema query]    (->> query-        (app-context schema)+        (parse-and-wrap schema)         executor/selections-tree)))  (deftest simple-cases-  (is (= [:character/name]+  (is (= [:__Queries/hero :character/name]"
https://api.github.com/repos/walmartlabs/lacinia/pulls/301,336607360,"@@ -57,15 +57,30 @@   ""Prepares a query, by applying query variables to it, resulting in a prepared   query which is then executed. -  Returns a result map (with :data and/or :errors keys).""-  [parsed-query variables context]-  (let [result-promise (promise)-        execution-result (execute-parsed-query-async parsed-query variables context)]-    (resolve/on-deliver! execution-result-                         (fn [result]-                           (deliver result-promise result)))-    ;; Block on that deliver, then return the final result.-    @result-promise))+  Returns a result map (with :data and/or :errors keys), or an exception if+  execution failed.++  Options as per [[execute]].""+  ([parsed-query variables context]+   (execute-parsed-query parsed-query variables context nil))+  ([parsed-query variables context options]+   (let [*result (promise)+         {:keys [timeout-ms timeout-error]+          :or {timeout-ms 0+               timeout-error {:message ""Query execution timed out.""}}} options+         execution-result (execute-parsed-query-async parsed-query variables context)+         result (do+                  (resolve/on-deliver! execution-result *result)+                  ;; Block on that deliver, then return the final result.+                  (if (pos? timeout-ms)+                    (deref *result+                           timeout-ms+                           {:errors [timeout-error]})"
https://api.github.com/repos/walmartlabs/lacinia/pulls/302,338720585,"@@ -166,9 +169,12 @@              (if (compare-and-set! *state state (assoc state :resolved-value resolved-value))               (when-let [callback (:callback state)]-                (if-some [^Executor executor *callback-executor*]-                  (.execute executor (bound-fn [] (callback resolved-value)))"
https://api.github.com/repos/walmartlabs/lacinia/pulls/308,350203568,"@@ -690,22 +695,28 @@                    selector)          selector (if (= :enum category)-                   (let [possible-values (-> field-type :values set)]+                   (let [possible-values (-> field-type :values set)+                         serializer (:serialize field-type)]                      (fn validate-enum [{:keys [resolved-value]                                          :as selector-context}]                        (cond-let+                         ;; The resolver function can return a value that makes sense from+                         ;; the application's model (for example, a namespaced keyword or even a string)+                         ;; and the enum's serializer converts that to a keyword, which is then+                         ;; validated to match a known value for the enum.+                         :let [serialized (serializer resolved-value)]"
https://api.github.com/repos/walmartlabs/lacinia/pulls/323,434903376,"@@ -1,30 +1,30 @@-; Copyright (c) 2017-present Walmart, Inc.-;-; Licensed under the Apache License, Version 2.0 (the ""License"")-; you may not use this file except in compliance with the License.-; You may obtain a copy of the License at-;-;     http://www.apache.org/licenses/LICENSE-2.0-;-; Unless required by applicable law or agreed to in writing, software-; distributed under the License is distributed on an ""AS IS"" BASIS,-; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.-; See the License for the specific language governing permissions and-; limitations under the License.+;; Copyright (c) 2017-present Walmart, Inc.+;;+;; Licensed under the Apache License, Version 2.0 (the ""License"")+;; you may not use this file except in compliance with the License.+;; You may obtain a copy of the License at+;;+;;     http://www.apache.org/licenses/LICENSE-2.0+;;+;; Unless required by applicable law or agreed to in writing, software+;; distributed under the License is distributed on an ""AS IS"" BASIS,+;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+;; See the License for the specific language governing permissions and+;; limitations under the License.  (ns com.walmartlabs.lacinia.executor   ""Mechanisms for executing parsed queries against compiled schemas.""   (:require-    [com.walmartlabs.lacinia.internal-utils-     :refer [cond-let map-vals remove-vals q aggregate-results transform-result]]-    [flatland.ordered.map :refer [ordered-map]]-    [com.walmartlabs.lacinia.schema :as schema]-    [com.walmartlabs.lacinia.resolve :as resolve-     :refer [resolve-as resolve-promise]]-    [com.walmartlabs.lacinia.selector-context :as sc]-    [com.walmartlabs.lacinia.constants :as constants])+   [com.walmartlabs.lacinia.internal-utils"
https://api.github.com/repos/walmartlabs/lacinia/pulls/331,460319557,"@@ -1472,6 +1476,26 @@              __type(name: \""Filter\"") { inputFields { name defaultValue } }            }""))))) +(deftest enum-transformer-default-value+  (let [;; Create kebab-cased namespaced keywords for enum values+        parse-country     (fn [code] (keyword :country-code (str/lower-case (name code))))+        ;; upper case, non namespaced keywords are in the schema+        serialize-country (fn [code] (str/upper-case (name code)))+        schema (-> (io/resource ""enum-default-value-with-transformer-schema.edn"")"
https://api.github.com/repos/walmartlabs/lacinia/pulls/332,481343789,"@@ -73,34 +75,29 @@  (deftest timing-is-collected-when-enabled   (let [result (q ""{ root(delay: 50) { simple slow { simple }}}"" enable-timing)]-    (is (-> result :extensions :timings seq)+    (is (seq (get-in result [:extensions :tracing]))         ""Some timings were collected.""))) -(deftest does-not-collect-timing-for-default-resolvers-  (let [result (q ""{ root(delay: 50) { simple slow { simple }}}"" enable-timing)]-    (reporting result-      (is (= nil (timing-for result [:root]))))))- (deftest collects-timing-for-provided-resolvers   (doseq [delay [25 50 75]           :let [result (q (str ""{ root(delay: "" delay "") { slow { simple }}}"") enable-timing)                 slow-timing (timing-for result [:root :slow])-                {:keys [start finish elapsed]} slow-timing]]+                {:keys [parentType fieldName returnType duration]} slow-timing]]     (reporting result-      ;; Allow for a bit of overhead; Thread/sleep is quite inexact.-      (is (<= delay elapsed (* delay 10)))-      ;; Check that :start and :finish are both present and add up-      (is (= elapsed (- (Long/parseLong finish) (Long/parseLong start)))))))+               (is (= parentType :Fast))+               (is (= fieldName :slow))+               (is (= returnType ""Slow""))+               ;; Allow for a bit of overhead; Thread/sleep is quite inexact.+               ;; Also, the duration is in nanoseconds, but the delay is in millis+               (is (<= delay (/ duration million) (* delay 10))))))  (deftest collects-timing-for-each-execution   (let [result (q ""{ hare: root(delay: 5) { slow { simple }}                      tortoise: root(delay: 50) { slow { simple }}                    }""                   enable-timing)]     (reporting result-      (let [elapsed-times (->> (get-in result [:extensions :timings])-                               (mapv :elapsed))]-        (is (= 2 (count elapsed-times)))-        (is (<= 5 (elapsed-times 0)))-        (is (<= 50 (elapsed-times 1)))))))+               (let [durations (->> (get-in result [:extensions :tracing :execution :resolvers])+                                    (mapv :duration))]+                 (is (= 6 (count durations)))))))"
https://api.github.com/repos/walmartlabs/lacinia/pulls/335,496158191,"@@ -0,0 +1,102 @@+;; Copyright (c) 2020-present Walmart, Inc.+;;+;; Licensed under the Apache License, Version 2.0 (the ""License"")+;; you may not use this file except in compliance with the License.+;; You may obtain a copy of the License at+;;+;;     http://www.apache.org/licenses/LICENSE-2.0+;;+;; Unless required by applicable law or agreed to in writing, software+;; distributed under the License is distributed on an ""AS IS"" BASIS,+;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.+;; See the License for the specific language governing permissions and+;; limitations under the License.++(ns com.walmartlabs.lacinia.protocols+  ""Protocols for objects accessible from the [[selection]] function, """
https://api.github.com/repos/walmartlabs/lacinia/pulls/340,504851564,"@@ -34,3 +34,9 @@ Sample Projects `Hacker News GraphQL <https://www.giovanialtelino.com/project/hacker-news-graphql/>`_   A version of Hacker News implemented using GraphQL and `Datomic <https://www.datomic.com/>`_ on the backend,   and `re-frame <https://day8.github.io/re-frame/re-frame/>`_ on the front end.+  + _Lacina LDAP backend <https://github.com/matteoredaelli/lacinia-backend-ldap/>`_+  A sample library for quering an LDAP/Active directory using GraphQL"
https://api.github.com/repos/walmartlabs/lacinia/pulls/342,504923154,"@@ -28,9 +28,15 @@ Sample Projects   using `re-graph <https://github.com/oliyh/re-graph>`_.   Users can login, transfer money, and get an overview of all the bank accounts.   -`Fullstack Learning Project <https://promesante.github.io/2019/08/14/clojure_graphql_fullstack_learning_project_part_1.html>`_+`Fullstack Learning Project <https://promesante.github.io/2019/08/14/clojure_graphql_fullstack_learning_project_part_1.html>`_    A port of `The Fullstack Tutorial for GraphQL <https://www.howtographql.com/>`_, ported to Clojure and Lacinia.    `Hacker News GraphQL <https://www.giovanialtelino.com/project/hacker-news-graphql/>`_   A version of Hacker News implemented using GraphQL and `Datomic <https://www.datomic.com/>`_ on the backend,   and `re-frame <https://day8.github.io/re-frame/re-frame/>`_ on the front end.+  +`Lacinia LDAP backend <https://github.com/matteoredaelli/lacinia-backend-ldap/>`_+  A sample library for querying a LDAP/Active directory using GraphQL"
https://api.github.com/repos/walmartlabs/lacinia/pulls/363,611010028,"@@ -436,3 +436,12 @@                            (fn [value]                              (resolve/deliver! xformed (xf value))))       xformed)))++(defn seek"
https://api.github.com/repos/walmartlabs/lacinia/pulls/384,739485249,"@@ -386,7 +386,7 @@               :errors [{:message ""Non-nullable field was null."",                         :locations [{:column 31                                      :line 2}]-                        :path [:shout]+                        :path [:shout 0 0 0]"
https://api.github.com/repos/walmartlabs/lacinia/pulls/420,944624657,"@@ -1,7 +1,8 @@ {:deps {org.clojure/clojure {:mvn/version ""1.10.3""}         clj-antlr/clj-antlr {:mvn/version ""0.2.12""}         org.flatland/ordered {:mvn/version ""1.15.10""}-        org.clojure/data.json {:mvn/version ""2.4.0""}}+        org.clojure/data.json {:mvn/version ""2.4.0""}+        org.clojure/core.match {:mvn/version ""1.0.0""}}"
https://api.github.com/repos/weavejester/compojure/pulls/140,31580315,"@@ -102,6 +102,12 @@       ((mw handler) request)       (handler request)))) +(defn- add-route-information"
https://api.github.com/repos/weavejester/compojure/pulls/210,869601154,"@@ -261,7 +269,8 @@       (-> request           (assoc-route-params (decode-route-params params))           (assoc :path-info (if (= subpath """") ""/"" subpath)-                 :context   (remove-suffix uri subpath))))))+                 :context   (remove-suffix uri subpath))+          (update :compojure/context-path (fn [ctx] (str ctx context-path)))))))"
https://api.github.com/repos/weavejester/hiccup/pulls/37,305978,"@@ -1,5 +1,4 @@ (defproject hiccup ""0.3.7""   :description ""A fast library for rendering HTML in Clojure""   :url ""http://github.com/weavejester/hiccup""-  :dependencies [[org.clojure/clojure ""1.2.0""]]-  :dev-dependencies [[org.clojure/clojure-contrib ""1.2.0""]])+  :dependencies [[org.clojure/clojure ""[1.2.0,1.3.0]""]])"
https://api.github.com/repos/weavejester/hiccup/pulls/64,1724389,"@@ -1,4 +1,4 @@-(defproject hiccup ""1.0.1""+(defproject org.clojars.pntblnk/hiccup ""2.0.0-alpha1"""
https://api.github.com/repos/weavejester/hiccup/pulls/122,47438195,"@@ -237,8 +241,11 @@   (doall (for [expr content]            (cond             (vector? expr) (compile-element expr)+            (string? expr) `(escape-html ~expr)"
https://api.github.com/repos/weavejester/hiccup/pulls/139,92167569,"@@ -13,17 +14,33 @@ (defn- end-tag []   (if (xml-mode?) "" />"" "">"")) +(defn- render-attr-value [value]+  (cond+    (string? value)+    (util/escape-html (util/as-str value))+    (map? value)+    (str+      (->> value+           (mapv (fn [[k v]] (str (util/as-str k) "":"" (util/as-str v))))+           sort+           (string/join "";""))+      "";"")+    (sequential? value)+    (string/join "" "" value)"
https://api.github.com/repos/weavejester/hiccup/pulls/151,183236928,"@@ -73,37 +73,48 @@   (or content       (and (html-mode?) (not (void-tags tag))))) -(defn- merge-classes [class classes]+(defn- merge-classes [class classes compiling?]"
https://api.github.com/repos/weavejester/hiccup/pulls/152,223184033,"@@ -74,6 +74,12 @@              :value value              :checked checked?}])) +(defn- selected? [x selected]+  (cond (or (list? selected) (vector? selected))"
https://api.github.com/repos/weavejester/hiccup/pulls/170,483383833,"@@ -89,7 +90,9 @@ (defn- merge-attributes [map-attrs id classes]   (-> map-attrs       (cond-> id      (assoc :id (or (:id map-attrs) id)))-      (cond-> classes (assoc :class (merge-classes (:class map-attrs) classes)))))+      (cond-> (or classes"
https://api.github.com/repos/weavejester/hiccup/pulls/176,543550788,"@@ -78,7 +78,11 @@   ""Include a list of external javascript files.""   [& scripts]   (for [script scripts]-    [:script {:type ""text/javascript"", :src (util/to-uri script)}]))+    (if (:src script)"
https://api.github.com/repos/weavejester/hiccup/pulls/202,1248908536,"@@ -9,3 +9,5 @@ pom.xml.asc *.class .lein-* .nrepl-port+.clj-kondo/*"
https://api.github.com/repos/weavejester/hiccup/pulls/204,1343276019,"@@ -23,10 +23,15 @@   (if (xml-mode?) "" />"" "">""))  (defn- render-style-map [value]-  (->> value-       (map (fn [[k v]] (str (util/as-str k) "":"" (util/as-str v) "";"")))-       (sort)-       (apply str)))+  (let [^StringBuilder sb (StringBuilder.)]+    (util/fast-run+      (fn [[k v]]+        (.append sb (util/to-str k))+        (.append sb "":"")+        (.append sb (util/to-str v))+        (.append sb "";""))"
https://api.github.com/repos/weavejester/hiccup/pulls/206,1410705354,"@@ -314,22 +333,24 @@ (defmethod compile-element ::literal-tag   [[tag attrs & content]]   (let [[tag tag-attrs _] (normalize-element-form [tag])-        attrs-sym         (gensym ""attrs"")]+        attrs-sym (gensym ""attrs"")]"
https://api.github.com/repos/weavejester/hiccup/pulls/208,1430480983,"@@ -331,26 +331,37 @@   (compile-element (apply vector tag {} content)))  (defmethod compile-element ::literal-tag-  [[tag attrs & content]]-  (let [[tag tag-attrs _] (normalize-element-form [tag])-        attrs-sym         (gensym ""attrs"")]-    `(let [~attrs-sym ~attrs]+  [[tag attrs-or-content & content]]+  (let [[tag tag-attrs _]    (normalize-element-form [tag])+        attrs-or-content-sym (gensym ""attrs_or_content__"")+        is-attrs-sym         (gensym ""is_attrs__"")+        is-content-sym       (gensym ""is_content__"")]"
https://api.github.com/repos/weavejester/integrant/pulls/3,91701998,"@@ -48,12 +48,37 @@ (defn- sort-keys [ks m]   (sort (dep/topo-comparator (dependency-graph m)) ks)) +(defn- update-key [f m k]"
https://api.github.com/repos/weavejester/integrant/pulls/5,91834271,"@@ -4,4 +4,33 @@   :license {:name ""The MIT License""             :url ""http://opensource.org/licenses/MIT""}   :dependencies [[org.clojure/clojure ""1.7.0""]-                 [com.stuartsierra/dependency ""0.2.0""]])+                 [com.stuartsierra/dependency ""0.2.0""]]+  :profiles {:dev {:dependencies [[org.clojure/clojurescript ""1.7.228""]]}}+  :plugins [[lein-doo ""0.1.7""]]+  :cljsbuild+  {:builds [{:id ""phantom-test""+             :source-paths [""src"" ""test""]+             :compiler {:output-to  ""target/cljs/phantom-test/integrant-test.js""+                        :output-dir ""target/cljs/phantom-test/out""+                        :main integrant.test-runner+                        :optimizations :none}}+            {:id ""nashorn-test"""
https://api.github.com/repos/weavejester/integrant/pulls/10,100692561,"@@ -24,16 +24,28 @@     (ref? v)  (list (:key v))     (coll? v) (mapcat find-refs v))) +(defn find-derived+  ""Return a seq of all entries in a map, m, where the key is derived from the+  keyword, k. If there are no matching keys, nil is returned.""+  [m k]+  (seq (filter #(isa? (key %) k) m)))+ (defn dependency-graph-  ""Return a dependency graph of all the refs in a config.""+  ""Return a dependency graph of all the refs in a config. Resolve derived+  dependencies.""   [config]-  (reduce-kv (fn [g k v] (reduce #(dep/depend %1 k %2) g (find-refs v)))+  (reduce-kv (fn [g k v]+               (->>+                (find-refs v)+                (mapcat (partial find-derived config))"
https://api.github.com/repos/weavejester/integrant/pulls/19,112346576,"@@ -37,7 +37,10 @@ In Integrant, anything can be dependent on anything else. The dependencies are resolved from the configuration before it's initialized into a system. +A more in depth rationale and description of Integrant can be found in the following [Skillscast][]."
https://api.github.com/repos/weavejester/integrant/pulls/39,168276337,"@@ -13,10 +13,20 @@ (defrecord Ref    [key] RefLike (ref-key [_] key)) (defrecord RefSet [key] RefLike (ref-key [_] key)) +(def ^{:private true} composite-key? vector?)++(defn- valid-composite-key?+  ""Returns true if the key is a vector of namespaced keywords.""+  [key]+  (and (composite-key? key)+       (every? keyword? key)+       (every? namespace key)))+ (defn valid-config-key?"
https://api.github.com/repos/weavejester/integrant/pulls/41,177510002,"@@ -428,7 +428,7 @@    (resume config system (keys config)))   ([config system keys]    {:pre [(map? config) (map? system) (some-> system meta ::origin)]}-   (halt-missing-keys! system keys)+   (halt-missing-keys! system (dependent-keys config keys))"
https://api.github.com/repos/weavejester/integrant/pulls/68,363009185,"@@ -8,10 +8,24 @@             [weavejester.dependency :as dep]))  (defprotocol RefLike-  (ref-key [r] ""Return the key of the reference.""))+  (ref-key [r] ""Return the key of the reference."")+  (ref-resolve [r config resolvef] ""Return the resolved value."")) -(defrecord Ref    [key] RefLike (ref-key [_] key))-(defrecord RefSet [key] RefLike (ref-key [_] key))+(declare find-derived)"
https://api.github.com/repos/weavejester/integrant/pulls/75,374172191,"@@ -5,7 +5,8 @@             :url ""http://opensource.org/licenses/MIT""}   :dependencies [[org.clojure/clojure ""1.9.0""]                  [weavejester/dependency ""0.2.1""]]-  :profiles {:dev {:dependencies [[org.clojure/clojurescript ""1.10.597""]]}}+  :profiles {:dev {:dependencies [[org.clojure/clojurescript ""1.10.597""]]}+             :provided {:dependencies [[org.clojure/tools.reader ""1.3.2""]]}}"
https://api.github.com/repos/weavejester/integrant/pulls/70,376024036,"@@ -24,13 +30,11 @@ (defn ref   ""Create a reference to a top-level key in a config map.""   [key]-  {:pre [(valid-config-key? key)]}"
https://api.github.com/repos/weavejester/integrant/pulls/90,652207949,"@@ -86,7 +86,7 @@ And load it with Integrant's version of `read-string`: ### Initializing and halting  Once you have a configuration, Integrant needs to be told how to-implement it. The `init-key` multimethod takes two arguments, a key+implement it. The `init-key` multimethod takes two arguments, a key, "
https://api.github.com/repos/weavejester/integrant/pulls/103,1301686106,"@@ -4,6 +4,7 @@ * **BREAKING CHANGE:** removed old `expand` function * Added `assert-key` to replace `pre-init-spec` * Added `expand-key` and new `expand` function (#102)+* Added babashka test runner (#86)"
https://api.github.com/repos/xtdb/xtdb/pulls/174,274368819,"@@ -22,7 +21,7 @@                    true))  (def default-options {:bootstrap-servers ""localhost:9092""-                      :group-id (.getHostName (InetAddress/getLocalHost))+                      :group-id (.getHostName (InetAddress/getLoopbackAddress))"
https://api.github.com/repos/xtdb/xtdb/pulls/195,278290053,"@@ -0,0 +1,20 @@+(ns leiningen.project-version+  (:require [clojure.java.shell :as sh]))++(defn project-version [project & args]+  (println (:version project)))++(defn- version-from-git []+  (let [{:keys [exit out]} (sh/sh ""git"" ""describe"" ""--tags"" ""--dirty"" ""--long"")]+    (assert (= 0 exit))+    ;;""19.04-1.0.2-alpha-22-g9452e91b-dirty""+    (let [[_ tag ahead sha dirty] (re-find #""(.*)\-(\d+)\-([0-9a-z]*)(\-dirty)?$"" (.trim out))"
https://api.github.com/repos/xtdb/xtdb/pulls/197,278548506,"@@ -96,6 +96,17 @@                 (t/is (= '([:ivan]) result))                 (t/is (realized? result)))))) +        (t/testing ""query returning full results""+          (let [db (.db f/*api*)]+            (with-open [snapshot (.newSnapshot db)]+              (let [result (.q db snapshot '{:find [e]+                                             :where [[e :name ""Ivan""]]+                                             :full-results? true})]+                (t/is (instance? LazySeq result))+                (t/is (not (realized? result)))+                (t/is (= '([{:var e, :value :ivan, :doc {:crux.db/id :ivan, :name ""Ivan""}}]) result))"
https://api.github.com/repos/xtdb/xtdb/pulls/221,283910152,"@@ -178,6 +178,10 @@     from and including the valid time of the db while respecting     transaction time. Includes the documents."") +  (stats"
https://api.github.com/repos/xtdb/xtdb/pulls/238,290755465,"@@ -21,9 +21,8 @@  (s/def ::id (s/conformer (comp str c/new-id))) (s/def :crux.db/id (s/and (complement string?) c/valid-id?))-(s/def ::doc (s/and (s/or :doc (s/and (s/keys :req [:crux.db/id]) ::id)-                          :content-hash (s/and (complement map?) ::id))-                    (s/conformer second)))++(s/def ::doc (s/and (s/keys :req [:crux.db/id]) ::id))"
https://api.github.com/repos/xtdb/xtdb/pulls/255,293317091,"@@ -1,28 +1,45 @@ (ns crux.fixtures-  (:require [clojure.java.io :as io]-            [clojure.spec.alpha :as s]+  (:require [clojure.spec.alpha :as s]             [clojure.test :as t]             [clojure.test.check.clojure-test :as tcct]-            [crux.api :as api]+            [clojure.java.io :as io]             [crux.bootstrap :as b]             [crux.codec :as c]             [crux.db :as db]             [crux.http-server :as srv]-            [crux.index :as idx]             [crux.io :as cio]-            [crux.kafka :as k]             [crux.kafka.embedded :as ek]+            [crux.kafka :as k]             [crux.kv :as kv]-            [crux.lru :as lru]-            [crux.memory :as mem]             [crux.tx :as tx]-            [taoensso.nippy :as nippy])-  (:import [crux.api Crux ICruxAPI]-           java.io.Closeable+            [crux.index :as idx]+            [crux.lru :as lru]+            [taoensso.nippy :as nippy]+            [crux.memory :as mem])+  (:import java.io.Closeable            [java.util Properties UUID]            org.apache.kafka.clients.admin.AdminClient+           org.apache.kafka.clients.producer.KafkaProducer            org.apache.kafka.clients.consumer.KafkaConsumer-           org.apache.kafka.clients.producer.KafkaProducer))+           [crux.api Crux ICruxAPI]))++(defn random-person [] {:crux.db/id (UUID/randomUUID)"
https://api.github.com/repos/xtdb/xtdb/pulls/269,296630481,"@@ -0,0 +1,17 @@+(ns crux.bootstrap-standalone-test+  (:require [clojure.test :as t]+            [crux.api :as api]))+"
https://api.github.com/repos/xtdb/xtdb/pulls/265,296743141,"@@ -748,132 +748,7 @@   [:p4 :NY #inst ""2019-01-02"" :na]} ;; end::bitempr[] -(t/deftest test-bitemp-query-from-indexing-temporal-data-using-existing-b+-trees-paper"
https://api.github.com/repos/xtdb/xtdb/pulls/272,297594835,"@@ -389,11 +389,11 @@  (defmethod print-method EDNId [^EDNId id ^Writer w]   (.write w ""#crux/id "")-  (.write w (str (or (.original-id id) (.hex id)))))+  (.write w (pr-str (str (or (.original-id id) (.hex id))))))"
https://api.github.com/repos/xtdb/xtdb/pulls/282,299962891,"@@ -382,7 +382,7 @@ queries to apply range filters using predicates.          [c :condition/humidity humidity]]  :order-by [[device-id :asc]]  :limit 10- :args [{:my-offset 990}]}+ :args [{'my-offset 990}]}"
https://api.github.com/repos/xtdb/xtdb/pulls/298,302535197,"@@ -115,13 +115,24 @@     (tx/await-tx-time indexer tx-time (when timeout {:crux.tx-log/await-tx-timeout (.toMillis timeout)})))    backup/ISystemBackup-  (write-checkpoint [this {:keys [crux.backup/checkpoint-directory]}]-    (kv/backup kv-store (io/file checkpoint-directory ""kv-store"")))+  (write-checkpoint [this {:keys [crux.backup/checkpoint-directory] :as opts}]+    (kv/backup kv-store (io/file checkpoint-directory ""kv-store""))+    (when (satisfies? tx-log backup/ISystemBackup)+      (backup/write-checkpoint tx-log opts)))    Closeable   (close [_]-    (some-> close-promise (deliver true))-    (some-> node-thread (.join))))+    (when close-fn (close-fn))))++(defn start-crux-node [& bindings]"
https://api.github.com/repos/xtdb/xtdb/pulls/300,303451566,"@@ -1,8 +1,8 @@-{:ig/system- {:juxt.crux-ui.server.main/read-write {:system #ig/ref :juxt.crux.ig/system}-  :juxt.crux-ui.server.main/home {:system #ig/ref :juxt.crux.ig/system}-  :juxt.crux-ui.server.main/console {:system #ig/ref :juxt.crux.ig/system}-  :juxt.crux.ig.system/standalone {:kv-backend ""crux.kv.rocksdb.RocksKv""+{:ig/node"
https://api.github.com/repos/xtdb/xtdb/pulls/301,304290145,"@@ -0,0 +1,15 @@+(ns crux-rocksdb.sanity-test+  (:require [clojure.test :as t]+            [crux.api :as api]))+"
https://api.github.com/repos/xtdb/xtdb/pulls/313,309671222,"@@ -321,9 +321,11 @@               :or {server-port 3000 cors-access-control []}               :as options}]   (s/assert ::options options)-  (let [server (j/run-jetty (-> (partial handler crux-node)-                                (#(apply wrap-cors (into [%] cors-access-control)))+  (let [wrap-cors' #(apply wrap-cors (cons % cors-access-control))+        server (j/run-jetty (-> (partial handler crux-node)+                                (wrap-exception-handling)                                 (p/wrap-params)+                                (wrap-cors')                                 (wrap-exception-handling))"
https://api.github.com/repos/xtdb/xtdb/pulls/320,314118064,"@@ -111,14 +112,67 @@                               (.content-hash entity-tx)                               {:crux.db/id :crux.db/evicted}))))})) -(defn tx-command-unknown [object-store snapshot tx-log [op k start-valid-time end-valid-time keep-latest? keep-earliest?] transact-time tx-id]+(declare tx-op->command tx-command-unknown tx-ops->docs tx-ops->tx-events)++(def ^:private tx-fn-eval-cache (memoize eval))++(defn log-tx-fn-error [fn-result fn-id body args-id args]+  (log/warn fn-result ""TX Fn failure:"" fn-id (pr-str body) args-id (pr-str args)))++(defn tx-command-fn [indexer kv object-store snapshot tx-log [op k args-v] transact-time tx-id]+  (let [fn-id (c/new-id k)+        db (q/db kv)+        {:crux.db.fn/keys [body] :as fn-doc} (q/entity db fn-id)+        {:crux.db.fn/keys [args] :as args-doc} (db/get-single-object object-store snapshot (c/new-id args-v))+        args-id (:crux.db/id args-doc)+        fn-result (try+                    (let [tx-ops (apply (tx-fn-eval-cache body) db (eval args))]+                      {:docs (tx-ops->docs tx-ops)+                       :ops-result (vec (for [[op :as tx-op]  (tx-ops->tx-events tx-ops)]"
https://api.github.com/repos/xtdb/xtdb/pulls/327,317961541,"@@ -49,6 +49,16 @@      */     public Map<Keyword,?> document(Object contentHash); +    /**+     *  Reads a document from the document store based on its+     *  content hash.+     *+     * @param contentHashSet a set of objects that can be coerced into a content+     * hashes.+     * @return            a map from hashable objects to the corresponding documents.+     */+    public Map<String,?> documents(Object contentHashSet);"
https://api.github.com/repos/xtdb/xtdb/pulls/369,340550117,"@@ -100,27 +117,32 @@                      (tx/tx-events->tx-ops snapshot object-store tx-events))))         tx-log-entry))) -  (sync [_ timeout]+  (sync [this timeout]+    (assert-node-open this)     (tx/await-no-consumer-lag indexer (or (and timeout (.toMillis timeout))                                           (:crux.tx-log/await-tx-timeout options)))) -  (sync [_ tx-time timeout]+  (sync [this tx-time timeout]+    (assert-node-open this)     (tx/await-tx-time indexer tx-time (or (and timeout (.toMillis timeout))                                           (:crux.tx-log/await-tx-timeout options))))    ICruxAsyncIngestAPI-  (submitTxAsync [_ tx-ops]+  (submitTxAsync [this tx-ops]+    (assert-node-open this)     (db/submit-tx tx-log tx-ops))    backup/INodeBackup   (write-checkpoint [this {:keys [crux.backup/checkpoint-directory] :as opts}]+    (assert-node-open this)     (kv/backup kv-store (io/file checkpoint-directory ""kv-store""))     (when (satisfies? tx-log backup/INodeBackup)       (backup/write-checkpoint tx-log opts)))    Closeable   (close [_]-    (when close-fn (close-fn))))+    (when (and (not closed?) close-fn) (close-fn))"
https://api.github.com/repos/xtdb/xtdb/pulls/378,345467217,"@@ -0,0 +1,109 @@+package crux.api;++import java.util.Map;+import java.util.HashMap;+import java.util.List;+import java.util.ArrayList;+import clojure.lang.Keyword;+import java.util.Date;+import java.util.UUID;+import java.net.URI;+import java.net.URL;++public class CasOperation implements Operation {+    public static class Builder implements OperationBuilder {+	private List<Object> operation;+	private Map<Keyword, Object> oldMap;+	private Map<Keyword, Object> newMap;+	private Date validTime;++	private void init() {+	    operation = new ArrayList<Object>();+	    operation.add(Keyword.intern(""crux.tx/cas""));+	    oldMap = new HashMap<Keyword, Object>();+	    newMap = new HashMap<Keyword, Object>();+	}++	public Builder(String id) {+	    init();+	    putId(id);+	}++	public Builder(UUID id) {+	    init();+	    putId(id);+	}++	public Builder(URL id) {+	    init();+	    putId(id);+	}++	public Builder(URI id) {+	    init();+	    putId(id);+	}++	public Builder putId(String id) {+	    oldMap.put(Keyword.intern(""crux.db/id""), Keyword.intern(id));+	    newMap.put(Keyword.intern(""crux.db/id""), Keyword.intern(id));+	    return this;+	}++	public Builder putId(UUID id) {+	    oldMap.put(Keyword.intern(""crux.db/id""), id);+	    newMap.put(Keyword.intern(""crux.db/id""), id);+	    return this;+	}++	public Builder putId(URL id) {+	    oldMap.put(Keyword.intern(""crux.db/id""), id);+	    newMap.put(Keyword.intern(""crux.db/id""), id);+	    return this;+	}++	public Builder putId(URI id) {+	    oldMap.put(Keyword.intern(""crux.db/id""), id);+	    newMap.put(Keyword.intern(""crux.db/id""), id);+	    return this;+	}++	public Builder putValidTime(Date validtime) {+	    validTime = validtime;+	    return this;+	}++	public Builder putInOldMap(String key, Object val) {+	    oldMap.put(Keyword.intern(key), val);+	    return this;+	}++	public Builder putInOldMap(Map<String, Object> valueMap) {+	    for (String key : valueMap.keySet()) {+		oldMap.put(Keyword.intern(key), valueMap.get(key));"
https://api.github.com/repos/xtdb/xtdb/pulls/416,347834800,"@@ -4,99 +4,180 @@             [crux.memory :as mem]             [clojure.tools.logging :as log])) -(defn- i-name [i]-  ;;(-> i ^java.lang.Class type .getName (clojure.string/replace #""crux\.index\."" """") symbol)-  (-> i str (clojure.string/replace #""crux\.index\."" """")))+(def ansi-colors {:white   ""[37m""+                  :red     ""[31m""+                  :green   ""[32m""+                  :blue    ""[34m""+                  :yellow  ""[33m""+                  :magenta ""[35m""})++(defn- in-ansi [c s]+  (if c+    (str ""\u001b"" (get ansi-colors c) s ""\u001b[0m"")+    s))++(defmulti index-name (fn [i] (-> i ^java.lang.Class type .getName symbol)))++(defmethod index-name :default [i]+  (-> i ^java.lang.Class type .getName (clojure.string/replace #""crux\.index\."" """") symbol))++(defmethod index-name 'crux.index.NAryConstrainingLayeredVirtualIndex [i]+  (str ""NAry-Constrained: "" (clojure.string/join "" "" (map :name (:indexes i)))))++(defmethod index-name 'crux.index.NAryJoinLayeredVirtualIndex [i]+  (str ""NAry: "" (clojure.string/join "" "" (map :name (:indexes i)))))++(defmethod index-name 'crux.index.UnaryJoinVirtualIndex [i]+  (str ""Unary: "" (clojure.string/join "" "" (map :name (:indexes i)))))++(defmethod index-name 'crux.index.BinaryJoinLayeredVirtualIndex [i]+  (format ""Binary: [%s %s %s]"" (-> i meta :clause :e) (-> i meta :clause :a) (-> i meta :clause :v)))++(defmethod index-name 'crux.index.DocAttributeValueEntityEntityIndex [i]+  ""AVE-E:"")++(defmethod index-name 'crux.index.DocAttributeValueEntityValueIndex [i]+  ""AVE-V:"")++(defmethod index-name 'crux.index.DocAttributeEntityValueEntityIndex [i]+  ""AVE-E:"")++(defmethod index-name 'crux.index.DocAttributeEntityValueValueIndex [i]+  ""AEV-V:"")  (defn- trunc   [s n]   (subs s 0 (min (count s) n))) -(defn- trace-op [foo op depth & extra]-  (println (format ""%s %s%s %s"" (name op) @foo (apply str (take depth (repeat "" "")))-                   (clojure.string/join "" "" extra))))+(defn- trace-op [{:keys [foo depth color] :as this} op & extra]+  (print (in-ansi color (format ""%s%s   %s %s""+                                ({:seek ""s"" :next ""n""} op) @foo (apply str (take (get @depth op) (repeat "" "")))+                                (clojure.string/join "" "" extra))))) -(defn- v->str [v]-  (str (trunc (str (mem/buffer->hex (first v))) 10) "" -> "" (trunc (str (second v)) 40)))+(defprotocol PrintVal+  (print-val [this]))++(extend-protocol PrintVal+  org.agrona.DirectBuffer+  (print-val [this]+    (trunc (str (mem/buffer->hex this)) 10))++  clojure.lang.PersistentArrayMap"
https://api.github.com/repos/xtdb/xtdb/pulls/425,348446929,"@@ -0,0 +1,39 @@+package crux.api.v2;++import clojure.lang.Keyword;++import java.net.URI;+import java.net.URL;+import java.util.UUID;++public class CruxId {+    private final Object id;++    private CruxId(Object id) {+        this.id = id;+    }++    public static CruxId cruxId(String name) {+        return new CruxId(Keyword.intern(name));+    }++    public static CruxId cruxId(UUID uuid) {+        return new CruxId(uuid);+    }++    public static CruxId cruxId(URI uri) {+        return new CruxId(uri);+    }++    public static CruxId cruxId(URL url) {+        return new CruxId(url);+    }+"
https://api.github.com/repos/xtdb/xtdb/pulls/438,350596431,"@@ -96,26 +96,34 @@              tx-id)             (c/->id-buffer new-v)]]})) -(defn tx-command-evict [indexer kv object-store snapshot tx-log [op k start-valid-time end-valid-time keep-latest? keep-earliest?] transact-time tx-id]+(def evict-time-ranges-env-var ""CRUX_EVICT_TIME_RANGES"")+(def ^:dynamic evict-all-on-legacy-time-ranges? (= (System/getenv evict-time-ranges-env-var) ""EVICT_ALL""))"
https://api.github.com/repos/xtdb/xtdb/pulls/450,352723541,"@@ -0,0 +1,91 @@+(ns tmt.hash_map"
https://api.github.com/repos/xtdb/xtdb/pulls/451,353202484,"@@ -219,3 +219,9 @@        ~@body        (finally          (.unlock lock# stamp#)))))++(defn prn-edn [xs]"
https://api.github.com/repos/xtdb/xtdb/pulls/431,354373673,"@@ -93,17 +61,42 @@ private Document document(Object contentHash) {     }      /**-     * Returns the transaction history of an entity, in reverse chronological order. Includes corrections, but does not include the actual documents+     * Returns the transaction history of an entity, in reverse chronological order. Includes corrections, but does not include the actual documents.      * @param id Id of the entity to get the history for-     * @return Iterable set of Documents containing transaction information+     * @return Iterable set of EntityTx's containing transaction information+     * @see EntityTx      */-    public Iterable<Document> history(CruxId id) {+    public Iterable<EntityTx> history(CruxId id) {         List<Map<Keyword,Object>> history = node.history(id.toEdn());         return history.stream()-            .map(this::document)+            .map(entity -> EntityTx.entityTx(entity))             .collect(Collectors.toList());     } +    /**"
https://api.github.com/repos/xtdb/xtdb/pulls/459,355489478,"@@ -0,0 +1,41 @@+(ns tmt.noopnil"
https://api.github.com/repos/xtdb/xtdb/pulls/474,357796295,"@@ -99,6 +100,9 @@    (fn []      (mem/->off-heap nil-id-bytes (mem/allocate-unpooled-buffer (count nil-id-bytes)))))) +(defn- sort-maps [o]+  (->> o (walk/postwalk (fn [o] (cond->> o (map? o) (into (sorted-map)))))))"
https://api.github.com/repos/xtdb/xtdb/pulls/476,358701283,"@@ -0,0 +1,70 @@+See basic (non-configured) setup instructions on [docker hub](https://hub.docker.com/r/juxt/crux-http). ++To create a custom configured node, download the+contents of this folder and read the instructions below.++--- +## Getting Started++The only requirement for setting up this node is **docker**, so ensure that is installed. Firstly, if you have not already done so, +download the most recent image of the http node from docker hub:++```bash+docker pull juxt/crux-http+```++To run the basic instance of the node (which runs using the **memdb**), run the script within `./bin/dev.sh`. This image makes use of +some default Crux node / Crux HTTP Server options defined within the file **crux.edn**, and the dependencies within **deps.edn** to +start a HTTP node running on **localhost:3000**. ++## Customizing the node++To customize the node, you can change the configuration options under **crux.edn** and add any further required dependecies +within **crux.edn**. For example, you can change the KvStore of the node to RocksDB as such (by adding relevant keys under +`:crux/node-opts`:++```clojure+{:crux/node-opts {:crux.node/topology :crux.standalone/topology+                  :crux.node/kv-store ""crux.kv.rocksdb/kv""+                  :crux.kv/db-dir ""/var/lib/crux/db""+                  :crux.standalone/event-log-dir ""/var/lib/crux/events""+                  :crux.standalone/event-log-kv-store ""crux.kv.rocksdb/kv""}+ :crux/server-opts {}}+```++Doing so introduces a dependency to `crux-rocksdb`, which can be added to the docker image by adding it under **deps.edn**:++```clojure+{:deps+ {juxt/crux-http-server {:mvn/version ""19.09-1.5.0-alpha""}+  juxt/crux-core {:mvn/version ""19.09-1.5.0-alpha""+  juxt/crux-rocksdb {:mvn/version ""19.09-1.5.0-alpha""}}}}+```++Now, running the script under `./bin/dev.sh` will create a HTTP node using RocksDB.++For further node configuration options, see the [related section](https://opencrux.com/docs#configuration) within the Crux docs.++## Customizing the HTTP Server++In a similar manner to customizing the node, custom options can be set on the Crux HTTP server which the node is started on. +For example, to add CORS access permissions to the server, add the following under `:crux/server-opts` before running `./bin/dev.sh`:++```clojure+{:crux/node-opts {:crux.node/topology :crux.standalone/topology+                  :crux.node/kv-store ""crux.kv.memdb/kv""+                  :crux.kv/db-dir ""/var/lib/crux/db""+                  :crux.standalone/event-log-dir ""/var/lib/crux/events""+                  :crux.standalone/event-log-kv-store ""crux.kv.memdb/kv""}+ :crux/server-opts + {:cors-access-control+   [:access-control-allow-origin [#"".*""]"
https://api.github.com/repos/xtdb/xtdb/pulls/506,359978421,"@@ -1122,36 +1123,37 @@          stats (idx/read-meta kv :crux.kv/stats)]      (log/debug :query (cio/pr-edn-str q))      (validate-args args)-     (let [rule-name->rules (rule-name->rules rules)-           entity-as-of-idx (idx/new-entity-as-of-index snapshot valid-time transact-time)-           entity-as-of-idx (if *with-entities-cache?*-                              (lru/new-cached-index entity-as-of-idx default-entity-cache-size)-                              entity-as-of-idx)-           db (assoc db :entity-as-of-idx entity-as-of-idx)-           {:keys [n-ary-join-                   var->bindings]} (build-sub-query snapshot db where args rule-name->rules stats)]-       (doseq [var find-               :when (not (contains? var->bindings var))]-         (throw (IllegalArgumentException.-                 (str ""Find refers to unknown variable: "" var))))-       (doseq [{:keys [var]} order-by-               :when (not (contains? var->bindings var))]-         (throw (IllegalArgumentException.-                 (str ""Order by refers to unknown variable: "" var))))-       (doseq [{:keys [var]} order-by-               :when (not (some #{var} find))]-         (throw (IllegalArgumentException.-                  (str ""Order by requires a var from :find. unreturned var: "" var))))-       (cond->> (for [[join-keys join-results] (idx/layered-idx->seq n-ary-join)-                      :let [bound-result-tuple (for [var find]-                                                 (bound-result-for-var snapshot object-store var->bindings join-keys join-results var))]]-                  (if full-results?-                    (build-full-results db snapshot bound-result-tuple)-                    (mapv #(.value ^BoundResult %) bound-result-tuple)))-         order-by (cio/external-sort (order-by-comparator find order-by))-         (or offset limit) dedupe-         offset (drop offset)-         limit (take limit))))))+     (with-open [i (kv/new-iterator snapshot)]"
https://api.github.com/repos/xtdb/xtdb/pulls/521,362085206,"@@ -23,6 +23,11 @@   (read-index-meta [this k])) ;; end::Indexer[] +(defn swap-index-meta [indexer k f & args]"
https://api.github.com/repos/xtdb/xtdb/pulls/524,362455095,"@@ -21,7 +21,9 @@                     (if-let [^Message last-message (reduce (fn [last-message ^Message m]                                                              (case (get (.headers m) :crux.tx/sub-topic)                                                                :docs-                                                               (db/index-doc indexer (.key m) (.body m))+                                                               ;; TODO we'll likely be able to make this more efficient"
https://api.github.com/repos/xtdb/xtdb/pulls/529,363277187,"@@ -1421,7 +1421,7 @@                                       :name ""Ivan 3rd""}]                                     [:crux.tx/cas                                      {:crux.db/id :ivan-                                      :name ""Ivan 2nd""}+                                      :name ""Ivan 3rd""}"
https://api.github.com/repos/xtdb/xtdb/pulls/547,364813770,"@@ -2683,3 +2683,18 @@                                            snapshot-hit-ns)))))                          (repeatedly n))]         (t/is (>= (/ (reduce + factors) n) acceptable-snapshot-speedup))))))++(t/deftest test-greater-than-range-predicate-545+  (t/is (empty?+         (api/q (api/db *api*)+                '{:find [offset]+                  :where [[e :offset offset]+                          [(> offset -9223372036854775808)]] ;; Long/MAX_VALUE+                  :limit 1})))++  (t/is (empty?"
https://api.github.com/repos/xtdb/xtdb/pulls/532,364821993,"@@ -198,7 +200,9 @@      (.sync this transaction-time timeout)))    (attribute-stats [this]-    (.attributeStats this)))+    (.attributeStats this))+  (add-query-hook! [this hook]+    (.add_query_hook_BANG_ this hook)))"
https://api.github.com/repos/xtdb/xtdb/pulls/460,364840328,"@@ -33,6 +33,7 @@                  [org.clojure/test.check ""0.10.0""]                  [org.slf4j/slf4j-api ""1.7.26""]                  [ch.qos.logback/logback-classic ""1.2.3""]+                 [org.codehaus.janino/janino ""2.6.1""]"
https://api.github.com/repos/xtdb/xtdb/pulls/549,365754710,"@@ -117,19 +118,32 @@   Returns true if the entity was updated in this transaction."")    (sync+    [node]     [node ^Duration timeout]-    [node ^Date transaction-time ^Duration timeout]-    ""If the transaction-time is supplied, blocks until indexing has-  processed a tx with a greater-than transaction-time, otherwise-  blocks until the node has caught up indexing the tx-log-  backlog. Will throw an exception on timeout. The returned date is-  the latest index time when this node has caught up as of this-  call. This can be used as the second parameter in (db valid-time,-  transaction-time) for consistent reads.+    ^:deprecated [node ^Date transaction-time ^Duration timeout]+    ""Blocks until the node has caught up indexing to the latest tx available at+  the time this method is called. Will throw an exception on timeout. The+  returned date is the latest transaction time indexed by this node. This can be+  used as the second parameter in (db valid-time, transaction-time) for+  consistent reads.    timeout – max time to wait, can be nil for the default.   Returns the latest known transaction time."") +  (await-tx-time+    [node ^Date tx-time]+    [node ^Date tx-time ^Duration timeout]+    ""Blocks until the node has indexed a transaction that is past the supplied+  txTime. Will throw on timeout. The returned date is the latest index time when+  this node has caught up as of this call."")++  (await-tx+    [node tx]+    [node tx ^Duration timeout]"
https://api.github.com/repos/xtdb/xtdb/pulls/552,365893788,"@@ -0,0 +1,15 @@+FROM clojure:openjdk-11-lein-2.9.0"
https://api.github.com/repos/xtdb/xtdb/pulls/551,365952633,"@@ -0,0 +1,27 @@+(ns crux.event-bus-test+  (:require [crux.event-bus :as sut]+            [clojure.test :as t])+  (:import [crux.event_bus EventBus]))++(t/deftest test-event-bus+  (let [!unfiltered-events (atom [])+        !filtered-events (atom [])]+    (with-open [bus ^EventBus (sut/->EventBus (atom #{}))]+      (sut/send bus {::sut/event-type :foo, :value 1})++      (sut/listen bus {::sut/event-types #{:foo}} #(swap! !filtered-events conj %))+      (sut/listen bus #(swap! !unfiltered-events conj %))++      (sut/send bus {::sut/event-type :foo, :value 2})+      (sut/send bus {::sut/event-type :bar, :value 1})++      ;; just to ensure all the jobs are handled+      ;; - we don't guarantee this if the node is shut down+      (Thread/sleep 100))"
https://api.github.com/repos/xtdb/xtdb/pulls/535,366779632,"@@ -257,6 +257,40 @@ node) ;; end::query-with-arguments5-r[] ) +(defn query-example-with-predicate-1 [node]+  (crux/q+   (crux/db node)+   ;; tag::query-with-pred-1[]+   {:find '[age]+    :where '[[(odd? age)]]+    :args [{'age 22} {'age 21}]}+   ;; end::query-with-pred-1[]+ ))++#_(comment+;; tag::query-with-pred-1-r[]+#{[21]}+;; end::query-with-pred-1-r[]+)++(defn query-example-lazy [node]+  ;; tag::lazy-query[]+  (crux/q+   (crux/db node)+   (crux.api/new-snapshot (crux/db node))"
https://api.github.com/repos/xtdb/xtdb/pulls/560,367434741,"@@ -108,14 +108,19 @@       (ensure-node-open this)       @(db/submit-tx tx-log tx-ops))) -  (hasSubmittedTxUpdatedEntity [this submitted-tx eid]-    (.hasSubmittedTxCorrectedEntity this submitted-tx (:crux.tx/tx-time submitted-tx) eid))--  (hasSubmittedTxCorrectedEntity [this submitted-tx valid-time eid]+  (hasTxCommitted [this {:keys [crux.tx/tx-id+                                crux.tx/tx-time] :as submitted-tx}]     (cio/with-read-lock lock       (ensure-node-open this)-      (api/await-tx this submitted-tx)-      (q/submitted-tx-updated-entity? kv-store object-store submitted-tx valid-time eid)))+      (let [latest-tx-time (:crux.tx/tx-time (db/read-index-meta indexer :crux.tx/latest-completed-tx))]"
https://api.github.com/repos/xtdb/xtdb/pulls/563,368582362,"@@ -0,0 +1,8 @@+package crux.api;++import java.io.Closeable;+import java.util.Iterator;++@SuppressWarnings(""rawtypes"")+public interface TxLogIterator extends Iterator, Closeable {"
https://api.github.com/repos/xtdb/xtdb/pulls/570,368604432,"@@ -0,0 +1,55 @@+(ns crux.metrics.bus+  (:require [crux.api :as api]+            [crux.bus :as bus]) )++;; I might be storing too much metadata. Maybe timings don't need to be stored+(defn assign-ingest+  ""Assigns listeners to an event bus for a given node.+  Returns an atom containing uptading metrics""+  [node]++  (let [!metrics (atom {:crux.metrics/indexing-tx {}+                        :crux.metrics/indexed-tx {}+                        :crux.metrics/indexing-docs {}+                        :crux.metrics/indexed-docs {}+                        :crux.metrics/latest-latency-docs -1+                        :crux.metrics/latest-latency-tx -1+                        :crux.metrics/latest-tx-id []})]+    (bus/listen (:bus node)+                {:crux.bus/event-types #{:crux.tx/indexing-docs}}+                (fn [{:keys [doc-ids]}]+                  (swap! !metrics update :crux.metrics/indexing-docs assoc+                         doc-ids {:start-time-ms (System/currentTimeMillis)})))+    (bus/listen (:bus node)+                {:crux.bus/event-types #{:crux.tx/indexed-docs}}+                (fn [{:keys [doc-ids]}]+                  (let [meta-doc (get (:crux.metrics/indexing-docs @!metrics) doc-ids)+                        start-time-ms (:start-time-ms meta-doc)+                        end-time-ms (System/currentTimeMillis)]+                    (swap! !metrics update :crux.metrics/indexing-docs dissoc doc-ids)+                    (swap! !metrics update :crux.metrics/indexed-docs assoc doc-ids+                           {:start-time-ms start-time-ms+                            :time-elapsed-ms (- end-time-ms start-time-ms)})+                    (swap! !metrics assoc :crux.metrics/latest-latency-docs (- end-time-ms start-time-ms)))))++    (bus/listen (:bus node)+                {:crux.bus/event-types #{:crux.tx/indexing-tx}}+                (fn [event]+                  (swap! !metrics assoc :crux.metrics/latest-tx-id+                         [(:crux.tx/tx-id (:crux.tx/submitted-tx event))+                          (:crux.tx/tx-id (:crux.tx/latest-completed-tx (api/status node)))])+                  (swap! !metrics update :crux.metrics/indexing-tx assoc+                         (:crux.tx/submitted-tx event) {:start-time-ms (System/currentTimeMillis)})))++    (bus/listen (:bus node)+                {:crux.bus/event-types #{:crux.tx/indexed-tx}}+                (fn [event]+                  (let [meta-doc (get (:crux.metrics/indexing-tx @!metrics) (:crux.tx/submitted-tx event))+                        start-time-ms (:start-time-ms meta-doc)+                        end-time-ms (System/currentTimeMillis)]+                    (swap! !metrics update :crux.metrics/indexing-tx dissoc (:crux.tx/submitted-tx event))+                    (swap! !metrics update :crux.metrics/indexed-tx assoc (:crux.tx/submitted-tx event)+                           {:start-time-ms start-time-ms+                            :time-elapsed-ms (- end-time-ms start-time-ms)})+                    (swap! !metrics update :crux.metrics/latest-latency-tx (- end-time-ms start-time-ms)))))"
https://api.github.com/repos/xtdb/xtdb/pulls/582,370198873,"@@ -44,6 +45,29 @@ (defmacro ^{:style/indent 1} run-bench [bench-type & body]   `(run-bench* ~bench-type (fn [] ~@body))) +(defn post-to-slack [message]+  (when (System/getenv ""SLACK_URL"")+    (client/post (-> (System/getenv ""SLACK_URL"")+                      (clojure.data.json/read-str)+                      (get ""slack-url""))+                 {:body (json/write-str {:text message})+                  :content-type :json})))++(defn format-and-post-results-to-slack [result]"
https://api.github.com/repos/xtdb/xtdb/pulls/589,370568676,"@@ -5,13 +5,14 @@             [clojure.java.shell :as sh]             [crux.fixtures :as f]             [clojure.tools.logging :as log]-            [crux.io :as cio]))+            [crux.io :as cio])+  (:import (java.io File))) -(def working-directory-  (-> (io/as-file (io/resource ""crux/uberjar_test.clj""))-      .getParentFile-      .getParentFile-      .getParentFile))+(def ^File working-directory+  (.. (io/as-file (io/resource ""crux/uberjar_test.clj""))"
https://api.github.com/repos/xtdb/xtdb/pulls/590,370781188,"@@ -1,4 +1,5 @@ #!/usr/bin/env bash+cd crux-bench/"
https://api.github.com/repos/xtdb/xtdb/pulls/593,371176770,"@@ -138,6 +138,13 @@   supplied tx. Will throw on timeout. Returns the most recent tx indexed by the   node."") +"
https://api.github.com/repos/xtdb/xtdb/pulls/596,371730012,"@@ -89,7 +89,10 @@   (status [this]     (cio/with-read-lock lock       (ensure-node-open this)-      (status-fn)))+      (if status-fn+        (status-fn)+        ;; fallback for before status-fn's set"
https://api.github.com/repos/xtdb/xtdb/pulls/598,373078641,"@@ -12,10 +13,17 @@                          (or (and (string? x) (Long/parseLong x)) x))]    ::string [string? identity]    ::module [(fn [m] (s/valid? :crux.topology/module m))-             (fn [m] (s/conform :crux.topology/module m))]})+             (fn [m] (s/conform :crux.topology/module m))]+   ::duration [#(instance? Duration %)+               (fn [d]+                 (cond+                   (instance? Duration d) d+                   (nat-int? d) (Duration/ofMillis d)+                   (string? d) (Duration/parse d)))]}) -(s/def ::type (s/and (s/conformer (fn [x] (or (property-types x) x)))-                     (fn [x] (and (vector? x) (-> x first fn?) (some-> x second fn?)))))+(s/def ::type+  (s/and (s/conformer (fn [x] (or (property-types x) x)))"
https://api.github.com/repos/xtdb/xtdb/pulls/559,373451384,"@@ -0,0 +1,29 @@+(ns crux.fixtures.doc-store+  (:require [clojure.tools.logging :as log]+            [crux.db :as db]+            [crux.fixtures.api :as apif]+            [crux.io :as cio])+  (:import java.io.Closeable))++(defrecord InMemDocumentStore [docs]+  Closeable+  (close [_])++  db/DocumentStore+  (fetch-docs [this ids]+    (log/debug ""Fetching"" (cio/pr-edn-str ids))+    (into {}"
https://api.github.com/repos/xtdb/xtdb/pulls/611,374547433,"@@ -0,0 +1,36 @@+(ns crux.metrics.dropwizard.cloudwatch+  (:require crux.metrics.dropwizard)+  (:import [io.github.azagniotov.metrics.reporter.cloudwatch CloudWatchReporter]+           [java.io Closeable]+           [software.amazon.awssdk.services.cloudwatch CloudWatchAsyncClient]"
https://api.github.com/repos/xtdb/xtdb/pulls/633,375354311,"@@ -155,16 +156,16 @@   Returns a map with details about the submitted transaction,   including tx-time and tx-id."") -  (open-tx-log ^crux.api.ITxLog [this from-tx-id with-ops?]+  (open-tx-log ^java.io.Closeable [this from-tx-id with-ops?]     ""Reads the transaction log. Optionally includes   operations, which allow the contents under the :crux.api/tx-ops   key to be piped into (submit-tx tx-ops) of another   Crux instance. -  from-tx-id      optional transaction id to start from.-  with-ops?       should the operations with documents be included?+  from-tx-id  optional transaction id to start from.+  with-ops?   the operations with documents be included?"
https://api.github.com/repos/xtdb/xtdb/pulls/628,375401564,"@@ -0,0 +1,48 @@+(ns crux.metrics.dropwizard.prometheus+  (:require [crux.metrics.dropwizard :as dropwizard]+            [iapetos.core :as prometheus]+            [iapetos.collector.jvm :as jvm]+            [iapetos.standalone :as server])+  (:import [org.dhatim.dropwizard.prometheus PrometheusReporter]+           [io.prometheus.client.exporter PushGateway]+           [java.util.concurrent TimeUnit]+           [java.time Duration]+           [java.io Closeable]+           [com.codahale.metrics MetricRegistry]+           [io.prometheus.client.dropwizard DropwizardExports]))++(defn reporter ^PrometheusReporter++  [^MetricRegistry reg {::keys [prefix metric-filter pushgateway]}]+  (let [pushgateway (PushGateway. pushgateway)]+    {:pushgateway pushgateway+     :reporter (.build (cond-> (PrometheusReporter/forRegistry reg)+                         prefix (.prefixedWith prefix)+                         metric-filter (.filter metric-filter))+                       pushgateway)}))+(defn start-reporter++  [registry {::keys [duration] :as args}]+  (.start (reporter registry args) (.toMillis (Duration/parse duration)) (TimeUnit/MILLISECONDS))+  (reify Closeable+    (close [this]+      (.stop reporter))))++(defn prometheus-registry ^iapetos.registry.IapetosRegistry++  [^MetricRegistry registry {::keys [jvm-metrics?]}]+  (cond-> (-> (prometheus/collector-registry)+              (prometheus/register (DropwizardExports. registry)))+    jvm-metrics? (jvm/initialize)))"
https://api.github.com/repos/xtdb/xtdb/pulls/632,375448748,"@@ -3,11 +3,25 @@             [crux.bench.ts-weather :as weather]             [crux.bench.ts-devices :as devices]             [clj-http.client :as client]-            [clojure.tools.logging :as log]))+            [clojure.tools.cli :as cli]+            [crux.bench.watdiv :as watdiv])) -(defn -main []-  (bench/post-to-slack (format ""*Starting Benchmark*, Crux Version: %s, Commit Hash: %s\n""-                               bench/crux-version bench/commit-hash))-  (bench/with-node [node]-    (devices/run-devices-bench node)-    (weather/run-weather-bench node)))+(def cli-options+  [[""-nc"" ""--no-crux"" ""Don't run Crux benchmark""]"
